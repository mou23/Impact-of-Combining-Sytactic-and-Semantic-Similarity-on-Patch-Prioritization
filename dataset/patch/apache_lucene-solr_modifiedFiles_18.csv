new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,fp.parseValueSource(),METHOD_INVOCATION, line no: 93, 1.0, 0.75, 1.0
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("literal" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     return new LiteralValueSource(fp.getString());   } } ),METHOD_INVOCATION, line no: 104, 1.0, 1.0, 1.0
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     return new LiteralValueSource(fp.getString());   } } ,CLASS_INSTANCE_CREATION, line no: 104, 1.0, 1.0, 1.0
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,LiteralValueSource,SIMPLE_NAME, line no: 107, 1.0, 1.0, 1.0
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,fp.getString(),METHOD_INVOCATION, line no: 107, 1.0, 1.0, 1.0
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,fp.parseValueSourceList(),METHOD_INVOCATION, line no: 193, 1.0, 0.75, 1.0
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("vector" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     return new VectorValueSource(fp.parseValueSourceList());   } } ),METHOD_INVOCATION, line no: 226, 1.0, 1.0, 1.0
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     return new VectorValueSource(fp.parseValueSourceList());   } } ,CLASS_INSTANCE_CREATION, line no: 226, 1.0, 1.0, 1.0
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new VectorValueSource(fp.parseValueSourceList()),CLASS_INSTANCE_CREATION, line no: 229, 1.0, 1.0, 1.0
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,fp.parseArg(),METHOD_INVOCATION, line no: 256, 1.0, 0.75, 1.0
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("pi" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     return new DoubleConstValueSource(Math.PI);   } } ),METHOD_INVOCATION, line no: 530, 1.0, 1.0, 1.0
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     return new DoubleConstValueSource(Math.PI);   } } ,CLASS_INSTANCE_CREATION, line no: 530, 1.0, 1.0, 1.0
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("e" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     return new DoubleConstValueSource(Math.E);   } } ),METHOD_INVOCATION, line no: 536, 1.0, 1.0, 1.0
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     return new DoubleConstValueSource(Math.E);   } } ,CLASS_INSTANCE_CREATION, line no: 536, 1.0, 1.0, 1.0
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("maxdoc" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     return new MaxDocValueSource();   } } ),METHOD_INVOCATION, line no: 602, 1.0, 1.0, 1.0
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     return new MaxDocValueSource();   } } ,CLASS_INSTANCE_CREATION, line no: 602, 1.0, 1.0, 1.0
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("numdocs" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     return new NumDocsValueSource();   } } ),METHOD_INVOCATION, line no: 609, 1.0, 1.0, 1.0
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     return new NumDocsValueSource();   } } ,CLASS_INSTANCE_CREATION, line no: 609, 1.0, 1.0, 1.0
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("true" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     return new BoolConstValueSource(true);   } } ),METHOD_INVOCATION, line no: 616, 1.0, 1.0, 1.0
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     return new BoolConstValueSource(true);   } } ,CLASS_INSTANCE_CREATION, line no: 616, 1.0, 1.0, 1.0
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("false" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     return new BoolConstValueSource(false);   } } ),METHOD_INVOCATION, line no: 623, 1.0, 1.0, 1.0
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     return new BoolConstValueSource(false);   } } ,CLASS_INSTANCE_CREATION, line no: 623, 1.0, 1.0, 1.0
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("def" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     return new DefFunction(fp.parseValueSourceList());   } } ),METHOD_INVOCATION, line no: 736, 1.0, 1.0, 1.0
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     return new DefFunction(fp.parseValueSourceList());   } } ,CLASS_INSTANCE_CREATION, line no: 736, 1.0, 1.0, 1.0
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new DefFunction(fp.parseValueSourceList()),CLASS_INSTANCE_CREATION, line no: 739, 1.0, 1.0, 1.0
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new Function(fp.parseValueSource()),CLASS_INSTANCE_CREATION, line no: 1049, 1.0, 1.0, 1.0
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new Function(fp.parseValueSource() fp.parseValueSource()),CLASS_INSTANCE_CREATION, line no: 1089, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,String,SIMPLE_NAME, line no: 69, 1.0, 0.1111111111111111, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,name,SIMPLE_NAME, line no: 74, 1.0, 0.1111111111111111, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"testfunc",STRING_LITERAL, line no: 90, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,fp.parseValueSource(),METHOD_INVOCATION, line no: 93, 1.0, 0.7777777777777778, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"ord",STRING_LITERAL, line no: 97, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("literal" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     return new LiteralValueSource(fp.getString());   } } ),METHOD_INVOCATION, line no: 104, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"literal",STRING_LITERAL, line no: 104, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     return new LiteralValueSource(fp.getString());   } } ,CLASS_INSTANCE_CREATION, line no: 104, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,getString,SIMPLE_NAME, line no: 107, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"rord",STRING_LITERAL, line no: 110, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"top",STRING_LITERAL, line no: 117, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"linear",STRING_LITERAL, line no: 125, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"recip",STRING_LITERAL, line no: 134, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"scale",STRING_LITERAL, line no: 144, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"div",STRING_LITERAL, line no: 153, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"map",STRING_LITERAL, line no: 161, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"abs",STRING_LITERAL, line no: 173, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"sum",STRING_LITERAL, line no: 190, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,fp.parseValueSourceList(),METHOD_INVOCATION, line no: 193, 1.0, 0.7777777777777778, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"add",STRING_LITERAL, line no: 197, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"product",STRING_LITERAL, line no: 199, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"mul",STRING_LITERAL, line no: 206, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"sub",STRING_LITERAL, line no: 208, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("vector" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     return new VectorValueSource(fp.parseValueSourceList());   } } ),METHOD_INVOCATION, line no: 226, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"vector",STRING_LITERAL, line no: 226, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     return new VectorValueSource(fp.parseValueSourceList());   } } ,CLASS_INSTANCE_CREATION, line no: 226, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"query",STRING_LITERAL, line no: 232, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"boost",STRING_LITERAL, line no: 244, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"joindf",STRING_LITERAL, line no: 253, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,f0,SIMPLE_NAME, line no: 256, 1.0, 0.7777777777777778, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,fp.parseArg(),METHOD_INVOCATION, line no: 256, 1.0, 0.7777777777777778, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,parseArg,SIMPLE_NAME, line no: 256, 1.0, 0.7777777777777778, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,qf,SIMPLE_NAME, line no: 257, 1.0, 0.7777777777777778, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"geodist",STRING_LITERAL, line no: 262, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"hsin",STRING_LITERAL, line no: 264, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"ghhsin",STRING_LITERAL, line no: 305, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"geohash",STRING_LITERAL, line no: 317, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"strdist",STRING_LITERAL, line no: 327, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"field",STRING_LITERAL, line no: 352, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"rad",STRING_LITERAL, line no: 362, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"deg",STRING_LITERAL, line no: 368, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"sqrt",STRING_LITERAL, line no: 374, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"cbrt",STRING_LITERAL, line no: 380, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"log",STRING_LITERAL, line no: 386, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"ln",STRING_LITERAL, line no: 392, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"exp",STRING_LITERAL, line no: 398, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"sin",STRING_LITERAL, line no: 404, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"cos",STRING_LITERAL, line no: 410, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"tan",STRING_LITERAL, line no: 416, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"asin",STRING_LITERAL, line no: 422, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"acos",STRING_LITERAL, line no: 428, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"atan",STRING_LITERAL, line no: 434, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"sinh",STRING_LITERAL, line no: 440, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"cosh",STRING_LITERAL, line no: 446, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"tanh",STRING_LITERAL, line no: 452, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"ceil",STRING_LITERAL, line no: 458, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"floor",STRING_LITERAL, line no: 464, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"rint",STRING_LITERAL, line no: 470, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"pow",STRING_LITERAL, line no: 476, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"hypot",STRING_LITERAL, line no: 482, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"atan2",STRING_LITERAL, line no: 488, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"max",STRING_LITERAL, line no: 494, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"min",STRING_LITERAL, line no: 501, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"sqedist",STRING_LITERAL, line no: 508, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"dist",STRING_LITERAL, line no: 518, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"ms",STRING_LITERAL, line no: 527, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("pi" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     return new DoubleConstValueSource(Math.PI);   } } ),METHOD_INVOCATION, line no: 530, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"pi",STRING_LITERAL, line no: 530, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     return new DoubleConstValueSource(Math.PI);   } } ,CLASS_INSTANCE_CREATION, line no: 530, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("e" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     return new DoubleConstValueSource(Math.E);   } } ),METHOD_INVOCATION, line no: 536, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"e",STRING_LITERAL, line no: 536, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     return new DoubleConstValueSource(Math.E);   } } ,CLASS_INSTANCE_CREATION, line no: 536, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"docfreq",STRING_LITERAL, line no: 544, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"totaltermfreq",STRING_LITERAL, line no: 552, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"ttf",STRING_LITERAL, line no: 559, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"sumtotaltermfreq",STRING_LITERAL, line no: 561, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"sttf",STRING_LITERAL, line no: 568, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"idf",STRING_LITERAL, line no: 570, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"termfreq",STRING_LITERAL, line no: 578, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"tf",STRING_LITERAL, line no: 586, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"norm",STRING_LITERAL, line no: 594, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("maxdoc" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     return new MaxDocValueSource();   } } ),METHOD_INVOCATION, line no: 602, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"maxdoc",STRING_LITERAL, line no: 602, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     return new MaxDocValueSource();   } } ,CLASS_INSTANCE_CREATION, line no: 602, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("numdocs" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     return new NumDocsValueSource();   } } ),METHOD_INVOCATION, line no: 609, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"numdocs",STRING_LITERAL, line no: 609, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     return new NumDocsValueSource();   } } ,CLASS_INSTANCE_CREATION, line no: 609, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("true" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     return new BoolConstValueSource(true);   } } ),METHOD_INVOCATION, line no: 616, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"true",STRING_LITERAL, line no: 616, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     return new BoolConstValueSource(true);   } } ,CLASS_INSTANCE_CREATION, line no: 616, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("false" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     return new BoolConstValueSource(false);   } } ),METHOD_INVOCATION, line no: 623, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"false",STRING_LITERAL, line no: 623, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     return new BoolConstValueSource(false);   } } ,CLASS_INSTANCE_CREATION, line no: 623, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"exists",STRING_LITERAL, line no: 630, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"not",STRING_LITERAL, line no: 647, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"and",STRING_LITERAL, line no: 665, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"or",STRING_LITERAL, line no: 684, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"xor",STRING_LITERAL, line no: 703, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"if",STRING_LITERAL, line no: 725, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("def" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     return new DefFunction(fp.parseValueSourceList());   } } ),METHOD_INVOCATION, line no: 736, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"def",STRING_LITERAL, line no: 736, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     return new DefFunction(fp.parseValueSourceList());   } } ,CLASS_INSTANCE_CREATION, line no: 736, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"NOW",STRING_LITERAL, line no: 841, 1.0, 0.7777777777777778, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,first,SIMPLE_NAME, line no: 858, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,second,SIMPLE_NAME, line no: 859, 1.0, 1.0, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,new Function(fp.parseValueSource() fp.parseValueSource()),CLASS_INSTANCE_CREATION, line no: 1089, 1.0, 1.0, 1.0
fp,SIMPLE_NAME, line no: 107,FunctionQParser,SIMPLE_NAME, line no: 66, 1.0, 0.1, 1.0
getString,SIMPLE_NAME, line no: 107,String,SIMPLE_NAME, line no: 69, 1.0, 0.1, 1.0
getString,SIMPLE_NAME, line no: 107,name,SIMPLE_NAME, line no: 74, 1.0, 0.1, 1.0
getString,SIMPLE_NAME, line no: 107,"testfunc",STRING_LITERAL, line no: 90, 1.0, 1.0, 1.0
getString,SIMPLE_NAME, line no: 107,"ord",STRING_LITERAL, line no: 97, 1.0, 1.0, 1.0
getString,SIMPLE_NAME, line no: 107,"literal",STRING_LITERAL, line no: 104, 1.0, 1.0, 1.0
getString,SIMPLE_NAME, line no: 107,"rord",STRING_LITERAL, line no: 110, 1.0, 1.0, 1.0
getString,SIMPLE_NAME, line no: 107,"top",STRING_LITERAL, line no: 117, 1.0, 1.0, 1.0
getString,SIMPLE_NAME, line no: 107,"linear",STRING_LITERAL, line no: 125, 1.0, 1.0, 1.0
getString,SIMPLE_NAME, line no: 107,"recip",STRING_LITERAL, line no: 134, 1.0, 1.0, 1.0
getString,SIMPLE_NAME, line no: 107,"scale",STRING_LITERAL, line no: 144, 1.0, 1.0, 1.0
getString,SIMPLE_NAME, line no: 107,"div",STRING_LITERAL, line no: 153, 1.0, 1.0, 1.0
getString,SIMPLE_NAME, line no: 107,"map",STRING_LITERAL, line no: 161, 1.0, 1.0, 1.0
getString,SIMPLE_NAME, line no: 107,"abs",STRING_LITERAL, line no: 173, 1.0, 1.0, 1.0
getString,SIMPLE_NAME, line no: 107,"sum",STRING_LITERAL, line no: 190, 1.0, 1.0, 1.0
getString,SIMPLE_NAME, line no: 107,"add",STRING_LITERAL, line no: 197, 1.0, 1.0, 1.0
getString,SIMPLE_NAME, line no: 107,"product",STRING_LITERAL, line no: 199, 1.0, 1.0, 1.0
getString,SIMPLE_NAME, line no: 107,"mul",STRING_LITERAL, line no: 206, 1.0, 1.0, 1.0
getString,SIMPLE_NAME, line no: 107,"sub",STRING_LITERAL, line no: 208, 1.0, 1.0, 1.0
getString,SIMPLE_NAME, line no: 107,"vector",STRING_LITERAL, line no: 226, 1.0, 1.0, 1.0
getString,SIMPLE_NAME, line no: 107,"query",STRING_LITERAL, line no: 232, 1.0, 1.0, 1.0
getString,SIMPLE_NAME, line no: 107,"boost",STRING_LITERAL, line no: 244, 1.0, 1.0, 1.0
getString,SIMPLE_NAME, line no: 107,"joindf",STRING_LITERAL, line no: 253, 1.0, 1.0, 1.0
getString,SIMPLE_NAME, line no: 107,f0,SIMPLE_NAME, line no: 256, 1.0, 0.8, 1.0
getString,SIMPLE_NAME, line no: 107,fp.parseArg(),METHOD_INVOCATION, line no: 256, 1.0, 0.8, 1.0
getString,SIMPLE_NAME, line no: 107,parseArg,SIMPLE_NAME, line no: 256, 1.0, 0.8, 1.0
getString,SIMPLE_NAME, line no: 107,qf,SIMPLE_NAME, line no: 257, 1.0, 0.8, 1.0
getString,SIMPLE_NAME, line no: 107,"geodist",STRING_LITERAL, line no: 262, 1.0, 1.0, 1.0
getString,SIMPLE_NAME, line no: 107,"hsin",STRING_LITERAL, line no: 264, 1.0, 1.0, 1.0
getString,SIMPLE_NAME, line no: 107,"ghhsin",STRING_LITERAL, line no: 305, 1.0, 1.0, 1.0
getString,SIMPLE_NAME, line no: 107,"geohash",STRING_LITERAL, line no: 317, 1.0, 1.0, 1.0
getString,SIMPLE_NAME, line no: 107,"strdist",STRING_LITERAL, line no: 327, 1.0, 1.0, 1.0
getString,SIMPLE_NAME, line no: 107,"field",STRING_LITERAL, line no: 352, 1.0, 1.0, 1.0
getString,SIMPLE_NAME, line no: 107,"rad",STRING_LITERAL, line no: 362, 1.0, 1.0, 1.0
getString,SIMPLE_NAME, line no: 107,"deg",STRING_LITERAL, line no: 368, 1.0, 1.0, 1.0
getString,SIMPLE_NAME, line no: 107,"sqrt",STRING_LITERAL, line no: 374, 1.0, 1.0, 1.0
getString,SIMPLE_NAME, line no: 107,"cbrt",STRING_LITERAL, line no: 380, 1.0, 1.0, 1.0
getString,SIMPLE_NAME, line no: 107,"log",STRING_LITERAL, line no: 386, 1.0, 1.0, 1.0
getString,SIMPLE_NAME, line no: 107,"ln",STRING_LITERAL, line no: 392, 1.0, 1.0, 1.0
getString,SIMPLE_NAME, line no: 107,"exp",STRING_LITERAL, line no: 398, 1.0, 1.0, 1.0
getString,SIMPLE_NAME, line no: 107,"sin",STRING_LITERAL, line no: 404, 1.0, 1.0, 1.0
getString,SIMPLE_NAME, line no: 107,"cos",STRING_LITERAL, line no: 410, 1.0, 1.0, 1.0
getString,SIMPLE_NAME, line no: 107,"tan",STRING_LITERAL, line no: 416, 1.0, 1.0, 1.0
getString,SIMPLE_NAME, line no: 107,"asin",STRING_LITERAL, line no: 422, 1.0, 1.0, 1.0
getString,SIMPLE_NAME, line no: 107,"acos",STRING_LITERAL, line no: 428, 1.0, 1.0, 1.0
getString,SIMPLE_NAME, line no: 107,"atan",STRING_LITERAL, line no: 434, 1.0, 1.0, 1.0
getString,SIMPLE_NAME, line no: 107,"sinh",STRING_LITERAL, line no: 440, 1.0, 1.0, 1.0
getString,SIMPLE_NAME, line no: 107,"cosh",STRING_LITERAL, line no: 446, 1.0, 1.0, 1.0
getString,SIMPLE_NAME, line no: 107,"tanh",STRING_LITERAL, line no: 452, 1.0, 1.0, 1.0
getString,SIMPLE_NAME, line no: 107,"ceil",STRING_LITERAL, line no: 458, 1.0, 1.0, 1.0
getString,SIMPLE_NAME, line no: 107,"floor",STRING_LITERAL, line no: 464, 1.0, 1.0, 1.0
getString,SIMPLE_NAME, line no: 107,"rint",STRING_LITERAL, line no: 470, 1.0, 1.0, 1.0
getString,SIMPLE_NAME, line no: 107,"pow",STRING_LITERAL, line no: 476, 1.0, 1.0, 1.0
getString,SIMPLE_NAME, line no: 107,"hypot",STRING_LITERAL, line no: 482, 1.0, 1.0, 1.0
getString,SIMPLE_NAME, line no: 107,"atan2",STRING_LITERAL, line no: 488, 1.0, 1.0, 1.0
getString,SIMPLE_NAME, line no: 107,"max",STRING_LITERAL, line no: 494, 1.0, 1.0, 1.0
getString,SIMPLE_NAME, line no: 107,"min",STRING_LITERAL, line no: 501, 1.0, 1.0, 1.0
getString,SIMPLE_NAME, line no: 107,"sqedist",STRING_LITERAL, line no: 508, 1.0, 1.0, 1.0
getString,SIMPLE_NAME, line no: 107,"dist",STRING_LITERAL, line no: 518, 1.0, 1.0, 1.0
getString,SIMPLE_NAME, line no: 107,"ms",STRING_LITERAL, line no: 527, 1.0, 1.0, 1.0
getString,SIMPLE_NAME, line no: 107,"pi",STRING_LITERAL, line no: 530, 1.0, 1.0, 1.0
getString,SIMPLE_NAME, line no: 107,"e",STRING_LITERAL, line no: 536, 1.0, 1.0, 1.0
getString,SIMPLE_NAME, line no: 107,"docfreq",STRING_LITERAL, line no: 544, 1.0, 1.0, 1.0
getString,SIMPLE_NAME, line no: 107,"totaltermfreq",STRING_LITERAL, line no: 552, 1.0, 1.0, 1.0
getString,SIMPLE_NAME, line no: 107,"ttf",STRING_LITERAL, line no: 559, 1.0, 1.0, 1.0
getString,SIMPLE_NAME, line no: 107,"sumtotaltermfreq",STRING_LITERAL, line no: 561, 1.0, 1.0, 1.0
getString,SIMPLE_NAME, line no: 107,"sttf",STRING_LITERAL, line no: 568, 1.0, 1.0, 1.0
getString,SIMPLE_NAME, line no: 107,"idf",STRING_LITERAL, line no: 570, 1.0, 1.0, 1.0
getString,SIMPLE_NAME, line no: 107,"termfreq",STRING_LITERAL, line no: 578, 1.0, 1.0, 1.0
getString,SIMPLE_NAME, line no: 107,"tf",STRING_LITERAL, line no: 586, 1.0, 1.0, 1.0
getString,SIMPLE_NAME, line no: 107,"norm",STRING_LITERAL, line no: 594, 1.0, 1.0, 1.0
getString,SIMPLE_NAME, line no: 107,"maxdoc",STRING_LITERAL, line no: 602, 1.0, 1.0, 1.0
getString,SIMPLE_NAME, line no: 107,"numdocs",STRING_LITERAL, line no: 609, 1.0, 1.0, 1.0
getString,SIMPLE_NAME, line no: 107,"true",STRING_LITERAL, line no: 616, 1.0, 1.0, 1.0
getString,SIMPLE_NAME, line no: 107,"false",STRING_LITERAL, line no: 623, 1.0, 1.0, 1.0
getString,SIMPLE_NAME, line no: 107,"exists",STRING_LITERAL, line no: 630, 1.0, 1.0, 1.0
getString,SIMPLE_NAME, line no: 107,"not",STRING_LITERAL, line no: 647, 1.0, 1.0, 1.0
getString,SIMPLE_NAME, line no: 107,"and",STRING_LITERAL, line no: 665, 1.0, 1.0, 1.0
getString,SIMPLE_NAME, line no: 107,"or",STRING_LITERAL, line no: 684, 1.0, 1.0, 1.0
getString,SIMPLE_NAME, line no: 107,"xor",STRING_LITERAL, line no: 703, 1.0, 1.0, 1.0
getString,SIMPLE_NAME, line no: 107,"if",STRING_LITERAL, line no: 725, 1.0, 1.0, 1.0
getString,SIMPLE_NAME, line no: 107,"def",STRING_LITERAL, line no: 736, 1.0, 1.0, 1.0
getString,SIMPLE_NAME, line no: 107,"NOW",STRING_LITERAL, line no: 841, 1.0, 0.8, 1.0
getString,SIMPLE_NAME, line no: 107,first,SIMPLE_NAME, line no: 858, 1.0, 1.0, 1.0
getString,SIMPLE_NAME, line no: 107,second,SIMPLE_NAME, line no: 859, 1.0, 1.0, 1.0
getString,SIMPLE_NAME, line no: 107,first="NOW",ASSIGNMENT, line no: 860, 1.0, 1.0, 1.0
getString,SIMPLE_NAME, line no: 107,field,SIMPLE_NAME, line no: 100, 0.9, 0.7, 1.0
getString,SIMPLE_NAME, line no: 107,fp.getString(),METHOD_INVOCATION, line no: 107, 0.9, 0.9, 1.0
getString,SIMPLE_NAME, line no: 107,distClass,SIMPLE_NAME, line no: 333, 0.9, 0.9, 1.0
getString,SIMPLE_NAME, line no: 107,"jw",STRING_LITERAL, line no: 336, 0.9, 0.9, 1.0
getString,SIMPLE_NAME, line no: 107,"edit",STRING_LITERAL, line no: 338, 0.9, 0.9, 1.0
getString,SIMPLE_NAME, line no: 107,"ngram",STRING_LITERAL, line no: 340, 0.9, 0.9, 1.0
getString,SIMPLE_NAME, line no: 107,tinfo.field,QUALIFIED_NAME, line no: 548, 0.9, 0.9, 1.0
getString,SIMPLE_NAME, line no: 107,tinfo.val,QUALIFIED_NAME, line no: 548, 0.9, 0.9, 1.0
getString,SIMPLE_NAME, line no: 107,val,SIMPLE_NAME, line no: 548, 0.9, 0.9, 1.0
getString,SIMPLE_NAME, line no: 107,tinfo.indexedField,QUALIFIED_NAME, line no: 548, 0.9, 0.9, 1.0
getString,SIMPLE_NAME, line no: 107,indexedField,SIMPLE_NAME, line no: 548, 0.9, 0.9, 1.0
getString,SIMPLE_NAME, line no: 107,tinfo.indexedField=tinfo.field=fp.parseArg(),ASSIGNMENT, line no: 748, 0.9, 0.9, 1.0
getString,SIMPLE_NAME, line no: 107,tinfo.field=fp.parseArg(),ASSIGNMENT, line no: 748, 0.9, 0.9, 1.0
getString,SIMPLE_NAME, line no: 107,tinfo.val=fp.parseArg(),ASSIGNMENT, line no: 749, 0.9, 0.9, 1.0
getString,SIMPLE_NAME, line no: 107,arg,SIMPLE_NAME, line no: 839, 0.9, 0.1, 1.0
getString,SIMPLE_NAME, line no: 107,toString,SIMPLE_NAME, line no: 979, 0.9, 0.8, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,field,SIMPLE_NAME, line no: 100, 0.8888888888888888, 0.6666666666666666, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107, 0.8888888888888888, 0.8888888888888888, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,fp.hasMoreArguments(),METHOD_INVOCATION, line no: 168, 0.8888888888888888, 0.7777777777777778, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,new VectorValueSource(fp.parseValueSourceList()),CLASS_INSTANCE_CREATION, line no: 229, 0.8888888888888888, 0.8888888888888888, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,fp.parseNestedQuery(),METHOD_INVOCATION, line no: 236, 0.8888888888888888, 0.7777777777777778, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,fp.parseDouble(),METHOD_INVOCATION, line no: 268, 0.8888888888888888, 0.8888888888888888, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,Boolean.parseBoolean(fp.parseArg()),METHOD_INVOCATION, line no: 270, 0.8888888888888888, 0.8888888888888888, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,distClass,SIMPLE_NAME, line no: 333, 0.8888888888888888, 0.8888888888888888, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"jw",STRING_LITERAL, line no: 336, 0.8888888888888888, 0.8888888888888888, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"edit",STRING_LITERAL, line no: 338, 0.8888888888888888, 0.8888888888888888, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"ngram",STRING_LITERAL, line no: 340, 0.8888888888888888, 0.8888888888888888, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,fp.req,QUALIFIED_NAME, line no: 347, 0.8888888888888888, 0.5555555555555556, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,fp.getReq().getSchema(),METHOD_INVOCATION, line no: 357, 0.8888888888888888, 0.6666666666666666, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,fp.getReq(),METHOD_INVOCATION, line no: 357, 0.8888888888888888, 0.6666666666666666, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,val,SIMPLE_NAME, line no: 548, 0.8888888888888888, 0.8888888888888888, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,indexedField,SIMPLE_NAME, line no: 548, 0.8888888888888888, 0.8888888888888888, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,new DefFunction(fp.parseValueSourceList()),CLASS_INSTANCE_CREATION, line no: 739, 0.8888888888888888, 0.8888888888888888, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,arg,SIMPLE_NAME, line no: 839, 0.8888888888888888, 0.1111111111111111, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,fp.req.getSchema(),METHOD_INVOCATION, line no: 849, 0.8888888888888888, 0.8888888888888888, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,toString,SIMPLE_NAME, line no: 979, 0.8888888888888888, 0.7777777777777778, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,new Function(fp.parseValueSource()),CLASS_INSTANCE_CREATION, line no: 1049, 0.8888888888888888, 0.8888888888888888, 1.0
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,fp.hasMoreArguments(),METHOD_INVOCATION, line no: 168, 0.875, 0.75, 1.0
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,fp.parseNestedQuery(),METHOD_INVOCATION, line no: 236, 0.875, 0.75, 1.0
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,fp.parseDouble(),METHOD_INVOCATION, line no: 268, 0.875, 0.875, 1.0
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,Boolean.parseBoolean(fp.parseArg()),METHOD_INVOCATION, line no: 270, 0.875, 0.875, 1.0
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,fp.req,QUALIFIED_NAME, line no: 347, 0.875, 0.5, 1.0
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,fp.getReq().getSchema(),METHOD_INVOCATION, line no: 357, 0.875, 0.625, 1.0
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,fp.getReq(),METHOD_INVOCATION, line no: 357, 0.875, 0.625, 1.0
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,fp.req.getSchema(),METHOD_INVOCATION, line no: 849, 0.875, 0.875, 1.0
LiteralValueSource,SIMPLE_NAME, line no: 107,new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107, 0.8, 0.8, 1.0
getString,SIMPLE_NAME, line no: 107,p.name(),METHOD_INVOCATION, line no: 82, 0.8, 0.8, 1.0
getString,SIMPLE_NAME, line no: 107,fp.parseId(),METHOD_INVOCATION, line no: 100, 0.8, 0.8, 1.0
getString,SIMPLE_NAME, line no: 107,parseId,SIMPLE_NAME, line no: 100, 0.8, 0.8, 1.0
getString,SIMPLE_NAME, line no: 107,description,SIMPLE_NAME, line no: 951, 0.8, 0.1, 1.0
getString,SIMPLE_NAME, line no: 107,")",STRING_LITERAL, line no: 952, 0.8, 0.3, 1.0
getString,SIMPLE_NAME, line no: 107,name() + '(' + vals.toString(doc)+ ')',INFIX_EXPRESSION, line no: 1072, 0.8, 0.8, 1.0
getString,SIMPLE_NAME, line no: 107,name(),METHOD_INVOCATION, line no: 1072, 0.8, 0.8, 1.0
getString,SIMPLE_NAME, line no: 107,vals.toString(doc),METHOD_INVOCATION, line no: 1072, 0.8, 0.8, 1.0
getString,SIMPLE_NAME, line no: 107,name() + "(" + a.description()+ " "+ b.description()+ ")",INFIX_EXPRESSION, line no: 1107, 0.8, 0.8, 1.0
getString,SIMPLE_NAME, line no: 107,"(",STRING_LITERAL, line no: 1107, 0.8, 0.8, 1.0
getString,SIMPLE_NAME, line no: 107,a.description(),METHOD_INVOCATION, line no: 1107, 0.8, 0.8, 1.0
getString,SIMPLE_NAME, line no: 107," ",STRING_LITERAL, line no: 1107, 0.8, 0.8, 1.0
getString,SIMPLE_NAME, line no: 107,b.description(),METHOD_INVOCATION, line no: 1107, 0.8, 0.8, 1.0
getString,SIMPLE_NAME, line no: 107,name() + '(' + aVals.toString(doc)+ ' '+ bVals.toString(doc)+ ')',INFIX_EXPRESSION, line no: 1121, 0.8, 0.8, 1.0
getString,SIMPLE_NAME, line no: 107,aVals.toString(doc),METHOD_INVOCATION, line no: 1121, 0.8, 0.8, 1.0
getString,SIMPLE_NAME, line no: 107,bVals.toString(doc),METHOD_INVOCATION, line no: 1121, 0.8, 0.8, 1.0
getString,SIMPLE_NAME, line no: 107,"testfunc: unweighted value source detected.  delegate=" + source + " request="+ (requestInfo == null ? "null" : requestInfo.getReq()),INFIX_EXPRESSION, line no: 1229, 0.8, 0.8, 1.0
getString,SIMPLE_NAME, line no: 107,"testfunc: unweighted value source detected.  delegate=",STRING_LITERAL, line no: 1229, 0.8, 0.8, 1.0
getString,SIMPLE_NAME, line no: 107," request=",STRING_LITERAL, line no: 1229, 0.8, 0.8, 1.0
getString,SIMPLE_NAME, line no: 107,"null",STRING_LITERAL, line no: 1229, 0.8, 0.8, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,fp.parseId(),METHOD_INVOCATION, line no: 100, 0.7777777777777778, 0.7777777777777778, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,parseId,SIMPLE_NAME, line no: 100, 0.7777777777777778, 0.7777777777777778, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,fp.parseFloat(),METHOD_INVOCATION, line no: 129, 0.7777777777777778, 0.7777777777777778, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,fp.hasMoreArguments() ? fp.parseFloat() : null,CONDITIONAL_EXPRESSION, line no: 168, 0.7777777777777778, 0.7777777777777778, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,parseTerm(fp),METHOD_INVOCATION, line no: 547, 0.7777777777777778, 0.7777777777777778, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,description,SIMPLE_NAME, line no: 951, 0.7777777777777778, 0.1111111111111111, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,")",STRING_LITERAL, line no: 952, 0.7777777777777778, 0.3333333333333333, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"(",STRING_LITERAL, line no: 1107, 0.7777777777777778, 0.7777777777777778, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107," ",STRING_LITERAL, line no: 1107, 0.7777777777777778, 0.7777777777777778, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"testfunc: unweighted value source detected.  delegate=",STRING_LITERAL, line no: 1229, 0.7777777777777778, 0.7777777777777778, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107," request=",STRING_LITERAL, line no: 1229, 0.7777777777777778, 0.7777777777777778, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"null",STRING_LITERAL, line no: 1229, 0.7777777777777778, 0.7777777777777778, 1.0
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,fp.parseId(),METHOD_INVOCATION, line no: 100, 0.75, 0.75, 1.0
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,fp.parseFloat(),METHOD_INVOCATION, line no: 129, 0.75, 0.75, 1.0
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,fp.hasMoreArguments() ? fp.parseFloat() : null,CONDITIONAL_EXPRESSION, line no: 168, 0.75, 0.75, 1.0
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,parseTerm(fp),METHOD_INVOCATION, line no: 547, 0.75, 0.75, 1.0
getString,SIMPLE_NAME, line no: 107,fieldName,SIMPLE_NAME, line no: 356, 0.7, 0.7, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,fieldName,SIMPLE_NAME, line no: 356, 0.6666666666666666, 0.6666666666666666, 1.0
getString,SIMPLE_NAME, line no: 107,source,SIMPLE_NAME, line no: 85, 0.6, 0.1, 1.0
getString,SIMPLE_NAME, line no: 107,dest,SIMPLE_NAME, line no: 85, 0.6, 0.1, 1.0
getString,SIMPLE_NAME, line no: 107,"Input must either be 2 MultiValueSources  or there must be 4 ValueSources",STRING_LITERAL, line no: 297, 0.6, 0.6, 1.0
getString,SIMPLE_NAME, line no: 107,indexedVal,SIMPLE_NAME, line no: 757, 0.6, 0.6, 1.0
getString,SIMPLE_NAME, line no: 107,tinfo.indexedField=term.field(),ASSIGNMENT, line no: 761, 0.6, 0.6, 1.0
getString,SIMPLE_NAME, line no: 107,term.field(),METHOD_INVOCATION, line no: 761, 0.6, 0.6, 1.0
getString,SIMPLE_NAME, line no: 107,indexedVal=term.text(),ASSIGNMENT, line no: 762, 0.6, 0.6, 1.0
getString,SIMPLE_NAME, line no: 107,term.text(),METHOD_INVOCATION, line no: 762, 0.6, 0.6, 1.0
getString,SIMPLE_NAME, line no: 107,text,SIMPLE_NAME, line no: 762, 0.6, 0.6, 1.0
getString,SIMPLE_NAME, line no: 107,"Illegal number of sources.  There must be an even number of sources",STRING_LITERAL, line no: 786, 0.6, 0.6, 1.0
getString,SIMPLE_NAME, line no: 107,"Can't use ms() function on non-numeric legacy date field " + arg,INFIX_EXPRESSION, line no: 851, 0.6, 0.6, 1.0
getString,SIMPLE_NAME, line no: 107,"Can't use ms() function on non-numeric legacy date field ",STRING_LITERAL, line no: 851, 0.6, 0.6, 1.0
getString,SIMPLE_NAME, line no: 107,DoubleParser.this.name(),METHOD_INVOCATION, line no: 1059, 0.6, 0.6, 1.0
getString,SIMPLE_NAME, line no: 107,source.description(),METHOD_INVOCATION, line no: 1246, 0.6, 0.6, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,source,SIMPLE_NAME, line no: 85, 0.5555555555555556, 0.1111111111111111, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,dest,SIMPLE_NAME, line no: 85, 0.5555555555555556, 0.1111111111111111, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"Input must either be 2 MultiValueSources  or there must be 4 ValueSources",STRING_LITERAL, line no: 297, 0.5555555555555556, 0.5555555555555556, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,fp.parseInt(),METHOD_INVOCATION, line no: 343, 0.5555555555555556, 0.5555555555555556, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,fp.req.getCore().getResourceLoader(),METHOD_INVOCATION, line no: 347, 0.5555555555555556, 0.5555555555555556, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,fp.req.getCore(),METHOD_INVOCATION, line no: 347, 0.5555555555555556, 0.5555555555555556, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,indexedVal,SIMPLE_NAME, line no: 757, 0.5555555555555556, 0.5555555555555556, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,text,SIMPLE_NAME, line no: 762, 0.5555555555555556, 0.5555555555555556, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"Illegal number of sources.  There must be an even number of sources",STRING_LITERAL, line no: 786, 0.5555555555555556, 0.5555555555555556, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"Can't use ms() function on non-numeric legacy date field ",STRING_LITERAL, line no: 851, 0.5555555555555556, 0.5555555555555556, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,"testfunc(",STRING_LITERAL, line no: 1246, 0.5555555555555556, 0.5555555555555556, 1.0
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("testfunc" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     final ValueSource source=fp.parseValueSource();     return new TestValueSource(source);   } } ),METHOD_INVOCATION, line no: 90, 0.5, 1.0, 0.5
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     final ValueSource source=fp.parseValueSource();     return new TestValueSource(source);   } } ,CLASS_INSTANCE_CREATION, line no: 90, 0.5, 1.0, 0.5
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("ord" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     String field=fp.parseId();     return new OrdFieldSource(field);   } } ),METHOD_INVOCATION, line no: 97, 0.5, 1.0, 0.5
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     String field=fp.parseId();     return new OrdFieldSource(field);   } } ,CLASS_INSTANCE_CREATION, line no: 97, 0.5, 1.0, 0.5
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("rord" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     String field=fp.parseId();     return new ReverseOrdFieldSource(field);   } } ),METHOD_INVOCATION, line no: 110, 0.5, 1.0, 0.5
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     String field=fp.parseId();     return new ReverseOrdFieldSource(field);   } } ,CLASS_INSTANCE_CREATION, line no: 110, 0.5, 1.0, 0.5
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("top" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource source=fp.parseValueSource();     return source;   } } ),METHOD_INVOCATION, line no: 117, 0.5, 1.0, 0.5
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource source=fp.parseValueSource();     return source;   } } ,CLASS_INSTANCE_CREATION, line no: 117, 0.5, 1.0, 0.5
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("abs" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource source=fp.parseValueSource();     return new SimpleFloatFunction(source){       @Override protected String name(){         return "abs";       }       @Override protected float func(      int doc       FunctionValues vals){         return Math.abs(vals.floatVal(doc));       }     } ;   } } ),METHOD_INVOCATION, line no: 173, 0.5, 1.0, 0.5
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource source=fp.parseValueSource();     return new SimpleFloatFunction(source){       @Override protected String name(){         return "abs";       }       @Override protected float func(      int doc       FunctionValues vals){         return Math.abs(vals.floatVal(doc));       }     } ;   } } ,CLASS_INSTANCE_CREATION, line no: 173, 0.5, 1.0, 0.5
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("sum" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     List<ValueSource> sources=fp.parseValueSourceList();     return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));   } } ),METHOD_INVOCATION, line no: 190, 0.5, 1.0, 0.5
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     List<ValueSource> sources=fp.parseValueSourceList();     return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));   } } ,CLASS_INSTANCE_CREATION, line no: 190, 0.5, 1.0, 0.5
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("product" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     List<ValueSource> sources=fp.parseValueSourceList();     return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));   } } ),METHOD_INVOCATION, line no: 199, 0.5, 1.0, 0.5
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     List<ValueSource> sources=fp.parseValueSourceList();     return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));   } } ,CLASS_INSTANCE_CREATION, line no: 199, 0.5, 1.0, 0.5
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,fp.parseInt(),METHOD_INVOCATION, line no: 343, 0.5, 0.5, 1.0
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,fp.req.getCore().getResourceLoader(),METHOD_INVOCATION, line no: 347, 0.5, 0.5, 1.0
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,fp.req.getCore(),METHOD_INVOCATION, line no: 347, 0.5, 0.5, 1.0
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("max" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     List<ValueSource> sources=fp.parseValueSourceList();     return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));   } } ),METHOD_INVOCATION, line no: 494, 0.5, 1.0, 0.5
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     List<ValueSource> sources=fp.parseValueSourceList();     return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));   } } ,CLASS_INSTANCE_CREATION, line no: 494, 0.5, 1.0, 0.5
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("min" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     List<ValueSource> sources=fp.parseValueSourceList();     return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));   } } ),METHOD_INVOCATION, line no: 501, 0.5, 1.0, 0.5
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     List<ValueSource> sources=fp.parseValueSourceList();     return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));   } } ,CLASS_INSTANCE_CREATION, line no: 501, 0.5, 1.0, 0.5
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("sumtotaltermfreq" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     String field=fp.parseArg();     return new SumTotalTermFreqValueSource(field);   } } ),METHOD_INVOCATION, line no: 561, 0.5, 1.0, 0.5
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     String field=fp.parseArg();     return new SumTotalTermFreqValueSource(field);   } } ,CLASS_INSTANCE_CREATION, line no: 561, 0.5, 1.0, 0.5
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("norm" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     String field=fp.parseArg();     return new NormValueSource(field);   } } ),METHOD_INVOCATION, line no: 594, 0.5, 1.0, 0.5
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     String field=fp.parseArg();     return new NormValueSource(field);   } } ,CLASS_INSTANCE_CREATION, line no: 594, 0.5, 1.0, 0.5
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("exists" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource vs=fp.parseValueSource();     return new SimpleBoolFunction(vs){       @Override protected String name(){         return "exists";       }       @Override protected boolean func(      int doc       FunctionValues vals){         return vals.exists(doc);       }     } ;   } } ),METHOD_INVOCATION, line no: 630, 0.5, 1.0, 0.5
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource vs=fp.parseValueSource();     return new SimpleBoolFunction(vs){       @Override protected String name(){         return "exists";       }       @Override protected boolean func(      int doc       FunctionValues vals){         return vals.exists(doc);       }     } ;   } } ,CLASS_INSTANCE_CREATION, line no: 630, 0.5, 1.0, 0.5
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("not" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource vs=fp.parseValueSource();     return new SimpleBoolFunction(vs){       @Override protected boolean func(      int doc       FunctionValues vals){         return !vals.boolVal(doc);       }       @Override protected String name(){         return "not";       }     } ;   } } ),METHOD_INVOCATION, line no: 647, 0.5, 1.0, 0.5
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource vs=fp.parseValueSource();     return new SimpleBoolFunction(vs){       @Override protected boolean func(      int doc       FunctionValues vals){         return !vals.boolVal(doc);       }       @Override protected String name(){         return "not";       }     } ;   } } ,CLASS_INSTANCE_CREATION, line no: 647, 0.5, 1.0, 0.5
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("and" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     List<ValueSource> sources=fp.parseValueSourceList();     return new MultiBoolFunction(sources){       @Override protected String name(){         return "and";       }       @Override protected boolean func(      int doc       FunctionValues[] vals){         for (        FunctionValues dv : vals)         if (!dv.boolVal(doc))         return false;         return true;       }     } ;   } } ),METHOD_INVOCATION, line no: 665, 0.5, 1.0, 0.5
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     List<ValueSource> sources=fp.parseValueSourceList();     return new MultiBoolFunction(sources){       @Override protected String name(){         return "and";       }       @Override protected boolean func(      int doc       FunctionValues[] vals){         for (        FunctionValues dv : vals)         if (!dv.boolVal(doc))         return false;         return true;       }     } ;   } } ,CLASS_INSTANCE_CREATION, line no: 665, 0.5, 1.0, 0.5
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("or" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     List<ValueSource> sources=fp.parseValueSourceList();     return new MultiBoolFunction(sources){       @Override protected String name(){         return "or";       }       @Override protected boolean func(      int doc       FunctionValues[] vals){         for (        FunctionValues dv : vals)         if (dv.boolVal(doc))         return true;         return false;       }     } ;   } } ),METHOD_INVOCATION, line no: 684, 0.5, 1.0, 0.5
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     List<ValueSource> sources=fp.parseValueSourceList();     return new MultiBoolFunction(sources){       @Override protected String name(){         return "or";       }       @Override protected boolean func(      int doc       FunctionValues[] vals){         for (        FunctionValues dv : vals)         if (dv.boolVal(doc))         return true;         return false;       }     } ;   } } ,CLASS_INSTANCE_CREATION, line no: 684, 0.5, 1.0, 0.5
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,getDate(fp first),METHOD_INVOCATION, line no: 862, 0.5, 1.0, 0.5
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,getValueSource(fp first),METHOD_INVOCATION, line no: 863, 0.5, 1.0, 0.5
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,getDate(fp second),METHOD_INVOCATION, line no: 865, 0.5, 1.0, 0.5
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,getValueSource(fp second),METHOD_INVOCATION, line no: 866, 0.5, 1.0, 0.5
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("testfunc" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     final ValueSource source=fp.parseValueSource();     return new TestValueSource(source);   } } ),METHOD_INVOCATION, line no: 90, 0.5, 1.0, 0.5
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     final ValueSource source=fp.parseValueSource();     return new TestValueSource(source);   } } ,CLASS_INSTANCE_CREATION, line no: 90, 0.5, 1.0, 0.5
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("ord" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     String field=fp.parseId();     return new OrdFieldSource(field);   } } ),METHOD_INVOCATION, line no: 97, 0.5, 1.0, 0.5
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     String field=fp.parseId();     return new OrdFieldSource(field);   } } ,CLASS_INSTANCE_CREATION, line no: 97, 0.5, 1.0, 0.5
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("rord" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     String field=fp.parseId();     return new ReverseOrdFieldSource(field);   } } ),METHOD_INVOCATION, line no: 110, 0.5, 1.0, 0.5
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     String field=fp.parseId();     return new ReverseOrdFieldSource(field);   } } ,CLASS_INSTANCE_CREATION, line no: 110, 0.5, 1.0, 0.5
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("top" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource source=fp.parseValueSource();     return source;   } } ),METHOD_INVOCATION, line no: 117, 0.5, 1.0, 0.5
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource source=fp.parseValueSource();     return source;   } } ,CLASS_INSTANCE_CREATION, line no: 117, 0.5, 1.0, 0.5
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("abs" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource source=fp.parseValueSource();     return new SimpleFloatFunction(source){       @Override protected String name(){         return "abs";       }       @Override protected float func(      int doc       FunctionValues vals){         return Math.abs(vals.floatVal(doc));       }     } ;   } } ),METHOD_INVOCATION, line no: 173, 0.5, 1.0, 0.5
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource source=fp.parseValueSource();     return new SimpleFloatFunction(source){       @Override protected String name(){         return "abs";       }       @Override protected float func(      int doc       FunctionValues vals){         return Math.abs(vals.floatVal(doc));       }     } ;   } } ,CLASS_INSTANCE_CREATION, line no: 173, 0.5, 1.0, 0.5
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("sum" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     List<ValueSource> sources=fp.parseValueSourceList();     return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));   } } ),METHOD_INVOCATION, line no: 190, 0.5, 1.0, 0.5
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     List<ValueSource> sources=fp.parseValueSourceList();     return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));   } } ,CLASS_INSTANCE_CREATION, line no: 190, 0.5, 1.0, 0.5
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("product" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     List<ValueSource> sources=fp.parseValueSourceList();     return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));   } } ),METHOD_INVOCATION, line no: 199, 0.5, 1.0, 0.5
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     List<ValueSource> sources=fp.parseValueSourceList();     return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));   } } ,CLASS_INSTANCE_CREATION, line no: 199, 0.5, 1.0, 0.5
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("max" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     List<ValueSource> sources=fp.parseValueSourceList();     return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));   } } ),METHOD_INVOCATION, line no: 494, 0.5, 1.0, 0.5
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     List<ValueSource> sources=fp.parseValueSourceList();     return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));   } } ,CLASS_INSTANCE_CREATION, line no: 494, 0.5, 1.0, 0.5
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("min" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     List<ValueSource> sources=fp.parseValueSourceList();     return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));   } } ),METHOD_INVOCATION, line no: 501, 0.5, 1.0, 0.5
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     List<ValueSource> sources=fp.parseValueSourceList();     return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));   } } ,CLASS_INSTANCE_CREATION, line no: 501, 0.5, 1.0, 0.5
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("sumtotaltermfreq" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     String field=fp.parseArg();     return new SumTotalTermFreqValueSource(field);   } } ),METHOD_INVOCATION, line no: 561, 0.5, 1.0, 0.5
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     String field=fp.parseArg();     return new SumTotalTermFreqValueSource(field);   } } ,CLASS_INSTANCE_CREATION, line no: 561, 0.5, 1.0, 0.5
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("norm" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     String field=fp.parseArg();     return new NormValueSource(field);   } } ),METHOD_INVOCATION, line no: 594, 0.5, 1.0, 0.5
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     String field=fp.parseArg();     return new NormValueSource(field);   } } ,CLASS_INSTANCE_CREATION, line no: 594, 0.5, 1.0, 0.5
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("exists" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource vs=fp.parseValueSource();     return new SimpleBoolFunction(vs){       @Override protected String name(){         return "exists";       }       @Override protected boolean func(      int doc       FunctionValues vals){         return vals.exists(doc);       }     } ;   } } ),METHOD_INVOCATION, line no: 630, 0.5, 1.0, 0.5
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource vs=fp.parseValueSource();     return new SimpleBoolFunction(vs){       @Override protected String name(){         return "exists";       }       @Override protected boolean func(      int doc       FunctionValues vals){         return vals.exists(doc);       }     } ;   } } ,CLASS_INSTANCE_CREATION, line no: 630, 0.5, 1.0, 0.5
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("not" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource vs=fp.parseValueSource();     return new SimpleBoolFunction(vs){       @Override protected boolean func(      int doc       FunctionValues vals){         return !vals.boolVal(doc);       }       @Override protected String name(){         return "not";       }     } ;   } } ),METHOD_INVOCATION, line no: 647, 0.5, 1.0, 0.5
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource vs=fp.parseValueSource();     return new SimpleBoolFunction(vs){       @Override protected boolean func(      int doc       FunctionValues vals){         return !vals.boolVal(doc);       }       @Override protected String name(){         return "not";       }     } ;   } } ,CLASS_INSTANCE_CREATION, line no: 647, 0.5, 1.0, 0.5
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("and" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     List<ValueSource> sources=fp.parseValueSourceList();     return new MultiBoolFunction(sources){       @Override protected String name(){         return "and";       }       @Override protected boolean func(      int doc       FunctionValues[] vals){         for (        FunctionValues dv : vals)         if (!dv.boolVal(doc))         return false;         return true;       }     } ;   } } ),METHOD_INVOCATION, line no: 665, 0.5, 1.0, 0.5
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     List<ValueSource> sources=fp.parseValueSourceList();     return new MultiBoolFunction(sources){       @Override protected String name(){         return "and";       }       @Override protected boolean func(      int doc       FunctionValues[] vals){         for (        FunctionValues dv : vals)         if (!dv.boolVal(doc))         return false;         return true;       }     } ;   } } ,CLASS_INSTANCE_CREATION, line no: 665, 0.5, 1.0, 0.5
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("or" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     List<ValueSource> sources=fp.parseValueSourceList();     return new MultiBoolFunction(sources){       @Override protected String name(){         return "or";       }       @Override protected boolean func(      int doc       FunctionValues[] vals){         for (        FunctionValues dv : vals)         if (dv.boolVal(doc))         return true;         return false;       }     } ;   } } ),METHOD_INVOCATION, line no: 684, 0.5, 1.0, 0.5
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     List<ValueSource> sources=fp.parseValueSourceList();     return new MultiBoolFunction(sources){       @Override protected String name(){         return "or";       }       @Override protected boolean func(      int doc       FunctionValues[] vals){         for (        FunctionValues dv : vals)         if (dv.boolVal(doc))         return true;         return false;       }     } ;   } } ,CLASS_INSTANCE_CREATION, line no: 684, 0.5, 1.0, 0.5
fp.getString(),METHOD_INVOCATION, line no: 107,getDate(fp first),METHOD_INVOCATION, line no: 862, 0.5, 1.0, 0.5
fp.getString(),METHOD_INVOCATION, line no: 107,getValueSource(fp first),METHOD_INVOCATION, line no: 863, 0.5, 1.0, 0.5
fp.getString(),METHOD_INVOCATION, line no: 107,getDate(fp second),METHOD_INVOCATION, line no: 865, 0.5, 1.0, 0.5
fp.getString(),METHOD_INVOCATION, line no: 107,getValueSource(fp second),METHOD_INVOCATION, line no: 866, 0.5, 1.0, 0.5
getString,SIMPLE_NAME, line no: 107,description(),METHOD_INVOCATION, line no: 980, 0.5, 0.5, 1.0
getString,SIMPLE_NAME, line no: 107,"testfunc(" + source.description() + ')',INFIX_EXPRESSION, line no: 1246, 0.5, 0.5, 1.0
getString,SIMPLE_NAME, line no: 107,"testfunc(",STRING_LITERAL, line no: 1246, 0.5, 0.5, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,f.getType().getValueSource(f fp),METHOD_INVOCATION, line no: 358, 0.4444444444444444, 0.7777777777777778, 0.5
fp.getString(),METHOD_INVOCATION, line no: 107,fp.req.getSchema().getField(arg),METHOD_INVOCATION, line no: 849, 0.4444444444444444, 0.8888888888888888, 0.5
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,f.getType().getValueSource(f fp),METHOD_INVOCATION, line no: 358, 0.4375, 0.75, 0.5
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,fp.req.getSchema().getField(arg),METHOD_INVOCATION, line no: 849, 0.4375, 0.875, 0.5
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("div" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource a=fp.parseValueSource();     ValueSource b=fp.parseValueSource();     return new DivFloatFunction(a b);   } } ),METHOD_INVOCATION, line no: 153, 0.3333333333333333, 1.0, 0.3333333333333333
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource a=fp.parseValueSource();     ValueSource b=fp.parseValueSource();     return new DivFloatFunction(a b);   } } ,CLASS_INSTANCE_CREATION, line no: 153, 0.3333333333333333, 1.0, 0.3333333333333333
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("sub" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource a=fp.parseValueSource();     ValueSource b=fp.parseValueSource();     return new DualFloatFunction(a b){       @Override protected String name(){         return "sub";       }       @Override protected float func(      int doc       FunctionValues aVals       FunctionValues bVals){         return aVals.floatVal(doc) - bVals.floatVal(doc);       }     } ;   } } ),METHOD_INVOCATION, line no: 208, 0.3333333333333333, 1.0, 0.3333333333333333
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource a=fp.parseValueSource();     ValueSource b=fp.parseValueSource();     return new DualFloatFunction(a b){       @Override protected String name(){         return "sub";       }       @Override protected float func(      int doc       FunctionValues aVals       FunctionValues bVals){         return aVals.floatVal(doc) - bVals.floatVal(doc);       }     } ;   } } ,CLASS_INSTANCE_CREATION, line no: 208, 0.3333333333333333, 1.0, 0.3333333333333333
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("query" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     Query q=fp.parseNestedQuery();     float defVal=0.0f;     if (fp.hasMoreArguments()) {       defVal=fp.parseFloat();     }     return new QueryValueSource(q defVal);   } } ),METHOD_INVOCATION, line no: 232, 0.3333333333333333, 1.0, 0.3333333333333333
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     Query q=fp.parseNestedQuery();     float defVal=0.0f;     if (fp.hasMoreArguments()) {       defVal=fp.parseFloat();     }     return new QueryValueSource(q defVal);   } } ,CLASS_INSTANCE_CREATION, line no: 232, 0.3333333333333333, 1.0, 0.3333333333333333
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("joindf" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     String f0=fp.parseArg();     String qf=fp.parseArg();     return new JoinDocFreqValueSource(f0 qf);   } } ),METHOD_INVOCATION, line no: 253, 0.3333333333333333, 1.0, 0.3333333333333333
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     String f0=fp.parseArg();     String qf=fp.parseArg();     return new JoinDocFreqValueSource(f0 qf);   } } ,CLASS_INSTANCE_CREATION, line no: 253, 0.3333333333333333, 1.0, 0.3333333333333333
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("geohash" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource lat=fp.parseValueSource();     ValueSource lon=fp.parseValueSource();     return new GeohashFunction(lat lon);   } } ),METHOD_INVOCATION, line no: 317, 0.3333333333333333, 1.0, 0.3333333333333333
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource lat=fp.parseValueSource();     ValueSource lon=fp.parseValueSource();     return new GeohashFunction(lat lon);   } } ,CLASS_INSTANCE_CREATION, line no: 317, 0.3333333333333333, 1.0, 0.3333333333333333
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("field" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     String fieldName=fp.parseArg();     SchemaField f=fp.getReq().getSchema().getField(fieldName);     return f.getType().getValueSource(f fp);   } } ),METHOD_INVOCATION, line no: 352, 0.3333333333333333, 1.0, 0.3333333333333333
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     String fieldName=fp.parseArg();     SchemaField f=fp.getReq().getSchema().getField(fieldName);     return f.getType().getValueSource(f fp);   } } ,CLASS_INSTANCE_CREATION, line no: 352, 0.3333333333333333, 1.0, 0.3333333333333333
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,d1 == null ? getValueSource(fp first) : null,CONDITIONAL_EXPRESSION, line no: 863, 0.3333333333333333, 1.0, 0.3333333333333333
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,d2 == null ? getValueSource(fp second) : null,CONDITIONAL_EXPRESSION, line no: 866, 0.3333333333333333, 1.0, 0.3333333333333333
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("div" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource a=fp.parseValueSource();     ValueSource b=fp.parseValueSource();     return new DivFloatFunction(a b);   } } ),METHOD_INVOCATION, line no: 153, 0.3333333333333333, 1.0, 0.3333333333333333
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource a=fp.parseValueSource();     ValueSource b=fp.parseValueSource();     return new DivFloatFunction(a b);   } } ,CLASS_INSTANCE_CREATION, line no: 153, 0.3333333333333333, 1.0, 0.3333333333333333
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("sub" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource a=fp.parseValueSource();     ValueSource b=fp.parseValueSource();     return new DualFloatFunction(a b){       @Override protected String name(){         return "sub";       }       @Override protected float func(      int doc       FunctionValues aVals       FunctionValues bVals){         return aVals.floatVal(doc) - bVals.floatVal(doc);       }     } ;   } } ),METHOD_INVOCATION, line no: 208, 0.3333333333333333, 1.0, 0.3333333333333333
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource a=fp.parseValueSource();     ValueSource b=fp.parseValueSource();     return new DualFloatFunction(a b){       @Override protected String name(){         return "sub";       }       @Override protected float func(      int doc       FunctionValues aVals       FunctionValues bVals){         return aVals.floatVal(doc) - bVals.floatVal(doc);       }     } ;   } } ,CLASS_INSTANCE_CREATION, line no: 208, 0.3333333333333333, 1.0, 0.3333333333333333
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("query" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     Query q=fp.parseNestedQuery();     float defVal=0.0f;     if (fp.hasMoreArguments()) {       defVal=fp.parseFloat();     }     return new QueryValueSource(q defVal);   } } ),METHOD_INVOCATION, line no: 232, 0.3333333333333333, 1.0, 0.3333333333333333
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     Query q=fp.parseNestedQuery();     float defVal=0.0f;     if (fp.hasMoreArguments()) {       defVal=fp.parseFloat();     }     return new QueryValueSource(q defVal);   } } ,CLASS_INSTANCE_CREATION, line no: 232, 0.3333333333333333, 1.0, 0.3333333333333333
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("joindf" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     String f0=fp.parseArg();     String qf=fp.parseArg();     return new JoinDocFreqValueSource(f0 qf);   } } ),METHOD_INVOCATION, line no: 253, 0.3333333333333333, 1.0, 0.3333333333333333
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     String f0=fp.parseArg();     String qf=fp.parseArg();     return new JoinDocFreqValueSource(f0 qf);   } } ,CLASS_INSTANCE_CREATION, line no: 253, 0.3333333333333333, 1.0, 0.3333333333333333
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("geohash" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource lat=fp.parseValueSource();     ValueSource lon=fp.parseValueSource();     return new GeohashFunction(lat lon);   } } ),METHOD_INVOCATION, line no: 317, 0.3333333333333333, 1.0, 0.3333333333333333
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource lat=fp.parseValueSource();     ValueSource lon=fp.parseValueSource();     return new GeohashFunction(lat lon);   } } ,CLASS_INSTANCE_CREATION, line no: 317, 0.3333333333333333, 1.0, 0.3333333333333333
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("field" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     String fieldName=fp.parseArg();     SchemaField f=fp.getReq().getSchema().getField(fieldName);     return f.getType().getValueSource(f fp);   } } ),METHOD_INVOCATION, line no: 352, 0.3333333333333333, 1.0, 0.3333333333333333
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     String fieldName=fp.parseArg();     SchemaField f=fp.getReq().getSchema().getField(fieldName);     return f.getType().getValueSource(f fp);   } } ,CLASS_INSTANCE_CREATION, line no: 352, 0.3333333333333333, 1.0, 0.3333333333333333
fp.getString(),METHOD_INVOCATION, line no: 107,fp.getReq().getSchema().getField(fieldName),METHOD_INVOCATION, line no: 357, 0.3333333333333333, 0.6666666666666666, 0.5
fp.getString(),METHOD_INVOCATION, line no: 107,d1 == null ? getValueSource(fp first) : null,CONDITIONAL_EXPRESSION, line no: 863, 0.3333333333333333, 1.0, 0.3333333333333333
fp.getString(),METHOD_INVOCATION, line no: 107,d2 == null ? getValueSource(fp second) : null,CONDITIONAL_EXPRESSION, line no: 866, 0.3333333333333333, 1.0, 0.3333333333333333
fp.getString(),METHOD_INVOCATION, line no: 107,"const(",STRING_LITERAL, line no: 952, 0.3333333333333333, 0.3333333333333333, 1.0
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,fp.getReq().getSchema().getField(fieldName),METHOD_INVOCATION, line no: 357, 0.3125, 0.625, 0.5
getString,SIMPLE_NAME, line no: 107,"const(" + constant + ")",INFIX_EXPRESSION, line no: 952, 0.3, 0.3, 1.0
getString,SIMPLE_NAME, line no: 107,"const(",STRING_LITERAL, line no: 952, 0.3, 0.3, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,tinfo.field=fp.parseArg(),ASSIGNMENT, line no: 748, 0.2962962962962963, 0.8888888888888888, 0.3333333333333333
fp.getString(),METHOD_INVOCATION, line no: 107,tinfo.val=fp.parseArg(),ASSIGNMENT, line no: 749, 0.2962962962962963, 0.8888888888888888, 0.3333333333333333
fp.getString(),METHOD_INVOCATION, line no: 107,fp.getReq().getSchema().getFieldTypeNoEx(tinfo.field),METHOD_INVOCATION, line no: 752, 0.2962962962962963, 0.8888888888888888, 0.3333333333333333
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,tinfo.field=fp.parseArg(),ASSIGNMENT, line no: 748, 0.29166666666666663, 0.875, 0.3333333333333333
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,tinfo.val=fp.parseArg(),ASSIGNMENT, line no: 749, 0.29166666666666663, 0.875, 0.3333333333333333
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,fp.getReq().getSchema().getFieldTypeNoEx(tinfo.field),METHOD_INVOCATION, line no: 752, 0.29166666666666663, 0.875, 0.3333333333333333
fp.getString(),METHOD_INVOCATION, line no: 107,fp.req.getCore().getResourceLoader().newInstance(distClass StringDistance.class),METHOD_INVOCATION, line no: 347, 0.2777777777777778, 0.5555555555555556, 0.5
fp.getString(),METHOD_INVOCATION, line no: 107,df.parseMathLenient(null arg fp.req),METHOD_INVOCATION, line no: 842, 0.25925925925925924, 0.7777777777777778, 0.3333333333333333
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("linear" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource source=fp.parseValueSource();     float slope=fp.parseFloat();     float intercept=fp.parseFloat();     return new LinearFloatFunction(source slope intercept);   } } ),METHOD_INVOCATION, line no: 125, 0.25, 1.0, 0.25
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource source=fp.parseValueSource();     float slope=fp.parseFloat();     float intercept=fp.parseFloat();     return new LinearFloatFunction(source slope intercept);   } } ,CLASS_INSTANCE_CREATION, line no: 125, 0.25, 1.0, 0.25
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("scale" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource source=fp.parseValueSource();     float min=fp.parseFloat();     float max=fp.parseFloat();     return new ScaleFloatFunction(source min max);   } } ),METHOD_INVOCATION, line no: 144, 0.25, 1.0, 0.25
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource source=fp.parseValueSource();     float min=fp.parseFloat();     float max=fp.parseFloat();     return new ScaleFloatFunction(source min max);   } } ,CLASS_INSTANCE_CREATION, line no: 144, 0.25, 1.0, 0.25
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,defVal=fp.parseFloat(),ASSIGNMENT, line no: 239, 0.25, 0.5, 0.5
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("boost" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     Query q=fp.parseNestedQuery();     ValueSource vs=fp.parseValueSource();     BoostedQuery bq=new BoostedQuery(q vs);     return new QueryValueSource(bq 0.0f);   } } ),METHOD_INVOCATION, line no: 244, 0.25, 1.0, 0.25
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     Query q=fp.parseNestedQuery();     ValueSource vs=fp.parseValueSource();     BoostedQuery bq=new BoostedQuery(q vs);     return new QueryValueSource(bq 0.0f);   } } ,CLASS_INSTANCE_CREATION, line no: 244, 0.25, 1.0, 0.25
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("ghhsin" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     double radius=fp.parseDouble();     ValueSource gh1=fp.parseValueSource();     ValueSource gh2=fp.parseValueSource();     return new GeohashHaversineFunction(gh1 gh2 radius);   } } ),METHOD_INVOCATION, line no: 305, 0.25, 1.0, 0.25
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     double radius=fp.parseDouble();     ValueSource gh1=fp.parseValueSource();     ValueSource gh2=fp.parseValueSource();     return new GeohashHaversineFunction(gh1 gh2 radius);   } } ,CLASS_INSTANCE_CREATION, line no: 305, 0.25, 1.0, 0.25
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,ngram=fp.parseInt(),ASSIGNMENT, line no: 343, 0.25, 0.5, 0.5
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,fp.req.getCore().getResourceLoader().newInstance(distClass StringDistance.class),METHOD_INVOCATION, line no: 347, 0.25, 0.5, 0.5
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("xor" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     List<ValueSource> sources=fp.parseValueSourceList();     return new MultiBoolFunction(sources){       @Override protected String name(){         return "xor";       }       @Override protected boolean func(      int doc       FunctionValues[] vals){         int nTrue=0  nFalse=0;         for (        FunctionValues dv : vals) {           if (dv.boolVal(doc))           nTrue++;  else           nFalse++;         }         return nTrue != 0 && nFalse != 0;       }     } ;   } } ),METHOD_INVOCATION, line no: 703, 0.25, 1.0, 0.25
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     List<ValueSource> sources=fp.parseValueSourceList();     return new MultiBoolFunction(sources){       @Override protected String name(){         return "xor";       }       @Override protected boolean func(      int doc       FunctionValues[] vals){         int nTrue=0  nFalse=0;         for (        FunctionValues dv : vals) {           if (dv.boolVal(doc))           nTrue++;  else           nFalse++;         }         return nTrue != 0 && nFalse != 0;       }     } ;   } } ,CLASS_INSTANCE_CREATION, line no: 703, 0.25, 1.0, 0.25
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("if" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource ifValueSource=fp.parseValueSource();     ValueSource trueValueSource=fp.parseValueSource();     ValueSource falseValueSource=fp.parseValueSource();     return new IfFunction(ifValueSource trueValueSource falseValueSource);   } } ),METHOD_INVOCATION, line no: 725, 0.25, 1.0, 0.25
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource ifValueSource=fp.parseValueSource();     ValueSource trueValueSource=fp.parseValueSource();     ValueSource falseValueSource=fp.parseValueSource();     return new IfFunction(ifValueSource trueValueSource falseValueSource);   } } ,CLASS_INSTANCE_CREATION, line no: 725, 0.25, 1.0, 0.25
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,df.parseMathLenient(null arg fp.req),METHOD_INVOCATION, line no: 842, 0.25, 0.75, 0.3333333333333333
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("linear" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource source=fp.parseValueSource();     float slope=fp.parseFloat();     float intercept=fp.parseFloat();     return new LinearFloatFunction(source slope intercept);   } } ),METHOD_INVOCATION, line no: 125, 0.25, 1.0, 0.25
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource source=fp.parseValueSource();     float slope=fp.parseFloat();     float intercept=fp.parseFloat();     return new LinearFloatFunction(source slope intercept);   } } ,CLASS_INSTANCE_CREATION, line no: 125, 0.25, 1.0, 0.25
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("scale" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource source=fp.parseValueSource();     float min=fp.parseFloat();     float max=fp.parseFloat();     return new ScaleFloatFunction(source min max);   } } ),METHOD_INVOCATION, line no: 144, 0.25, 1.0, 0.25
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource source=fp.parseValueSource();     float min=fp.parseFloat();     float max=fp.parseFloat();     return new ScaleFloatFunction(source min max);   } } ,CLASS_INSTANCE_CREATION, line no: 144, 0.25, 1.0, 0.25
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("boost" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     Query q=fp.parseNestedQuery();     ValueSource vs=fp.parseValueSource();     BoostedQuery bq=new BoostedQuery(q vs);     return new QueryValueSource(bq 0.0f);   } } ),METHOD_INVOCATION, line no: 244, 0.25, 1.0, 0.25
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     Query q=fp.parseNestedQuery();     ValueSource vs=fp.parseValueSource();     BoostedQuery bq=new BoostedQuery(q vs);     return new QueryValueSource(bq 0.0f);   } } ,CLASS_INSTANCE_CREATION, line no: 244, 0.25, 1.0, 0.25
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("ghhsin" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     double radius=fp.parseDouble();     ValueSource gh1=fp.parseValueSource();     ValueSource gh2=fp.parseValueSource();     return new GeohashHaversineFunction(gh1 gh2 radius);   } } ),METHOD_INVOCATION, line no: 305, 0.25, 1.0, 0.25
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     double radius=fp.parseDouble();     ValueSource gh1=fp.parseValueSource();     ValueSource gh2=fp.parseValueSource();     return new GeohashHaversineFunction(gh1 gh2 radius);   } } ,CLASS_INSTANCE_CREATION, line no: 305, 0.25, 1.0, 0.25
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("xor" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     List<ValueSource> sources=fp.parseValueSourceList();     return new MultiBoolFunction(sources){       @Override protected String name(){         return "xor";       }       @Override protected boolean func(      int doc       FunctionValues[] vals){         int nTrue=0  nFalse=0;         for (        FunctionValues dv : vals) {           if (dv.boolVal(doc))           nTrue++;  else           nFalse++;         }         return nTrue != 0 && nFalse != 0;       }     } ;   } } ),METHOD_INVOCATION, line no: 703, 0.25, 1.0, 0.25
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     List<ValueSource> sources=fp.parseValueSourceList();     return new MultiBoolFunction(sources){       @Override protected String name(){         return "xor";       }       @Override protected boolean func(      int doc       FunctionValues[] vals){         int nTrue=0  nFalse=0;         for (        FunctionValues dv : vals) {           if (dv.boolVal(doc))           nTrue++;  else           nFalse++;         }         return nTrue != 0 && nFalse != 0;       }     } ;   } } ,CLASS_INSTANCE_CREATION, line no: 703, 0.25, 1.0, 0.25
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("if" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource ifValueSource=fp.parseValueSource();     ValueSource trueValueSource=fp.parseValueSource();     ValueSource falseValueSource=fp.parseValueSource();     return new IfFunction(ifValueSource trueValueSource falseValueSource);   } } ),METHOD_INVOCATION, line no: 725, 0.25, 1.0, 0.25
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource ifValueSource=fp.parseValueSource();     ValueSource trueValueSource=fp.parseValueSource();     ValueSource falseValueSource=fp.parseValueSource();     return new IfFunction(ifValueSource trueValueSource falseValueSource);   } } ,CLASS_INSTANCE_CREATION, line no: 725, 0.25, 1.0, 0.25
fp.getString(),METHOD_INVOCATION, line no: 107,defVal=fp.parseFloat(),ASSIGNMENT, line no: 239, 0.2222222222222222, 0.4444444444444444, 0.5
fp.getString(),METHOD_INVOCATION, line no: 107,ngram=fp.parseInt(),ASSIGNMENT, line no: 343, 0.2222222222222222, 0.4444444444444444, 0.5
fp.getString(),METHOD_INVOCATION, line no: 107,tinfo.indexedField=tinfo.field=fp.parseArg(),ASSIGNMENT, line no: 748, 0.2222222222222222, 0.8888888888888888, 0.25
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,tinfo.indexedField=tinfo.field=fp.parseArg(),ASSIGNMENT, line no: 748, 0.21875, 0.875, 0.25
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("recip" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource source=fp.parseValueSource();     float m=fp.parseFloat();     float a=fp.parseFloat();     float b=fp.parseFloat();     return new ReciprocalFloatFunction(source m a b);   } } ),METHOD_INVOCATION, line no: 134, 0.2, 1.0, 0.2
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource source=fp.parseValueSource();     float m=fp.parseFloat();     float a=fp.parseFloat();     float b=fp.parseFloat();     return new ReciprocalFloatFunction(source m a b);   } } ,CLASS_INSTANCE_CREATION, line no: 134, 0.2, 1.0, 0.2
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("sqedist" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     List<ValueSource> sources=fp.parseValueSourceList();     MVResult mvr=getMultiValueSources(sources);     return new SquaredEuclideanFunction(mvr.mv1 mvr.mv2);   } } ),METHOD_INVOCATION, line no: 508, 0.2, 1.0, 0.2
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     List<ValueSource> sources=fp.parseValueSourceList();     MVResult mvr=getMultiValueSources(sources);     return new SquaredEuclideanFunction(mvr.mv1 mvr.mv2);   } } ,CLASS_INSTANCE_CREATION, line no: 508, 0.2, 1.0, 0.2
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("recip" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource source=fp.parseValueSource();     float m=fp.parseFloat();     float a=fp.parseFloat();     float b=fp.parseFloat();     return new ReciprocalFloatFunction(source m a b);   } } ),METHOD_INVOCATION, line no: 134, 0.2, 1.0, 0.2
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource source=fp.parseValueSource();     float m=fp.parseFloat();     float a=fp.parseFloat();     float b=fp.parseFloat();     return new ReciprocalFloatFunction(source m a b);   } } ,CLASS_INSTANCE_CREATION, line no: 134, 0.2, 1.0, 0.2
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("sqedist" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     List<ValueSource> sources=fp.parseValueSourceList();     MVResult mvr=getMultiValueSources(sources);     return new SquaredEuclideanFunction(mvr.mv1 mvr.mv2);   } } ),METHOD_INVOCATION, line no: 508, 0.2, 1.0, 0.2
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     List<ValueSource> sources=fp.parseValueSourceList();     MVResult mvr=getMultiValueSources(sources);     return new SquaredEuclideanFunction(mvr.mv1 mvr.mv2);   } } ,CLASS_INSTANCE_CREATION, line no: 508, 0.2, 1.0, 0.2
getString,SIMPLE_NAME, line no: 107,this.name=name,ASSIGNMENT, line no: 1032, 0.2, 0.2, 1.0
getString,SIMPLE_NAME, line no: 107,this.name,FIELD_ACCESS, line no: 1032, 0.2, 0.2, 1.0
fp.getString(),METHOD_INVOCATION, line no: 107,dist=fp.req.getCore().getResourceLoader().newInstance(distClass StringDistance.class),ASSIGNMENT, line no: 347, 0.18518518518518517, 0.5555555555555556, 0.3333333333333333
fp.getString(),METHOD_INVOCATION, line no: 107,fp.getReq().getSchema().getFieldOrNull(tinfo.field),METHOD_INVOCATION, line no: 758, 0.18518518518518517, 0.5555555555555556, 0.3333333333333333
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("map" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource source=fp.parseValueSource();     float min=fp.parseFloat();     float max=fp.parseFloat();     float target=fp.parseFloat();     Float def=fp.hasMoreArguments() ? fp.parseFloat() : null;     return new RangeMapFloatFunction(source min max target def);   } } ),METHOD_INVOCATION, line no: 161, 0.16666666666666666, 1.0, 0.16666666666666666
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource source=fp.parseValueSource();     float min=fp.parseFloat();     float max=fp.parseFloat();     float target=fp.parseFloat();     Float def=fp.hasMoreArguments() ? fp.parseFloat() : null;     return new RangeMapFloatFunction(source min max target def);   } } ,CLASS_INSTANCE_CREATION, line no: 161, 0.16666666666666666, 1.0, 0.16666666666666666
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("strdist" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource str1=fp.parseValueSource();     ValueSource str2=fp.parseValueSource();     String distClass=fp.parseArg();     StringDistance dist=null;     if (distClass.equalsIgnoreCase("jw")) {       dist=new JaroWinklerDistance();     }  else     if (distClass.equalsIgnoreCase("edit")) {       dist=new LevensteinDistance();     }  else     if (distClass.equalsIgnoreCase("ngram")) {       int ngram=2;       if (fp.hasMoreArguments()) {         ngram=fp.parseInt();       }       dist=new NGramDistance(ngram);     }  else {       dist=fp.req.getCore().getResourceLoader().newInstance(distClass StringDistance.class);     }     return new StringDistanceFunction(str1 str2 dist);   } } ),METHOD_INVOCATION, line no: 327, 0.16666666666666666, 1.0, 0.16666666666666666
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource str1=fp.parseValueSource();     ValueSource str2=fp.parseValueSource();     String distClass=fp.parseArg();     StringDistance dist=null;     if (distClass.equalsIgnoreCase("jw")) {       dist=new JaroWinklerDistance();     }  else     if (distClass.equalsIgnoreCase("edit")) {       dist=new LevensteinDistance();     }  else     if (distClass.equalsIgnoreCase("ngram")) {       int ngram=2;       if (fp.hasMoreArguments()) {         ngram=fp.parseInt();       }       dist=new NGramDistance(ngram);     }  else {       dist=fp.req.getCore().getResourceLoader().newInstance(distClass StringDistance.class);     }     return new StringDistanceFunction(str1 str2 dist);   } } ,CLASS_INSTANCE_CREATION, line no: 327, 0.16666666666666666, 1.0, 0.16666666666666666
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,dist=fp.req.getCore().getResourceLoader().newInstance(distClass StringDistance.class),ASSIGNMENT, line no: 347, 0.16666666666666666, 0.5, 0.3333333333333333
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("dist" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     float power=fp.parseFloat();     List<ValueSource> sources=fp.parseValueSourceList();     MVResult mvr=getMultiValueSources(sources);     return new VectorDistanceFunction(power mvr.mv1 mvr.mv2);   } } ),METHOD_INVOCATION, line no: 518, 0.16666666666666666, 1.0, 0.16666666666666666
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     float power=fp.parseFloat();     List<ValueSource> sources=fp.parseValueSourceList();     MVResult mvr=getMultiValueSources(sources);     return new VectorDistanceFunction(power mvr.mv1 mvr.mv2);   } } ,CLASS_INSTANCE_CREATION, line no: 518, 0.16666666666666666, 1.0, 0.16666666666666666
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("docfreq" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     TInfo tinfo=parseTerm(fp);     return new DocFreqValueSource(tinfo.field tinfo.val tinfo.indexedField tinfo.indexedBytes);   } } ),METHOD_INVOCATION, line no: 544, 0.16666666666666666, 1.0, 0.16666666666666666
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     TInfo tinfo=parseTerm(fp);     return new DocFreqValueSource(tinfo.field tinfo.val tinfo.indexedField tinfo.indexedBytes);   } } ,CLASS_INSTANCE_CREATION, line no: 544, 0.16666666666666666, 1.0, 0.16666666666666666
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("totaltermfreq" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     TInfo tinfo=parseTerm(fp);     return new TotalTermFreqValueSource(tinfo.field tinfo.val tinfo.indexedField tinfo.indexedBytes);   } } ),METHOD_INVOCATION, line no: 552, 0.16666666666666666, 1.0, 0.16666666666666666
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     TInfo tinfo=parseTerm(fp);     return new TotalTermFreqValueSource(tinfo.field tinfo.val tinfo.indexedField tinfo.indexedBytes);   } } ,CLASS_INSTANCE_CREATION, line no: 552, 0.16666666666666666, 1.0, 0.16666666666666666
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("idf" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     TInfo tinfo=parseTerm(fp);     return new IDFValueSource(tinfo.field tinfo.val tinfo.indexedField tinfo.indexedBytes);   } } ),METHOD_INVOCATION, line no: 570, 0.16666666666666666, 1.0, 0.16666666666666666
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     TInfo tinfo=parseTerm(fp);     return new IDFValueSource(tinfo.field tinfo.val tinfo.indexedField tinfo.indexedBytes);   } } ,CLASS_INSTANCE_CREATION, line no: 570, 0.16666666666666666, 1.0, 0.16666666666666666
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("termfreq" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     TInfo tinfo=parseTerm(fp);     return new TermFreqValueSource(tinfo.field tinfo.val tinfo.indexedField tinfo.indexedBytes);   } } ),METHOD_INVOCATION, line no: 578, 0.16666666666666666, 1.0, 0.16666666666666666
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     TInfo tinfo=parseTerm(fp);     return new TermFreqValueSource(tinfo.field tinfo.val tinfo.indexedField tinfo.indexedBytes);   } } ,CLASS_INSTANCE_CREATION, line no: 578, 0.16666666666666666, 1.0, 0.16666666666666666
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("tf" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     TInfo tinfo=parseTerm(fp);     return new TFValueSource(tinfo.field tinfo.val tinfo.indexedField tinfo.indexedBytes);   } } ),METHOD_INVOCATION, line no: 586, 0.16666666666666666, 1.0, 0.16666666666666666
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     TInfo tinfo=parseTerm(fp);     return new TFValueSource(tinfo.field tinfo.val tinfo.indexedField tinfo.indexedBytes);   } } ,CLASS_INSTANCE_CREATION, line no: 586, 0.16666666666666666, 1.0, 0.16666666666666666
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,fp.getReq().getSchema().getFieldOrNull(tinfo.field),METHOD_INVOCATION, line no: 758, 0.16666666666666666, 0.5, 0.3333333333333333
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("map" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource source=fp.parseValueSource();     float min=fp.parseFloat();     float max=fp.parseFloat();     float target=fp.parseFloat();     Float def=fp.hasMoreArguments() ? fp.parseFloat() : null;     return new RangeMapFloatFunction(source min max target def);   } } ),METHOD_INVOCATION, line no: 161, 0.16666666666666666, 1.0, 0.16666666666666666
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource source=fp.parseValueSource();     float min=fp.parseFloat();     float max=fp.parseFloat();     float target=fp.parseFloat();     Float def=fp.hasMoreArguments() ? fp.parseFloat() : null;     return new RangeMapFloatFunction(source min max target def);   } } ,CLASS_INSTANCE_CREATION, line no: 161, 0.16666666666666666, 1.0, 0.16666666666666666
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("strdist" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource str1=fp.parseValueSource();     ValueSource str2=fp.parseValueSource();     String distClass=fp.parseArg();     StringDistance dist=null;     if (distClass.equalsIgnoreCase("jw")) {       dist=new JaroWinklerDistance();     }  else     if (distClass.equalsIgnoreCase("edit")) {       dist=new LevensteinDistance();     }  else     if (distClass.equalsIgnoreCase("ngram")) {       int ngram=2;       if (fp.hasMoreArguments()) {         ngram=fp.parseInt();       }       dist=new NGramDistance(ngram);     }  else {       dist=fp.req.getCore().getResourceLoader().newInstance(distClass StringDistance.class);     }     return new StringDistanceFunction(str1 str2 dist);   } } ),METHOD_INVOCATION, line no: 327, 0.16666666666666666, 1.0, 0.16666666666666666
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource str1=fp.parseValueSource();     ValueSource str2=fp.parseValueSource();     String distClass=fp.parseArg();     StringDistance dist=null;     if (distClass.equalsIgnoreCase("jw")) {       dist=new JaroWinklerDistance();     }  else     if (distClass.equalsIgnoreCase("edit")) {       dist=new LevensteinDistance();     }  else     if (distClass.equalsIgnoreCase("ngram")) {       int ngram=2;       if (fp.hasMoreArguments()) {         ngram=fp.parseInt();       }       dist=new NGramDistance(ngram);     }  else {       dist=fp.req.getCore().getResourceLoader().newInstance(distClass StringDistance.class);     }     return new StringDistanceFunction(str1 str2 dist);   } } ,CLASS_INSTANCE_CREATION, line no: 327, 0.16666666666666666, 1.0, 0.16666666666666666
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("dist" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     float power=fp.parseFloat();     List<ValueSource> sources=fp.parseValueSourceList();     MVResult mvr=getMultiValueSources(sources);     return new VectorDistanceFunction(power mvr.mv1 mvr.mv2);   } } ),METHOD_INVOCATION, line no: 518, 0.16666666666666666, 1.0, 0.16666666666666666
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     float power=fp.parseFloat();     List<ValueSource> sources=fp.parseValueSourceList();     MVResult mvr=getMultiValueSources(sources);     return new VectorDistanceFunction(power mvr.mv1 mvr.mv2);   } } ,CLASS_INSTANCE_CREATION, line no: 518, 0.16666666666666666, 1.0, 0.16666666666666666
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("docfreq" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     TInfo tinfo=parseTerm(fp);     return new DocFreqValueSource(tinfo.field tinfo.val tinfo.indexedField tinfo.indexedBytes);   } } ),METHOD_INVOCATION, line no: 544, 0.16666666666666666, 1.0, 0.16666666666666666
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     TInfo tinfo=parseTerm(fp);     return new DocFreqValueSource(tinfo.field tinfo.val tinfo.indexedField tinfo.indexedBytes);   } } ,CLASS_INSTANCE_CREATION, line no: 544, 0.16666666666666666, 1.0, 0.16666666666666666
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("totaltermfreq" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     TInfo tinfo=parseTerm(fp);     return new TotalTermFreqValueSource(tinfo.field tinfo.val tinfo.indexedField tinfo.indexedBytes);   } } ),METHOD_INVOCATION, line no: 552, 0.16666666666666666, 1.0, 0.16666666666666666
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     TInfo tinfo=parseTerm(fp);     return new TotalTermFreqValueSource(tinfo.field tinfo.val tinfo.indexedField tinfo.indexedBytes);   } } ,CLASS_INSTANCE_CREATION, line no: 552, 0.16666666666666666, 1.0, 0.16666666666666666
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("idf" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     TInfo tinfo=parseTerm(fp);     return new IDFValueSource(tinfo.field tinfo.val tinfo.indexedField tinfo.indexedBytes);   } } ),METHOD_INVOCATION, line no: 570, 0.16666666666666666, 1.0, 0.16666666666666666
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     TInfo tinfo=parseTerm(fp);     return new IDFValueSource(tinfo.field tinfo.val tinfo.indexedField tinfo.indexedBytes);   } } ,CLASS_INSTANCE_CREATION, line no: 570, 0.16666666666666666, 1.0, 0.16666666666666666
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("termfreq" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     TInfo tinfo=parseTerm(fp);     return new TermFreqValueSource(tinfo.field tinfo.val tinfo.indexedField tinfo.indexedBytes);   } } ),METHOD_INVOCATION, line no: 578, 0.16666666666666666, 1.0, 0.16666666666666666
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     TInfo tinfo=parseTerm(fp);     return new TermFreqValueSource(tinfo.field tinfo.val tinfo.indexedField tinfo.indexedBytes);   } } ,CLASS_INSTANCE_CREATION, line no: 578, 0.16666666666666666, 1.0, 0.16666666666666666
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("tf" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     TInfo tinfo=parseTerm(fp);     return new TFValueSource(tinfo.field tinfo.val tinfo.indexedField tinfo.indexedBytes);   } } ),METHOD_INVOCATION, line no: 586, 0.16666666666666666, 1.0, 0.16666666666666666
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     TInfo tinfo=parseTerm(fp);     return new TFValueSource(tinfo.field tinfo.val tinfo.indexedField tinfo.indexedBytes);   } } ,CLASS_INSTANCE_CREATION, line no: 586, 0.16666666666666666, 1.0, 0.16666666666666666
fp.getString(),METHOD_INVOCATION, line no: 107,ft.getFieldQuery(fp fp.getReq().getSchema().getFieldOrNull(tinfo.field) tinfo.val),METHOD_INVOCATION, line no: 758, 0.11111111111111112, 0.5555555555555556, 0.2
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,ft.getFieldQuery(fp fp.getReq().getSchema().getFieldOrNull(tinfo.field) tinfo.val),METHOD_INVOCATION, line no: 758, 0.1, 0.5, 0.2
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("hsin" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     double radius=fp.parseDouble();     boolean convert=Boolean.parseBoolean(fp.parseArg());     MultiValueSource pv1;     MultiValueSource pv2;     ValueSource one=fp.parseValueSource();     ValueSource two=fp.parseValueSource();     if (fp.hasMoreArguments()) {       List<ValueSource> s1=new ArrayList<ValueSource>();       s1.add(one);       s1.add(two);       pv1=new VectorValueSource(s1);       ValueSource x2=fp.parseValueSource();       ValueSource y2=fp.parseValueSource();       List<ValueSource> s2=new ArrayList<ValueSource>();       s2.add(x2);       s2.add(y2);       pv2=new VectorValueSource(s2);     }  else {       if (one instanceof MultiValueSource && two instanceof MultiValueSource) {         pv1=(MultiValueSource)one;         pv2=(MultiValueSource)two;       }  else {         throw new SolrException(SolrException.ErrorCode.BAD_REQUEST "Input must either be 2 MultiValueSources  or there must be 4 ValueSources");       }     }     return new HaversineFunction(pv1 pv2 radius convert);   } } ),METHOD_INVOCATION, line no: 264, 0.09090909090909091, 1.0, 0.09090909090909091
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     double radius=fp.parseDouble();     boolean convert=Boolean.parseBoolean(fp.parseArg());     MultiValueSource pv1;     MultiValueSource pv2;     ValueSource one=fp.parseValueSource();     ValueSource two=fp.parseValueSource();     if (fp.hasMoreArguments()) {       List<ValueSource> s1=new ArrayList<ValueSource>();       s1.add(one);       s1.add(two);       pv1=new VectorValueSource(s1);       ValueSource x2=fp.parseValueSource();       ValueSource y2=fp.parseValueSource();       List<ValueSource> s2=new ArrayList<ValueSource>();       s2.add(x2);       s2.add(y2);       pv2=new VectorValueSource(s2);     }  else {       if (one instanceof MultiValueSource && two instanceof MultiValueSource) {         pv1=(MultiValueSource)one;         pv2=(MultiValueSource)two;       }  else {         throw new SolrException(SolrException.ErrorCode.BAD_REQUEST "Input must either be 2 MultiValueSources  or there must be 4 ValueSources");       }     }     return new HaversineFunction(pv1 pv2 radius convert);   } } ,CLASS_INSTANCE_CREATION, line no: 264, 0.09090909090909091, 1.0, 0.09090909090909091
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("hsin" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     double radius=fp.parseDouble();     boolean convert=Boolean.parseBoolean(fp.parseArg());     MultiValueSource pv1;     MultiValueSource pv2;     ValueSource one=fp.parseValueSource();     ValueSource two=fp.parseValueSource();     if (fp.hasMoreArguments()) {       List<ValueSource> s1=new ArrayList<ValueSource>();       s1.add(one);       s1.add(two);       pv1=new VectorValueSource(s1);       ValueSource x2=fp.parseValueSource();       ValueSource y2=fp.parseValueSource();       List<ValueSource> s2=new ArrayList<ValueSource>();       s2.add(x2);       s2.add(y2);       pv2=new VectorValueSource(s2);     }  else {       if (one instanceof MultiValueSource && two instanceof MultiValueSource) {         pv1=(MultiValueSource)one;         pv2=(MultiValueSource)two;       }  else {         throw new SolrException(SolrException.ErrorCode.BAD_REQUEST "Input must either be 2 MultiValueSources  or there must be 4 ValueSources");       }     }     return new HaversineFunction(pv1 pv2 radius convert);   } } ),METHOD_INVOCATION, line no: 264, 0.09090909090909091, 1.0, 0.09090909090909091
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     double radius=fp.parseDouble();     boolean convert=Boolean.parseBoolean(fp.parseArg());     MultiValueSource pv1;     MultiValueSource pv2;     ValueSource one=fp.parseValueSource();     ValueSource two=fp.parseValueSource();     if (fp.hasMoreArguments()) {       List<ValueSource> s1=new ArrayList<ValueSource>();       s1.add(one);       s1.add(two);       pv1=new VectorValueSource(s1);       ValueSource x2=fp.parseValueSource();       ValueSource y2=fp.parseValueSource();       List<ValueSource> s2=new ArrayList<ValueSource>();       s2.add(x2);       s2.add(y2);       pv2=new VectorValueSource(s2);     }  else {       if (one instanceof MultiValueSource && two instanceof MultiValueSource) {         pv1=(MultiValueSource)one;         pv2=(MultiValueSource)two;       }  else {         throw new SolrException(SolrException.ErrorCode.BAD_REQUEST "Input must either be 2 MultiValueSources  or there must be 4 ValueSources");       }     }     return new HaversineFunction(pv1 pv2 radius convert);   } } ,CLASS_INSTANCE_CREATION, line no: 264, 0.09090909090909091, 1.0, 0.09090909090909091
