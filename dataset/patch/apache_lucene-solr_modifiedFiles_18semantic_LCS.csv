getString,SIMPLE_NAME, line no: 107,toString,SIMPLE_NAME, line no: 979, 0.7000000000000001, 0.8, 1.0, 0.7777777777777778
getString,SIMPLE_NAME, line no: 107,String,SIMPLE_NAME, line no: 69, 0.6666666666666666, 0.1, 1.0, 0.6666666666666666
fp.getString(),METHOD_INVOCATION, line no: 107,getString,SIMPLE_NAME, line no: 107, 0.6428571428571429, 1.0, 1.0, 0.6428571428571429
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new VectorValueSource(fp.parseValueSourceList()),CLASS_INSTANCE_CREATION, line no: 229, 0.5833333333333334, 1.0, 1.0, 0.5833333333333334
getString,SIMPLE_NAME, line no: 107,fp.getString(),METHOD_INVOCATION, line no: 107, 0.5785714285714286, 0.9, 1.0, 0.6428571428571429
fp.getString(),METHOD_INVOCATION, line no: 107,fp.parseArg(),METHOD_INVOCATION, line no: 256, 0.5714285714285714, 0.7777777777777778, 1.0, 0.5714285714285714
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new Function(fp.parseValueSource()),CLASS_INSTANCE_CREATION, line no: 1049, 0.5263157894736842, 1.0, 1.0, 0.5263157894736842
fp.getString(),METHOD_INVOCATION, line no: 107,fp.getReq(),METHOD_INVOCATION, line no: 357, 0.5079365079365079, 0.6666666666666666, 1.0, 0.5714285714285714
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new DefFunction(fp.parseValueSourceList()),CLASS_INSTANCE_CREATION, line no: 739, 0.5, 1.0, 1.0, 0.5
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,LiteralValueSource,SIMPLE_NAME, line no: 107, 0.47368421052631576, 1.0, 1.0, 0.47368421052631576
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new Function(fp.parseValueSource() fp.parseValueSource()),CLASS_INSTANCE_CREATION, line no: 1089, 0.47368421052631576, 1.0, 1.0, 0.47368421052631576
fp.getString(),METHOD_INVOCATION, line no: 107,toString,SIMPLE_NAME, line no: 979, 0.4444444444444444, 0.7777777777777778, 1.0, 0.5
fp.getString(),METHOD_INVOCATION, line no: 107,String,SIMPLE_NAME, line no: 69, 0.42857142857142855, 0.1111111111111111, 1.0, 0.42857142857142855
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,fp.parseValueSourceList(),METHOD_INVOCATION, line no: 193, 0.39473684210526316, 0.75, 1.0, 0.39473684210526316
fp.getString(),METHOD_INVOCATION, line no: 107,fp.parseValueSource(),METHOD_INVOCATION, line no: 93, 0.38095238095238093, 0.7777777777777778, 1.0, 0.38095238095238093
LiteralValueSource,SIMPLE_NAME, line no: 107,new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107, 0.37894736842105264, 0.8, 1.0, 0.47368421052631576
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,fp.parseValueSource(),METHOD_INVOCATION, line no: 93, 0.3684210526315789, 0.75, 1.0, 0.3684210526315789
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,fp.getString(),METHOD_INVOCATION, line no: 107, 0.3684210526315789, 1.0, 1.0, 0.3684210526315789
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,Boolean.parseBoolean(fp.parseArg()),METHOD_INVOCATION, line no: 270, 0.3684210526315789, 0.875, 1.0, 0.42105263157894735
fp.getString(),METHOD_INVOCATION, line no: 107,fp.parseFloat(),METHOD_INVOCATION, line no: 129, 0.362962962962963, 0.7777777777777778, 1.0, 0.4666666666666667
fp.getString(),METHOD_INVOCATION, line no: 107,fp.parseValueSourceList(),METHOD_INVOCATION, line no: 193, 0.36, 0.7777777777777778, 1.0, 0.36
fp.getString(),METHOD_INVOCATION, line no: 107,fp.getReq().getSchema(),METHOD_INVOCATION, line no: 357, 0.34782608695652173, 0.6666666666666666, 1.0, 0.391304347826087
fp.getString(),METHOD_INVOCATION, line no: 107,fp.hasMoreArguments(),METHOD_INVOCATION, line no: 168, 0.3386243386243386, 0.7777777777777778, 1.0, 0.38095238095238093
fp.getString(),METHOD_INVOCATION, line no: 107,fp.parseNestedQuery(),METHOD_INVOCATION, line no: 236, 0.3386243386243386, 0.7777777777777778, 1.0, 0.38095238095238093
fp.getString(),METHOD_INVOCATION, line no: 107,fp.parseId(),METHOD_INVOCATION, line no: 100, 0.3333333333333333, 0.7777777777777778, 1.0, 0.42857142857142855
fp.getString(),METHOD_INVOCATION, line no: 107,fp.parseDouble(),METHOD_INVOCATION, line no: 268, 0.3333333333333333, 0.8888888888888888, 1.0, 0.375
getString,SIMPLE_NAME, line no: 107,"vector",STRING_LITERAL, line no: 226, 0.3333333333333333, 1.0, 1.0, 0.3333333333333333
getString,SIMPLE_NAME, line no: 107,parseArg,SIMPLE_NAME, line no: 256, 0.3333333333333333, 0.8, 1.0, 0.3333333333333333
getString,SIMPLE_NAME, line no: 107,"geodist",STRING_LITERAL, line no: 262, 0.3333333333333333, 1.0, 1.0, 0.3333333333333333
getString,SIMPLE_NAME, line no: 107,"ghhsin",STRING_LITERAL, line no: 305, 0.3333333333333333, 1.0, 1.0, 0.3333333333333333
getString,SIMPLE_NAME, line no: 107,"strdist",STRING_LITERAL, line no: 327, 0.3333333333333333, 1.0, 1.0, 0.3333333333333333
getString,SIMPLE_NAME, line no: 107,"rint",STRING_LITERAL, line no: 470, 0.3333333333333333, 1.0, 1.0, 0.3333333333333333
fp.getString(),METHOD_INVOCATION, line no: 107,new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107, 0.32748538011695905, 0.8888888888888888, 1.0, 0.3684210526315789
getString,SIMPLE_NAME, line no: 107,vals.toString(doc),METHOD_INVOCATION, line no: 1072, 0.3111111111111111, 0.8, 1.0, 0.3888888888888889
getString,SIMPLE_NAME, line no: 107,"testfunc",STRING_LITERAL, line no: 90, 0.3, 1.0, 1.0, 0.3
getString,SIMPLE_NAME, line no: 107,tinfo.val,QUALIFIED_NAME, line no: 548, 0.3, 0.9, 1.0, 0.3333333333333333
getString,SIMPLE_NAME, line no: 107,aVals.toString(doc),METHOD_INVOCATION, line no: 1121, 0.29473684210526313, 0.8, 1.0, 0.3684210526315789
getString,SIMPLE_NAME, line no: 107,bVals.toString(doc),METHOD_INVOCATION, line no: 1121, 0.29473684210526313, 0.8, 1.0, 0.3684210526315789
getString,SIMPLE_NAME, line no: 107,description,SIMPLE_NAME, line no: 951, 0.29090909090909095, 0.1, 1.0, 0.36363636363636365
fp.getString(),METHOD_INVOCATION, line no: 107,parseArg,SIMPLE_NAME, line no: 256, 0.2857142857142857, 0.7777777777777778, 1.0, 0.2857142857142857
fp.getString(),METHOD_INVOCATION, line no: 107,fp.parseInt(),METHOD_INVOCATION, line no: 343, 0.2777777777777778, 0.5555555555555556, 1.0, 0.5
fp.getString(),METHOD_INVOCATION, line no: 107,parseTerm(fp),METHOD_INVOCATION, line no: 547, 0.2777777777777778, 0.7777777777777778, 1.0, 0.35714285714285715
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,fp.getReq().getSchema(),METHOD_INVOCATION, line no: 357, 0.2532894736842105, 0.625, 1.0, 0.2894736842105263
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,getValueSource(fp second),METHOD_INVOCATION, line no: 866, 0.25, 1.0, 0.5, 0.5
getString,SIMPLE_NAME, line no: 107,tinfo.field,QUALIFIED_NAME, line no: 548, 0.24545454545454545, 0.9, 1.0, 0.2727272727272727
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,getValueSource(fp first),METHOD_INVOCATION, line no: 863, 0.23684210526315788, 1.0, 0.5, 0.47368421052631576
getString,SIMPLE_NAME, line no: 107,fp.parseArg(),METHOD_INVOCATION, line no: 256, 0.23076923076923078, 0.8, 1.0, 0.23076923076923078
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     return new LiteralValueSource(fp.getString());   } } ,CLASS_INSTANCE_CREATION, line no: 104, 0.23030303030303031, 1.0, 1.0, 0.23030303030303031
fp.getString(),METHOD_INVOCATION, line no: 107,description,SIMPLE_NAME, line no: 951, 0.2222222222222222, 0.1111111111111111, 1.0, 0.2857142857142857
getString,SIMPLE_NAME, line no: 107,"literal",STRING_LITERAL, line no: 104, 0.2222222222222222, 1.0, 1.0, 0.2222222222222222
getString,SIMPLE_NAME, line no: 107,"linear",STRING_LITERAL, line no: 125, 0.2222222222222222, 1.0, 1.0, 0.2222222222222222
getString,SIMPLE_NAME, line no: 107,"recip",STRING_LITERAL, line no: 134, 0.2222222222222222, 1.0, 1.0, 0.2222222222222222
getString,SIMPLE_NAME, line no: 107,"query",STRING_LITERAL, line no: 232, 0.2222222222222222, 1.0, 1.0, 0.2222222222222222
getString,SIMPLE_NAME, line no: 107,"joindf",STRING_LITERAL, line no: 253, 0.2222222222222222, 1.0, 1.0, 0.2222222222222222
getString,SIMPLE_NAME, line no: 107,"hsin",STRING_LITERAL, line no: 264, 0.2222222222222222, 1.0, 1.0, 0.2222222222222222
getString,SIMPLE_NAME, line no: 107,"geohash",STRING_LITERAL, line no: 317, 0.2222222222222222, 1.0, 1.0, 0.2222222222222222
getString,SIMPLE_NAME, line no: 107,"deg",STRING_LITERAL, line no: 368, 0.2222222222222222, 1.0, 1.0, 0.2222222222222222
getString,SIMPLE_NAME, line no: 107,"sin",STRING_LITERAL, line no: 404, 0.2222222222222222, 1.0, 1.0, 0.2222222222222222
getString,SIMPLE_NAME, line no: 107,"tan",STRING_LITERAL, line no: 416, 0.2222222222222222, 1.0, 1.0, 0.2222222222222222
getString,SIMPLE_NAME, line no: 107,"asin",STRING_LITERAL, line no: 422, 0.2222222222222222, 1.0, 1.0, 0.2222222222222222
getString,SIMPLE_NAME, line no: 107,"atan",STRING_LITERAL, line no: 434, 0.2222222222222222, 1.0, 1.0, 0.2222222222222222
getString,SIMPLE_NAME, line no: 107,"sinh",STRING_LITERAL, line no: 440, 0.2222222222222222, 1.0, 1.0, 0.2222222222222222
getString,SIMPLE_NAME, line no: 107,"tanh",STRING_LITERAL, line no: 452, 0.2222222222222222, 1.0, 1.0, 0.2222222222222222
getString,SIMPLE_NAME, line no: 107,"ceil",STRING_LITERAL, line no: 458, 0.2222222222222222, 1.0, 1.0, 0.2222222222222222
getString,SIMPLE_NAME, line no: 107,"atan2",STRING_LITERAL, line no: 488, 0.2222222222222222, 1.0, 1.0, 0.2222222222222222
getString,SIMPLE_NAME, line no: 107,"min",STRING_LITERAL, line no: 501, 0.2222222222222222, 1.0, 1.0, 0.2222222222222222
getString,SIMPLE_NAME, line no: 107,"sqedist",STRING_LITERAL, line no: 508, 0.2222222222222222, 1.0, 1.0, 0.2222222222222222
getString,SIMPLE_NAME, line no: 107,"ttf",STRING_LITERAL, line no: 559, 0.2222222222222222, 1.0, 1.0, 0.2222222222222222
getString,SIMPLE_NAME, line no: 107,"sttf",STRING_LITERAL, line no: 568, 0.2222222222222222, 1.0, 1.0, 0.2222222222222222
getString,SIMPLE_NAME, line no: 107,"true",STRING_LITERAL, line no: 616, 0.2222222222222222, 1.0, 1.0, 0.2222222222222222
getString,SIMPLE_NAME, line no: 107,"exists",STRING_LITERAL, line no: 630, 0.2222222222222222, 1.0, 1.0, 0.2222222222222222
getString,SIMPLE_NAME, line no: 107,second,SIMPLE_NAME, line no: 859, 0.2222222222222222, 1.0, 1.0, 0.2222222222222222
fp.getString(),METHOD_INVOCATION, line no: 107,"testfunc",STRING_LITERAL, line no: 90, 0.21428571428571427, 1.0, 1.0, 0.21428571428571427
fp.getString(),METHOD_INVOCATION, line no: 107,"vector",STRING_LITERAL, line no: 226, 0.21428571428571427, 1.0, 1.0, 0.21428571428571427
fp.getString(),METHOD_INVOCATION, line no: 107,"geodist",STRING_LITERAL, line no: 262, 0.21428571428571427, 1.0, 1.0, 0.21428571428571427
fp.getString(),METHOD_INVOCATION, line no: 107,"ghhsin",STRING_LITERAL, line no: 305, 0.21428571428571427, 1.0, 1.0, 0.21428571428571427
fp.getString(),METHOD_INVOCATION, line no: 107,"strdist",STRING_LITERAL, line no: 327, 0.21428571428571427, 1.0, 1.0, 0.21428571428571427
fp.getString(),METHOD_INVOCATION, line no: 107,"rint",STRING_LITERAL, line no: 470, 0.21428571428571427, 1.0, 1.0, 0.21428571428571427
getString,SIMPLE_NAME, line no: 107,a.description(),METHOD_INVOCATION, line no: 1107, 0.21333333333333335, 0.8, 1.0, 0.26666666666666666
getString,SIMPLE_NAME, line no: 107,b.description(),METHOD_INVOCATION, line no: 1107, 0.21333333333333335, 0.8, 1.0, 0.26666666666666666
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,fp.parseArg(),METHOD_INVOCATION, line no: 256, 0.21052631578947367, 0.75, 1.0, 0.21052631578947367
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,fp.hasMoreArguments(),METHOD_INVOCATION, line no: 168, 0.20723684210526314, 0.75, 1.0, 0.23684210526315788
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,f.getType().getValueSource(f fp),METHOD_INVOCATION, line no: 358, 0.20723684210526314, 0.75, 0.5, 0.47368421052631576
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("literal" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     return new LiteralValueSource(fp.getString());   } } ),METHOD_INVOCATION, line no: 104, 0.20430107526881722, 1.0, 1.0, 0.20430107526881722
fp.getString(),METHOD_INVOCATION, line no: 107,Boolean.parseBoolean(fp.parseArg()),METHOD_INVOCATION, line no: 270, 0.20317460317460315, 0.8888888888888888, 1.0, 0.22857142857142856
fp.getString(),METHOD_INVOCATION, line no: 107,new Function(fp.parseValueSource()),CLASS_INSTANCE_CREATION, line no: 1049, 0.20317460317460315, 0.8888888888888888, 1.0, 0.22857142857142856
fp.getString(),METHOD_INVOCATION, line no: 107,"totaltermfreq",STRING_LITERAL, line no: 552, 0.2, 1.0, 1.0, 0.2
getString,SIMPLE_NAME, line no: 107,"totaltermfreq",STRING_LITERAL, line no: 552, 0.2, 1.0, 1.0, 0.2
getString,SIMPLE_NAME, line no: 107,"termfreq",STRING_LITERAL, line no: 578, 0.2, 1.0, 1.0, 0.2
getString,SIMPLE_NAME, line no: 107,"edit",STRING_LITERAL, line no: 338, 0.19999999999999998, 0.9, 1.0, 0.2222222222222222
getString,SIMPLE_NAME, line no: 107,"ngram",STRING_LITERAL, line no: 340, 0.19999999999999998, 0.9, 1.0, 0.2222222222222222
getString,SIMPLE_NAME, line no: 107,arg,SIMPLE_NAME, line no: 839, 0.19999999999999998, 0.1, 1.0, 0.2222222222222222
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,fp.hasMoreArguments() ? fp.parseFloat() : null,CONDITIONAL_EXPRESSION, line no: 168, 0.19565217391304346, 0.75, 1.0, 0.2608695652173913
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     return new MaxDocValueSource();   } } ,CLASS_INSTANCE_CREATION, line no: 602, 0.19333333333333333, 1.0, 1.0, 0.19333333333333333
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     return new NumDocsValueSource();   } } ,CLASS_INSTANCE_CREATION, line no: 609, 0.19205298013245034, 1.0, 1.0, 0.19205298013245034
fp.getString(),METHOD_INVOCATION, line no: 107,new DefFunction(fp.parseValueSourceList()),CLASS_INSTANCE_CREATION, line no: 739, 0.19047619047619047, 0.8888888888888888, 1.0, 0.21428571428571427
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     return new BoolConstValueSource(true);   } } ,CLASS_INSTANCE_CREATION, line no: 616, 0.18471337579617833, 1.0, 1.0, 0.18471337579617833
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,fp.parseNestedQuery(),METHOD_INVOCATION, line no: 236, 0.18421052631578946, 0.75, 1.0, 0.21052631578947367
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,fp.getReq(),METHOD_INVOCATION, line no: 357, 0.18421052631578946, 0.625, 1.0, 0.21052631578947367
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     return new BoolConstValueSource(false);   } } ,CLASS_INSTANCE_CREATION, line no: 623, 0.18354430379746836, 1.0, 1.0, 0.18354430379746836
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     return new DefFunction(fp.parseValueSourceList());   } } ,CLASS_INSTANCE_CREATION, line no: 736, 0.1834319526627219, 1.0, 1.0, 0.1834319526627219
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     return new VectorValueSource(fp.parseValueSourceList());   } } ,CLASS_INSTANCE_CREATION, line no: 226, 0.17714285714285713, 1.0, 1.0, 0.17714285714285713
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("maxdoc" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     return new MaxDocValueSource();   } } ),METHOD_INVOCATION, line no: 602, 0.17647058823529413, 1.0, 1.0, 0.17647058823529413
fp.getString(),METHOD_INVOCATION, line no: 107,getDate(fp first),METHOD_INVOCATION, line no: 862, 0.17647058823529413, 1.0, 0.5, 0.35294117647058826
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("numdocs" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     return new NumDocsValueSource();   } } ),METHOD_INVOCATION, line no: 609, 0.1744186046511628, 1.0, 1.0, 0.1744186046511628
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("true" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     return new BoolConstValueSource(true);   } } ),METHOD_INVOCATION, line no: 616, 0.17142857142857143, 1.0, 1.0, 0.17142857142857143
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("false" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     return new BoolConstValueSource(false);   } } ),METHOD_INVOCATION, line no: 623, 0.1694915254237288, 1.0, 1.0, 0.1694915254237288
getString,SIMPLE_NAME, line no: 107,name() + '(' + vals.toString(doc)+ ')',INFIX_EXPRESSION, line no: 1072, 0.16842105263157894, 0.8, 1.0, 0.21052631578947367
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("def" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     return new DefFunction(fp.parseValueSourceList());   } } ),METHOD_INVOCATION, line no: 736, 0.16666666666666666, 1.0, 1.0, 0.16666666666666666
fp.getString(),METHOD_INVOCATION, line no: 107,new VectorValueSource(fp.parseValueSourceList()),CLASS_INSTANCE_CREATION, line no: 229, 0.16666666666666666, 0.8888888888888888, 1.0, 0.1875
fp.getString(),METHOD_INVOCATION, line no: 107,"sumtotaltermfreq",STRING_LITERAL, line no: 561, 0.16666666666666666, 1.0, 1.0, 0.16666666666666666
fp.getString(),METHOD_INVOCATION, line no: 107,getDate(fp second),METHOD_INVOCATION, line no: 865, 0.16666666666666666, 1.0, 0.5, 0.3333333333333333
getString,SIMPLE_NAME, line no: 107,"sumtotaltermfreq",STRING_LITERAL, line no: 561, 0.16666666666666666, 1.0, 1.0, 0.16666666666666666
getString,SIMPLE_NAME, line no: 107,term.text(),METHOD_INVOCATION, line no: 762, 0.1636363636363636, 0.6, 1.0, 0.2727272727272727
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,fp.parseDouble(),METHOD_INVOCATION, line no: 268, 0.1611842105263158, 0.875, 1.0, 0.18421052631578946
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("vector" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     return new VectorValueSource(fp.parseValueSourceList());   } } ),METHOD_INVOCATION, line no: 226, 0.15897435897435896, 1.0, 1.0, 0.15897435897435896
fp.getString(),METHOD_INVOCATION, line no: 107,"testfunc(",STRING_LITERAL, line no: 1246, 0.15873015873015872, 0.5555555555555556, 1.0, 0.2857142857142857
getString,SIMPLE_NAME, line no: 107,tinfo.val=fp.parseArg(),ASSIGNMENT, line no: 749, 0.1565217391304348, 0.9, 1.0, 0.17391304347826086
getString,SIMPLE_NAME, line no: 107,description(),METHOD_INVOCATION, line no: 980, 0.15384615384615385, 0.5, 1.0, 0.3076923076923077
fp.getString(),METHOD_INVOCATION, line no: 107,fp.hasMoreArguments() ? fp.parseFloat() : null,CONDITIONAL_EXPRESSION, line no: 168, 0.15217391304347827, 0.7777777777777778, 1.0, 0.1956521739130435
getString,SIMPLE_NAME, line no: 107,tinfo.indexedField,QUALIFIED_NAME, line no: 548, 0.15, 0.9, 1.0, 0.16666666666666666
getString,SIMPLE_NAME, line no: 107,indexedField,SIMPLE_NAME, line no: 548, 0.15, 0.9, 1.0, 0.16666666666666666
getString,SIMPLE_NAME, line no: 107,term.field(),METHOD_INVOCATION, line no: 761, 0.15, 0.6, 1.0, 0.25
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,d2 == null ? getValueSource(fp second) : null,CONDITIONAL_EXPRESSION, line no: 866, 0.14814814814814814, 1.0, 0.3333333333333333, 0.4444444444444444
fp.getString(),METHOD_INVOCATION, line no: 107,getValueSource(fp first),METHOD_INVOCATION, line no: 863, 0.14583333333333334, 1.0, 0.5, 0.2916666666666667
getString,SIMPLE_NAME, line no: 107," request=",STRING_LITERAL, line no: 1229, 0.14545454545454548, 0.8, 1.0, 0.18181818181818182
getString,SIMPLE_NAME, line no: 107,tinfo.field=fp.parseArg(),ASSIGNMENT, line no: 748, 0.14400000000000002, 0.9, 1.0, 0.16
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,d1 == null ? getValueSource(fp first) : null,CONDITIONAL_EXPRESSION, line no: 863, 0.14393939393939392, 1.0, 0.3333333333333333, 0.4318181818181818
fp.getString(),METHOD_INVOCATION, line no: 107,"literal",STRING_LITERAL, line no: 104, 0.14285714285714285, 1.0, 1.0, 0.14285714285714285
fp.getString(),METHOD_INVOCATION, line no: 107,"linear",STRING_LITERAL, line no: 125, 0.14285714285714285, 1.0, 1.0, 0.14285714285714285
fp.getString(),METHOD_INVOCATION, line no: 107,"recip",STRING_LITERAL, line no: 134, 0.14285714285714285, 1.0, 1.0, 0.14285714285714285
fp.getString(),METHOD_INVOCATION, line no: 107,"product",STRING_LITERAL, line no: 199, 0.14285714285714285, 1.0, 1.0, 0.14285714285714285
fp.getString(),METHOD_INVOCATION, line no: 107,"query",STRING_LITERAL, line no: 232, 0.14285714285714285, 1.0, 1.0, 0.14285714285714285
fp.getString(),METHOD_INVOCATION, line no: 107,"joindf",STRING_LITERAL, line no: 253, 0.14285714285714285, 1.0, 1.0, 0.14285714285714285
fp.getString(),METHOD_INVOCATION, line no: 107,"hsin",STRING_LITERAL, line no: 264, 0.14285714285714285, 1.0, 1.0, 0.14285714285714285
fp.getString(),METHOD_INVOCATION, line no: 107,"geohash",STRING_LITERAL, line no: 317, 0.14285714285714285, 1.0, 1.0, 0.14285714285714285
fp.getString(),METHOD_INVOCATION, line no: 107,"field",STRING_LITERAL, line no: 352, 0.14285714285714285, 1.0, 1.0, 0.14285714285714285
fp.getString(),METHOD_INVOCATION, line no: 107,"deg",STRING_LITERAL, line no: 368, 0.14285714285714285, 1.0, 1.0, 0.14285714285714285
fp.getString(),METHOD_INVOCATION, line no: 107,"sin",STRING_LITERAL, line no: 404, 0.14285714285714285, 1.0, 1.0, 0.14285714285714285
fp.getString(),METHOD_INVOCATION, line no: 107,"tan",STRING_LITERAL, line no: 416, 0.14285714285714285, 1.0, 1.0, 0.14285714285714285
fp.getString(),METHOD_INVOCATION, line no: 107,"asin",STRING_LITERAL, line no: 422, 0.14285714285714285, 1.0, 1.0, 0.14285714285714285
fp.getString(),METHOD_INVOCATION, line no: 107,"atan",STRING_LITERAL, line no: 434, 0.14285714285714285, 1.0, 1.0, 0.14285714285714285
fp.getString(),METHOD_INVOCATION, line no: 107,"sinh",STRING_LITERAL, line no: 440, 0.14285714285714285, 1.0, 1.0, 0.14285714285714285
fp.getString(),METHOD_INVOCATION, line no: 107,"tanh",STRING_LITERAL, line no: 452, 0.14285714285714285, 1.0, 1.0, 0.14285714285714285
fp.getString(),METHOD_INVOCATION, line no: 107,"ceil",STRING_LITERAL, line no: 458, 0.14285714285714285, 1.0, 1.0, 0.14285714285714285
fp.getString(),METHOD_INVOCATION, line no: 107,"floor",STRING_LITERAL, line no: 464, 0.14285714285714285, 1.0, 1.0, 0.14285714285714285
fp.getString(),METHOD_INVOCATION, line no: 107,"hypot",STRING_LITERAL, line no: 482, 0.14285714285714285, 1.0, 1.0, 0.14285714285714285
fp.getString(),METHOD_INVOCATION, line no: 107,"atan2",STRING_LITERAL, line no: 488, 0.14285714285714285, 1.0, 1.0, 0.14285714285714285
fp.getString(),METHOD_INVOCATION, line no: 107,"min",STRING_LITERAL, line no: 501, 0.14285714285714285, 1.0, 1.0, 0.14285714285714285
fp.getString(),METHOD_INVOCATION, line no: 107,"sqedist",STRING_LITERAL, line no: 508, 0.14285714285714285, 1.0, 1.0, 0.14285714285714285
fp.getString(),METHOD_INVOCATION, line no: 107,"pi",STRING_LITERAL, line no: 530, 0.14285714285714285, 1.0, 1.0, 0.14285714285714285
fp.getString(),METHOD_INVOCATION, line no: 107,"docfreq",STRING_LITERAL, line no: 544, 0.14285714285714285, 1.0, 1.0, 0.14285714285714285
fp.getString(),METHOD_INVOCATION, line no: 107,"ttf",STRING_LITERAL, line no: 559, 0.14285714285714285, 1.0, 1.0, 0.14285714285714285
fp.getString(),METHOD_INVOCATION, line no: 107,"sttf",STRING_LITERAL, line no: 568, 0.14285714285714285, 1.0, 1.0, 0.14285714285714285
fp.getString(),METHOD_INVOCATION, line no: 107,"termfreq",STRING_LITERAL, line no: 578, 0.14285714285714285, 1.0, 1.0, 0.14285714285714285
fp.getString(),METHOD_INVOCATION, line no: 107,"true",STRING_LITERAL, line no: 616, 0.14285714285714285, 1.0, 1.0, 0.14285714285714285
fp.getString(),METHOD_INVOCATION, line no: 107,"false",STRING_LITERAL, line no: 623, 0.14285714285714285, 1.0, 1.0, 0.14285714285714285
fp.getString(),METHOD_INVOCATION, line no: 107,"exists",STRING_LITERAL, line no: 630, 0.14285714285714285, 1.0, 1.0, 0.14285714285714285
fp.getString(),METHOD_INVOCATION, line no: 107,first,SIMPLE_NAME, line no: 858, 0.14285714285714285, 1.0, 1.0, 0.14285714285714285
fp.getString(),METHOD_INVOCATION, line no: 107,second,SIMPLE_NAME, line no: 859, 0.14285714285714285, 1.0, 1.0, 0.14285714285714285
fp.getString(),METHOD_INVOCATION, line no: 107,new Function(fp.parseValueSource() fp.parseValueSource()),CLASS_INSTANCE_CREATION, line no: 1089, 0.14035087719298245, 1.0, 1.0, 0.14035087719298245
fp.getString(),METHOD_INVOCATION, line no: 107,getValueSource(fp second),METHOD_INVOCATION, line no: 866, 0.14, 1.0, 0.5, 0.28
fp.getString(),METHOD_INVOCATION, line no: 107,f.getType().getValueSource(f fp),METHOD_INVOCATION, line no: 358, 0.1388888888888889, 0.7777777777777778, 0.5, 0.3125
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,fp.parseFloat(),METHOD_INVOCATION, line no: 129, 0.1381578947368421, 0.75, 1.0, 0.18421052631578946
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,parseTerm(fp),METHOD_INVOCATION, line no: 547, 0.1381578947368421, 0.75, 1.0, 0.18421052631578946
getString,SIMPLE_NAME, line no: 107,"testfunc(",STRING_LITERAL, line no: 1246, 0.13636363636363635, 0.5, 1.0, 0.2727272727272727
getString,SIMPLE_NAME, line no: 107,dest,SIMPLE_NAME, line no: 85, 0.13333333333333333, 0.1, 1.0, 0.2222222222222222
getString,SIMPLE_NAME, line no: 107,text,SIMPLE_NAME, line no: 762, 0.13333333333333333, 0.6, 1.0, 0.2222222222222222
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,getDate(fp second),METHOD_INVOCATION, line no: 865, 0.13157894736842105, 1.0, 0.5, 0.2631578947368421
fp.getString(),METHOD_INVOCATION, line no: 107,field,SIMPLE_NAME, line no: 100, 0.12698412698412698, 0.6666666666666666, 1.0, 0.14285714285714285
fp.getString(),METHOD_INVOCATION, line no: 107,"edit",STRING_LITERAL, line no: 338, 0.12698412698412698, 0.8888888888888888, 1.0, 0.14285714285714285
fp.getString(),METHOD_INVOCATION, line no: 107,"ngram",STRING_LITERAL, line no: 340, 0.12698412698412698, 0.8888888888888888, 1.0, 0.14285714285714285
fp.getString(),METHOD_INVOCATION, line no: 107,indexedField,SIMPLE_NAME, line no: 548, 0.12698412698412698, 0.8888888888888888, 1.0, 0.14285714285714285
fp.getString(),METHOD_INVOCATION, line no: 107,arg,SIMPLE_NAME, line no: 839, 0.12698412698412698, 0.1111111111111111, 1.0, 0.14285714285714285
getString,SIMPLE_NAME, line no: 107,indexedVal,SIMPLE_NAME, line no: 757, 0.12, 0.6, 1.0, 0.2
getString,SIMPLE_NAME, line no: 107,source.description(),METHOD_INVOCATION, line no: 1246, 0.12, 0.6, 1.0, 0.2
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,fp.parseId(),METHOD_INVOCATION, line no: 100, 0.11842105263157894, 0.75, 1.0, 0.15789473684210525
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,getDate(fp first),METHOD_INVOCATION, line no: 862, 0.11842105263157894, 1.0, 0.5, 0.23684210526315788
fp.getString(),METHOD_INVOCATION, line no: 107,parseId,SIMPLE_NAME, line no: 100, 0.1111111111111111, 0.7777777777777778, 1.0, 0.14285714285714285
fp.getString(),METHOD_INVOCATION, line no: 107," request=",STRING_LITERAL, line no: 1229, 0.1111111111111111, 0.7777777777777778, 1.0, 0.14285714285714285
getString,SIMPLE_NAME, line no: 107,name,SIMPLE_NAME, line no: 74, 0.1111111111111111, 0.1, 1.0, 0.1111111111111111
getString,SIMPLE_NAME, line no: 107,"ord",STRING_LITERAL, line no: 97, 0.1111111111111111, 1.0, 1.0, 0.1111111111111111
getString,SIMPLE_NAME, line no: 107,"rord",STRING_LITERAL, line no: 110, 0.1111111111111111, 1.0, 1.0, 0.1111111111111111
getString,SIMPLE_NAME, line no: 107,"top",STRING_LITERAL, line no: 117, 0.1111111111111111, 1.0, 1.0, 0.1111111111111111
getString,SIMPLE_NAME, line no: 107,"scale",STRING_LITERAL, line no: 144, 0.1111111111111111, 1.0, 1.0, 0.1111111111111111
getString,SIMPLE_NAME, line no: 107,"div",STRING_LITERAL, line no: 153, 0.1111111111111111, 1.0, 1.0, 0.1111111111111111
getString,SIMPLE_NAME, line no: 107,"product",STRING_LITERAL, line no: 199, 0.1111111111111111, 1.0, 1.0, 0.1111111111111111
getString,SIMPLE_NAME, line no: 107,"boost",STRING_LITERAL, line no: 244, 0.1111111111111111, 1.0, 1.0, 0.1111111111111111
getString,SIMPLE_NAME, line no: 107,"field",STRING_LITERAL, line no: 352, 0.1111111111111111, 1.0, 1.0, 0.1111111111111111
getString,SIMPLE_NAME, line no: 107,"rad",STRING_LITERAL, line no: 362, 0.1111111111111111, 1.0, 1.0, 0.1111111111111111
getString,SIMPLE_NAME, line no: 107,"sqrt",STRING_LITERAL, line no: 374, 0.1111111111111111, 1.0, 1.0, 0.1111111111111111
getString,SIMPLE_NAME, line no: 107,"cbrt",STRING_LITERAL, line no: 380, 0.1111111111111111, 1.0, 1.0, 0.1111111111111111
getString,SIMPLE_NAME, line no: 107,"log",STRING_LITERAL, line no: 386, 0.1111111111111111, 1.0, 1.0, 0.1111111111111111
getString,SIMPLE_NAME, line no: 107,"ln",STRING_LITERAL, line no: 392, 0.1111111111111111, 1.0, 1.0, 0.1111111111111111
getString,SIMPLE_NAME, line no: 107,"exp",STRING_LITERAL, line no: 398, 0.1111111111111111, 1.0, 1.0, 0.1111111111111111
getString,SIMPLE_NAME, line no: 107,"floor",STRING_LITERAL, line no: 464, 0.1111111111111111, 1.0, 1.0, 0.1111111111111111
getString,SIMPLE_NAME, line no: 107,"hypot",STRING_LITERAL, line no: 482, 0.1111111111111111, 1.0, 1.0, 0.1111111111111111
getString,SIMPLE_NAME, line no: 107,"dist",STRING_LITERAL, line no: 518, 0.1111111111111111, 1.0, 1.0, 0.1111111111111111
getString,SIMPLE_NAME, line no: 107,"pi",STRING_LITERAL, line no: 530, 0.1111111111111111, 1.0, 1.0, 0.1111111111111111
getString,SIMPLE_NAME, line no: 107,"e",STRING_LITERAL, line no: 536, 0.1111111111111111, 1.0, 1.0, 0.1111111111111111
getString,SIMPLE_NAME, line no: 107,"docfreq",STRING_LITERAL, line no: 544, 0.1111111111111111, 1.0, 1.0, 0.1111111111111111
getString,SIMPLE_NAME, line no: 107,"idf",STRING_LITERAL, line no: 570, 0.1111111111111111, 1.0, 1.0, 0.1111111111111111
getString,SIMPLE_NAME, line no: 107,"tf",STRING_LITERAL, line no: 586, 0.1111111111111111, 1.0, 1.0, 0.1111111111111111
getString,SIMPLE_NAME, line no: 107,"norm",STRING_LITERAL, line no: 594, 0.1111111111111111, 1.0, 1.0, 0.1111111111111111
getString,SIMPLE_NAME, line no: 107,"numdocs",STRING_LITERAL, line no: 609, 0.1111111111111111, 1.0, 1.0, 0.1111111111111111
getString,SIMPLE_NAME, line no: 107,"false",STRING_LITERAL, line no: 623, 0.1111111111111111, 1.0, 1.0, 0.1111111111111111
getString,SIMPLE_NAME, line no: 107,"not",STRING_LITERAL, line no: 647, 0.1111111111111111, 1.0, 1.0, 0.1111111111111111
getString,SIMPLE_NAME, line no: 107,"and",STRING_LITERAL, line no: 665, 0.1111111111111111, 1.0, 1.0, 0.1111111111111111
getString,SIMPLE_NAME, line no: 107,"or",STRING_LITERAL, line no: 684, 0.1111111111111111, 1.0, 1.0, 0.1111111111111111
getString,SIMPLE_NAME, line no: 107,"xor",STRING_LITERAL, line no: 703, 0.1111111111111111, 1.0, 1.0, 0.1111111111111111
getString,SIMPLE_NAME, line no: 107,"if",STRING_LITERAL, line no: 725, 0.1111111111111111, 1.0, 1.0, 0.1111111111111111
getString,SIMPLE_NAME, line no: 107,"def",STRING_LITERAL, line no: 736, 0.1111111111111111, 1.0, 1.0, 0.1111111111111111
getString,SIMPLE_NAME, line no: 107,first,SIMPLE_NAME, line no: 858, 0.1111111111111111, 1.0, 1.0, 0.1111111111111111
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,fp.getReq().getSchema().getField(fieldName),METHOD_INVOCATION, line no: 357, 0.10901162790697674, 0.625, 0.5, 0.3488372093023256
fp.getString(),METHOD_INVOCATION, line no: 107,tinfo.val=fp.parseArg(),ASSIGNMENT, line no: 749, 0.10305958132045087, 0.8888888888888888, 0.3333333333333333, 0.34782608695652173
getString,SIMPLE_NAME, line no: 107,tinfo.indexedField=tinfo.field=fp.parseArg(),ASSIGNMENT, line no: 748, 0.10227272727272727, 0.9, 1.0, 0.11363636363636363
getString,SIMPLE_NAME, line no: 107,field,SIMPLE_NAME, line no: 100, 0.09999999999999999, 0.7, 1.0, 0.1111111111111111
getString,SIMPLE_NAME, line no: 107,distClass,SIMPLE_NAME, line no: 333, 0.09999999999999999, 0.9, 1.0, 0.1111111111111111
getString,SIMPLE_NAME, line no: 107,DoubleParser.this.name(),METHOD_INVOCATION, line no: 1059, 0.09999999999999999, 0.6, 1.0, 0.16666666666666666
getString,SIMPLE_NAME, line no: 107,name() + '(' + aVals.toString(doc)+ ' '+ bVals.toString(doc)+ ')',INFIX_EXPRESSION, line no: 1121, 0.09846153846153848, 0.8, 1.0, 0.12307692307692308
fp.getString(),METHOD_INVOCATION, line no: 107,fieldName,SIMPLE_NAME, line no: 356, 0.09523809523809523, 0.6666666666666666, 1.0, 0.14285714285714285
fp.getString(),METHOD_INVOCATION, line no: 107,tinfo.field=fp.parseArg(),ASSIGNMENT, line no: 748, 0.09481481481481481, 0.8888888888888888, 0.3333333333333333, 0.32
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,fp.parseInt(),METHOD_INVOCATION, line no: 343, 0.09210526315789473, 0.5, 1.0, 0.18421052631578946
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,tinfo.field=fp.parseArg(),ASSIGNMENT, line no: 748, 0.09210526315789472, 0.875, 0.3333333333333333, 0.3157894736842105
getString,SIMPLE_NAME, line no: 107,first="NOW",ASSIGNMENT, line no: 860, 0.09090909090909091, 1.0, 1.0, 0.09090909090909091
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     String field=fp.parseId();     return new OrdFieldSource(field);   } } ,CLASS_INSTANCE_CREATION, line no: 97, 0.09016393442622951, 1.0, 0.5, 0.18032786885245902
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     return new DoubleConstValueSource(Math.E);   } } ,CLASS_INSTANCE_CREATION, line no: 536, 0.09006211180124224, 1.0, 0.5, 0.18012422360248448
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     return new DoubleConstValueSource(Math.PI);   } } ,CLASS_INSTANCE_CREATION, line no: 530, 0.08950617283950617, 1.0, 0.5, 0.17901234567901234
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     String field=fp.parseArg();     return new NormValueSource(field);   } } ,CLASS_INSTANCE_CREATION, line no: 594, 0.0891891891891892, 1.0, 0.5, 0.1783783783783784
getString,SIMPLE_NAME, line no: 107,p.name(),METHOD_INVOCATION, line no: 82, 0.08888888888888889, 0.8, 1.0, 0.1111111111111111
getString,SIMPLE_NAME, line no: 107,parseId,SIMPLE_NAME, line no: 100, 0.08888888888888889, 0.8, 1.0, 0.1111111111111111
getString,SIMPLE_NAME, line no: 107,name(),METHOD_INVOCATION, line no: 1072, 0.08888888888888889, 0.8, 1.0, 0.1111111111111111
getString,SIMPLE_NAME, line no: 107,"null",STRING_LITERAL, line no: 1229, 0.08888888888888889, 0.8, 1.0, 0.1111111111111111
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,fp.getReq().getSchema().getFieldTypeNoEx(tinfo.field),METHOD_INVOCATION, line no: 752, 0.08805031446540879, 0.875, 0.3333333333333333, 0.3018867924528302
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     String field=fp.parseId();     return new ReverseOrdFieldSource(field);   } } ,CLASS_INSTANCE_CREATION, line no: 110, 0.0868421052631579, 1.0, 0.5, 0.1736842105263158
fp.getString(),METHOD_INVOCATION, line no: 107,fp.getReq().getSchema().getField(fieldName),METHOD_INVOCATION, line no: 357, 0.08527131782945736, 0.6666666666666666, 0.5, 0.2558139534883721
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("e" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     return new DoubleConstValueSource(Math.E);   } } ),METHOD_INVOCATION, line no: 536, 0.08522727272727272, 1.0, 0.5, 0.17045454545454544
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     return new LiteralValueSource(fp.getString());   } } ,CLASS_INSTANCE_CREATION, line no: 104, 0.08484848484848485, 1.0, 1.0, 0.08484848484848485
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,tinfo.val=fp.parseArg(),ASSIGNMENT, line no: 749, 0.08442982456140351, 0.875, 0.3333333333333333, 0.2894736842105263
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("pi" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     return new DoubleConstValueSource(Math.PI);   } } ),METHOD_INVOCATION, line no: 530, 0.08426966292134831, 1.0, 0.5, 0.16853932584269662
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     String field=fp.parseArg();     return new SumTotalTermFreqValueSource(field);   } } ,CLASS_INSTANCE_CREATION, line no: 561, 0.08375634517766498, 1.0, 0.5, 0.16751269035532995
fp.getString(),METHOD_INVOCATION, line no: 107,"testfunc: unweighted value source detected.  delegate=",STRING_LITERAL, line no: 1229, 0.08333333333333333, 0.7777777777777778, 1.0, 0.10714285714285714
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("ord" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     String field=fp.parseId();     return new OrdFieldSource(field);   } } ),METHOD_INVOCATION, line no: 97, 0.0825, 1.0, 0.5, 0.165
fp.getString(),METHOD_INVOCATION, line no: 107,ngram=fp.parseInt(),ASSIGNMENT, line no: 343, 0.08187134502923976, 0.4444444444444444, 0.5, 0.3684210526315789
getString,SIMPLE_NAME, line no: 107,indexedVal=term.text(),ASSIGNMENT, line no: 762, 0.0818181818181818, 0.6, 1.0, 0.13636363636363635
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("norm" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     String field=fp.parseArg();     return new NormValueSource(field);   } } ),METHOD_INVOCATION, line no: 594, 0.0812807881773399, 1.0, 0.5, 0.1625615763546798
fp.getString(),METHOD_INVOCATION, line no: 107,dest,SIMPLE_NAME, line no: 85, 0.07936507936507936, 0.1111111111111111, 1.0, 0.14285714285714285
fp.getString(),METHOD_INVOCATION, line no: 107,indexedVal,SIMPLE_NAME, line no: 757, 0.07936507936507936, 0.5555555555555556, 1.0, 0.14285714285714285
fp.getString(),METHOD_INVOCATION, line no: 107,text,SIMPLE_NAME, line no: 762, 0.07936507936507936, 0.5555555555555556, 1.0, 0.14285714285714285
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("rord" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     String field=fp.parseId();     return new ReverseOrdFieldSource(field);   } } ),METHOD_INVOCATION, line no: 110, 0.07932692307692307, 1.0, 0.5, 0.15865384615384615
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource source=fp.parseValueSource();     return source;   } } ,CLASS_INSTANCE_CREATION, line no: 117, 0.0782122905027933, 1.0, 0.5, 0.1564245810055866
getString,SIMPLE_NAME, line no: 107,fieldName,SIMPLE_NAME, line no: 356, 0.07777777777777777, 0.7, 1.0, 0.1111111111111111
getString,SIMPLE_NAME, line no: 107,tinfo.indexedField=term.field(),ASSIGNMENT, line no: 761, 0.07741935483870967, 0.6, 1.0, 0.12903225806451613
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("literal" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     return new LiteralValueSource(fp.getString());   } } ),METHOD_INVOCATION, line no: 104, 0.07526881720430108, 1.0, 1.0, 0.07526881720430108
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     final ValueSource source=fp.parseValueSource();     return new TestValueSource(source);   } } ,CLASS_INSTANCE_CREATION, line no: 90, 0.07524271844660194, 1.0, 0.5, 0.15048543689320387
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,tinfo.indexedField=tinfo.field=fp.parseArg(),ASSIGNMENT, line no: 748, 0.07457386363636363, 0.875, 0.25, 0.3409090909090909
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("top" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource source=fp.parseValueSource();     return source;   } } ),METHOD_INVOCATION, line no: 117, 0.07397959183673469, 1.0, 0.5, 0.14795918367346939
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("sumtotaltermfreq" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     String field=fp.parseArg();     return new SumTotalTermFreqValueSource(field);   } } ),METHOD_INVOCATION, line no: 561, 0.07268722466960352, 1.0, 0.5, 0.14537444933920704
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,defVal=fp.parseFloat(),ASSIGNMENT, line no: 239, 0.07236842105263158, 0.5, 0.5, 0.2894736842105263
getString,SIMPLE_NAME, line no: 107,"testfunc: unweighted value source detected.  delegate=",STRING_LITERAL, line no: 1229, 0.07142857142857144, 0.8, 1.0, 0.08928571428571429
fp.getString(),METHOD_INVOCATION, line no: 107,name,SIMPLE_NAME, line no: 74, 0.07142857142857142, 0.1111111111111111, 1.0, 0.07142857142857142
fp.getString(),METHOD_INVOCATION, line no: 107,"ord",STRING_LITERAL, line no: 97, 0.07142857142857142, 1.0, 1.0, 0.07142857142857142
fp.getString(),METHOD_INVOCATION, line no: 107,"rord",STRING_LITERAL, line no: 110, 0.07142857142857142, 1.0, 1.0, 0.07142857142857142
fp.getString(),METHOD_INVOCATION, line no: 107,"top",STRING_LITERAL, line no: 117, 0.07142857142857142, 1.0, 1.0, 0.07142857142857142
fp.getString(),METHOD_INVOCATION, line no: 107,"scale",STRING_LITERAL, line no: 144, 0.07142857142857142, 1.0, 1.0, 0.07142857142857142
fp.getString(),METHOD_INVOCATION, line no: 107,"div",STRING_LITERAL, line no: 153, 0.07142857142857142, 1.0, 1.0, 0.07142857142857142
fp.getString(),METHOD_INVOCATION, line no: 107,"map",STRING_LITERAL, line no: 161, 0.07142857142857142, 1.0, 1.0, 0.07142857142857142
fp.getString(),METHOD_INVOCATION, line no: 107,"boost",STRING_LITERAL, line no: 244, 0.07142857142857142, 1.0, 1.0, 0.07142857142857142
fp.getString(),METHOD_INVOCATION, line no: 107,f0,SIMPLE_NAME, line no: 256, 0.07142857142857142, 0.7777777777777778, 1.0, 0.07142857142857142
fp.getString(),METHOD_INVOCATION, line no: 107,qf,SIMPLE_NAME, line no: 257, 0.07142857142857142, 0.7777777777777778, 1.0, 0.07142857142857142
fp.getString(),METHOD_INVOCATION, line no: 107,"rad",STRING_LITERAL, line no: 362, 0.07142857142857142, 1.0, 1.0, 0.07142857142857142
fp.getString(),METHOD_INVOCATION, line no: 107,"sqrt",STRING_LITERAL, line no: 374, 0.07142857142857142, 1.0, 1.0, 0.07142857142857142
fp.getString(),METHOD_INVOCATION, line no: 107,"cbrt",STRING_LITERAL, line no: 380, 0.07142857142857142, 1.0, 1.0, 0.07142857142857142
fp.getString(),METHOD_INVOCATION, line no: 107,"log",STRING_LITERAL, line no: 386, 0.07142857142857142, 1.0, 1.0, 0.07142857142857142
fp.getString(),METHOD_INVOCATION, line no: 107,"ln",STRING_LITERAL, line no: 392, 0.07142857142857142, 1.0, 1.0, 0.07142857142857142
fp.getString(),METHOD_INVOCATION, line no: 107,"exp",STRING_LITERAL, line no: 398, 0.07142857142857142, 1.0, 1.0, 0.07142857142857142
fp.getString(),METHOD_INVOCATION, line no: 107,"pow",STRING_LITERAL, line no: 476, 0.07142857142857142, 1.0, 1.0, 0.07142857142857142
fp.getString(),METHOD_INVOCATION, line no: 107,"dist",STRING_LITERAL, line no: 518, 0.07142857142857142, 1.0, 1.0, 0.07142857142857142
fp.getString(),METHOD_INVOCATION, line no: 107,"e",STRING_LITERAL, line no: 536, 0.07142857142857142, 1.0, 1.0, 0.07142857142857142
fp.getString(),METHOD_INVOCATION, line no: 107,"idf",STRING_LITERAL, line no: 570, 0.07142857142857142, 1.0, 1.0, 0.07142857142857142
fp.getString(),METHOD_INVOCATION, line no: 107,"tf",STRING_LITERAL, line no: 586, 0.07142857142857142, 1.0, 1.0, 0.07142857142857142
fp.getString(),METHOD_INVOCATION, line no: 107,"norm",STRING_LITERAL, line no: 594, 0.07142857142857142, 1.0, 1.0, 0.07142857142857142
fp.getString(),METHOD_INVOCATION, line no: 107,"numdocs",STRING_LITERAL, line no: 609, 0.07142857142857142, 1.0, 1.0, 0.07142857142857142
fp.getString(),METHOD_INVOCATION, line no: 107,"not",STRING_LITERAL, line no: 647, 0.07142857142857142, 1.0, 1.0, 0.07142857142857142
fp.getString(),METHOD_INVOCATION, line no: 107,"and",STRING_LITERAL, line no: 665, 0.07142857142857142, 1.0, 1.0, 0.07142857142857142
fp.getString(),METHOD_INVOCATION, line no: 107,"or",STRING_LITERAL, line no: 684, 0.07142857142857142, 1.0, 1.0, 0.07142857142857142
fp.getString(),METHOD_INVOCATION, line no: 107,"xor",STRING_LITERAL, line no: 703, 0.07142857142857142, 1.0, 1.0, 0.07142857142857142
fp.getString(),METHOD_INVOCATION, line no: 107,"if",STRING_LITERAL, line no: 725, 0.07142857142857142, 1.0, 1.0, 0.07142857142857142
fp.getString(),METHOD_INVOCATION, line no: 107,"def",STRING_LITERAL, line no: 736, 0.07142857142857142, 1.0, 1.0, 0.07142857142857142
fp.getString(),METHOD_INVOCATION, line no: 107,defVal=fp.parseFloat(),ASSIGNMENT, line no: 239, 0.0707070707070707, 0.4444444444444444, 0.5, 0.3181818181818182
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("testfunc" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     final ValueSource source=fp.parseValueSource();     return new TestValueSource(source);   } } ),METHOD_INVOCATION, line no: 90, 0.07017543859649122, 1.0, 0.5, 0.14035087719298245
getString,SIMPLE_NAME, line no: 107,name() + "(" + a.description()+ " "+ b.description()+ ")",INFIX_EXPRESSION, line no: 1107, 0.07017543859649122, 0.8, 1.0, 0.08771929824561403
getString,SIMPLE_NAME, line no: 107,source,SIMPLE_NAME, line no: 85, 0.06666666666666667, 0.1, 1.0, 0.1111111111111111
getString,SIMPLE_NAME, line no: 107,fp.parseId(),METHOD_INVOCATION, line no: 100, 0.06666666666666667, 0.8, 1.0, 0.08333333333333333
getString,SIMPLE_NAME, line no: 107,this.name,FIELD_ACCESS, line no: 1032, 0.06666666666666667, 0.2, 1.0, 0.3333333333333333
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,ngram=fp.parseInt(),ASSIGNMENT, line no: 343, 0.06578947368421052, 0.5, 0.5, 0.2631578947368421
fp.getString(),METHOD_INVOCATION, line no: 107,distClass,SIMPLE_NAME, line no: 333, 0.06349206349206349, 0.8888888888888888, 1.0, 0.07142857142857142
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     List<ValueSource> sources=fp.parseValueSourceList();     return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));   } } ,CLASS_INSTANCE_CREATION, line no: 190, 0.06299212598425197, 1.0, 0.5, 0.12598425196850394
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     List<ValueSource> sources=fp.parseValueSourceList();     return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));   } } ,CLASS_INSTANCE_CREATION, line no: 494, 0.06299212598425197, 1.0, 0.5, 0.12598425196850394
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     List<ValueSource> sources=fp.parseValueSourceList();     return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));   } } ,CLASS_INSTANCE_CREATION, line no: 501, 0.06299212598425197, 1.0, 0.5, 0.12598425196850394
getString,SIMPLE_NAME, line no: 107,"testfunc(" + source.description() + ')',INFIX_EXPRESSION, line no: 1246, 0.0625, 0.5, 1.0, 0.125
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     List<ValueSource> sources=fp.parseValueSourceList();     return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));   } } ,CLASS_INSTANCE_CREATION, line no: 199, 0.06201550387596899, 1.0, 0.5, 0.12403100775193798
fp.getString(),METHOD_INVOCATION, line no: 107,fp.getReq().getSchema().getFieldTypeNoEx(tinfo.field),METHOD_INVOCATION, line no: 752, 0.061495457721872815, 0.8888888888888888, 0.3333333333333333, 0.20754716981132076
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     return new MaxDocValueSource();   } } ,CLASS_INSTANCE_CREATION, line no: 602, 0.06, 1.0, 1.0, 0.06
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     return new NumDocsValueSource();   } } ,CLASS_INSTANCE_CREATION, line no: 609, 0.059602649006622516, 1.0, 1.0, 0.059602649006622516
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     return new DefFunction(fp.parseValueSourceList());   } } ,CLASS_INSTANCE_CREATION, line no: 736, 0.05917159763313609, 1.0, 1.0, 0.05917159763313609
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("sum" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     List<ValueSource> sources=fp.parseValueSourceList();     return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));   } } ),METHOD_INVOCATION, line no: 190, 0.05904059040590406, 1.0, 0.5, 0.11808118081180811
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("max" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     List<ValueSource> sources=fp.parseValueSourceList();     return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));   } } ),METHOD_INVOCATION, line no: 494, 0.05904059040590406, 1.0, 0.5, 0.11808118081180811
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("min" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     List<ValueSource> sources=fp.parseValueSourceList();     return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));   } } ),METHOD_INVOCATION, line no: 501, 0.05904059040590406, 1.0, 0.5, 0.11808118081180811
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("product" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     List<ValueSource> sources=fp.parseValueSourceList();     return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));   } } ),METHOD_INVOCATION, line no: 199, 0.05734767025089606, 1.0, 0.5, 0.11469534050179211
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     return new BoolConstValueSource(true);   } } ,CLASS_INSTANCE_CREATION, line no: 616, 0.05732484076433121, 1.0, 1.0, 0.05732484076433121
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     return new BoolConstValueSource(false);   } } ,CLASS_INSTANCE_CREATION, line no: 623, 0.056962025316455694, 1.0, 1.0, 0.056962025316455694
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("false" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     return new BoolConstValueSource(false);   } } ),METHOD_INVOCATION, line no: 623, 0.05649717514124294, 1.0, 1.0, 0.05649717514124294
fp.getString(),METHOD_INVOCATION, line no: 107,")",STRING_LITERAL, line no: 952, 0.05555555555555555, 0.3333333333333333, 1.0, 0.07142857142857142
fp.getString(),METHOD_INVOCATION, line no: 107,"(",STRING_LITERAL, line no: 1107, 0.05555555555555555, 0.7777777777777778, 1.0, 0.07142857142857142
fp.getString(),METHOD_INVOCATION, line no: 107,"null",STRING_LITERAL, line no: 1229, 0.05555555555555555, 0.7777777777777778, 1.0, 0.07142857142857142
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("def" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     return new DefFunction(fp.parseValueSourceList());   } } ),METHOD_INVOCATION, line no: 736, 0.053763440860215055, 1.0, 1.0, 0.053763440860215055
fp.getString(),METHOD_INVOCATION, line no: 107,d1 == null ? getValueSource(fp first) : null,CONDITIONAL_EXPRESSION, line no: 863, 0.053030303030303025, 1.0, 0.3333333333333333, 0.1590909090909091
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("maxdoc" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     return new MaxDocValueSource();   } } ),METHOD_INVOCATION, line no: 602, 0.052941176470588235, 1.0, 1.0, 0.052941176470588235
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("numdocs" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     return new NumDocsValueSource();   } } ),METHOD_INVOCATION, line no: 609, 0.05232558139534884, 1.0, 1.0, 0.05232558139534884
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,fp.getReq().getSchema().getFieldOrNull(tinfo.field),METHOD_INVOCATION, line no: 758, 0.0522875816993464, 0.5, 0.3333333333333333, 0.3137254901960784
fp.getString(),METHOD_INVOCATION, line no: 107,d2 == null ? getValueSource(fp second) : null,CONDITIONAL_EXPRESSION, line no: 866, 0.05185185185185185, 1.0, 0.3333333333333333, 0.15555555555555556
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     return new VectorValueSource(fp.parseValueSourceList());   } } ,CLASS_INSTANCE_CREATION, line no: 226, 0.05142857142857143, 1.0, 1.0, 0.05142857142857143
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("true" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     return new BoolConstValueSource(true);   } } ),METHOD_INVOCATION, line no: 616, 0.05142857142857143, 1.0, 1.0, 0.05142857142857143
getString,SIMPLE_NAME, line no: 107,"Can't use ms() function on non-numeric legacy date field ",STRING_LITERAL, line no: 851, 0.05084745762711864, 0.6, 1.0, 0.0847457627118644
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     String f0=fp.parseArg();     String qf=fp.parseArg();     return new JoinDocFreqValueSource(f0 qf);   } } ,CLASS_INSTANCE_CREATION, line no: 253, 0.05045871559633028, 1.0, 0.3333333333333333, 0.15137614678899083
fp.getString(),METHOD_INVOCATION, line no: 107,"const(",STRING_LITERAL, line no: 952, 0.047619047619047616, 0.3333333333333333, 1.0, 0.14285714285714285
fp.getString(),METHOD_INVOCATION, line no: 107,"Can't use ms() function on non-numeric legacy date field ",STRING_LITERAL, line no: 851, 0.047080979284369114, 0.5555555555555556, 1.0, 0.0847457627118644
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource a=fp.parseValueSource();     ValueSource b=fp.parseValueSource();     return new DivFloatFunction(a b);   } } ,CLASS_INSTANCE_CREATION, line no: 153, 0.04700854700854701, 1.0, 0.3333333333333333, 0.14102564102564102
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("joindf" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     String f0=fp.parseArg();     String qf=fp.parseArg();     return new JoinDocFreqValueSource(f0 qf);   } } ),METHOD_INVOCATION, line no: 253, 0.046218487394957986, 1.0, 0.3333333333333333, 0.13865546218487396
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("vector" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     return new VectorValueSource(fp.parseValueSourceList());   } } ),METHOD_INVOCATION, line no: 226, 0.046153846153846156, 1.0, 1.0, 0.046153846153846156
getString,SIMPLE_NAME, line no: 107,"Can't use ms() function on non-numeric legacy date field " + arg,INFIX_EXPRESSION, line no: 851, 0.046153846153846156, 0.6, 1.0, 0.07692307692307693
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource lat=fp.parseValueSource();     ValueSource lon=fp.parseValueSource();     return new GeohashFunction(lat lon);   } } ,CLASS_INSTANCE_CREATION, line no: 317, 0.04564315352697096, 1.0, 0.3333333333333333, 0.13692946058091288
fp.getString(),METHOD_INVOCATION, line no: 107,tinfo.indexedField=tinfo.field=fp.parseArg(),ASSIGNMENT, line no: 748, 0.045454545454545456, 0.8888888888888888, 0.25, 0.20454545454545456
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("div" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource a=fp.parseValueSource();     ValueSource b=fp.parseValueSource();     return new DivFloatFunction(a b);   } } ),METHOD_INVOCATION, line no: 153, 0.04515272244355909, 1.0, 0.3333333333333333, 0.13545816733067728
fp.getString(),METHOD_INVOCATION, line no: 107,"Input must either be 2 MultiValueSources  or there must be 4 ValueSources",STRING_LITERAL, line no: 297, 0.044444444444444446, 0.5555555555555556, 1.0, 0.08
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     String fieldName=fp.parseArg();     SchemaField f=fp.getReq().getSchema().getField(fieldName);     return f.getType().getValueSource(f fp);   } } ,CLASS_INSTANCE_CREATION, line no: 352, 0.043927648578811374, 1.0, 0.3333333333333333, 0.13178294573643412
fp.getString(),METHOD_INVOCATION, line no: 107,fp.getReq().getSchema().getFieldOrNull(tinfo.field),METHOD_INVOCATION, line no: 758, 0.04357298474945533, 0.5555555555555556, 0.3333333333333333, 0.23529411764705882
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("geohash" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource lat=fp.parseValueSource();     ValueSource lon=fp.parseValueSource();     return new GeohashFunction(lat lon);   } } ),METHOD_INVOCATION, line no: 317, 0.043256997455470736, 1.0, 0.3333333333333333, 0.1297709923664122
getString,SIMPLE_NAME, line no: 107,this.name=name,ASSIGNMENT, line no: 1032, 0.04285714285714286, 0.2, 1.0, 0.21428571428571427
getString,SIMPLE_NAME, line no: 107,"testfunc: unweighted value source detected.  delegate=" + source + " request="+ (requestInfo == null ? "null" : requestInfo.getReq()),INFIX_EXPRESSION, line no: 1229, 0.041791044776119404, 0.8, 1.0, 0.05223880597014925
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("field" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     String fieldName=fp.parseArg();     SchemaField f=fp.getReq().getSchema().getField(fieldName);     return f.getType().getValueSource(f fp);   } } ),METHOD_INVOCATION, line no: 352, 0.040914560770156434, 1.0, 0.3333333333333333, 0.12274368231046931
fp.getString(),METHOD_INVOCATION, line no: 107,"Illegal number of sources.  There must be an even number of sources",STRING_LITERAL, line no: 786, 0.04025764895330113, 0.5555555555555556, 1.0, 0.07246376811594203
getString,SIMPLE_NAME, line no: 107,"Input must either be 2 MultiValueSources  or there must be 4 ValueSources",STRING_LITERAL, line no: 297, 0.04, 0.6, 1.0, 0.06666666666666667
fp.getString(),METHOD_INVOCATION, line no: 107,source,SIMPLE_NAME, line no: 85, 0.03968253968253968, 0.1111111111111111, 1.0, 0.07142857142857142
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     Query q=fp.parseNestedQuery();     float defVal=0.0f;     if (fp.hasMoreArguments()) {       defVal=fp.parseFloat();     }     return new QueryValueSource(q defVal);   } } ,CLASS_INSTANCE_CREATION, line no: 232, 0.036384976525821594, 1.0, 0.3333333333333333, 0.10915492957746478
getString,SIMPLE_NAME, line no: 107,"const(" + constant + ")",INFIX_EXPRESSION, line no: 952, 0.036, 0.3, 1.0, 0.12
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("query" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     Query q=fp.parseNestedQuery();     float defVal=0.0f;     if (fp.hasMoreArguments()) {       defVal=fp.parseFloat();     }     return new QueryValueSource(q defVal);   } } ),METHOD_INVOCATION, line no: 232, 0.0352035203520352, 1.0, 0.3333333333333333, 0.10561056105610561
getString,SIMPLE_NAME, line no: 107,"Illegal number of sources.  There must be an even number of sources",STRING_LITERAL, line no: 786, 0.034782608695652174, 0.6, 1.0, 0.057971014492753624
getString,SIMPLE_NAME, line no: 107,"const(",STRING_LITERAL, line no: 952, 0.03333333333333333, 0.3, 1.0, 0.1111111111111111
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     String field=fp.parseId();     return new OrdFieldSource(field);   } } ,CLASS_INSTANCE_CREATION, line no: 97, 0.03278688524590164, 1.0, 0.5, 0.06557377049180328
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     String field=fp.parseArg();     return new NormValueSource(field);   } } ,CLASS_INSTANCE_CREATION, line no: 594, 0.032432432432432434, 1.0, 0.5, 0.06486486486486487
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     String field=fp.parseId();     return new ReverseOrdFieldSource(field);   } } ,CLASS_INSTANCE_CREATION, line no: 110, 0.031578947368421054, 1.0, 0.5, 0.06315789473684211
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     String field=fp.parseArg();     return new SumTotalTermFreqValueSource(field);   } } ,CLASS_INSTANCE_CREATION, line no: 561, 0.030456852791878174, 1.0, 0.5, 0.06091370558375635
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource source=fp.parseValueSource();     float min=fp.parseFloat();     float max=fp.parseFloat();     return new ScaleFloatFunction(source min max);   } } ,CLASS_INSTANCE_CREATION, line no: 144, 0.03021978021978022, 1.0, 0.25, 0.12087912087912088
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("ord" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     String field=fp.parseId();     return new OrdFieldSource(field);   } } ),METHOD_INVOCATION, line no: 97, 0.03, 1.0, 0.5, 0.06
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("norm" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     String field=fp.parseArg();     return new NormValueSource(field);   } } ),METHOD_INVOCATION, line no: 594, 0.029556650246305417, 1.0, 0.5, 0.059113300492610835
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("scale" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource source=fp.parseValueSource();     float min=fp.parseFloat();     float max=fp.parseFloat();     return new ScaleFloatFunction(source min max);   } } ),METHOD_INVOCATION, line no: 144, 0.02910958904109589, 1.0, 0.25, 0.11643835616438356
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     Query q=fp.parseNestedQuery();     ValueSource vs=fp.parseValueSource();     BoostedQuery bq=new BoostedQuery(q vs);     return new QueryValueSource(bq 0.0f);   } } ,CLASS_INSTANCE_CREATION, line no: 244, 0.02888086642599278, 1.0, 0.25, 0.11552346570397112
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("rord" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     String field=fp.parseId();     return new ReverseOrdFieldSource(field);   } } ),METHOD_INVOCATION, line no: 110, 0.028846153846153848, 1.0, 0.5, 0.057692307692307696
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource source=fp.parseValueSource();     float slope=fp.parseFloat();     float intercept=fp.parseFloat();     return new LinearFloatFunction(source slope intercept);   } } ,CLASS_INSTANCE_CREATION, line no: 125, 0.028448275862068967, 1.0, 0.25, 0.11379310344827587
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     double radius=fp.parseDouble();     ValueSource gh1=fp.parseValueSource();     ValueSource gh2=fp.parseValueSource();     return new GeohashHaversineFunction(gh1 gh2 radius);   } } ,CLASS_INSTANCE_CREATION, line no: 305, 0.028156996587030716, 1.0, 0.25, 0.11262798634812286
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     return new DoubleConstValueSource(Math.E);   } } ,CLASS_INSTANCE_CREATION, line no: 536, 0.027950310559006212, 1.0, 0.5, 0.055900621118012424
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     return new DoubleConstValueSource(Math.PI);   } } ,CLASS_INSTANCE_CREATION, line no: 530, 0.027777777777777776, 1.0, 0.5, 0.05555555555555555
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("linear" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource source=fp.parseValueSource();     float slope=fp.parseFloat();     float intercept=fp.parseFloat();     return new LinearFloatFunction(source slope intercept);   } } ),METHOD_INVOCATION, line no: 125, 0.027419354838709678, 1.0, 0.25, 0.10967741935483871
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("ghhsin" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     double radius=fp.parseDouble();     ValueSource gh1=fp.parseValueSource();     ValueSource gh2=fp.parseValueSource();     return new GeohashHaversineFunction(gh1 gh2 radius);   } } ),METHOD_INVOCATION, line no: 305, 0.027156549520766772, 1.0, 0.25, 0.10862619808306709
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("boost" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     Query q=fp.parseNestedQuery();     ValueSource vs=fp.parseValueSource();     BoostedQuery bq=new BoostedQuery(q vs);     return new QueryValueSource(bq 0.0f);   } } ),METHOD_INVOCATION, line no: 244, 0.02702702702702703, 1.0, 0.25, 0.10810810810810811
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("sumtotaltermfreq" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     String field=fp.parseArg();     return new SumTotalTermFreqValueSource(field);   } } ),METHOD_INVOCATION, line no: 561, 0.02643171806167401, 1.0, 0.5, 0.05286343612334802
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,ft.getFieldQuery(fp fp.getReq().getSchema().getFieldOrNull(tinfo.field) tinfo.val),METHOD_INVOCATION, line no: 758, 0.025609756097560978, 0.5, 0.2, 0.25609756097560976
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("e" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     return new DoubleConstValueSource(Math.E);   } } ),METHOD_INVOCATION, line no: 536, 0.02556818181818182, 1.0, 0.5, 0.05113636363636364
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("pi" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     return new DoubleConstValueSource(Math.PI);   } } ),METHOD_INVOCATION, line no: 530, 0.025280898876404494, 1.0, 0.5, 0.05056179775280899
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource source=fp.parseValueSource();     return source;   } } ,CLASS_INSTANCE_CREATION, line no: 117, 0.025139664804469275, 1.0, 0.5, 0.05027932960893855
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     final ValueSource source=fp.parseValueSource();     return new TestValueSource(source);   } } ,CLASS_INSTANCE_CREATION, line no: 90, 0.024271844660194174, 1.0, 0.5, 0.04854368932038835
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     List<ValueSource> sources=fp.parseValueSourceList();     MVResult mvr=getMultiValueSources(sources);     return new SquaredEuclideanFunction(mvr.mv1 mvr.mv2);   } } ,CLASS_INSTANCE_CREATION, line no: 508, 0.023826714801444045, 1.0, 0.2, 0.11913357400722022
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource ifValueSource=fp.parseValueSource();     ValueSource trueValueSource=fp.parseValueSource();     ValueSource falseValueSource=fp.parseValueSource();     return new IfFunction(ifValueSource trueValueSource falseValueSource);   } } ,CLASS_INSTANCE_CREATION, line no: 725, 0.023371104815864022, 1.0, 0.25, 0.09348441926345609
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("if" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource ifValueSource=fp.parseValueSource();     ValueSource trueValueSource=fp.parseValueSource();     ValueSource falseValueSource=fp.parseValueSource();     return new IfFunction(ifValueSource trueValueSource falseValueSource);   } } ),METHOD_INVOCATION, line no: 725, 0.023035230352303523, 1.0, 0.25, 0.0921409214092141
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("top" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource source=fp.parseValueSource();     return source;   } } ),METHOD_INVOCATION, line no: 117, 0.02295918367346939, 1.0, 0.5, 0.04591836734693878
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("sqedist" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     List<ValueSource> sources=fp.parseValueSourceList();     MVResult mvr=getMultiValueSources(sources);     return new SquaredEuclideanFunction(mvr.mv1 mvr.mv2);   } } ),METHOD_INVOCATION, line no: 508, 0.022818791946308727, 1.0, 0.2, 0.11409395973154363
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("testfunc" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     final ValueSource source=fp.parseValueSource();     return new TestValueSource(source);   } } ),METHOD_INVOCATION, line no: 90, 0.021929824561403508, 1.0, 0.5, 0.043859649122807015
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource source=fp.parseValueSource();     float m=fp.parseFloat();     float a=fp.parseFloat();     float b=fp.parseFloat();     return new ReciprocalFloatFunction(source m a b);   } } ,CLASS_INSTANCE_CREATION, line no: 134, 0.021926910299003323, 1.0, 0.2, 0.10963455149501661
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     List<ValueSource> sources=fp.parseValueSourceList();     return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));   } } ,CLASS_INSTANCE_CREATION, line no: 190, 0.021653543307086614, 1.0, 0.5, 0.04330708661417323
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     List<ValueSource> sources=fp.parseValueSourceList();     return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));   } } ,CLASS_INSTANCE_CREATION, line no: 494, 0.021653543307086614, 1.0, 0.5, 0.04330708661417323
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     List<ValueSource> sources=fp.parseValueSourceList();     return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));   } } ,CLASS_INSTANCE_CREATION, line no: 501, 0.021653543307086614, 1.0, 0.5, 0.04330708661417323
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource vs=fp.parseValueSource();     return new SimpleBoolFunction(vs){       @Override protected boolean func(      int doc       FunctionValues vals){         return !vals.boolVal(doc);       }       @Override protected String name(){         return "not";       }     } ;   } } ,CLASS_INSTANCE_CREATION, line no: 647, 0.02135678391959799, 1.0, 0.25, 0.08542713567839195
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     List<ValueSource> sources=fp.parseValueSourceList();     return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));   } } ,CLASS_INSTANCE_CREATION, line no: 199, 0.02131782945736434, 1.0, 0.5, 0.04263565891472868
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource vs=fp.parseValueSource();     return new SimpleBoolFunction(vs){       @Override protected String name(){         return "exists";       }       @Override protected boolean func(      int doc       FunctionValues vals){         return vals.exists(doc);       }     } ;   } } ,CLASS_INSTANCE_CREATION, line no: 630, 0.021303258145363407, 1.0, 0.25, 0.08521303258145363
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("recip" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource source=fp.parseValueSource();     float m=fp.parseFloat();     float a=fp.parseFloat();     float b=fp.parseFloat();     return new ReciprocalFloatFunction(source m a b);   } } ),METHOD_INVOCATION, line no: 134, 0.02125, 1.0, 0.2, 0.10625
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     TInfo tinfo=parseTerm(fp);     return new TFValueSource(tinfo.field tinfo.val tinfo.indexedField tinfo.indexedBytes);   } } ,CLASS_INSTANCE_CREATION, line no: 586, 0.0211864406779661, 1.0, 0.16666666666666666, 0.1271186440677966
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     TInfo tinfo=parseTerm(fp);     return new IDFValueSource(tinfo.field tinfo.val tinfo.indexedField tinfo.indexedBytes);   } } ,CLASS_INSTANCE_CREATION, line no: 570, 0.02109704641350211, 1.0, 0.16666666666666666, 0.12658227848101267
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("not" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource vs=fp.parseValueSource();     return new SimpleBoolFunction(vs){       @Override protected boolean func(      int doc       FunctionValues vals){         return !vals.boolVal(doc);       }       @Override protected String name(){         return "not";       }     } ;   } } ),METHOD_INVOCATION, line no: 647, 0.02108433734939759, 1.0, 0.25, 0.08433734939759036
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     TInfo tinfo=parseTerm(fp);     return new DocFreqValueSource(tinfo.field tinfo.val tinfo.indexedField tinfo.indexedBytes);   } } ,CLASS_INSTANCE_CREATION, line no: 544, 0.02074688796680498, 1.0, 0.16666666666666666, 0.12448132780082988
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     TInfo tinfo=parseTerm(fp);     return new TermFreqValueSource(tinfo.field tinfo.val tinfo.indexedField tinfo.indexedBytes);   } } ,CLASS_INSTANCE_CREATION, line no: 578, 0.02066115702479339, 1.0, 0.16666666666666666, 0.12396694214876033
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource source=fp.parseValueSource();     return new SimpleFloatFunction(source){       @Override protected String name(){         return "abs";       }       @Override protected float func(      int doc       FunctionValues vals){         return Math.abs(vals.floatVal(doc));       }     } ;   } } ,CLASS_INSTANCE_CREATION, line no: 173, 0.020481927710843374, 1.0, 0.25, 0.0819277108433735
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("sum" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     List<ValueSource> sources=fp.parseValueSourceList();     return new SumFloatFunction(sources.toArray(new ValueSource[sources.size()]));   } } ),METHOD_INVOCATION, line no: 190, 0.02029520295202952, 1.0, 0.5, 0.04059040590405904
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("max" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     List<ValueSource> sources=fp.parseValueSourceList();     return new MaxFloatFunction(sources.toArray(new ValueSource[sources.size()]));   } } ),METHOD_INVOCATION, line no: 494, 0.02029520295202952, 1.0, 0.5, 0.04059040590405904
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("min" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     List<ValueSource> sources=fp.parseValueSourceList();     return new MinFloatFunction(sources.toArray(new ValueSource[sources.size()]));   } } ),METHOD_INVOCATION, line no: 501, 0.02029520295202952, 1.0, 0.5, 0.04059040590405904
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("exists" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource vs=fp.parseValueSource();     return new SimpleBoolFunction(vs){       @Override protected String name(){         return "exists";       }       @Override protected boolean func(      int doc       FunctionValues vals){         return vals.exists(doc);       }     } ;   } } ),METHOD_INVOCATION, line no: 630, 0.02028639618138425, 1.0, 0.25, 0.081145584725537
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     TInfo tinfo=parseTerm(fp);     return new TotalTermFreqValueSource(tinfo.field tinfo.val tinfo.indexedField tinfo.indexedBytes);   } } ,CLASS_INSTANCE_CREATION, line no: 552, 0.020242914979757082, 1.0, 0.16666666666666666, 0.1214574898785425
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("tf" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     TInfo tinfo=parseTerm(fp);     return new TFValueSource(tinfo.field tinfo.val tinfo.indexedField tinfo.indexedBytes);   } } ),METHOD_INVOCATION, line no: 586, 0.01984126984126984, 1.0, 0.16666666666666666, 0.11904761904761904
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("product" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     List<ValueSource> sources=fp.parseValueSourceList();     return new ProductFloatFunction(sources.toArray(new ValueSource[sources.size()]));   } } ),METHOD_INVOCATION, line no: 199, 0.01971326164874552, 1.0, 0.5, 0.03942652329749104
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("idf" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     TInfo tinfo=parseTerm(fp);     return new IDFValueSource(tinfo.field tinfo.val tinfo.indexedField tinfo.indexedBytes);   } } ),METHOD_INVOCATION, line no: 570, 0.01968503937007874, 1.0, 0.16666666666666666, 0.11811023622047244
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("abs" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource source=fp.parseValueSource();     return new SimpleFloatFunction(source){       @Override protected String name(){         return "abs";       }       @Override protected float func(      int doc       FunctionValues vals){         return Math.abs(vals.floatVal(doc));       }     } ;   } } ),METHOD_INVOCATION, line no: 173, 0.019675925925925927, 1.0, 0.25, 0.0787037037037037
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("docfreq" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     TInfo tinfo=parseTerm(fp);     return new DocFreqValueSource(tinfo.field tinfo.val tinfo.indexedField tinfo.indexedBytes);   } } ),METHOD_INVOCATION, line no: 544, 0.019083969465648852, 1.0, 0.16666666666666666, 0.11450381679389313
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("termfreq" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     TInfo tinfo=parseTerm(fp);     return new TermFreqValueSource(tinfo.field tinfo.val tinfo.indexedField tinfo.indexedBytes);   } } ),METHOD_INVOCATION, line no: 578, 0.018939393939393936, 1.0, 0.16666666666666666, 0.11363636363636363
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("totaltermfreq" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     TInfo tinfo=parseTerm(fp);     return new TotalTermFreqValueSource(tinfo.field tinfo.val tinfo.indexedField tinfo.indexedBytes);   } } ),METHOD_INVOCATION, line no: 552, 0.018856447688564475, 1.0, 0.16666666666666666, 0.11313868613138686
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     String f0=fp.parseArg();     String qf=fp.parseArg();     return new JoinDocFreqValueSource(f0 qf);   } } ,CLASS_INSTANCE_CREATION, line no: 253, 0.01834862385321101, 1.0, 0.3333333333333333, 0.05504587155963303
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     float power=fp.parseFloat();     List<ValueSource> sources=fp.parseValueSourceList();     MVResult mvr=getMultiValueSources(sources);     return new VectorDistanceFunction(power mvr.mv1 mvr.mv2);   } } ,CLASS_INSTANCE_CREATION, line no: 518, 0.018046709129511677, 1.0, 0.16666666666666666, 0.10828025477707007
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("dist" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     float power=fp.parseFloat();     List<ValueSource> sources=fp.parseValueSourceList();     MVResult mvr=getMultiValueSources(sources);     return new VectorDistanceFunction(power mvr.mv1 mvr.mv2);   } } ),METHOD_INVOCATION, line no: 518, 0.017570281124497992, 1.0, 0.16666666666666666, 0.10542168674698796
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("joindf" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     String f0=fp.parseArg();     String qf=fp.parseArg();     return new JoinDocFreqValueSource(f0 qf);   } } ),METHOD_INVOCATION, line no: 253, 0.01680672268907563, 1.0, 0.3333333333333333, 0.05042016806722689
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     String fieldName=fp.parseArg();     SchemaField f=fp.getReq().getSchema().getField(fieldName);     return f.getType().getValueSource(f fp);   } } ,CLASS_INSTANCE_CREATION, line no: 352, 0.016795865633074933, 1.0, 0.3333333333333333, 0.050387596899224806
fp.getString(),METHOD_INVOCATION, line no: 107,ft.getFieldQuery(fp fp.getReq().getSchema().getFieldOrNull(tinfo.field) tinfo.val),METHOD_INVOCATION, line no: 758, 0.016260162601626018, 0.5555555555555556, 0.2, 0.14634146341463414
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource a=fp.parseValueSource();     ValueSource b=fp.parseValueSource();     return new DivFloatFunction(a b);   } } ,CLASS_INSTANCE_CREATION, line no: 153, 0.015669515669515667, 1.0, 0.3333333333333333, 0.04700854700854701
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("field" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     String fieldName=fp.parseArg();     SchemaField f=fp.getReq().getSchema().getField(fieldName);     return f.getType().getValueSource(f fp);   } } ),METHOD_INVOCATION, line no: 352, 0.015643802647412754, 1.0, 0.3333333333333333, 0.04693140794223827
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource lat=fp.parseValueSource();     ValueSource lon=fp.parseValueSource();     return new GeohashFunction(lat lon);   } } ,CLASS_INSTANCE_CREATION, line no: 317, 0.015214384508990316, 1.0, 0.3333333333333333, 0.04564315352697095
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource source=fp.parseValueSource();     float min=fp.parseFloat();     float max=fp.parseFloat();     float target=fp.parseFloat();     Float def=fp.hasMoreArguments() ? fp.parseFloat() : null;     return new RangeMapFloatFunction(source min max target def);   } } ,CLASS_INSTANCE_CREATION, line no: 161, 0.014795474325500435, 1.0, 0.16666666666666666, 0.08877284595300261
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("div" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource a=fp.parseValueSource();     ValueSource b=fp.parseValueSource();     return new DivFloatFunction(a b);   } } ),METHOD_INVOCATION, line no: 153, 0.014608233731739709, 1.0, 0.3333333333333333, 0.043824701195219126
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("map" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource source=fp.parseValueSource();     float min=fp.parseFloat();     float max=fp.parseFloat();     float target=fp.parseFloat();     Float def=fp.hasMoreArguments() ? fp.parseFloat() : null;     return new RangeMapFloatFunction(source min max target def);   } } ),METHOD_INVOCATION, line no: 161, 0.014583333333333332, 1.0, 0.16666666666666666, 0.0875
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("geohash" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource lat=fp.parseValueSource();     ValueSource lon=fp.parseValueSource();     return new GeohashFunction(lat lon);   } } ),METHOD_INVOCATION, line no: 317, 0.013994910941475827, 1.0, 0.3333333333333333, 0.04198473282442748
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     List<ValueSource> sources=fp.parseValueSourceList();     return new MultiBoolFunction(sources){       @Override protected String name(){         return "or";       }       @Override protected boolean func(      int doc       FunctionValues[] vals){         for (        FunctionValues dv : vals)         if (dv.boolVal(doc))         return true;         return false;       }     } ;   } } ,CLASS_INSTANCE_CREATION, line no: 684, 0.013545816733067729, 1.0, 0.2, 0.06772908366533864
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     List<ValueSource> sources=fp.parseValueSourceList();     return new MultiBoolFunction(sources){       @Override protected String name(){         return "and";       }       @Override protected boolean func(      int doc       FunctionValues[] vals){         for (        FunctionValues dv : vals)         if (!dv.boolVal(doc))         return false;         return true;       }     } ;   } } ,CLASS_INSTANCE_CREATION, line no: 665, 0.013492063492063493, 1.0, 0.2, 0.06746031746031746
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("or" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     List<ValueSource> sources=fp.parseValueSourceList();     return new MultiBoolFunction(sources){       @Override protected String name(){         return "or";       }       @Override protected boolean func(      int doc       FunctionValues[] vals){         for (        FunctionValues dv : vals)         if (dv.boolVal(doc))         return true;         return false;       }     } ;   } } ),METHOD_INVOCATION, line no: 684, 0.013127413127413126, 1.0, 0.2, 0.06563706563706563
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("and" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     List<ValueSource> sources=fp.parseValueSourceList();     return new MultiBoolFunction(sources){       @Override protected String name(){         return "and";       }       @Override protected boolean func(      int doc       FunctionValues[] vals){         for (        FunctionValues dv : vals)         if (!dv.boolVal(doc))         return false;         return true;       }     } ;   } } ),METHOD_INVOCATION, line no: 665, 0.013051823416506717, 1.0, 0.2, 0.06525911708253358
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     Query q=fp.parseNestedQuery();     float defVal=0.0f;     if (fp.hasMoreArguments()) {       defVal=fp.parseFloat();     }     return new QueryValueSource(q defVal);   } } ,CLASS_INSTANCE_CREATION, line no: 232, 0.012910798122065727, 1.0, 0.3333333333333333, 0.03873239436619718
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource a=fp.parseValueSource();     ValueSource b=fp.parseValueSource();     return new DualFloatFunction(a b){       @Override protected String name(){         return "sub";       }       @Override protected float func(      int doc       FunctionValues aVals       FunctionValues bVals){         return aVals.floatVal(doc) - bVals.floatVal(doc);       }     } ;   } } ,CLASS_INSTANCE_CREATION, line no: 208, 0.012320328542094455, 1.0, 0.16666666666666666, 0.07392197125256673
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("query" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     Query q=fp.parseNestedQuery();     float defVal=0.0f;     if (fp.hasMoreArguments()) {       defVal=fp.parseFloat();     }     return new QueryValueSource(q defVal);   } } ),METHOD_INVOCATION, line no: 232, 0.0121012101210121, 1.0, 0.3333333333333333, 0.036303630363036306
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("sub" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource a=fp.parseValueSource();     ValueSource b=fp.parseValueSource();     return new DualFloatFunction(a b){       @Override protected String name(){         return "sub";       }       @Override protected float func(      int doc       FunctionValues aVals       FunctionValues bVals){         return aVals.floatVal(doc) - bVals.floatVal(doc);       }     } ;   } } ),METHOD_INVOCATION, line no: 208, 0.011904761904761904, 1.0, 0.16666666666666666, 0.07142857142857142
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     double radius=fp.parseDouble();     ValueSource gh1=fp.parseValueSource();     ValueSource gh2=fp.parseValueSource();     return new GeohashHaversineFunction(gh1 gh2 radius);   } } ,CLASS_INSTANCE_CREATION, line no: 305, 0.010238907849829351, 1.0, 0.25, 0.040955631399317405
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource source=fp.parseValueSource();     float min=fp.parseFloat();     float max=fp.parseFloat();     return new ScaleFloatFunction(source min max);   } } ,CLASS_INSTANCE_CREATION, line no: 144, 0.010073260073260074, 1.0, 0.25, 0.040293040293040296
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     Query q=fp.parseNestedQuery();     ValueSource vs=fp.parseValueSource();     BoostedQuery bq=new BoostedQuery(q vs);     return new QueryValueSource(bq 0.0f);   } } ,CLASS_INSTANCE_CREATION, line no: 244, 0.009927797833935019, 1.0, 0.25, 0.039711191335740074
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("ghhsin" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     double radius=fp.parseDouble();     ValueSource gh1=fp.parseValueSource();     ValueSource gh2=fp.parseValueSource();     return new GeohashHaversineFunction(gh1 gh2 radius);   } } ),METHOD_INVOCATION, line no: 305, 0.009584664536741214, 1.0, 0.25, 0.038338658146964855
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource source=fp.parseValueSource();     float slope=fp.parseFloat();     float intercept=fp.parseFloat();     return new LinearFloatFunction(source slope intercept);   } } ,CLASS_INSTANCE_CREATION, line no: 125, 0.009482758620689655, 1.0, 0.25, 0.03793103448275862
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("scale" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource source=fp.parseValueSource();     float min=fp.parseFloat();     float max=fp.parseFloat();     return new ScaleFloatFunction(source min max);   } } ),METHOD_INVOCATION, line no: 144, 0.009417808219178082, 1.0, 0.25, 0.03767123287671233
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     List<ValueSource> sources=fp.parseValueSourceList();     MVResult mvr=getMultiValueSources(sources);     return new SquaredEuclideanFunction(mvr.mv1 mvr.mv2);   } } ,CLASS_INSTANCE_CREATION, line no: 508, 0.009386281588447655, 1.0, 0.2, 0.04693140794223827
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("boost" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     Query q=fp.parseNestedQuery();     ValueSource vs=fp.parseValueSource();     BoostedQuery bq=new BoostedQuery(q vs);     return new QueryValueSource(bq 0.0f);   } } ),METHOD_INVOCATION, line no: 244, 0.009290540540540541, 1.0, 0.25, 0.037162162162162164
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("linear" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource source=fp.parseValueSource();     float slope=fp.parseFloat();     float intercept=fp.parseFloat();     return new LinearFloatFunction(source slope intercept);   } } ),METHOD_INVOCATION, line no: 125, 0.008870967741935484, 1.0, 0.25, 0.035483870967741936
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("sqedist" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     List<ValueSource> sources=fp.parseValueSourceList();     MVResult mvr=getMultiValueSources(sources);     return new SquaredEuclideanFunction(mvr.mv1 mvr.mv2);   } } ),METHOD_INVOCATION, line no: 508, 0.008724832214765102, 1.0, 0.2, 0.0436241610738255
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource ifValueSource=fp.parseValueSource();     ValueSource trueValueSource=fp.parseValueSource();     ValueSource falseValueSource=fp.parseValueSource();     return new IfFunction(ifValueSource trueValueSource falseValueSource);   } } ,CLASS_INSTANCE_CREATION, line no: 725, 0.0084985835694051, 1.0, 0.25, 0.0339943342776204
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     List<ValueSource> sources=fp.parseValueSourceList();     return new MultiBoolFunction(sources){       @Override protected String name(){         return "xor";       }       @Override protected boolean func(      int doc       FunctionValues[] vals){         int nTrue=0  nFalse=0;         for (        FunctionValues dv : vals) {           if (dv.boolVal(doc))           nTrue++;  else           nFalse++;         }         return nTrue != 0 && nFalse != 0;       }     } ;   } } ,CLASS_INSTANCE_CREATION, line no: 703, 0.008204633204633204, 1.0, 0.14285714285714285, 0.057432432432432436
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource vs=fp.parseValueSource();     return new SimpleBoolFunction(vs){       @Override protected boolean func(      int doc       FunctionValues vals){         return !vals.boolVal(doc);       }       @Override protected String name(){         return "not";       }     } ;   } } ,CLASS_INSTANCE_CREATION, line no: 647, 0.008165829145728644, 1.0, 0.25, 0.032663316582914576
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource vs=fp.parseValueSource();     return new SimpleBoolFunction(vs){       @Override protected String name(){         return "exists";       }       @Override protected boolean func(      int doc       FunctionValues vals){         return vals.exists(doc);       }     } ;   } } ,CLASS_INSTANCE_CREATION, line no: 630, 0.008145363408521303, 1.0, 0.25, 0.03258145363408521
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("if" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource ifValueSource=fp.parseValueSource();     ValueSource trueValueSource=fp.parseValueSource();     ValueSource falseValueSource=fp.parseValueSource();     return new IfFunction(ifValueSource trueValueSource falseValueSource);   } } ),METHOD_INVOCATION, line no: 725, 0.008130081300813009, 1.0, 0.25, 0.032520325203252036
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("xor" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     List<ValueSource> sources=fp.parseValueSourceList();     return new MultiBoolFunction(sources){       @Override protected String name(){         return "xor";       }       @Override protected boolean func(      int doc       FunctionValues[] vals){         int nTrue=0  nFalse=0;         for (        FunctionValues dv : vals) {           if (dv.boolVal(doc))           nTrue++;  else           nFalse++;         }         return nTrue != 0 && nFalse != 0;       }     } ;   } } ),METHOD_INVOCATION, line no: 703, 0.007975604034717336, 1.0, 0.14285714285714285, 0.05582922824302135
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource source=fp.parseValueSource();     return new SimpleFloatFunction(source){       @Override protected String name(){         return "abs";       }       @Override protected float func(      int doc       FunctionValues vals){         return Math.abs(vals.floatVal(doc));       }     } ;   } } ,CLASS_INSTANCE_CREATION, line no: 173, 0.00783132530120482, 1.0, 0.25, 0.03132530120481928
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("not" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource vs=fp.parseValueSource();     return new SimpleBoolFunction(vs){       @Override protected boolean func(      int doc       FunctionValues vals){         return !vals.boolVal(doc);       }       @Override protected String name(){         return "not";       }     } ;   } } ),METHOD_INVOCATION, line no: 647, 0.00783132530120482, 1.0, 0.25, 0.03132530120481928
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("exists" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource vs=fp.parseValueSource();     return new SimpleBoolFunction(vs){       @Override protected String name(){         return "exists";       }       @Override protected boolean func(      int doc       FunctionValues vals){         return vals.exists(doc);       }     } ;   } } ),METHOD_INVOCATION, line no: 630, 0.007756563245823389, 1.0, 0.25, 0.031026252983293555
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("abs" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource source=fp.parseValueSource();     return new SimpleFloatFunction(source){       @Override protected String name(){         return "abs";       }       @Override protected float func(      int doc       FunctionValues vals){         return Math.abs(vals.floatVal(doc));       }     } ;   } } ),METHOD_INVOCATION, line no: 173, 0.007523148148148148, 1.0, 0.25, 0.03009259259259259
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource source=fp.parseValueSource();     float m=fp.parseFloat();     float a=fp.parseFloat();     float b=fp.parseFloat();     return new ReciprocalFloatFunction(source m a b);   } } ,CLASS_INSTANCE_CREATION, line no: 134, 0.0073089700996677755, 1.0, 0.2, 0.036544850498338874
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     float power=fp.parseFloat();     List<ValueSource> sources=fp.parseValueSourceList();     MVResult mvr=getMultiValueSources(sources);     return new VectorDistanceFunction(power mvr.mv1 mvr.mv2);   } } ,CLASS_INSTANCE_CREATION, line no: 518, 0.006900212314225052, 1.0, 0.16666666666666666, 0.041401273885350316
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("recip" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource source=fp.parseValueSource();     float m=fp.parseFloat();     float a=fp.parseFloat();     float b=fp.parseFloat();     return new ReciprocalFloatFunction(source m a b);   } } ),METHOD_INVOCATION, line no: 134, 0.006875000000000001, 1.0, 0.2, 0.034375
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("tf" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     TInfo tinfo=parseTerm(fp);     return new TFValueSource(tinfo.field tinfo.val tinfo.indexedField tinfo.indexedBytes);   } } ),METHOD_INVOCATION, line no: 586, 0.006613756613756613, 1.0, 0.16666666666666666, 0.03968253968253968
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("idf" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     TInfo tinfo=parseTerm(fp);     return new IDFValueSource(tinfo.field tinfo.val tinfo.indexedField tinfo.indexedBytes);   } } ),METHOD_INVOCATION, line no: 570, 0.006561679790026247, 1.0, 0.16666666666666666, 0.03937007874015748
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("dist" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     float power=fp.parseFloat();     List<ValueSource> sources=fp.parseValueSourceList();     MVResult mvr=getMultiValueSources(sources);     return new VectorDistanceFunction(power mvr.mv1 mvr.mv2);   } } ),METHOD_INVOCATION, line no: 518, 0.006526104417670682, 1.0, 0.16666666666666666, 0.0391566265060241
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("docfreq" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     TInfo tinfo=parseTerm(fp);     return new DocFreqValueSource(tinfo.field tinfo.val tinfo.indexedField tinfo.indexedBytes);   } } ),METHOD_INVOCATION, line no: 544, 0.006361323155216285, 1.0, 0.16666666666666666, 0.03816793893129771
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     TInfo tinfo=parseTerm(fp);     return new TFValueSource(tinfo.field tinfo.val tinfo.indexedField tinfo.indexedBytes);   } } ,CLASS_INSTANCE_CREATION, line no: 586, 0.006355932203389831, 1.0, 0.16666666666666666, 0.038135593220338986
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     TInfo tinfo=parseTerm(fp);     return new IDFValueSource(tinfo.field tinfo.val tinfo.indexedField tinfo.indexedBytes);   } } ,CLASS_INSTANCE_CREATION, line no: 570, 0.006329113924050633, 1.0, 0.16666666666666666, 0.0379746835443038
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("termfreq" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     TInfo tinfo=parseTerm(fp);     return new TermFreqValueSource(tinfo.field tinfo.val tinfo.indexedField tinfo.indexedBytes);   } } ),METHOD_INVOCATION, line no: 578, 0.006313131313131313, 1.0, 0.16666666666666666, 0.03787878787878788
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     TInfo tinfo=parseTerm(fp);     return new DocFreqValueSource(tinfo.field tinfo.val tinfo.indexedField tinfo.indexedBytes);   } } ,CLASS_INSTANCE_CREATION, line no: 544, 0.006224066390041493, 1.0, 0.16666666666666666, 0.03734439834024896
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     TInfo tinfo=parseTerm(fp);     return new TermFreqValueSource(tinfo.field tinfo.val tinfo.indexedField tinfo.indexedBytes);   } } ,CLASS_INSTANCE_CREATION, line no: 578, 0.006198347107438017, 1.0, 0.16666666666666666, 0.0371900826446281
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("totaltermfreq" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     TInfo tinfo=parseTerm(fp);     return new TotalTermFreqValueSource(tinfo.field tinfo.val tinfo.indexedField tinfo.indexedBytes);   } } ),METHOD_INVOCATION, line no: 552, 0.00608272506082725, 1.0, 0.16666666666666666, 0.0364963503649635
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     TInfo tinfo=parseTerm(fp);     return new TotalTermFreqValueSource(tinfo.field tinfo.val tinfo.indexedField tinfo.indexedBytes);   } } ,CLASS_INSTANCE_CREATION, line no: 552, 0.006072874493927125, 1.0, 0.16666666666666666, 0.03643724696356275
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("strdist" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource str1=fp.parseValueSource();     ValueSource str2=fp.parseValueSource();     String distClass=fp.parseArg();     StringDistance dist=null;     if (distClass.equalsIgnoreCase("jw")) {       dist=new JaroWinklerDistance();     }  else     if (distClass.equalsIgnoreCase("edit")) {       dist=new LevensteinDistance();     }  else     if (distClass.equalsIgnoreCase("ngram")) {       int ngram=2;       if (fp.hasMoreArguments()) {         ngram=fp.parseInt();       }       dist=new NGramDistance(ngram);     }  else {       dist=fp.req.getCore().getResourceLoader().newInstance(distClass StringDistance.class);     }     return new StringDistanceFunction(str1 str2 dist);   } } ),METHOD_INVOCATION, line no: 327, 0.005633373934226553, 1.0, 0.125, 0.04506699147381242
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource str1=fp.parseValueSource();     ValueSource str2=fp.parseValueSource();     String distClass=fp.parseArg();     StringDistance dist=null;     if (distClass.equalsIgnoreCase("jw")) {       dist=new JaroWinklerDistance();     }  else     if (distClass.equalsIgnoreCase("edit")) {       dist=new LevensteinDistance();     }  else     if (distClass.equalsIgnoreCase("ngram")) {       int ngram=2;       if (fp.hasMoreArguments()) {         ngram=fp.parseInt();       }       dist=new NGramDistance(ngram);     }  else {       dist=fp.req.getCore().getResourceLoader().newInstance(distClass StringDistance.class);     }     return new StringDistanceFunction(str1 str2 dist);   } } ,CLASS_INSTANCE_CREATION, line no: 327, 0.005625, 1.0, 0.125, 0.045
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource source=fp.parseValueSource();     float min=fp.parseFloat();     float max=fp.parseFloat();     float target=fp.parseFloat();     Float def=fp.hasMoreArguments() ? fp.parseFloat() : null;     return new RangeMapFloatFunction(source min max target def);   } } ,CLASS_INSTANCE_CREATION, line no: 161, 0.005221932114882506, 1.0, 0.16666666666666666, 0.031331592689295036
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     List<ValueSource> sources=fp.parseValueSourceList();     return new MultiBoolFunction(sources){       @Override protected String name(){         return "or";       }       @Override protected boolean func(      int doc       FunctionValues[] vals){         for (        FunctionValues dv : vals)         if (dv.boolVal(doc))         return true;         return false;       }     } ;   } } ,CLASS_INSTANCE_CREATION, line no: 684, 0.005179282868525897, 1.0, 0.2, 0.025896414342629483
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     List<ValueSource> sources=fp.parseValueSourceList();     return new MultiBoolFunction(sources){       @Override protected String name(){         return "and";       }       @Override protected boolean func(      int doc       FunctionValues[] vals){         for (        FunctionValues dv : vals)         if (!dv.boolVal(doc))         return false;         return true;       }     } ;   } } ,CLASS_INSTANCE_CREATION, line no: 665, 0.005158730158730159, 1.0, 0.2, 0.025793650793650792
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("or" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     List<ValueSource> sources=fp.parseValueSourceList();     return new MultiBoolFunction(sources){       @Override protected String name(){         return "or";       }       @Override protected boolean func(      int doc       FunctionValues[] vals){         for (        FunctionValues dv : vals)         if (dv.boolVal(doc))         return true;         return false;       }     } ;   } } ),METHOD_INVOCATION, line no: 684, 0.005019305019305019, 1.0, 0.2, 0.025096525096525095
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("map" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource source=fp.parseValueSource();     float min=fp.parseFloat();     float max=fp.parseFloat();     float target=fp.parseFloat();     Float def=fp.hasMoreArguments() ? fp.parseFloat() : null;     return new RangeMapFloatFunction(source min max target def);   } } ),METHOD_INVOCATION, line no: 161, 0.004999999999999999, 1.0, 0.16666666666666666, 0.03
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("and" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     List<ValueSource> sources=fp.parseValueSourceList();     return new MultiBoolFunction(sources){       @Override protected String name(){         return "and";       }       @Override protected boolean func(      int doc       FunctionValues[] vals){         for (        FunctionValues dv : vals)         if (!dv.boolVal(doc))         return false;         return true;       }     } ;   } } ),METHOD_INVOCATION, line no: 665, 0.0049904030710172746, 1.0, 0.2, 0.02495201535508637
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource a=fp.parseValueSource();     ValueSource b=fp.parseValueSource();     return new DualFloatFunction(a b){       @Override protected String name(){         return "sub";       }       @Override protected float func(      int doc       FunctionValues aVals       FunctionValues bVals){         return aVals.floatVal(doc) - bVals.floatVal(doc);       }     } ;   } } ,CLASS_INSTANCE_CREATION, line no: 208, 0.004449007529089664, 1.0, 0.16666666666666666, 0.026694045174537988
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("sub" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource a=fp.parseValueSource();     ValueSource b=fp.parseValueSource();     return new DualFloatFunction(a b){       @Override protected String name(){         return "sub";       }       @Override protected float func(      int doc       FunctionValues aVals       FunctionValues bVals){         return aVals.floatVal(doc) - bVals.floatVal(doc);       }     } ;   } } ),METHOD_INVOCATION, line no: 208, 0.004298941798941799, 1.0, 0.16666666666666666, 0.025793650793650792
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     List<ValueSource> sources=fp.parseValueSourceList();     return new MultiBoolFunction(sources){       @Override protected String name(){         return "xor";       }       @Override protected boolean func(      int doc       FunctionValues[] vals){         int nTrue=0  nFalse=0;         for (        FunctionValues dv : vals) {           if (dv.boolVal(doc))           nTrue++;  else           nFalse++;         }         return nTrue != 0 && nFalse != 0;       }     } ;   } } ,CLASS_INSTANCE_CREATION, line no: 703, 0.003137065637065637, 1.0, 0.14285714285714285, 0.02195945945945946
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("xor" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     List<ValueSource> sources=fp.parseValueSourceList();     return new MultiBoolFunction(sources){       @Override protected String name(){         return "xor";       }       @Override protected boolean func(      int doc       FunctionValues[] vals){         int nTrue=0  nFalse=0;         for (        FunctionValues dv : vals) {           if (dv.boolVal(doc))           nTrue++;  else           nFalse++;         }         return nTrue != 0 && nFalse != 0;       }     } ;   } } ),METHOD_INVOCATION, line no: 703, 0.0030494956603330987, 1.0, 0.14285714285714285, 0.021346469622331693
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     double radius=fp.parseDouble();     boolean convert=Boolean.parseBoolean(fp.parseArg());     MultiValueSource pv1;     MultiValueSource pv2;     ValueSource one=fp.parseValueSource();     ValueSource two=fp.parseValueSource();     if (fp.hasMoreArguments()) {       List<ValueSource> s1=new ArrayList<ValueSource>();       s1.add(one);       s1.add(two);       pv1=new VectorValueSource(s1);       ValueSource x2=fp.parseValueSource();       ValueSource y2=fp.parseValueSource();       List<ValueSource> s2=new ArrayList<ValueSource>();       s2.add(x2);       s2.add(y2);       pv2=new VectorValueSource(s2);     }  else {       if (one instanceof MultiValueSource && two instanceof MultiValueSource) {         pv1=(MultiValueSource)one;         pv2=(MultiValueSource)two;       }  else {         throw new SolrException(SolrException.ErrorCode.BAD_REQUEST "Input must either be 2 MultiValueSources  or there must be 4 ValueSources");       }     }     return new HaversineFunction(pv1 pv2 radius convert);   } } ,CLASS_INSTANCE_CREATION, line no: 264, 0.002664298401420959, 1.0, 0.08333333333333333, 0.03197158081705151
new LiteralValueSource(fp.getString()),CLASS_INSTANCE_CREATION, line no: 107,addParser("hsin" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     double radius=fp.parseDouble();     boolean convert=Boolean.parseBoolean(fp.parseArg());     MultiValueSource pv1;     MultiValueSource pv2;     ValueSource one=fp.parseValueSource();     ValueSource two=fp.parseValueSource();     if (fp.hasMoreArguments()) {       List<ValueSource> s1=new ArrayList<ValueSource>();       s1.add(one);       s1.add(two);       pv1=new VectorValueSource(s1);       ValueSource x2=fp.parseValueSource();       ValueSource y2=fp.parseValueSource();       List<ValueSource> s2=new ArrayList<ValueSource>();       s2.add(x2);       s2.add(y2);       pv2=new VectorValueSource(s2);     }  else {       if (one instanceof MultiValueSource && two instanceof MultiValueSource) {         pv1=(MultiValueSource)one;         pv2=(MultiValueSource)two;       }  else {         throw new SolrException(SolrException.ErrorCode.BAD_REQUEST "Input must either be 2 MultiValueSources  or there must be 4 ValueSources");       }     }     return new HaversineFunction(pv1 pv2 radius convert);   } } ),METHOD_INVOCATION, line no: 264, 0.0026223776223776225, 1.0, 0.08333333333333333, 0.03146853146853147
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource str1=fp.parseValueSource();     ValueSource str2=fp.parseValueSource();     String distClass=fp.parseArg();     StringDistance dist=null;     if (distClass.equalsIgnoreCase("jw")) {       dist=new JaroWinklerDistance();     }  else     if (distClass.equalsIgnoreCase("edit")) {       dist=new LevensteinDistance();     }  else     if (distClass.equalsIgnoreCase("ngram")) {       int ngram=2;       if (fp.hasMoreArguments()) {         ngram=fp.parseInt();       }       dist=new NGramDistance(ngram);     }  else {       dist=fp.req.getCore().getResourceLoader().newInstance(distClass StringDistance.class);     }     return new StringDistanceFunction(str1 str2 dist);   } } ,CLASS_INSTANCE_CREATION, line no: 327, 0.0021875, 1.0, 0.125, 0.0175
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("strdist" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     ValueSource str1=fp.parseValueSource();     ValueSource str2=fp.parseValueSource();     String distClass=fp.parseArg();     StringDistance dist=null;     if (distClass.equalsIgnoreCase("jw")) {       dist=new JaroWinklerDistance();     }  else     if (distClass.equalsIgnoreCase("edit")) {       dist=new LevensteinDistance();     }  else     if (distClass.equalsIgnoreCase("ngram")) {       int ngram=2;       if (fp.hasMoreArguments()) {         ngram=fp.parseInt();       }       dist=new NGramDistance(ngram);     }  else {       dist=fp.req.getCore().getResourceLoader().newInstance(distClass StringDistance.class);     }     return new StringDistanceFunction(str1 str2 dist);   } } ),METHOD_INVOCATION, line no: 327, 0.002131546894031669, 1.0, 0.125, 0.01705237515225335
fp.getString(),METHOD_INVOCATION, line no: 107,new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     double radius=fp.parseDouble();     boolean convert=Boolean.parseBoolean(fp.parseArg());     MultiValueSource pv1;     MultiValueSource pv2;     ValueSource one=fp.parseValueSource();     ValueSource two=fp.parseValueSource();     if (fp.hasMoreArguments()) {       List<ValueSource> s1=new ArrayList<ValueSource>();       s1.add(one);       s1.add(two);       pv1=new VectorValueSource(s1);       ValueSource x2=fp.parseValueSource();       ValueSource y2=fp.parseValueSource();       List<ValueSource> s2=new ArrayList<ValueSource>();       s2.add(x2);       s2.add(y2);       pv2=new VectorValueSource(s2);     }  else {       if (one instanceof MultiValueSource && two instanceof MultiValueSource) {         pv1=(MultiValueSource)one;         pv2=(MultiValueSource)two;       }  else {         throw new SolrException(SolrException.ErrorCode.BAD_REQUEST "Input must either be 2 MultiValueSources  or there must be 4 ValueSources");       }     }     return new HaversineFunction(pv1 pv2 radius convert);   } } ,CLASS_INSTANCE_CREATION, line no: 264, 9.621077560686797E-4, 1.0, 0.08333333333333333, 0.011545293072824156
fp.getString(),METHOD_INVOCATION, line no: 107,addParser("hsin" new ValueSourceParser(){   @Override public ValueSource parse(  FunctionQParser fp) throws ParseException {     double radius=fp.parseDouble();     boolean convert=Boolean.parseBoolean(fp.parseArg());     MultiValueSource pv1;     MultiValueSource pv2;     ValueSource one=fp.parseValueSource();     ValueSource two=fp.parseValueSource();     if (fp.hasMoreArguments()) {       List<ValueSource> s1=new ArrayList<ValueSource>();       s1.add(one);       s1.add(two);       pv1=new VectorValueSource(s1);       ValueSource x2=fp.parseValueSource();       ValueSource y2=fp.parseValueSource();       List<ValueSource> s2=new ArrayList<ValueSource>();       s2.add(x2);       s2.add(y2);       pv2=new VectorValueSource(s2);     }  else {       if (one instanceof MultiValueSource && two instanceof MultiValueSource) {         pv1=(MultiValueSource)one;         pv2=(MultiValueSource)two;       }  else {         throw new SolrException(SolrException.ErrorCode.BAD_REQUEST "Input must either be 2 MultiValueSources  or there must be 4 ValueSources");       }     }     return new HaversineFunction(pv1 pv2 radius convert);   } } ),METHOD_INVOCATION, line no: 264, 9.46969696969697E-4, 1.0, 0.08333333333333333, 0.011363636363636364
