values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,Object,SIMPLE_NAME, line no: 72, 2.0, 0.05, 1.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,input,SIMPLE_NAME, line no: 102, 2.0, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,apply,SIMPLE_NAME, line no: 152, 2.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,put,SIMPLE_NAME, line no: 164, 2.0, 1.0, 1.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,manipulate,SIMPLE_NAME, line no: 164, 2.0, 1.0, 1.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,getMetric,SIMPLE_NAME, line no: 164, 2.0, 1.0, 1.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,calculatedPostAgg,SIMPLE_NAME, line no: 167, 2.0, 1.0, 1.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,getDimensionValue,SIMPLE_NAME, line no: 174, 2.0, 1.0, 1.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,next,SIMPLE_NAME, line no: 334, 2.0, 1.0, 1.0
values,SIMPLE_NAME, line no: 213,Map,SIMPLE_NAME, line no: 61, 2.0, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,apply,SIMPLE_NAME, line no: 152, 2.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,vals,SIMPLE_NAME, line no: 308, 2.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,Object,SIMPLE_NAME, line no: 72, 2.0, 0.047619047619047616, 1.0
put,SIMPLE_NAME, line no: 213,input,SIMPLE_NAME, line no: 102, 2.0, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,apply,SIMPLE_NAME, line no: 152, 2.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,manipulate,SIMPLE_NAME, line no: 164, 2.0, 1.0, 1.0
put,SIMPLE_NAME, line no: 213,getMetric,SIMPLE_NAME, line no: 164, 2.0, 1.0, 1.0
put,SIMPLE_NAME, line no: 213,calculatedPostAgg,SIMPLE_NAME, line no: 167, 2.0, 1.0, 1.0
put,SIMPLE_NAME, line no: 213,input.getMetric(postAgg.getName()),METHOD_INVOCATION, line no: 167, 2.0, 1.0, 1.0
put,SIMPLE_NAME, line no: 213,values.put(dimension input.getDimensionValue(dimension)),METHOD_INVOCATION, line no: 174, 2.0, 1.0, 1.0
put,SIMPLE_NAME, line no: 213,input.getDimensionValue(dimension),METHOD_INVOCATION, line no: 174, 2.0, 1.0, 1.0
put,SIMPLE_NAME, line no: 213,getDimensionValue,SIMPLE_NAME, line no: 174, 2.0, 1.0, 1.0
put,SIMPLE_NAME, line no: 213,inputIter.next(),METHOD_INVOCATION, line no: 334, 2.0, 1.0, 1.0
put,SIMPLE_NAME, line no: 213,next,SIMPLE_NAME, line no: 334, 2.0, 1.0, 1.0
put,SIMPLE_NAME, line no: 213,vals.put(query.getDimensionSpec().getOutputName() resultIter.next()),METHOD_INVOCATION, line no: 343, 2.0, 1.0, 1.0
put,SIMPLE_NAME, line no: 213,resultIter.next(),METHOD_INVOCATION, line no: 343, 2.0, 1.0, 1.0
agg.getName(),METHOD_INVOCATION, line no: 213,String,SIMPLE_NAME, line no: 135, 2.0, 0.9523809523809523, 1.0
agg.getName(),METHOD_INVOCATION, line no: 213,dimension,SIMPLE_NAME, line no: 149, 2.0, 1.0, 1.0
agg.getName(),METHOD_INVOCATION, line no: 213,getOutputName,SIMPLE_NAME, line no: 149, 2.0, 1.0, 1.0
agg.getName(),METHOD_INVOCATION, line no: 213,getName,SIMPLE_NAME, line no: 164, 2.0, 1.0, 1.0
agg.getName(),METHOD_INVOCATION, line no: 213,getMetricName,SIMPLE_NAME, line no: 259, 2.0, 1.0, 1.0
agg.getName(),METHOD_INVOCATION, line no: 213,getStringDimensionValue,SIMPLE_NAME, line no: 309, 2.0, 1.0, 1.0
agg,SIMPLE_NAME, line no: 213,AggregatorFactory,SIMPLE_NAME, line no: 48, 2.0, 0.045454545454545456, 1.0
getName,SIMPLE_NAME, line no: 213,String,SIMPLE_NAME, line no: 135, 2.0, 0.9545454545454546, 1.0
getName,SIMPLE_NAME, line no: 213,dimension,SIMPLE_NAME, line no: 149, 2.0, 1.0, 1.0
getName,SIMPLE_NAME, line no: 213,query.getDimensionSpec().getOutputName(),METHOD_INVOCATION, line no: 149, 2.0, 1.0, 1.0
getName,SIMPLE_NAME, line no: 213,getOutputName,SIMPLE_NAME, line no: 149, 2.0, 1.0, 1.0
getName,SIMPLE_NAME, line no: 213,postAgg.getName(),METHOD_INVOCATION, line no: 167, 2.0, 1.0, 1.0
getName,SIMPLE_NAME, line no: 213,query.getTopNMetricSpec().getMetricName(query.getDimensionSpec()),METHOD_INVOCATION, line no: 258, 2.0, 1.0, 1.0
getName,SIMPLE_NAME, line no: 213,getMetricName,SIMPLE_NAME, line no: 259, 2.0, 1.0, 1.0
getName,SIMPLE_NAME, line no: 213,result.getStringDimensionValue(query.getDimensionSpec().getOutputName()),METHOD_INVOCATION, line no: 309, 2.0, 1.0, 1.0
getName,SIMPLE_NAME, line no: 213,getStringDimensionValue,SIMPLE_NAME, line no: 309, 2.0, 1.0, 1.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,Object,SIMPLE_NAME, line no: 72, 2.0, 0.047619047619047616, 1.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,input,SIMPLE_NAME, line no: 102, 2.0, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,apply,SIMPLE_NAME, line no: 152, 2.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,put,SIMPLE_NAME, line no: 164, 2.0, 0.9523809523809523, 1.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,manipulate,SIMPLE_NAME, line no: 164, 2.0, 1.0, 1.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,getMetric,SIMPLE_NAME, line no: 164, 2.0, 1.0, 1.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,calculatedPostAgg,SIMPLE_NAME, line no: 167, 2.0, 1.0, 1.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,getDimensionValue,SIMPLE_NAME, line no: 174, 2.0, 1.0, 1.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,next,SIMPLE_NAME, line no: 334, 2.0, 1.0, 1.0
manipulate,SIMPLE_NAME, line no: 213,Object,SIMPLE_NAME, line no: 72, 2.0, 0.045454545454545456, 1.0
manipulate,SIMPLE_NAME, line no: 213,input,SIMPLE_NAME, line no: 102, 2.0, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,apply,SIMPLE_NAME, line no: 152, 2.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,put,SIMPLE_NAME, line no: 164, 2.0, 0.9545454545454546, 1.0
manipulate,SIMPLE_NAME, line no: 213,getMetric,SIMPLE_NAME, line no: 164, 2.0, 1.0, 1.0
manipulate,SIMPLE_NAME, line no: 213,calculatedPostAgg,SIMPLE_NAME, line no: 167, 2.0, 1.0, 1.0
manipulate,SIMPLE_NAME, line no: 213,input.getMetric(postAgg.getName()),METHOD_INVOCATION, line no: 167, 2.0, 1.0, 1.0
manipulate,SIMPLE_NAME, line no: 213,values.put(dimension input.getDimensionValue(dimension)),METHOD_INVOCATION, line no: 174, 2.0, 1.0, 1.0
manipulate,SIMPLE_NAME, line no: 213,input.getDimensionValue(dimension),METHOD_INVOCATION, line no: 174, 2.0, 1.0, 1.0
manipulate,SIMPLE_NAME, line no: 213,getDimensionValue,SIMPLE_NAME, line no: 174, 2.0, 1.0, 1.0
manipulate,SIMPLE_NAME, line no: 213,inputIter.next(),METHOD_INVOCATION, line no: 334, 2.0, 1.0, 1.0
manipulate,SIMPLE_NAME, line no: 213,next,SIMPLE_NAME, line no: 334, 2.0, 1.0, 1.0
manipulate,SIMPLE_NAME, line no: 213,vals.put(query.getDimensionSpec().getOutputName() resultIter.next()),METHOD_INVOCATION, line no: 343, 2.0, 1.0, 1.0
manipulate,SIMPLE_NAME, line no: 213,resultIter.next(),METHOD_INVOCATION, line no: 343, 2.0, 1.0, 1.0
agg,SIMPLE_NAME, line no: 213,AggregatorFactory,SIMPLE_NAME, line no: 48, 2.0, 0.045454545454545456, 1.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,Object,SIMPLE_NAME, line no: 72, 2.0, 0.045454545454545456, 1.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,input,SIMPLE_NAME, line no: 102, 2.0, 0.8636363636363636, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,apply,SIMPLE_NAME, line no: 152, 2.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,put,SIMPLE_NAME, line no: 164, 2.0, 0.9090909090909091, 1.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,getMetric,SIMPLE_NAME, line no: 164, 2.0, 1.0, 1.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,getDimensionValue,SIMPLE_NAME, line no: 174, 2.0, 1.0, 1.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,next,SIMPLE_NAME, line no: 334, 2.0, 1.0, 1.0
input,SIMPLE_NAME, line no: 213,result,SIMPLE_NAME, line no: 152, 2.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,DimensionAndMetricValueExtractor,SIMPLE_NAME, line no: 157, 2.0, 1.0, 1.0
getMetric,SIMPLE_NAME, line no: 213,Object,SIMPLE_NAME, line no: 72, 2.0, 0.043478260869565216, 1.0
getMetric,SIMPLE_NAME, line no: 213,input,SIMPLE_NAME, line no: 102, 2.0, 0.8695652173913043, 0.0
getMetric,SIMPLE_NAME, line no: 213,apply,SIMPLE_NAME, line no: 152, 2.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,put,SIMPLE_NAME, line no: 164, 2.0, 0.9130434782608695, 1.0
getMetric,SIMPLE_NAME, line no: 213,input.getMetric(postAgg.getName()),METHOD_INVOCATION, line no: 167, 2.0, 1.0, 1.0
getMetric,SIMPLE_NAME, line no: 213,values.put(dimension input.getDimensionValue(dimension)),METHOD_INVOCATION, line no: 174, 2.0, 1.0, 1.0
getMetric,SIMPLE_NAME, line no: 213,input.getDimensionValue(dimension),METHOD_INVOCATION, line no: 174, 2.0, 1.0, 1.0
getMetric,SIMPLE_NAME, line no: 213,getDimensionValue,SIMPLE_NAME, line no: 174, 2.0, 1.0, 1.0
getMetric,SIMPLE_NAME, line no: 213,inputIter.next(),METHOD_INVOCATION, line no: 334, 2.0, 1.0, 1.0
getMetric,SIMPLE_NAME, line no: 213,next,SIMPLE_NAME, line no: 334, 2.0, 1.0, 1.0
getMetric,SIMPLE_NAME, line no: 213,vals.put(query.getDimensionSpec().getOutputName() resultIter.next()),METHOD_INVOCATION, line no: 343, 2.0, 1.0, 1.0
getMetric,SIMPLE_NAME, line no: 213,resultIter.next(),METHOD_INVOCATION, line no: 343, 2.0, 1.0, 1.0
agg.getName(),METHOD_INVOCATION, line no: 213,String,SIMPLE_NAME, line no: 135, 2.0, 0.9565217391304348, 1.0
agg.getName(),METHOD_INVOCATION, line no: 213,dimension,SIMPLE_NAME, line no: 149, 2.0, 1.0, 1.0
agg.getName(),METHOD_INVOCATION, line no: 213,getOutputName,SIMPLE_NAME, line no: 149, 2.0, 1.0, 1.0
agg.getName(),METHOD_INVOCATION, line no: 213,getName,SIMPLE_NAME, line no: 164, 2.0, 0.9130434782608695, 1.0
agg.getName(),METHOD_INVOCATION, line no: 213,getMetricName,SIMPLE_NAME, line no: 259, 2.0, 1.0, 1.0
agg.getName(),METHOD_INVOCATION, line no: 213,getStringDimensionValue,SIMPLE_NAME, line no: 309, 2.0, 1.0, 1.0
agg,SIMPLE_NAME, line no: 213,AggregatorFactory,SIMPLE_NAME, line no: 48, 2.0, 0.041666666666666664, 1.0
getName,SIMPLE_NAME, line no: 213,String,SIMPLE_NAME, line no: 135, 2.0, 0.9583333333333334, 1.0
getName,SIMPLE_NAME, line no: 213,dimension,SIMPLE_NAME, line no: 149, 2.0, 1.0, 1.0
getName,SIMPLE_NAME, line no: 213,query.getDimensionSpec().getOutputName(),METHOD_INVOCATION, line no: 149, 2.0, 1.0, 1.0
getName,SIMPLE_NAME, line no: 213,getOutputName,SIMPLE_NAME, line no: 149, 2.0, 1.0, 1.0
getName,SIMPLE_NAME, line no: 213,postAgg.getName(),METHOD_INVOCATION, line no: 167, 2.0, 1.0, 1.0
getName,SIMPLE_NAME, line no: 213,query.getTopNMetricSpec().getMetricName(query.getDimensionSpec()),METHOD_INVOCATION, line no: 258, 2.0, 1.0, 1.0
getName,SIMPLE_NAME, line no: 213,getMetricName,SIMPLE_NAME, line no: 259, 2.0, 1.0, 1.0
getName,SIMPLE_NAME, line no: 213,result.getStringDimensionValue(query.getDimensionSpec().getOutputName()),METHOD_INVOCATION, line no: 309, 2.0, 1.0, 1.0
getName,SIMPLE_NAME, line no: 213,getStringDimensionValue,SIMPLE_NAME, line no: 309, 2.0, 1.0, 1.0
getName,SIMPLE_NAME, line no: 213,query.getDataSource().toString(),METHOD_INVOCATION, line no: 134, 1.9583333333333335, 0.9583333333333334, 1.0
getName,SIMPLE_NAME, line no: 213,toString,SIMPLE_NAME, line no: 134, 1.9583333333333335, 0.9583333333333334, 1.0
getName,SIMPLE_NAME, line no: 213,String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension()),METHOD_INVOCATION, line no: 135, 1.9583333333333335, 0.9583333333333334, 1.0
getName,SIMPLE_NAME, line no: 213,format,SIMPLE_NAME, line no: 135, 1.9583333333333335, 0.9583333333333334, 1.0
getName,SIMPLE_NAME, line no: 213,"topN/%s/%s",STRING_LITERAL, line no: 135, 1.9583333333333335, 0.9583333333333334, 1.0
getName,SIMPLE_NAME, line no: 213,query.getDimensionSpec().getDimension(),METHOD_INVOCATION, line no: 135, 1.9583333333333335, 0.9583333333333334, 1.0
getName,SIMPLE_NAME, line no: 213,getDimension,SIMPLE_NAME, line no: 135, 1.9583333333333335, 0.9583333333333334, 1.0
getName,SIMPLE_NAME, line no: 213,String.valueOf(query.hasFilters()),METHOD_INVOCATION, line no: 137, 1.9583333333333335, 0.9583333333333334, 1.0
getName,SIMPLE_NAME, line no: 213,valueOf,SIMPLE_NAME, line no: 137, 1.9583333333333335, 0.9583333333333334, 1.0
getName,SIMPLE_NAME, line no: 213,String.format("% d aggs" query.getAggregatorSpecs().size()),METHOD_INVOCATION, line no: 138, 1.9583333333333335, 0.9583333333333334, 1.0
getName,SIMPLE_NAME, line no: 213,"% d aggs",STRING_LITERAL, line no: 138, 1.9583333333333335, 0.9583333333333334, 1.0
getName,SIMPLE_NAME, line no: 213,agg.getName(),METHOD_INVOCATION, line no: 164, 1.9583333333333335, 0.875, 1.0
getMetric,SIMPLE_NAME, line no: 213,manipulate,SIMPLE_NAME, line no: 164, 1.9565217391304348, 0.9565217391304348, 1.0
getMetric,SIMPLE_NAME, line no: 213,input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 164, 1.9565217391304348, 0.9565217391304348, 1.0
getMetric,SIMPLE_NAME, line no: 213,calculatedPostAgg,SIMPLE_NAME, line no: 167, 1.9565217391304348, 0.9565217391304348, 1.0
agg.getName(),METHOD_INVOCATION, line no: 213,toString,SIMPLE_NAME, line no: 134, 1.9565217391304348, 0.9565217391304348, 1.0
agg.getName(),METHOD_INVOCATION, line no: 213,format,SIMPLE_NAME, line no: 135, 1.9565217391304348, 0.9565217391304348, 1.0
agg.getName(),METHOD_INVOCATION, line no: 213,getDimension,SIMPLE_NAME, line no: 135, 1.9565217391304348, 0.9565217391304348, 1.0
agg.getName(),METHOD_INVOCATION, line no: 213,valueOf,SIMPLE_NAME, line no: 137, 1.9565217391304348, 0.9565217391304348, 1.0
agg,SIMPLE_NAME, line no: 213,factory,SIMPLE_NAME, line no: 346, 1.9545454545454546, 0.8181818181818182, 1.0
getName,SIMPLE_NAME, line no: 213,query.getDataSource().toString(),METHOD_INVOCATION, line no: 134, 1.9545454545454546, 0.9545454545454546, 1.0
getName,SIMPLE_NAME, line no: 213,toString,SIMPLE_NAME, line no: 134, 1.9545454545454546, 0.9545454545454546, 1.0
getName,SIMPLE_NAME, line no: 213,String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension()),METHOD_INVOCATION, line no: 135, 1.9545454545454546, 0.9545454545454546, 1.0
getName,SIMPLE_NAME, line no: 213,format,SIMPLE_NAME, line no: 135, 1.9545454545454546, 0.9545454545454546, 1.0
getName,SIMPLE_NAME, line no: 213,"topN/%s/%s",STRING_LITERAL, line no: 135, 1.9545454545454546, 0.9545454545454546, 1.0
getName,SIMPLE_NAME, line no: 213,query.getDimensionSpec().getDimension(),METHOD_INVOCATION, line no: 135, 1.9545454545454546, 0.9545454545454546, 1.0
getName,SIMPLE_NAME, line no: 213,getDimension,SIMPLE_NAME, line no: 135, 1.9545454545454546, 0.9545454545454546, 1.0
getName,SIMPLE_NAME, line no: 213,String.valueOf(query.hasFilters()),METHOD_INVOCATION, line no: 137, 1.9545454545454546, 0.9545454545454546, 1.0
getName,SIMPLE_NAME, line no: 213,valueOf,SIMPLE_NAME, line no: 137, 1.9545454545454546, 0.9545454545454546, 1.0
getName,SIMPLE_NAME, line no: 213,String.format("% d aggs" query.getAggregatorSpecs().size()),METHOD_INVOCATION, line no: 138, 1.9545454545454546, 0.9545454545454546, 1.0
getName,SIMPLE_NAME, line no: 213,"% d aggs",STRING_LITERAL, line no: 138, 1.9545454545454546, 0.9545454545454546, 1.0
getName,SIMPLE_NAME, line no: 213,agg.getName(),METHOD_INVOCATION, line no: 164, 1.9545454545454546, 0.9545454545454546, 1.0
getName,SIMPLE_NAME, line no: 213,factory.getName(),METHOD_INVOCATION, line no: 347, 1.9545454545454546, 0.9545454545454546, 1.0
manipulate,SIMPLE_NAME, line no: 213,fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 164, 1.9545454545454546, 0.9545454545454546, 1.0
manipulate,SIMPLE_NAME, line no: 213,input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 164, 1.9545454545454546, 0.9545454545454546, 1.0
manipulate,SIMPLE_NAME, line no: 213,factory.deserialize(resultIter.next()),METHOD_INVOCATION, line no: 347, 1.9545454545454546, 0.9545454545454546, 1.0
manipulate,SIMPLE_NAME, line no: 213,deserialize,SIMPLE_NAME, line no: 347, 1.9545454545454546, 0.9545454545454546, 1.0
agg,SIMPLE_NAME, line no: 213,factory,SIMPLE_NAME, line no: 346, 1.9545454545454546, 0.8181818181818182, 1.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,manipulate,SIMPLE_NAME, line no: 164, 1.9545454545454546, 0.9545454545454546, 1.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,calculatedPostAgg,SIMPLE_NAME, line no: 167, 1.9545454545454546, 0.9545454545454546, 1.0
put,SIMPLE_NAME, line no: 213,values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 164, 1.9523809523809523, 0.9523809523809523, 1.0
put,SIMPLE_NAME, line no: 213,fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 164, 1.9523809523809523, 0.9523809523809523, 1.0
put,SIMPLE_NAME, line no: 213,input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 164, 1.9523809523809523, 0.9523809523809523, 1.0
put,SIMPLE_NAME, line no: 213,vals.put(factory.getName() factory.deserialize(resultIter.next())),METHOD_INVOCATION, line no: 347, 1.9523809523809523, 0.9523809523809523, 1.0
put,SIMPLE_NAME, line no: 213,factory.deserialize(resultIter.next()),METHOD_INVOCATION, line no: 347, 1.9523809523809523, 0.9523809523809523, 1.0
put,SIMPLE_NAME, line no: 213,deserialize,SIMPLE_NAME, line no: 347, 1.9523809523809523, 0.9523809523809523, 1.0
agg.getName(),METHOD_INVOCATION, line no: 213,toString,SIMPLE_NAME, line no: 134, 1.9523809523809523, 0.9523809523809523, 1.0
agg.getName(),METHOD_INVOCATION, line no: 213,format,SIMPLE_NAME, line no: 135, 1.9523809523809523, 0.9523809523809523, 1.0
agg.getName(),METHOD_INVOCATION, line no: 213,getDimension,SIMPLE_NAME, line no: 135, 1.9523809523809523, 0.9523809523809523, 1.0
agg.getName(),METHOD_INVOCATION, line no: 213,valueOf,SIMPLE_NAME, line no: 137, 1.9523809523809523, 0.9523809523809523, 1.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,deserialize,SIMPLE_NAME, line no: 347, 1.9523809523809523, 0.9523809523809523, 1.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,deserialize,SIMPLE_NAME, line no: 347, 1.95, 0.95, 1.0
getMetric,SIMPLE_NAME, line no: 213,fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 164, 1.9130434782608696, 0.9130434782608695, 1.0
getMetric,SIMPLE_NAME, line no: 213,factory.deserialize(resultIter.next()),METHOD_INVOCATION, line no: 347, 1.9130434782608696, 0.9130434782608695, 1.0
getMetric,SIMPLE_NAME, line no: 213,deserialize,SIMPLE_NAME, line no: 347, 1.9130434782608696, 0.9130434782608695, 1.0
manipulate,SIMPLE_NAME, line no: 213,values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 164, 1.9090909090909092, 0.9090909090909091, 1.0
manipulate,SIMPLE_NAME, line no: 213,vals.put(factory.getName() factory.deserialize(resultIter.next())),METHOD_INVOCATION, line no: 347, 1.9090909090909092, 0.9090909090909091, 1.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,deserialize,SIMPLE_NAME, line no: 347, 1.9090909090909092, 0.9090909090909091, 1.0
agg,SIMPLE_NAME, line no: 213,factory,SIMPLE_NAME, line no: 346, 1.875, 0.75, 1.0
getName,SIMPLE_NAME, line no: 213,factory.getName(),METHOD_INVOCATION, line no: 347, 1.875, 0.875, 1.0
getName,SIMPLE_NAME, line no: 213,value.getSegmentId(),METHOD_INVOCATION, line no: 449, 1.875, 0.875, 1.0
getName,SIMPLE_NAME, line no: 213,getSegmentId,SIMPLE_NAME, line no: 449, 1.875, 0.875, 1.0
getName,SIMPLE_NAME, line no: 213,value.getIntervalString(),METHOD_INVOCATION, line no: 450, 1.875, 0.875, 1.0
getName,SIMPLE_NAME, line no: 213,getIntervalString,SIMPLE_NAME, line no: 450, 1.875, 0.875, 1.0
getMetric,SIMPLE_NAME, line no: 213,values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 164, 1.8695652173913042, 0.8695652173913043, 1.0
getMetric,SIMPLE_NAME, line no: 213,vals.put(factory.getName() factory.deserialize(resultIter.next())),METHOD_INVOCATION, line no: 347, 1.8695652173913042, 0.8695652173913043, 1.0
agg.getName(),METHOD_INVOCATION, line no: 213,getSegmentId,SIMPLE_NAME, line no: 449, 1.8695652173913042, 0.8695652173913043, 1.0
agg.getName(),METHOD_INVOCATION, line no: 213,getIntervalString,SIMPLE_NAME, line no: 450, 1.8695652173913042, 0.8695652173913043, 1.0
agg,SIMPLE_NAME, line no: 213,next,SIMPLE_NAME, line no: 334, 1.8636363636363638, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,aggIter.next(),METHOD_INVOCATION, line no: 346, 1.8636363636363638, 0.8636363636363636, 1.0
getName,SIMPLE_NAME, line no: 213,value.getSegmentId(),METHOD_INVOCATION, line no: 449, 1.8636363636363638, 0.8636363636363636, 1.0
getName,SIMPLE_NAME, line no: 213,getSegmentId,SIMPLE_NAME, line no: 449, 1.8636363636363638, 0.8636363636363636, 1.0
getName,SIMPLE_NAME, line no: 213,value.getIntervalString(),METHOD_INVOCATION, line no: 450, 1.8636363636363638, 0.8636363636363636, 1.0
getName,SIMPLE_NAME, line no: 213,getIntervalString,SIMPLE_NAME, line no: 450, 1.8636363636363638, 0.8636363636363636, 1.0
agg,SIMPLE_NAME, line no: 213,next,SIMPLE_NAME, line no: 334, 1.8636363636363638, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,aggIter.next(),METHOD_INVOCATION, line no: 346, 1.8636363636363638, 0.8636363636363636, 1.0
agg.getName(),METHOD_INVOCATION, line no: 213,getSegmentId,SIMPLE_NAME, line no: 449, 1.8571428571428572, 0.8571428571428571, 1.0
agg.getName(),METHOD_INVOCATION, line no: 213,getIntervalString,SIMPLE_NAME, line no: 450, 1.8571428571428572, 0.8571428571428571, 1.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,compute,SIMPLE_NAME, line no: 171, 1.8, 0.8, 1.0
agg,SIMPLE_NAME, line no: 213,next,SIMPLE_NAME, line no: 334, 1.7916666666666665, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,aggIter.next(),METHOD_INVOCATION, line no: 346, 1.7916666666666665, 0.7916666666666666, 1.0
put,SIMPLE_NAME, line no: 213,compute,SIMPLE_NAME, line no: 171, 1.7619047619047619, 0.7619047619047619, 1.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,compute,SIMPLE_NAME, line no: 171, 1.7619047619047619, 0.7619047619047619, 1.0
manipulate,SIMPLE_NAME, line no: 213,compute,SIMPLE_NAME, line no: 171, 1.7272727272727273, 0.7272727272727273, 1.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,compute,SIMPLE_NAME, line no: 171, 1.7272727272727273, 0.7272727272727273, 1.0
put,SIMPLE_NAME, line no: 213,postAgg.compute(values),METHOD_INVOCATION, line no: 171, 1.7142857142857144, 0.7142857142857143, 1.0
put,SIMPLE_NAME, line no: 213,postAgg.compute(vals),METHOD_INVOCATION, line no: 351, 1.7142857142857144, 0.7142857142857143, 1.0
getMetric,SIMPLE_NAME, line no: 213,compute,SIMPLE_NAME, line no: 171, 1.6956521739130435, 0.6956521739130435, 1.0
manipulate,SIMPLE_NAME, line no: 213,postAgg.compute(values),METHOD_INVOCATION, line no: 171, 1.6818181818181817, 0.6818181818181818, 1.0
manipulate,SIMPLE_NAME, line no: 213,postAgg.compute(vals),METHOD_INVOCATION, line no: 351, 1.6818181818181817, 0.6818181818181818, 1.0
put,SIMPLE_NAME, line no: 213,values.put(postAgg.getName() postAgg.compute(values)),METHOD_INVOCATION, line no: 171, 1.6666666666666665, 0.6666666666666666, 1.0
put,SIMPLE_NAME, line no: 213,result.getMetric(agg.getName()),METHOD_INVOCATION, line no: 311, 1.6666666666666665, 0.6666666666666666, 1.0
put,SIMPLE_NAME, line no: 213,vals.put(postAgg.getName() postAgg.compute(vals)),METHOD_INVOCATION, line no: 351, 1.6666666666666665, 0.6666666666666666, 1.0
getMetric,SIMPLE_NAME, line no: 213,postAgg.compute(values),METHOD_INVOCATION, line no: 171, 1.6521739130434783, 0.6521739130434783, 1.0
getMetric,SIMPLE_NAME, line no: 213,postAgg.compute(vals),METHOD_INVOCATION, line no: 351, 1.6521739130434783, 0.6521739130434783, 1.0
manipulate,SIMPLE_NAME, line no: 213,values.put(postAgg.getName() postAgg.compute(values)),METHOD_INVOCATION, line no: 171, 1.6363636363636362, 0.6363636363636364, 1.0
manipulate,SIMPLE_NAME, line no: 213,result.getMetric(agg.getName()),METHOD_INVOCATION, line no: 311, 1.6363636363636362, 0.6363636363636364, 1.0
manipulate,SIMPLE_NAME, line no: 213,vals.put(postAgg.getName() postAgg.compute(vals)),METHOD_INVOCATION, line no: 351, 1.6363636363636362, 0.6363636363636364, 1.0
getMetric,SIMPLE_NAME, line no: 213,values.put(postAgg.getName() postAgg.compute(values)),METHOD_INVOCATION, line no: 171, 1.608695652173913, 0.6086956521739131, 1.0
getMetric,SIMPLE_NAME, line no: 213,result.getMetric(agg.getName()),METHOD_INVOCATION, line no: 311, 1.608695652173913, 0.6086956521739131, 1.0
getMetric,SIMPLE_NAME, line no: 213,vals.put(postAgg.getName() postAgg.compute(vals)),METHOD_INVOCATION, line no: 351, 1.608695652173913, 0.6086956521739131, 1.0
put,SIMPLE_NAME, line no: 213,values.put(postAgg.getName() calculatedPostAgg),METHOD_INVOCATION, line no: 169, 1.5238095238095237, 0.5238095238095238, 1.0
manipulate,SIMPLE_NAME, line no: 213,values.put(postAgg.getName() calculatedPostAgg),METHOD_INVOCATION, line no: 169, 1.5, 0.5, 1.0
getMetric,SIMPLE_NAME, line no: 213,values.put(postAgg.getName() calculatedPostAgg),METHOD_INVOCATION, line no: 169, 1.4782608695652173, 0.4782608695652174, 1.0
getName,SIMPLE_NAME, line no: 213,"Can only handle [%s]  got [%s]",STRING_LITERAL, line no: 405, 1.2272727272727273, 0.22727272727272727, 1.0
getName,SIMPLE_NAME, line no: 213,"Can only handle [%s]  got [%s]",STRING_LITERAL, line no: 405, 1.2083333333333333, 0.20833333333333334, 1.0
getName,SIMPLE_NAME, line no: 213," ",STRING_LITERAL, line no: 68, 1.0454545454545454, 0.045454545454545456, 1.0
fn,SIMPLE_NAME, line no: 213,MetricManipulationFn,SIMPLE_NAME, line no: 50, 1.0454545454545454, 0.045454545454545456, 1.0
getName,SIMPLE_NAME, line no: 213," ",STRING_LITERAL, line no: 68, 1.0416666666666667, 0.041666666666666664, 1.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,query,SIMPLE_NAME, line no: 20, 1.0, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,TypeReference,SIMPLE_NAME, line no: 22, 1.0, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,Function,SIMPLE_NAME, line no: 23, 1.0, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,Iterables,SIMPLE_NAME, line no: 25, 1.0, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,Lists,SIMPLE_NAME, line no: 26, 1.0, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,Maps,SIMPLE_NAME, line no: 27, 1.0, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,Sequence,SIMPLE_NAME, line no: 33, 1.0, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,granularity,SIMPLE_NAME, line no: 38, 1.0, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,QueryGranularity,SIMPLE_NAME, line no: 38, 1.0, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,CacheStrategy,SIMPLE_NAME, line no: 39, 1.0, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,Result,SIMPLE_NAME, line no: 45, 1.0, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,AggregatorFactory,SIMPLE_NAME, line no: 48, 1.0, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,AggregatorUtil,SIMPLE_NAME, line no: 49, 1.0, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,PostAggregator,SIMPLE_NAME, line no: 51, 1.0, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,DateTime,SIMPLE_NAME, line no: 53, 1.0, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,Iterator,SIMPLE_NAME, line no: 59, 1.0, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,List,SIMPLE_NAME, line no: 60, 1.0, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,Map,SIMPLE_NAME, line no: 61, 1.0, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,TopNResultValue,SIMPLE_NAME, line no: 65, 1.0, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,TopNQuery,SIMPLE_NAME, line no: 65, 1.0, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,Override,SIMPLE_NAME, line no: 85, 1.0, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,@Override,MARKER_ANNOTATION, line no: 90, 1.0, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,getGranularity,SIMPLE_NAME, line no: 95, 1.0, 0.6, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,query.getGranularity(),METHOD_INVOCATION, line no: 108, 1.0, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,query.getDimensionSpec(),METHOD_INVOCATION, line no: 109, 1.0, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,getDimensionSpec,SIMPLE_NAME, line no: 109, 1.0, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,query.getTopNMetricSpec(),METHOD_INVOCATION, line no: 110, 1.0, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,getTopNMetricSpec,SIMPLE_NAME, line no: 110, 1.0, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,query.getAggregatorSpecs(),METHOD_INVOCATION, line no: 112, 1.0, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,getAggregatorSpecs,SIMPLE_NAME, line no: 112, 1.0, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,query.getPostAggregatorSpecs(),METHOD_INVOCATION, line no: 113, 1.0, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,getPostAggregatorSpecs,SIMPLE_NAME, line no: 113, 1.0, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,mergeSequences,SIMPLE_NAME, line no: 120, 1.0, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,seqOfSequences,SIMPLE_NAME, line no: 120, 1.0, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,String,SIMPLE_NAME, line no: 135, 1.0, 0.95, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,size,SIMPLE_NAME, line no: 138, 1.0, 0.95, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,fn,SIMPLE_NAME, line no: 144, 1.0, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   private String dimension=query.getDimensionSpec().getOutputName();   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> result){     List<Map<String Object>> serializedValues=Lists.newArrayList(Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){       @Override public Map<String Object> apply(      DimensionAndMetricValueExtractor input){         final Map<String Object> values=Maps.newHashMap();         for (        AggregatorFactory agg : query.getAggregatorSpecs()) {           values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));         }         for (        PostAggregator postAgg : prunePostAggregators(query)) {           Object calculatedPostAgg=input.getMetric(postAgg.getName());           if (calculatedPostAgg != null) {             values.put(postAgg.getName() calculatedPostAgg);           }  else {             values.put(postAgg.getName() postAgg.compute(values));           }         }         values.put(dimension input.getDimensionValue(dimension));         return values;       }     } ));     return new Result<TopNResultValue>(result.getTimestamp() new TopNResultValue(serializedValues));   } } ,CLASS_INSTANCE_CREATION, line no: 147, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,dimension,SIMPLE_NAME, line no: 149, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,query.getDimensionSpec().getOutputName(),METHOD_INVOCATION, line no: 149, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,getOutputName,SIMPLE_NAME, line no: 149, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,result,SIMPLE_NAME, line no: 152, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,serializedValues,SIMPLE_NAME, line no: 154, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,Lists.newArrayList(Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : prunePostAggregators(query)) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } )),METHOD_INVOCATION, line no: 154, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,newArrayList,SIMPLE_NAME, line no: 154, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : prunePostAggregators(query)) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } ),METHOD_INVOCATION, line no: 155, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,transform,SIMPLE_NAME, line no: 155, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,result.getValue(),METHOD_INVOCATION, line no: 156, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,getValue,SIMPLE_NAME, line no: 156, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : prunePostAggregators(query)) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } ,CLASS_INSTANCE_CREATION, line no: 157, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,DimensionAndMetricValueExtractor,SIMPLE_NAME, line no: 157, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,values,SIMPLE_NAME, line no: 162, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,Maps.newHashMap(),METHOD_INVOCATION, line no: 162, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,newHashMap,SIMPLE_NAME, line no: 162, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,agg,SIMPLE_NAME, line no: 163, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,agg.getName(),METHOD_INVOCATION, line no: 164, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,getName,SIMPLE_NAME, line no: 164, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 164, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 164, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,postAgg,SIMPLE_NAME, line no: 166, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,prunePostAggregators(query),METHOD_INVOCATION, line no: 166, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,prunePostAggregators,SIMPLE_NAME, line no: 166, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,input.getMetric(postAgg.getName()),METHOD_INVOCATION, line no: 167, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,postAgg.getName(),METHOD_INVOCATION, line no: 167, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,calculatedPostAgg != null,INFIX_EXPRESSION, line no: 168, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,null,NULL_LITERAL, line no: 168, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,values.put(dimension input.getDimensionValue(dimension)),METHOD_INVOCATION, line no: 174, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,input.getDimensionValue(dimension),METHOD_INVOCATION, line no: 174, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,new Result<TopNResultValue>(result.getTimestamp() new TopNResultValue(serializedValues)),CLASS_INSTANCE_CREATION, line no: 182, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,result.getTimestamp(),METHOD_INVOCATION, line no: 183, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,getTimestamp,SIMPLE_NAME, line no: 183, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,new TopNResultValue(serializedValues),CLASS_INSTANCE_CREATION, line no: 184, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   private String dimension=query.getDimensionSpec().getOutputName();   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> result){     List<Map<String Object>> serializedValues=Lists.newArrayList(Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){       @Override public Map<String Object> apply(      DimensionAndMetricValueExtractor input){         final Map<String Object> values=Maps.newHashMap();         for (        AggregatorFactory agg : query.getAggregatorSpecs()) {           values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));         }         for (        PostAggregator postAgg : query.getPostAggregatorSpecs()) {           Object calculatedPostAgg=input.getMetric(postAgg.getName());           if (calculatedPostAgg != null) {             values.put(postAgg.getName() calculatedPostAgg);           }  else {             values.put(postAgg.getName() postAgg.compute(values));           }         }         for (        AggregatorFactory agg : query.getAggregatorSpecs()) {           values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));         }         values.put(dimension input.getDimensionValue(dimension));         return values;       }     } ));     return new Result<TopNResultValue>(result.getTimestamp() new TopNResultValue(serializedValues));   } } ,CLASS_INSTANCE_CREATION, line no: 195, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,Lists.newArrayList(Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : query.getPostAggregatorSpecs()) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } )),METHOD_INVOCATION, line no: 202, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : query.getPostAggregatorSpecs()) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } ),METHOD_INVOCATION, line no: 203, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : query.getPostAggregatorSpecs()) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } ,CLASS_INSTANCE_CREATION, line no: 205, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,new CacheStrategy<Result<TopNResultValue> Object TopNQuery>(){   private final List<AggregatorFactory> aggs=query.getAggregatorSpecs();   private final List<PostAggregator> postAggs=AggregatorUtil.pruneDependentPostAgg(query.getPostAggregatorSpecs() query.getTopNMetricSpec().getMetricName(query.getDimensionSpec()));   @Override public byte[] computeCacheKey(  TopNQuery query){     final byte[] dimensionSpecBytes=query.getDimensionSpec().getCacheKey();     final byte[] metricSpecBytes=query.getTopNMetricSpec().getCacheKey();     final DimFilter dimFilter=query.getDimensionsFilter();     final byte[] filterBytes=dimFilter == null ? new byte[]{} : dimFilter.getCacheKey();     final byte[] aggregatorBytes=QueryCacheHelper.computeAggregatorBytes(query.getAggregatorSpecs());     final byte[] granularityBytes=query.getGranularity().cacheKey();     return ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())).put(granularityBytes).put(filterBytes).put(aggregatorBytes).array();   }   @Override public TypeReference<Object> getCacheObjectClazz(){     return OBJECT_TYPE_REFERENCE;   }   @Override public Function<Result<TopNResultValue> Object> prepareForCache(){     return new Function<Result<TopNResultValue> Object>(){       @Override public Object apply(      final Result<TopNResultValue> input){         List<DimensionAndMetricValueExtractor> results=Lists.newArrayList(input.getValue());         final List<Object> retVal=Lists.newArrayListWithCapacity(results.size() + 1);         retVal.add(input.getTimestamp().getMillis());         for (        DimensionAndMetricValueExtractor result : results) {           List<Object> vals=Lists.newArrayListWithCapacity(aggs.size() + 2);           vals.add(result.getStringDimensionValue(query.getDimensionSpec().getOutputName()));           for (          AggregatorFactory agg : aggs) {             vals.add(result.getMetric(agg.getName()));           }           retVal.add(vals);         }         return retVal;       }     } ;   }   @Override public Function<Object Result<TopNResultValue>> pullFromCache(){     return new Function<Object Result<TopNResultValue>>(){       private final QueryGranularity granularity=query.getGranularity();       @Override public Result<TopNResultValue> apply(      Object input){         List<Object> results=(List<Object>)input;         List<Map<String Object>> retVal=Lists.newArrayListWithCapacity(results.size());         Iterator<Object> inputIter=results.iterator();         DateTime timestamp=granularity.toDateTime(new DateTime(inputIter.next()).getMillis());         while (inputIter.hasNext()) {           List<Object> result=(List<Object>)inputIter.next();           Map<String Object> vals=Maps.newLinkedHashMap();           Iterator<AggregatorFactory> aggIter=aggs.iterator();           Iterator<Object> resultIter=result.iterator();           vals.put(query.getDimensionSpec().getOutputName() resultIter.next());           while (aggIter.hasNext() && resultIter.hasNext()) {             final AggregatorFactory factory=aggIter.next();             vals.put(factory.getName() factory.deserialize(resultIter.next()));           }           for (          PostAggregator postAgg : postAggs) {             vals.put(postAgg.getName() postAgg.compute(vals));           }           retVal.add(vals);         }         return new Result<TopNResultValue>(timestamp new TopNResultValue(retVal));       }     } ;   }   @Override public Sequence<Result<TopNResultValue>> mergeSequences(  Sequence<Sequence<Result<TopNResultValue>>> seqOfSequences){     return new MergeSequence<Result<TopNResultValue>>(getOrdering() seqOfSequences);   } } ,CLASS_INSTANCE_CREATION, line no: 253, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,aggs,SIMPLE_NAME, line no: 255, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,postAggs,SIMPLE_NAME, line no: 256, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,AggregatorUtil.pruneDependentPostAgg(query.getPostAggregatorSpecs() query.getTopNMetricSpec().getMetricName(query.getDimensionSpec())),METHOD_INVOCATION, line no: 256, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,pruneDependentPostAgg,SIMPLE_NAME, line no: 256, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,query.getTopNMetricSpec().getMetricName(query.getDimensionSpec()),METHOD_INVOCATION, line no: 258, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,getMetricName,SIMPLE_NAME, line no: 259, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,computeCacheKey,SIMPLE_NAME, line no: 263, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,1,NUMBER_LITERAL, line no: 275, 1.0, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,getCacheObjectClazz,SIMPLE_NAME, line no: 289, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,prepareForCache,SIMPLE_NAME, line no: 295, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,new Function<Result<TopNResultValue> Object>(){   @Override public Object apply(  final Result<TopNResultValue> input){     List<DimensionAndMetricValueExtractor> results=Lists.newArrayList(input.getValue());     final List<Object> retVal=Lists.newArrayListWithCapacity(results.size() + 1);     retVal.add(input.getTimestamp().getMillis());     for (    DimensionAndMetricValueExtractor result : results) {       List<Object> vals=Lists.newArrayListWithCapacity(aggs.size() + 2);       vals.add(result.getStringDimensionValue(query.getDimensionSpec().getOutputName()));       for (      AggregatorFactory agg : aggs) {         vals.add(result.getMetric(agg.getName()));       }       retVal.add(vals);     }     return retVal;   } } ,CLASS_INSTANCE_CREATION, line no: 297, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,results,SIMPLE_NAME, line no: 302, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,Lists.newArrayList(input.getValue()),METHOD_INVOCATION, line no: 302, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,input.getValue(),METHOD_INVOCATION, line no: 302, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,retVal,SIMPLE_NAME, line no: 303, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,Lists.newArrayListWithCapacity(results.size() + 1),METHOD_INVOCATION, line no: 303, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,newArrayListWithCapacity,SIMPLE_NAME, line no: 303, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,results.size() + 1,INFIX_EXPRESSION, line no: 303, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,results.size(),METHOD_INVOCATION, line no: 303, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,retVal.add(input.getTimestamp().getMillis()),METHOD_INVOCATION, line no: 306, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,add,SIMPLE_NAME, line no: 306, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,input.getTimestamp().getMillis(),METHOD_INVOCATION, line no: 306, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,input.getTimestamp(),METHOD_INVOCATION, line no: 306, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,getMillis,SIMPLE_NAME, line no: 306, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,vals,SIMPLE_NAME, line no: 308, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,Lists.newArrayListWithCapacity(aggs.size() + 2),METHOD_INVOCATION, line no: 308, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,aggs.size() + 2,INFIX_EXPRESSION, line no: 308, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,aggs.size(),METHOD_INVOCATION, line no: 308, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,2,NUMBER_LITERAL, line no: 308, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,vals.add(result.getStringDimensionValue(query.getDimensionSpec().getOutputName())),METHOD_INVOCATION, line no: 309, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,result.getStringDimensionValue(query.getDimensionSpec().getOutputName()),METHOD_INVOCATION, line no: 309, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,getStringDimensionValue,SIMPLE_NAME, line no: 309, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,retVal.add(vals),METHOD_INVOCATION, line no: 313, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,pullFromCache,SIMPLE_NAME, line no: 321, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,new Function<Object Result<TopNResultValue>>(){   private final QueryGranularity granularity=query.getGranularity();   @Override public Result<TopNResultValue> apply(  Object input){     List<Object> results=(List<Object>)input;     List<Map<String Object>> retVal=Lists.newArrayListWithCapacity(results.size());     Iterator<Object> inputIter=results.iterator();     DateTime timestamp=granularity.toDateTime(new DateTime(inputIter.next()).getMillis());     while (inputIter.hasNext()) {       List<Object> result=(List<Object>)inputIter.next();       Map<String Object> vals=Maps.newLinkedHashMap();       Iterator<AggregatorFactory> aggIter=aggs.iterator();       Iterator<Object> resultIter=result.iterator();       vals.put(query.getDimensionSpec().getOutputName() resultIter.next());       while (aggIter.hasNext() && resultIter.hasNext()) {         final AggregatorFactory factory=aggIter.next();         vals.put(factory.getName() factory.deserialize(resultIter.next()));       }       for (      PostAggregator postAgg : postAggs) {         vals.put(postAgg.getName() postAgg.compute(vals));       }       retVal.add(vals);     }     return new Result<TopNResultValue>(timestamp new TopNResultValue(retVal));   } } ,CLASS_INSTANCE_CREATION, line no: 323, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,(List<Object>)input,CAST_EXPRESSION, line no: 330, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,Lists.newArrayListWithCapacity(results.size()),METHOD_INVOCATION, line no: 331, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,inputIter,SIMPLE_NAME, line no: 333, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,results.iterator(),METHOD_INVOCATION, line no: 333, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,iterator,SIMPLE_NAME, line no: 333, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,timestamp,SIMPLE_NAME, line no: 334, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,granularity.toDateTime(new DateTime(inputIter.next()).getMillis()),METHOD_INVOCATION, line no: 334, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,toDateTime,SIMPLE_NAME, line no: 334, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,new DateTime(inputIter.next()).getMillis(),METHOD_INVOCATION, line no: 334, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,new DateTime(inputIter.next()),CLASS_INSTANCE_CREATION, line no: 334, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,inputIter.next(),METHOD_INVOCATION, line no: 334, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,inputIter.hasNext(),METHOD_INVOCATION, line no: 336, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,hasNext,SIMPLE_NAME, line no: 336, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,(List<Object>)inputIter.next(),CAST_EXPRESSION, line no: 337, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,Maps.newLinkedHashMap(),METHOD_INVOCATION, line no: 338, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,newLinkedHashMap,SIMPLE_NAME, line no: 338, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,aggIter,SIMPLE_NAME, line no: 340, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,aggs.iterator(),METHOD_INVOCATION, line no: 340, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,resultIter,SIMPLE_NAME, line no: 341, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,result.iterator(),METHOD_INVOCATION, line no: 341, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,vals.put(query.getDimensionSpec().getOutputName() resultIter.next()),METHOD_INVOCATION, line no: 343, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,resultIter.next(),METHOD_INVOCATION, line no: 343, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,aggIter.hasNext() && resultIter.hasNext(),INFIX_EXPRESSION, line no: 345, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,aggIter.hasNext(),METHOD_INVOCATION, line no: 345, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,resultIter.hasNext(),METHOD_INVOCATION, line no: 345, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,new Result<TopNResultValue>(timestamp new TopNResultValue(retVal)),CLASS_INSTANCE_CREATION, line no: 357, 1.0, 1.0, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,new TopNResultValue(retVal),CLASS_INSTANCE_CREATION, line no: 357, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,query,SIMPLE_NAME, line no: 20, 1.0, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,TypeReference,SIMPLE_NAME, line no: 22, 1.0, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,Function,SIMPLE_NAME, line no: 23, 1.0, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,Iterables,SIMPLE_NAME, line no: 25, 1.0, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,Lists,SIMPLE_NAME, line no: 26, 1.0, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,Maps,SIMPLE_NAME, line no: 27, 1.0, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,Sequence,SIMPLE_NAME, line no: 33, 1.0, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,granularity,SIMPLE_NAME, line no: 38, 1.0, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,QueryGranularity,SIMPLE_NAME, line no: 38, 1.0, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,CacheStrategy,SIMPLE_NAME, line no: 39, 1.0, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,Result,SIMPLE_NAME, line no: 45, 1.0, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,AggregatorFactory,SIMPLE_NAME, line no: 48, 1.0, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,AggregatorUtil,SIMPLE_NAME, line no: 49, 1.0, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,PostAggregator,SIMPLE_NAME, line no: 51, 1.0, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,DateTime,SIMPLE_NAME, line no: 53, 1.0, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,Iterator,SIMPLE_NAME, line no: 59, 1.0, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,List,SIMPLE_NAME, line no: 60, 1.0, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,TopNResultValue,SIMPLE_NAME, line no: 65, 1.0, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,TopNQuery,SIMPLE_NAME, line no: 65, 1.0, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,Object,SIMPLE_NAME, line no: 72, 1.0, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,Override,SIMPLE_NAME, line no: 85, 1.0, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,@Override,MARKER_ANNOTATION, line no: 90, 1.0, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,getGranularity,SIMPLE_NAME, line no: 95, 1.0, 0.5714285714285714, 0.0
values,SIMPLE_NAME, line no: 213,input,SIMPLE_NAME, line no: 102, 1.0, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,query.getGranularity(),METHOD_INVOCATION, line no: 108, 1.0, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,query.getDimensionSpec(),METHOD_INVOCATION, line no: 109, 1.0, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,getDimensionSpec,SIMPLE_NAME, line no: 109, 1.0, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,query.getTopNMetricSpec(),METHOD_INVOCATION, line no: 110, 1.0, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,getTopNMetricSpec,SIMPLE_NAME, line no: 110, 1.0, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,query.getAggregatorSpecs(),METHOD_INVOCATION, line no: 112, 1.0, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,getAggregatorSpecs,SIMPLE_NAME, line no: 112, 1.0, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,query.getPostAggregatorSpecs(),METHOD_INVOCATION, line no: 113, 1.0, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,getPostAggregatorSpecs,SIMPLE_NAME, line no: 113, 1.0, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,mergeSequences,SIMPLE_NAME, line no: 120, 1.0, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,seqOfSequences,SIMPLE_NAME, line no: 120, 1.0, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,String,SIMPLE_NAME, line no: 135, 1.0, 0.9523809523809523, 0.0
values,SIMPLE_NAME, line no: 213,size,SIMPLE_NAME, line no: 138, 1.0, 0.9523809523809523, 0.0
values,SIMPLE_NAME, line no: 213,fn,SIMPLE_NAME, line no: 144, 1.0, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   private String dimension=query.getDimensionSpec().getOutputName();   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> result){     List<Map<String Object>> serializedValues=Lists.newArrayList(Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){       @Override public Map<String Object> apply(      DimensionAndMetricValueExtractor input){         final Map<String Object> values=Maps.newHashMap();         for (        AggregatorFactory agg : query.getAggregatorSpecs()) {           values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));         }         for (        PostAggregator postAgg : prunePostAggregators(query)) {           Object calculatedPostAgg=input.getMetric(postAgg.getName());           if (calculatedPostAgg != null) {             values.put(postAgg.getName() calculatedPostAgg);           }  else {             values.put(postAgg.getName() postAgg.compute(values));           }         }         values.put(dimension input.getDimensionValue(dimension));         return values;       }     } ));     return new Result<TopNResultValue>(result.getTimestamp() new TopNResultValue(serializedValues));   } } ,CLASS_INSTANCE_CREATION, line no: 147, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,dimension,SIMPLE_NAME, line no: 149, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,query.getDimensionSpec().getOutputName(),METHOD_INVOCATION, line no: 149, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,getOutputName,SIMPLE_NAME, line no: 149, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,result,SIMPLE_NAME, line no: 152, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,serializedValues,SIMPLE_NAME, line no: 154, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,Lists.newArrayList(Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : prunePostAggregators(query)) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } )),METHOD_INVOCATION, line no: 154, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,newArrayList,SIMPLE_NAME, line no: 154, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : prunePostAggregators(query)) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } ),METHOD_INVOCATION, line no: 155, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,transform,SIMPLE_NAME, line no: 155, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,result.getValue(),METHOD_INVOCATION, line no: 156, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,getValue,SIMPLE_NAME, line no: 156, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : prunePostAggregators(query)) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } ,CLASS_INSTANCE_CREATION, line no: 157, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,DimensionAndMetricValueExtractor,SIMPLE_NAME, line no: 157, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,Maps.newHashMap(),METHOD_INVOCATION, line no: 162, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,newHashMap,SIMPLE_NAME, line no: 162, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,agg,SIMPLE_NAME, line no: 163, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,put,SIMPLE_NAME, line no: 164, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,getName,SIMPLE_NAME, line no: 164, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,manipulate,SIMPLE_NAME, line no: 164, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,getMetric,SIMPLE_NAME, line no: 164, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,postAgg,SIMPLE_NAME, line no: 166, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,prunePostAggregators(query),METHOD_INVOCATION, line no: 166, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,prunePostAggregators,SIMPLE_NAME, line no: 166, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,calculatedPostAgg,SIMPLE_NAME, line no: 167, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,input.getMetric(postAgg.getName()),METHOD_INVOCATION, line no: 167, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,postAgg.getName(),METHOD_INVOCATION, line no: 167, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,calculatedPostAgg != null,INFIX_EXPRESSION, line no: 168, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,null,NULL_LITERAL, line no: 168, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,values.put(dimension input.getDimensionValue(dimension)),METHOD_INVOCATION, line no: 174, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,input.getDimensionValue(dimension),METHOD_INVOCATION, line no: 174, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,getDimensionValue,SIMPLE_NAME, line no: 174, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,new Result<TopNResultValue>(result.getTimestamp() new TopNResultValue(serializedValues)),CLASS_INSTANCE_CREATION, line no: 182, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,result.getTimestamp(),METHOD_INVOCATION, line no: 183, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,getTimestamp,SIMPLE_NAME, line no: 183, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,new TopNResultValue(serializedValues),CLASS_INSTANCE_CREATION, line no: 184, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   private String dimension=query.getDimensionSpec().getOutputName();   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> result){     List<Map<String Object>> serializedValues=Lists.newArrayList(Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){       @Override public Map<String Object> apply(      DimensionAndMetricValueExtractor input){         final Map<String Object> values=Maps.newHashMap();         for (        AggregatorFactory agg : query.getAggregatorSpecs()) {           values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));         }         for (        PostAggregator postAgg : query.getPostAggregatorSpecs()) {           Object calculatedPostAgg=input.getMetric(postAgg.getName());           if (calculatedPostAgg != null) {             values.put(postAgg.getName() calculatedPostAgg);           }  else {             values.put(postAgg.getName() postAgg.compute(values));           }         }         for (        AggregatorFactory agg : query.getAggregatorSpecs()) {           values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));         }         values.put(dimension input.getDimensionValue(dimension));         return values;       }     } ));     return new Result<TopNResultValue>(result.getTimestamp() new TopNResultValue(serializedValues));   } } ,CLASS_INSTANCE_CREATION, line no: 195, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,Lists.newArrayList(Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : query.getPostAggregatorSpecs()) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } )),METHOD_INVOCATION, line no: 202, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : query.getPostAggregatorSpecs()) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } ),METHOD_INVOCATION, line no: 203, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : query.getPostAggregatorSpecs()) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } ,CLASS_INSTANCE_CREATION, line no: 205, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,new CacheStrategy<Result<TopNResultValue> Object TopNQuery>(){   private final List<AggregatorFactory> aggs=query.getAggregatorSpecs();   private final List<PostAggregator> postAggs=AggregatorUtil.pruneDependentPostAgg(query.getPostAggregatorSpecs() query.getTopNMetricSpec().getMetricName(query.getDimensionSpec()));   @Override public byte[] computeCacheKey(  TopNQuery query){     final byte[] dimensionSpecBytes=query.getDimensionSpec().getCacheKey();     final byte[] metricSpecBytes=query.getTopNMetricSpec().getCacheKey();     final DimFilter dimFilter=query.getDimensionsFilter();     final byte[] filterBytes=dimFilter == null ? new byte[]{} : dimFilter.getCacheKey();     final byte[] aggregatorBytes=QueryCacheHelper.computeAggregatorBytes(query.getAggregatorSpecs());     final byte[] granularityBytes=query.getGranularity().cacheKey();     return ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())).put(granularityBytes).put(filterBytes).put(aggregatorBytes).array();   }   @Override public TypeReference<Object> getCacheObjectClazz(){     return OBJECT_TYPE_REFERENCE;   }   @Override public Function<Result<TopNResultValue> Object> prepareForCache(){     return new Function<Result<TopNResultValue> Object>(){       @Override public Object apply(      final Result<TopNResultValue> input){         List<DimensionAndMetricValueExtractor> results=Lists.newArrayList(input.getValue());         final List<Object> retVal=Lists.newArrayListWithCapacity(results.size() + 1);         retVal.add(input.getTimestamp().getMillis());         for (        DimensionAndMetricValueExtractor result : results) {           List<Object> vals=Lists.newArrayListWithCapacity(aggs.size() + 2);           vals.add(result.getStringDimensionValue(query.getDimensionSpec().getOutputName()));           for (          AggregatorFactory agg : aggs) {             vals.add(result.getMetric(agg.getName()));           }           retVal.add(vals);         }         return retVal;       }     } ;   }   @Override public Function<Object Result<TopNResultValue>> pullFromCache(){     return new Function<Object Result<TopNResultValue>>(){       private final QueryGranularity granularity=query.getGranularity();       @Override public Result<TopNResultValue> apply(      Object input){         List<Object> results=(List<Object>)input;         List<Map<String Object>> retVal=Lists.newArrayListWithCapacity(results.size());         Iterator<Object> inputIter=results.iterator();         DateTime timestamp=granularity.toDateTime(new DateTime(inputIter.next()).getMillis());         while (inputIter.hasNext()) {           List<Object> result=(List<Object>)inputIter.next();           Map<String Object> vals=Maps.newLinkedHashMap();           Iterator<AggregatorFactory> aggIter=aggs.iterator();           Iterator<Object> resultIter=result.iterator();           vals.put(query.getDimensionSpec().getOutputName() resultIter.next());           while (aggIter.hasNext() && resultIter.hasNext()) {             final AggregatorFactory factory=aggIter.next();             vals.put(factory.getName() factory.deserialize(resultIter.next()));           }           for (          PostAggregator postAgg : postAggs) {             vals.put(postAgg.getName() postAgg.compute(vals));           }           retVal.add(vals);         }         return new Result<TopNResultValue>(timestamp new TopNResultValue(retVal));       }     } ;   }   @Override public Sequence<Result<TopNResultValue>> mergeSequences(  Sequence<Sequence<Result<TopNResultValue>>> seqOfSequences){     return new MergeSequence<Result<TopNResultValue>>(getOrdering() seqOfSequences);   } } ,CLASS_INSTANCE_CREATION, line no: 253, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,aggs,SIMPLE_NAME, line no: 255, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,postAggs,SIMPLE_NAME, line no: 256, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,AggregatorUtil.pruneDependentPostAgg(query.getPostAggregatorSpecs() query.getTopNMetricSpec().getMetricName(query.getDimensionSpec())),METHOD_INVOCATION, line no: 256, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,pruneDependentPostAgg,SIMPLE_NAME, line no: 256, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,query.getTopNMetricSpec().getMetricName(query.getDimensionSpec()),METHOD_INVOCATION, line no: 258, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,getMetricName,SIMPLE_NAME, line no: 259, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,computeCacheKey,SIMPLE_NAME, line no: 263, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,1,NUMBER_LITERAL, line no: 275, 1.0, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,getCacheObjectClazz,SIMPLE_NAME, line no: 289, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,prepareForCache,SIMPLE_NAME, line no: 295, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,new Function<Result<TopNResultValue> Object>(){   @Override public Object apply(  final Result<TopNResultValue> input){     List<DimensionAndMetricValueExtractor> results=Lists.newArrayList(input.getValue());     final List<Object> retVal=Lists.newArrayListWithCapacity(results.size() + 1);     retVal.add(input.getTimestamp().getMillis());     for (    DimensionAndMetricValueExtractor result : results) {       List<Object> vals=Lists.newArrayListWithCapacity(aggs.size() + 2);       vals.add(result.getStringDimensionValue(query.getDimensionSpec().getOutputName()));       for (      AggregatorFactory agg : aggs) {         vals.add(result.getMetric(agg.getName()));       }       retVal.add(vals);     }     return retVal;   } } ,CLASS_INSTANCE_CREATION, line no: 297, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,results,SIMPLE_NAME, line no: 302, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,Lists.newArrayList(input.getValue()),METHOD_INVOCATION, line no: 302, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,input.getValue(),METHOD_INVOCATION, line no: 302, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,retVal,SIMPLE_NAME, line no: 303, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,Lists.newArrayListWithCapacity(results.size() + 1),METHOD_INVOCATION, line no: 303, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,newArrayListWithCapacity,SIMPLE_NAME, line no: 303, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,results.size() + 1,INFIX_EXPRESSION, line no: 303, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,results.size(),METHOD_INVOCATION, line no: 303, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,retVal.add(input.getTimestamp().getMillis()),METHOD_INVOCATION, line no: 306, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,add,SIMPLE_NAME, line no: 306, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,input.getTimestamp().getMillis(),METHOD_INVOCATION, line no: 306, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,input.getTimestamp(),METHOD_INVOCATION, line no: 306, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,getMillis,SIMPLE_NAME, line no: 306, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,Lists.newArrayListWithCapacity(aggs.size() + 2),METHOD_INVOCATION, line no: 308, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,aggs.size() + 2,INFIX_EXPRESSION, line no: 308, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,aggs.size(),METHOD_INVOCATION, line no: 308, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,2,NUMBER_LITERAL, line no: 308, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,vals.add(result.getStringDimensionValue(query.getDimensionSpec().getOutputName())),METHOD_INVOCATION, line no: 309, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,result.getStringDimensionValue(query.getDimensionSpec().getOutputName()),METHOD_INVOCATION, line no: 309, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,getStringDimensionValue,SIMPLE_NAME, line no: 309, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,retVal.add(vals),METHOD_INVOCATION, line no: 313, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,pullFromCache,SIMPLE_NAME, line no: 321, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,new Function<Object Result<TopNResultValue>>(){   private final QueryGranularity granularity=query.getGranularity();   @Override public Result<TopNResultValue> apply(  Object input){     List<Object> results=(List<Object>)input;     List<Map<String Object>> retVal=Lists.newArrayListWithCapacity(results.size());     Iterator<Object> inputIter=results.iterator();     DateTime timestamp=granularity.toDateTime(new DateTime(inputIter.next()).getMillis());     while (inputIter.hasNext()) {       List<Object> result=(List<Object>)inputIter.next();       Map<String Object> vals=Maps.newLinkedHashMap();       Iterator<AggregatorFactory> aggIter=aggs.iterator();       Iterator<Object> resultIter=result.iterator();       vals.put(query.getDimensionSpec().getOutputName() resultIter.next());       while (aggIter.hasNext() && resultIter.hasNext()) {         final AggregatorFactory factory=aggIter.next();         vals.put(factory.getName() factory.deserialize(resultIter.next()));       }       for (      PostAggregator postAgg : postAggs) {         vals.put(postAgg.getName() postAgg.compute(vals));       }       retVal.add(vals);     }     return new Result<TopNResultValue>(timestamp new TopNResultValue(retVal));   } } ,CLASS_INSTANCE_CREATION, line no: 323, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,(List<Object>)input,CAST_EXPRESSION, line no: 330, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,Lists.newArrayListWithCapacity(results.size()),METHOD_INVOCATION, line no: 331, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,inputIter,SIMPLE_NAME, line no: 333, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,results.iterator(),METHOD_INVOCATION, line no: 333, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,iterator,SIMPLE_NAME, line no: 333, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,timestamp,SIMPLE_NAME, line no: 334, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,granularity.toDateTime(new DateTime(inputIter.next()).getMillis()),METHOD_INVOCATION, line no: 334, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,toDateTime,SIMPLE_NAME, line no: 334, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,new DateTime(inputIter.next()).getMillis(),METHOD_INVOCATION, line no: 334, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,new DateTime(inputIter.next()),CLASS_INSTANCE_CREATION, line no: 334, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,inputIter.next(),METHOD_INVOCATION, line no: 334, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,next,SIMPLE_NAME, line no: 334, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,inputIter.hasNext(),METHOD_INVOCATION, line no: 336, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,hasNext,SIMPLE_NAME, line no: 336, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,(List<Object>)inputIter.next(),CAST_EXPRESSION, line no: 337, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,Maps.newLinkedHashMap(),METHOD_INVOCATION, line no: 338, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,newLinkedHashMap,SIMPLE_NAME, line no: 338, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,aggIter,SIMPLE_NAME, line no: 340, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,aggs.iterator(),METHOD_INVOCATION, line no: 340, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,resultIter,SIMPLE_NAME, line no: 341, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,result.iterator(),METHOD_INVOCATION, line no: 341, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,vals.put(query.getDimensionSpec().getOutputName() resultIter.next()),METHOD_INVOCATION, line no: 343, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,resultIter.next(),METHOD_INVOCATION, line no: 343, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,aggIter.hasNext() && resultIter.hasNext(),INFIX_EXPRESSION, line no: 345, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,aggIter.hasNext(),METHOD_INVOCATION, line no: 345, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,resultIter.hasNext(),METHOD_INVOCATION, line no: 345, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,new Result<TopNResultValue>(timestamp new TopNResultValue(retVal)),CLASS_INSTANCE_CREATION, line no: 357, 1.0, 1.0, 0.0
values,SIMPLE_NAME, line no: 213,new TopNResultValue(retVal),CLASS_INSTANCE_CREATION, line no: 357, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,query,SIMPLE_NAME, line no: 20, 1.0, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,TypeReference,SIMPLE_NAME, line no: 22, 1.0, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,Function,SIMPLE_NAME, line no: 23, 1.0, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,Iterables,SIMPLE_NAME, line no: 25, 1.0, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,Lists,SIMPLE_NAME, line no: 26, 1.0, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,Maps,SIMPLE_NAME, line no: 27, 1.0, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,Sequence,SIMPLE_NAME, line no: 33, 1.0, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,granularity,SIMPLE_NAME, line no: 38, 1.0, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,QueryGranularity,SIMPLE_NAME, line no: 38, 1.0, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,CacheStrategy,SIMPLE_NAME, line no: 39, 1.0, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,Result,SIMPLE_NAME, line no: 45, 1.0, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,AggregatorFactory,SIMPLE_NAME, line no: 48, 1.0, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,AggregatorUtil,SIMPLE_NAME, line no: 49, 1.0, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,PostAggregator,SIMPLE_NAME, line no: 51, 1.0, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,DateTime,SIMPLE_NAME, line no: 53, 1.0, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,Iterator,SIMPLE_NAME, line no: 59, 1.0, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,List,SIMPLE_NAME, line no: 60, 1.0, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,Map,SIMPLE_NAME, line no: 61, 1.0, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,TopNResultValue,SIMPLE_NAME, line no: 65, 1.0, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,TopNQuery,SIMPLE_NAME, line no: 65, 1.0, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,Override,SIMPLE_NAME, line no: 85, 1.0, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,@Override,MARKER_ANNOTATION, line no: 90, 1.0, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,getGranularity,SIMPLE_NAME, line no: 95, 1.0, 0.5714285714285714, 0.0
put,SIMPLE_NAME, line no: 213,query.getGranularity(),METHOD_INVOCATION, line no: 108, 1.0, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,query.getDimensionSpec(),METHOD_INVOCATION, line no: 109, 1.0, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,getDimensionSpec,SIMPLE_NAME, line no: 109, 1.0, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,query.getTopNMetricSpec(),METHOD_INVOCATION, line no: 110, 1.0, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,getTopNMetricSpec,SIMPLE_NAME, line no: 110, 1.0, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,query.getAggregatorSpecs(),METHOD_INVOCATION, line no: 112, 1.0, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,getAggregatorSpecs,SIMPLE_NAME, line no: 112, 1.0, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,query.getPostAggregatorSpecs(),METHOD_INVOCATION, line no: 113, 1.0, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,getPostAggregatorSpecs,SIMPLE_NAME, line no: 113, 1.0, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,mergeSequences,SIMPLE_NAME, line no: 120, 1.0, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,seqOfSequences,SIMPLE_NAME, line no: 120, 1.0, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,String,SIMPLE_NAME, line no: 135, 1.0, 0.9523809523809523, 0.0
put,SIMPLE_NAME, line no: 213,size,SIMPLE_NAME, line no: 138, 1.0, 0.9523809523809523, 0.0
put,SIMPLE_NAME, line no: 213,fn,SIMPLE_NAME, line no: 144, 1.0, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   private String dimension=query.getDimensionSpec().getOutputName();   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> result){     List<Map<String Object>> serializedValues=Lists.newArrayList(Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){       @Override public Map<String Object> apply(      DimensionAndMetricValueExtractor input){         final Map<String Object> values=Maps.newHashMap();         for (        AggregatorFactory agg : query.getAggregatorSpecs()) {           values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));         }         for (        PostAggregator postAgg : prunePostAggregators(query)) {           Object calculatedPostAgg=input.getMetric(postAgg.getName());           if (calculatedPostAgg != null) {             values.put(postAgg.getName() calculatedPostAgg);           }  else {             values.put(postAgg.getName() postAgg.compute(values));           }         }         values.put(dimension input.getDimensionValue(dimension));         return values;       }     } ));     return new Result<TopNResultValue>(result.getTimestamp() new TopNResultValue(serializedValues));   } } ,CLASS_INSTANCE_CREATION, line no: 147, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,dimension,SIMPLE_NAME, line no: 149, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,query.getDimensionSpec().getOutputName(),METHOD_INVOCATION, line no: 149, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,getOutputName,SIMPLE_NAME, line no: 149, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,result,SIMPLE_NAME, line no: 152, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,serializedValues,SIMPLE_NAME, line no: 154, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,Lists.newArrayList(Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : prunePostAggregators(query)) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } )),METHOD_INVOCATION, line no: 154, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,newArrayList,SIMPLE_NAME, line no: 154, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : prunePostAggregators(query)) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } ),METHOD_INVOCATION, line no: 155, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,transform,SIMPLE_NAME, line no: 155, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,result.getValue(),METHOD_INVOCATION, line no: 156, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,getValue,SIMPLE_NAME, line no: 156, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : prunePostAggregators(query)) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } ,CLASS_INSTANCE_CREATION, line no: 157, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,DimensionAndMetricValueExtractor,SIMPLE_NAME, line no: 157, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,values,SIMPLE_NAME, line no: 162, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,Maps.newHashMap(),METHOD_INVOCATION, line no: 162, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,newHashMap,SIMPLE_NAME, line no: 162, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,agg,SIMPLE_NAME, line no: 163, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,getName,SIMPLE_NAME, line no: 164, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,postAgg,SIMPLE_NAME, line no: 166, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,prunePostAggregators(query),METHOD_INVOCATION, line no: 166, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,prunePostAggregators,SIMPLE_NAME, line no: 166, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,postAgg.getName(),METHOD_INVOCATION, line no: 167, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,calculatedPostAgg != null,INFIX_EXPRESSION, line no: 168, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,null,NULL_LITERAL, line no: 168, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,new Result<TopNResultValue>(result.getTimestamp() new TopNResultValue(serializedValues)),CLASS_INSTANCE_CREATION, line no: 182, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,result.getTimestamp(),METHOD_INVOCATION, line no: 183, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,getTimestamp,SIMPLE_NAME, line no: 183, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,new TopNResultValue(serializedValues),CLASS_INSTANCE_CREATION, line no: 184, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   private String dimension=query.getDimensionSpec().getOutputName();   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> result){     List<Map<String Object>> serializedValues=Lists.newArrayList(Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){       @Override public Map<String Object> apply(      DimensionAndMetricValueExtractor input){         final Map<String Object> values=Maps.newHashMap();         for (        AggregatorFactory agg : query.getAggregatorSpecs()) {           values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));         }         for (        PostAggregator postAgg : query.getPostAggregatorSpecs()) {           Object calculatedPostAgg=input.getMetric(postAgg.getName());           if (calculatedPostAgg != null) {             values.put(postAgg.getName() calculatedPostAgg);           }  else {             values.put(postAgg.getName() postAgg.compute(values));           }         }         for (        AggregatorFactory agg : query.getAggregatorSpecs()) {           values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));         }         values.put(dimension input.getDimensionValue(dimension));         return values;       }     } ));     return new Result<TopNResultValue>(result.getTimestamp() new TopNResultValue(serializedValues));   } } ,CLASS_INSTANCE_CREATION, line no: 195, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,Lists.newArrayList(Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : query.getPostAggregatorSpecs()) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } )),METHOD_INVOCATION, line no: 202, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : query.getPostAggregatorSpecs()) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } ),METHOD_INVOCATION, line no: 203, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : query.getPostAggregatorSpecs()) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } ,CLASS_INSTANCE_CREATION, line no: 205, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,new CacheStrategy<Result<TopNResultValue> Object TopNQuery>(){   private final List<AggregatorFactory> aggs=query.getAggregatorSpecs();   private final List<PostAggregator> postAggs=AggregatorUtil.pruneDependentPostAgg(query.getPostAggregatorSpecs() query.getTopNMetricSpec().getMetricName(query.getDimensionSpec()));   @Override public byte[] computeCacheKey(  TopNQuery query){     final byte[] dimensionSpecBytes=query.getDimensionSpec().getCacheKey();     final byte[] metricSpecBytes=query.getTopNMetricSpec().getCacheKey();     final DimFilter dimFilter=query.getDimensionsFilter();     final byte[] filterBytes=dimFilter == null ? new byte[]{} : dimFilter.getCacheKey();     final byte[] aggregatorBytes=QueryCacheHelper.computeAggregatorBytes(query.getAggregatorSpecs());     final byte[] granularityBytes=query.getGranularity().cacheKey();     return ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())).put(granularityBytes).put(filterBytes).put(aggregatorBytes).array();   }   @Override public TypeReference<Object> getCacheObjectClazz(){     return OBJECT_TYPE_REFERENCE;   }   @Override public Function<Result<TopNResultValue> Object> prepareForCache(){     return new Function<Result<TopNResultValue> Object>(){       @Override public Object apply(      final Result<TopNResultValue> input){         List<DimensionAndMetricValueExtractor> results=Lists.newArrayList(input.getValue());         final List<Object> retVal=Lists.newArrayListWithCapacity(results.size() + 1);         retVal.add(input.getTimestamp().getMillis());         for (        DimensionAndMetricValueExtractor result : results) {           List<Object> vals=Lists.newArrayListWithCapacity(aggs.size() + 2);           vals.add(result.getStringDimensionValue(query.getDimensionSpec().getOutputName()));           for (          AggregatorFactory agg : aggs) {             vals.add(result.getMetric(agg.getName()));           }           retVal.add(vals);         }         return retVal;       }     } ;   }   @Override public Function<Object Result<TopNResultValue>> pullFromCache(){     return new Function<Object Result<TopNResultValue>>(){       private final QueryGranularity granularity=query.getGranularity();       @Override public Result<TopNResultValue> apply(      Object input){         List<Object> results=(List<Object>)input;         List<Map<String Object>> retVal=Lists.newArrayListWithCapacity(results.size());         Iterator<Object> inputIter=results.iterator();         DateTime timestamp=granularity.toDateTime(new DateTime(inputIter.next()).getMillis());         while (inputIter.hasNext()) {           List<Object> result=(List<Object>)inputIter.next();           Map<String Object> vals=Maps.newLinkedHashMap();           Iterator<AggregatorFactory> aggIter=aggs.iterator();           Iterator<Object> resultIter=result.iterator();           vals.put(query.getDimensionSpec().getOutputName() resultIter.next());           while (aggIter.hasNext() && resultIter.hasNext()) {             final AggregatorFactory factory=aggIter.next();             vals.put(factory.getName() factory.deserialize(resultIter.next()));           }           for (          PostAggregator postAgg : postAggs) {             vals.put(postAgg.getName() postAgg.compute(vals));           }           retVal.add(vals);         }         return new Result<TopNResultValue>(timestamp new TopNResultValue(retVal));       }     } ;   }   @Override public Sequence<Result<TopNResultValue>> mergeSequences(  Sequence<Sequence<Result<TopNResultValue>>> seqOfSequences){     return new MergeSequence<Result<TopNResultValue>>(getOrdering() seqOfSequences);   } } ,CLASS_INSTANCE_CREATION, line no: 253, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,aggs,SIMPLE_NAME, line no: 255, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,postAggs,SIMPLE_NAME, line no: 256, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,AggregatorUtil.pruneDependentPostAgg(query.getPostAggregatorSpecs() query.getTopNMetricSpec().getMetricName(query.getDimensionSpec())),METHOD_INVOCATION, line no: 256, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,pruneDependentPostAgg,SIMPLE_NAME, line no: 256, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,query.getTopNMetricSpec().getMetricName(query.getDimensionSpec()),METHOD_INVOCATION, line no: 258, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,getMetricName,SIMPLE_NAME, line no: 259, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,computeCacheKey,SIMPLE_NAME, line no: 263, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,1,NUMBER_LITERAL, line no: 275, 1.0, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,getCacheObjectClazz,SIMPLE_NAME, line no: 289, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,prepareForCache,SIMPLE_NAME, line no: 295, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,new Function<Result<TopNResultValue> Object>(){   @Override public Object apply(  final Result<TopNResultValue> input){     List<DimensionAndMetricValueExtractor> results=Lists.newArrayList(input.getValue());     final List<Object> retVal=Lists.newArrayListWithCapacity(results.size() + 1);     retVal.add(input.getTimestamp().getMillis());     for (    DimensionAndMetricValueExtractor result : results) {       List<Object> vals=Lists.newArrayListWithCapacity(aggs.size() + 2);       vals.add(result.getStringDimensionValue(query.getDimensionSpec().getOutputName()));       for (      AggregatorFactory agg : aggs) {         vals.add(result.getMetric(agg.getName()));       }       retVal.add(vals);     }     return retVal;   } } ,CLASS_INSTANCE_CREATION, line no: 297, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,results,SIMPLE_NAME, line no: 302, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,Lists.newArrayList(input.getValue()),METHOD_INVOCATION, line no: 302, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,input.getValue(),METHOD_INVOCATION, line no: 302, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,retVal,SIMPLE_NAME, line no: 303, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,Lists.newArrayListWithCapacity(results.size() + 1),METHOD_INVOCATION, line no: 303, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,newArrayListWithCapacity,SIMPLE_NAME, line no: 303, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,results.size() + 1,INFIX_EXPRESSION, line no: 303, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,results.size(),METHOD_INVOCATION, line no: 303, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,retVal.add(input.getTimestamp().getMillis()),METHOD_INVOCATION, line no: 306, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,add,SIMPLE_NAME, line no: 306, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,input.getTimestamp().getMillis(),METHOD_INVOCATION, line no: 306, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,input.getTimestamp(),METHOD_INVOCATION, line no: 306, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,getMillis,SIMPLE_NAME, line no: 306, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,vals,SIMPLE_NAME, line no: 308, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,Lists.newArrayListWithCapacity(aggs.size() + 2),METHOD_INVOCATION, line no: 308, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,aggs.size() + 2,INFIX_EXPRESSION, line no: 308, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,aggs.size(),METHOD_INVOCATION, line no: 308, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,2,NUMBER_LITERAL, line no: 308, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,vals.add(result.getStringDimensionValue(query.getDimensionSpec().getOutputName())),METHOD_INVOCATION, line no: 309, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,result.getStringDimensionValue(query.getDimensionSpec().getOutputName()),METHOD_INVOCATION, line no: 309, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,getStringDimensionValue,SIMPLE_NAME, line no: 309, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,retVal.add(vals),METHOD_INVOCATION, line no: 313, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,pullFromCache,SIMPLE_NAME, line no: 321, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,new Function<Object Result<TopNResultValue>>(){   private final QueryGranularity granularity=query.getGranularity();   @Override public Result<TopNResultValue> apply(  Object input){     List<Object> results=(List<Object>)input;     List<Map<String Object>> retVal=Lists.newArrayListWithCapacity(results.size());     Iterator<Object> inputIter=results.iterator();     DateTime timestamp=granularity.toDateTime(new DateTime(inputIter.next()).getMillis());     while (inputIter.hasNext()) {       List<Object> result=(List<Object>)inputIter.next();       Map<String Object> vals=Maps.newLinkedHashMap();       Iterator<AggregatorFactory> aggIter=aggs.iterator();       Iterator<Object> resultIter=result.iterator();       vals.put(query.getDimensionSpec().getOutputName() resultIter.next());       while (aggIter.hasNext() && resultIter.hasNext()) {         final AggregatorFactory factory=aggIter.next();         vals.put(factory.getName() factory.deserialize(resultIter.next()));       }       for (      PostAggregator postAgg : postAggs) {         vals.put(postAgg.getName() postAgg.compute(vals));       }       retVal.add(vals);     }     return new Result<TopNResultValue>(timestamp new TopNResultValue(retVal));   } } ,CLASS_INSTANCE_CREATION, line no: 323, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,(List<Object>)input,CAST_EXPRESSION, line no: 330, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,Lists.newArrayListWithCapacity(results.size()),METHOD_INVOCATION, line no: 331, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,inputIter,SIMPLE_NAME, line no: 333, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,results.iterator(),METHOD_INVOCATION, line no: 333, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,iterator,SIMPLE_NAME, line no: 333, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,timestamp,SIMPLE_NAME, line no: 334, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,granularity.toDateTime(new DateTime(inputIter.next()).getMillis()),METHOD_INVOCATION, line no: 334, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,toDateTime,SIMPLE_NAME, line no: 334, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,new DateTime(inputIter.next()).getMillis(),METHOD_INVOCATION, line no: 334, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,new DateTime(inputIter.next()),CLASS_INSTANCE_CREATION, line no: 334, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,inputIter.hasNext(),METHOD_INVOCATION, line no: 336, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,hasNext,SIMPLE_NAME, line no: 336, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,(List<Object>)inputIter.next(),CAST_EXPRESSION, line no: 337, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,Maps.newLinkedHashMap(),METHOD_INVOCATION, line no: 338, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,newLinkedHashMap,SIMPLE_NAME, line no: 338, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,aggIter,SIMPLE_NAME, line no: 340, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,aggs.iterator(),METHOD_INVOCATION, line no: 340, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,resultIter,SIMPLE_NAME, line no: 341, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,result.iterator(),METHOD_INVOCATION, line no: 341, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,aggIter.hasNext() && resultIter.hasNext(),INFIX_EXPRESSION, line no: 345, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,aggIter.hasNext(),METHOD_INVOCATION, line no: 345, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,resultIter.hasNext(),METHOD_INVOCATION, line no: 345, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,new Result<TopNResultValue>(timestamp new TopNResultValue(retVal)),CLASS_INSTANCE_CREATION, line no: 357, 1.0, 1.0, 0.0
put,SIMPLE_NAME, line no: 213,new TopNResultValue(retVal),CLASS_INSTANCE_CREATION, line no: 357, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,query,SIMPLE_NAME, line no: 20, 1.0, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,TypeReference,SIMPLE_NAME, line no: 22, 1.0, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,Function,SIMPLE_NAME, line no: 23, 1.0, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,Iterables,SIMPLE_NAME, line no: 25, 1.0, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,Lists,SIMPLE_NAME, line no: 26, 1.0, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,Maps,SIMPLE_NAME, line no: 27, 1.0, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,Sequence,SIMPLE_NAME, line no: 33, 1.0, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,granularity,SIMPLE_NAME, line no: 38, 1.0, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,QueryGranularity,SIMPLE_NAME, line no: 38, 1.0, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,CacheStrategy,SIMPLE_NAME, line no: 39, 1.0, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,Result,SIMPLE_NAME, line no: 45, 1.0, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,AggregatorFactory,SIMPLE_NAME, line no: 48, 1.0, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,AggregatorUtil,SIMPLE_NAME, line no: 49, 1.0, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,PostAggregator,SIMPLE_NAME, line no: 51, 1.0, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,DateTime,SIMPLE_NAME, line no: 53, 1.0, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,Iterator,SIMPLE_NAME, line no: 59, 1.0, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,List,SIMPLE_NAME, line no: 60, 1.0, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,Map,SIMPLE_NAME, line no: 61, 1.0, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,TopNResultValue,SIMPLE_NAME, line no: 65, 1.0, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,TopNQuery,SIMPLE_NAME, line no: 65, 1.0, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,Object,SIMPLE_NAME, line no: 72, 1.0, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,Override,SIMPLE_NAME, line no: 85, 1.0, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,@Override,MARKER_ANNOTATION, line no: 90, 1.0, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,getGranularity,SIMPLE_NAME, line no: 95, 1.0, 0.5714285714285714, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,input,SIMPLE_NAME, line no: 102, 1.0, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,query.getGranularity(),METHOD_INVOCATION, line no: 108, 1.0, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,query.getDimensionSpec(),METHOD_INVOCATION, line no: 109, 1.0, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,getDimensionSpec,SIMPLE_NAME, line no: 109, 1.0, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,query.getTopNMetricSpec(),METHOD_INVOCATION, line no: 110, 1.0, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,getTopNMetricSpec,SIMPLE_NAME, line no: 110, 1.0, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,query.getAggregatorSpecs(),METHOD_INVOCATION, line no: 112, 1.0, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,getAggregatorSpecs,SIMPLE_NAME, line no: 112, 1.0, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,query.getPostAggregatorSpecs(),METHOD_INVOCATION, line no: 113, 1.0, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,getPostAggregatorSpecs,SIMPLE_NAME, line no: 113, 1.0, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,mergeSequences,SIMPLE_NAME, line no: 120, 1.0, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,seqOfSequences,SIMPLE_NAME, line no: 120, 1.0, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,size,SIMPLE_NAME, line no: 138, 1.0, 0.9523809523809523, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,fn,SIMPLE_NAME, line no: 144, 1.0, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   private String dimension=query.getDimensionSpec().getOutputName();   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> result){     List<Map<String Object>> serializedValues=Lists.newArrayList(Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){       @Override public Map<String Object> apply(      DimensionAndMetricValueExtractor input){         final Map<String Object> values=Maps.newHashMap();         for (        AggregatorFactory agg : query.getAggregatorSpecs()) {           values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));         }         for (        PostAggregator postAgg : prunePostAggregators(query)) {           Object calculatedPostAgg=input.getMetric(postAgg.getName());           if (calculatedPostAgg != null) {             values.put(postAgg.getName() calculatedPostAgg);           }  else {             values.put(postAgg.getName() postAgg.compute(values));           }         }         values.put(dimension input.getDimensionValue(dimension));         return values;       }     } ));     return new Result<TopNResultValue>(result.getTimestamp() new TopNResultValue(serializedValues));   } } ,CLASS_INSTANCE_CREATION, line no: 147, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,query.getDimensionSpec().getOutputName(),METHOD_INVOCATION, line no: 149, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,apply,SIMPLE_NAME, line no: 152, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,result,SIMPLE_NAME, line no: 152, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,serializedValues,SIMPLE_NAME, line no: 154, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,Lists.newArrayList(Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : prunePostAggregators(query)) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } )),METHOD_INVOCATION, line no: 154, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,newArrayList,SIMPLE_NAME, line no: 154, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : prunePostAggregators(query)) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } ),METHOD_INVOCATION, line no: 155, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,transform,SIMPLE_NAME, line no: 155, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,result.getValue(),METHOD_INVOCATION, line no: 156, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,getValue,SIMPLE_NAME, line no: 156, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : prunePostAggregators(query)) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } ,CLASS_INSTANCE_CREATION, line no: 157, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,DimensionAndMetricValueExtractor,SIMPLE_NAME, line no: 157, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,values,SIMPLE_NAME, line no: 162, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,Maps.newHashMap(),METHOD_INVOCATION, line no: 162, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,newHashMap,SIMPLE_NAME, line no: 162, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,agg,SIMPLE_NAME, line no: 163, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,put,SIMPLE_NAME, line no: 164, 1.0, 0.9523809523809523, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 164, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,manipulate,SIMPLE_NAME, line no: 164, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 164, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,getMetric,SIMPLE_NAME, line no: 164, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,postAgg,SIMPLE_NAME, line no: 166, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,prunePostAggregators(query),METHOD_INVOCATION, line no: 166, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,prunePostAggregators,SIMPLE_NAME, line no: 166, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,calculatedPostAgg,SIMPLE_NAME, line no: 167, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,input.getMetric(postAgg.getName()),METHOD_INVOCATION, line no: 167, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,postAgg.getName(),METHOD_INVOCATION, line no: 167, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,calculatedPostAgg != null,INFIX_EXPRESSION, line no: 168, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,null,NULL_LITERAL, line no: 168, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,values.put(dimension input.getDimensionValue(dimension)),METHOD_INVOCATION, line no: 174, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,input.getDimensionValue(dimension),METHOD_INVOCATION, line no: 174, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,getDimensionValue,SIMPLE_NAME, line no: 174, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,new Result<TopNResultValue>(result.getTimestamp() new TopNResultValue(serializedValues)),CLASS_INSTANCE_CREATION, line no: 182, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,result.getTimestamp(),METHOD_INVOCATION, line no: 183, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,getTimestamp,SIMPLE_NAME, line no: 183, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,new TopNResultValue(serializedValues),CLASS_INSTANCE_CREATION, line no: 184, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   private String dimension=query.getDimensionSpec().getOutputName();   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> result){     List<Map<String Object>> serializedValues=Lists.newArrayList(Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){       @Override public Map<String Object> apply(      DimensionAndMetricValueExtractor input){         final Map<String Object> values=Maps.newHashMap();         for (        AggregatorFactory agg : query.getAggregatorSpecs()) {           values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));         }         for (        PostAggregator postAgg : query.getPostAggregatorSpecs()) {           Object calculatedPostAgg=input.getMetric(postAgg.getName());           if (calculatedPostAgg != null) {             values.put(postAgg.getName() calculatedPostAgg);           }  else {             values.put(postAgg.getName() postAgg.compute(values));           }         }         for (        AggregatorFactory agg : query.getAggregatorSpecs()) {           values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));         }         values.put(dimension input.getDimensionValue(dimension));         return values;       }     } ));     return new Result<TopNResultValue>(result.getTimestamp() new TopNResultValue(serializedValues));   } } ,CLASS_INSTANCE_CREATION, line no: 195, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,Lists.newArrayList(Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : query.getPostAggregatorSpecs()) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } )),METHOD_INVOCATION, line no: 202, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : query.getPostAggregatorSpecs()) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } ),METHOD_INVOCATION, line no: 203, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : query.getPostAggregatorSpecs()) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } ,CLASS_INSTANCE_CREATION, line no: 205, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,new CacheStrategy<Result<TopNResultValue> Object TopNQuery>(){   private final List<AggregatorFactory> aggs=query.getAggregatorSpecs();   private final List<PostAggregator> postAggs=AggregatorUtil.pruneDependentPostAgg(query.getPostAggregatorSpecs() query.getTopNMetricSpec().getMetricName(query.getDimensionSpec()));   @Override public byte[] computeCacheKey(  TopNQuery query){     final byte[] dimensionSpecBytes=query.getDimensionSpec().getCacheKey();     final byte[] metricSpecBytes=query.getTopNMetricSpec().getCacheKey();     final DimFilter dimFilter=query.getDimensionsFilter();     final byte[] filterBytes=dimFilter == null ? new byte[]{} : dimFilter.getCacheKey();     final byte[] aggregatorBytes=QueryCacheHelper.computeAggregatorBytes(query.getAggregatorSpecs());     final byte[] granularityBytes=query.getGranularity().cacheKey();     return ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())).put(granularityBytes).put(filterBytes).put(aggregatorBytes).array();   }   @Override public TypeReference<Object> getCacheObjectClazz(){     return OBJECT_TYPE_REFERENCE;   }   @Override public Function<Result<TopNResultValue> Object> prepareForCache(){     return new Function<Result<TopNResultValue> Object>(){       @Override public Object apply(      final Result<TopNResultValue> input){         List<DimensionAndMetricValueExtractor> results=Lists.newArrayList(input.getValue());         final List<Object> retVal=Lists.newArrayListWithCapacity(results.size() + 1);         retVal.add(input.getTimestamp().getMillis());         for (        DimensionAndMetricValueExtractor result : results) {           List<Object> vals=Lists.newArrayListWithCapacity(aggs.size() + 2);           vals.add(result.getStringDimensionValue(query.getDimensionSpec().getOutputName()));           for (          AggregatorFactory agg : aggs) {             vals.add(result.getMetric(agg.getName()));           }           retVal.add(vals);         }         return retVal;       }     } ;   }   @Override public Function<Object Result<TopNResultValue>> pullFromCache(){     return new Function<Object Result<TopNResultValue>>(){       private final QueryGranularity granularity=query.getGranularity();       @Override public Result<TopNResultValue> apply(      Object input){         List<Object> results=(List<Object>)input;         List<Map<String Object>> retVal=Lists.newArrayListWithCapacity(results.size());         Iterator<Object> inputIter=results.iterator();         DateTime timestamp=granularity.toDateTime(new DateTime(inputIter.next()).getMillis());         while (inputIter.hasNext()) {           List<Object> result=(List<Object>)inputIter.next();           Map<String Object> vals=Maps.newLinkedHashMap();           Iterator<AggregatorFactory> aggIter=aggs.iterator();           Iterator<Object> resultIter=result.iterator();           vals.put(query.getDimensionSpec().getOutputName() resultIter.next());           while (aggIter.hasNext() && resultIter.hasNext()) {             final AggregatorFactory factory=aggIter.next();             vals.put(factory.getName() factory.deserialize(resultIter.next()));           }           for (          PostAggregator postAgg : postAggs) {             vals.put(postAgg.getName() postAgg.compute(vals));           }           retVal.add(vals);         }         return new Result<TopNResultValue>(timestamp new TopNResultValue(retVal));       }     } ;   }   @Override public Sequence<Result<TopNResultValue>> mergeSequences(  Sequence<Sequence<Result<TopNResultValue>>> seqOfSequences){     return new MergeSequence<Result<TopNResultValue>>(getOrdering() seqOfSequences);   } } ,CLASS_INSTANCE_CREATION, line no: 253, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,aggs,SIMPLE_NAME, line no: 255, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,postAggs,SIMPLE_NAME, line no: 256, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,AggregatorUtil.pruneDependentPostAgg(query.getPostAggregatorSpecs() query.getTopNMetricSpec().getMetricName(query.getDimensionSpec())),METHOD_INVOCATION, line no: 256, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,pruneDependentPostAgg,SIMPLE_NAME, line no: 256, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,query.getTopNMetricSpec().getMetricName(query.getDimensionSpec()),METHOD_INVOCATION, line no: 258, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,computeCacheKey,SIMPLE_NAME, line no: 263, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,1,NUMBER_LITERAL, line no: 275, 1.0, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,getCacheObjectClazz,SIMPLE_NAME, line no: 289, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,prepareForCache,SIMPLE_NAME, line no: 295, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,new Function<Result<TopNResultValue> Object>(){   @Override public Object apply(  final Result<TopNResultValue> input){     List<DimensionAndMetricValueExtractor> results=Lists.newArrayList(input.getValue());     final List<Object> retVal=Lists.newArrayListWithCapacity(results.size() + 1);     retVal.add(input.getTimestamp().getMillis());     for (    DimensionAndMetricValueExtractor result : results) {       List<Object> vals=Lists.newArrayListWithCapacity(aggs.size() + 2);       vals.add(result.getStringDimensionValue(query.getDimensionSpec().getOutputName()));       for (      AggregatorFactory agg : aggs) {         vals.add(result.getMetric(agg.getName()));       }       retVal.add(vals);     }     return retVal;   } } ,CLASS_INSTANCE_CREATION, line no: 297, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,results,SIMPLE_NAME, line no: 302, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,Lists.newArrayList(input.getValue()),METHOD_INVOCATION, line no: 302, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,input.getValue(),METHOD_INVOCATION, line no: 302, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,retVal,SIMPLE_NAME, line no: 303, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,Lists.newArrayListWithCapacity(results.size() + 1),METHOD_INVOCATION, line no: 303, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,newArrayListWithCapacity,SIMPLE_NAME, line no: 303, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,results.size() + 1,INFIX_EXPRESSION, line no: 303, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,results.size(),METHOD_INVOCATION, line no: 303, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,retVal.add(input.getTimestamp().getMillis()),METHOD_INVOCATION, line no: 306, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,add,SIMPLE_NAME, line no: 306, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,input.getTimestamp().getMillis(),METHOD_INVOCATION, line no: 306, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,input.getTimestamp(),METHOD_INVOCATION, line no: 306, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,getMillis,SIMPLE_NAME, line no: 306, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,vals,SIMPLE_NAME, line no: 308, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,Lists.newArrayListWithCapacity(aggs.size() + 2),METHOD_INVOCATION, line no: 308, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,aggs.size() + 2,INFIX_EXPRESSION, line no: 308, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,aggs.size(),METHOD_INVOCATION, line no: 308, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,2,NUMBER_LITERAL, line no: 308, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,vals.add(result.getStringDimensionValue(query.getDimensionSpec().getOutputName())),METHOD_INVOCATION, line no: 309, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,result.getStringDimensionValue(query.getDimensionSpec().getOutputName()),METHOD_INVOCATION, line no: 309, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,retVal.add(vals),METHOD_INVOCATION, line no: 313, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,pullFromCache,SIMPLE_NAME, line no: 321, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,new Function<Object Result<TopNResultValue>>(){   private final QueryGranularity granularity=query.getGranularity();   @Override public Result<TopNResultValue> apply(  Object input){     List<Object> results=(List<Object>)input;     List<Map<String Object>> retVal=Lists.newArrayListWithCapacity(results.size());     Iterator<Object> inputIter=results.iterator();     DateTime timestamp=granularity.toDateTime(new DateTime(inputIter.next()).getMillis());     while (inputIter.hasNext()) {       List<Object> result=(List<Object>)inputIter.next();       Map<String Object> vals=Maps.newLinkedHashMap();       Iterator<AggregatorFactory> aggIter=aggs.iterator();       Iterator<Object> resultIter=result.iterator();       vals.put(query.getDimensionSpec().getOutputName() resultIter.next());       while (aggIter.hasNext() && resultIter.hasNext()) {         final AggregatorFactory factory=aggIter.next();         vals.put(factory.getName() factory.deserialize(resultIter.next()));       }       for (      PostAggregator postAgg : postAggs) {         vals.put(postAgg.getName() postAgg.compute(vals));       }       retVal.add(vals);     }     return new Result<TopNResultValue>(timestamp new TopNResultValue(retVal));   } } ,CLASS_INSTANCE_CREATION, line no: 323, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,(List<Object>)input,CAST_EXPRESSION, line no: 330, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,Lists.newArrayListWithCapacity(results.size()),METHOD_INVOCATION, line no: 331, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,inputIter,SIMPLE_NAME, line no: 333, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,results.iterator(),METHOD_INVOCATION, line no: 333, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,iterator,SIMPLE_NAME, line no: 333, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,timestamp,SIMPLE_NAME, line no: 334, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,granularity.toDateTime(new DateTime(inputIter.next()).getMillis()),METHOD_INVOCATION, line no: 334, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,toDateTime,SIMPLE_NAME, line no: 334, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,new DateTime(inputIter.next()).getMillis(),METHOD_INVOCATION, line no: 334, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,new DateTime(inputIter.next()),CLASS_INSTANCE_CREATION, line no: 334, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,inputIter.next(),METHOD_INVOCATION, line no: 334, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,next,SIMPLE_NAME, line no: 334, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,inputIter.hasNext(),METHOD_INVOCATION, line no: 336, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,hasNext,SIMPLE_NAME, line no: 336, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,(List<Object>)inputIter.next(),CAST_EXPRESSION, line no: 337, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,Maps.newLinkedHashMap(),METHOD_INVOCATION, line no: 338, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,newLinkedHashMap,SIMPLE_NAME, line no: 338, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,aggIter,SIMPLE_NAME, line no: 340, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,aggs.iterator(),METHOD_INVOCATION, line no: 340, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,resultIter,SIMPLE_NAME, line no: 341, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,result.iterator(),METHOD_INVOCATION, line no: 341, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,vals.put(query.getDimensionSpec().getOutputName() resultIter.next()),METHOD_INVOCATION, line no: 343, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,resultIter.next(),METHOD_INVOCATION, line no: 343, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,aggIter.hasNext() && resultIter.hasNext(),INFIX_EXPRESSION, line no: 345, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,aggIter.hasNext(),METHOD_INVOCATION, line no: 345, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,resultIter.hasNext(),METHOD_INVOCATION, line no: 345, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,new Result<TopNResultValue>(timestamp new TopNResultValue(retVal)),CLASS_INSTANCE_CREATION, line no: 357, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,new TopNResultValue(retVal),CLASS_INSTANCE_CREATION, line no: 357, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,query,SIMPLE_NAME, line no: 20, 1.0, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,TypeReference,SIMPLE_NAME, line no: 22, 1.0, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,Function,SIMPLE_NAME, line no: 23, 1.0, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,Iterables,SIMPLE_NAME, line no: 25, 1.0, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,Lists,SIMPLE_NAME, line no: 26, 1.0, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,Maps,SIMPLE_NAME, line no: 27, 1.0, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,Sequence,SIMPLE_NAME, line no: 33, 1.0, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,granularity,SIMPLE_NAME, line no: 38, 1.0, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,QueryGranularity,SIMPLE_NAME, line no: 38, 1.0, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,CacheStrategy,SIMPLE_NAME, line no: 39, 1.0, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,Result,SIMPLE_NAME, line no: 45, 1.0, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,io.druid.query.aggregation.AggregatorFactory,QUALIFIED_NAME, line no: 48, 1.0, 0.0, 1.0
agg,SIMPLE_NAME, line no: 213,AggregatorUtil,SIMPLE_NAME, line no: 49, 1.0, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,PostAggregator,SIMPLE_NAME, line no: 51, 1.0, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,DateTime,SIMPLE_NAME, line no: 53, 1.0, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,Iterator,SIMPLE_NAME, line no: 59, 1.0, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,List,SIMPLE_NAME, line no: 60, 1.0, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,Map,SIMPLE_NAME, line no: 61, 1.0, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,TopNResultValue,SIMPLE_NAME, line no: 65, 1.0, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,TopNQuery,SIMPLE_NAME, line no: 65, 1.0, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,Object,SIMPLE_NAME, line no: 72, 1.0, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,Override,SIMPLE_NAME, line no: 85, 1.0, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,@Override,MARKER_ANNOTATION, line no: 90, 1.0, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,getGranularity,SIMPLE_NAME, line no: 95, 1.0, 0.5454545454545454, 0.0
agg,SIMPLE_NAME, line no: 213,input,SIMPLE_NAME, line no: 102, 1.0, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,query.getGranularity(),METHOD_INVOCATION, line no: 108, 1.0, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,query.getDimensionSpec(),METHOD_INVOCATION, line no: 109, 1.0, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,getDimensionSpec,SIMPLE_NAME, line no: 109, 1.0, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,query.getTopNMetricSpec(),METHOD_INVOCATION, line no: 110, 1.0, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,getTopNMetricSpec,SIMPLE_NAME, line no: 110, 1.0, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,query.getAggregatorSpecs(),METHOD_INVOCATION, line no: 112, 1.0, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,getAggregatorSpecs,SIMPLE_NAME, line no: 112, 1.0, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,query.getPostAggregatorSpecs(),METHOD_INVOCATION, line no: 113, 1.0, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,getPostAggregatorSpecs,SIMPLE_NAME, line no: 113, 1.0, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,mergeSequences,SIMPLE_NAME, line no: 120, 1.0, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,seqOfSequences,SIMPLE_NAME, line no: 120, 1.0, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,String,SIMPLE_NAME, line no: 135, 1.0, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,size,SIMPLE_NAME, line no: 138, 1.0, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,fn,SIMPLE_NAME, line no: 144, 1.0, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   private String dimension=query.getDimensionSpec().getOutputName();   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> result){     List<Map<String Object>> serializedValues=Lists.newArrayList(Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){       @Override public Map<String Object> apply(      DimensionAndMetricValueExtractor input){         final Map<String Object> values=Maps.newHashMap();         for (        AggregatorFactory agg : query.getAggregatorSpecs()) {           values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));         }         for (        PostAggregator postAgg : prunePostAggregators(query)) {           Object calculatedPostAgg=input.getMetric(postAgg.getName());           if (calculatedPostAgg != null) {             values.put(postAgg.getName() calculatedPostAgg);           }  else {             values.put(postAgg.getName() postAgg.compute(values));           }         }         values.put(dimension input.getDimensionValue(dimension));         return values;       }     } ));     return new Result<TopNResultValue>(result.getTimestamp() new TopNResultValue(serializedValues));   } } ,CLASS_INSTANCE_CREATION, line no: 147, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,dimension,SIMPLE_NAME, line no: 149, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,query.getDimensionSpec().getOutputName(),METHOD_INVOCATION, line no: 149, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,getOutputName,SIMPLE_NAME, line no: 149, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,apply,SIMPLE_NAME, line no: 152, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,result,SIMPLE_NAME, line no: 152, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,serializedValues,SIMPLE_NAME, line no: 154, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,Lists.newArrayList(Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : prunePostAggregators(query)) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } )),METHOD_INVOCATION, line no: 154, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,newArrayList,SIMPLE_NAME, line no: 154, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : prunePostAggregators(query)) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } ),METHOD_INVOCATION, line no: 155, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,transform,SIMPLE_NAME, line no: 155, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,result.getValue(),METHOD_INVOCATION, line no: 156, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,getValue,SIMPLE_NAME, line no: 156, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : prunePostAggregators(query)) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } ,CLASS_INSTANCE_CREATION, line no: 157, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,DimensionAndMetricValueExtractor,SIMPLE_NAME, line no: 157, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,values,SIMPLE_NAME, line no: 162, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,Maps.newHashMap(),METHOD_INVOCATION, line no: 162, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,newHashMap,SIMPLE_NAME, line no: 162, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,put,SIMPLE_NAME, line no: 164, 1.0, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,getName,SIMPLE_NAME, line no: 164, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,manipulate,SIMPLE_NAME, line no: 164, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,getMetric,SIMPLE_NAME, line no: 164, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,postAgg,SIMPLE_NAME, line no: 166, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,prunePostAggregators(query),METHOD_INVOCATION, line no: 166, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,prunePostAggregators,SIMPLE_NAME, line no: 166, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,calculatedPostAgg,SIMPLE_NAME, line no: 167, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,input.getMetric(postAgg.getName()),METHOD_INVOCATION, line no: 167, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,postAgg.getName(),METHOD_INVOCATION, line no: 167, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,calculatedPostAgg != null,INFIX_EXPRESSION, line no: 168, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,null,NULL_LITERAL, line no: 168, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,values.put(dimension input.getDimensionValue(dimension)),METHOD_INVOCATION, line no: 174, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,input.getDimensionValue(dimension),METHOD_INVOCATION, line no: 174, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,getDimensionValue,SIMPLE_NAME, line no: 174, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,new Result<TopNResultValue>(result.getTimestamp() new TopNResultValue(serializedValues)),CLASS_INSTANCE_CREATION, line no: 182, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,result.getTimestamp(),METHOD_INVOCATION, line no: 183, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,getTimestamp,SIMPLE_NAME, line no: 183, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,new TopNResultValue(serializedValues),CLASS_INSTANCE_CREATION, line no: 184, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   private String dimension=query.getDimensionSpec().getOutputName();   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> result){     List<Map<String Object>> serializedValues=Lists.newArrayList(Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){       @Override public Map<String Object> apply(      DimensionAndMetricValueExtractor input){         final Map<String Object> values=Maps.newHashMap();         for (        AggregatorFactory agg : query.getAggregatorSpecs()) {           values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));         }         for (        PostAggregator postAgg : query.getPostAggregatorSpecs()) {           Object calculatedPostAgg=input.getMetric(postAgg.getName());           if (calculatedPostAgg != null) {             values.put(postAgg.getName() calculatedPostAgg);           }  else {             values.put(postAgg.getName() postAgg.compute(values));           }         }         for (        AggregatorFactory agg : query.getAggregatorSpecs()) {           values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));         }         values.put(dimension input.getDimensionValue(dimension));         return values;       }     } ));     return new Result<TopNResultValue>(result.getTimestamp() new TopNResultValue(serializedValues));   } } ,CLASS_INSTANCE_CREATION, line no: 195, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,Lists.newArrayList(Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : query.getPostAggregatorSpecs()) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } )),METHOD_INVOCATION, line no: 202, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : query.getPostAggregatorSpecs()) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } ),METHOD_INVOCATION, line no: 203, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : query.getPostAggregatorSpecs()) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } ,CLASS_INSTANCE_CREATION, line no: 205, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,new CacheStrategy<Result<TopNResultValue> Object TopNQuery>(){   private final List<AggregatorFactory> aggs=query.getAggregatorSpecs();   private final List<PostAggregator> postAggs=AggregatorUtil.pruneDependentPostAgg(query.getPostAggregatorSpecs() query.getTopNMetricSpec().getMetricName(query.getDimensionSpec()));   @Override public byte[] computeCacheKey(  TopNQuery query){     final byte[] dimensionSpecBytes=query.getDimensionSpec().getCacheKey();     final byte[] metricSpecBytes=query.getTopNMetricSpec().getCacheKey();     final DimFilter dimFilter=query.getDimensionsFilter();     final byte[] filterBytes=dimFilter == null ? new byte[]{} : dimFilter.getCacheKey();     final byte[] aggregatorBytes=QueryCacheHelper.computeAggregatorBytes(query.getAggregatorSpecs());     final byte[] granularityBytes=query.getGranularity().cacheKey();     return ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())).put(granularityBytes).put(filterBytes).put(aggregatorBytes).array();   }   @Override public TypeReference<Object> getCacheObjectClazz(){     return OBJECT_TYPE_REFERENCE;   }   @Override public Function<Result<TopNResultValue> Object> prepareForCache(){     return new Function<Result<TopNResultValue> Object>(){       @Override public Object apply(      final Result<TopNResultValue> input){         List<DimensionAndMetricValueExtractor> results=Lists.newArrayList(input.getValue());         final List<Object> retVal=Lists.newArrayListWithCapacity(results.size() + 1);         retVal.add(input.getTimestamp().getMillis());         for (        DimensionAndMetricValueExtractor result : results) {           List<Object> vals=Lists.newArrayListWithCapacity(aggs.size() + 2);           vals.add(result.getStringDimensionValue(query.getDimensionSpec().getOutputName()));           for (          AggregatorFactory agg : aggs) {             vals.add(result.getMetric(agg.getName()));           }           retVal.add(vals);         }         return retVal;       }     } ;   }   @Override public Function<Object Result<TopNResultValue>> pullFromCache(){     return new Function<Object Result<TopNResultValue>>(){       private final QueryGranularity granularity=query.getGranularity();       @Override public Result<TopNResultValue> apply(      Object input){         List<Object> results=(List<Object>)input;         List<Map<String Object>> retVal=Lists.newArrayListWithCapacity(results.size());         Iterator<Object> inputIter=results.iterator();         DateTime timestamp=granularity.toDateTime(new DateTime(inputIter.next()).getMillis());         while (inputIter.hasNext()) {           List<Object> result=(List<Object>)inputIter.next();           Map<String Object> vals=Maps.newLinkedHashMap();           Iterator<AggregatorFactory> aggIter=aggs.iterator();           Iterator<Object> resultIter=result.iterator();           vals.put(query.getDimensionSpec().getOutputName() resultIter.next());           while (aggIter.hasNext() && resultIter.hasNext()) {             final AggregatorFactory factory=aggIter.next();             vals.put(factory.getName() factory.deserialize(resultIter.next()));           }           for (          PostAggregator postAgg : postAggs) {             vals.put(postAgg.getName() postAgg.compute(vals));           }           retVal.add(vals);         }         return new Result<TopNResultValue>(timestamp new TopNResultValue(retVal));       }     } ;   }   @Override public Sequence<Result<TopNResultValue>> mergeSequences(  Sequence<Sequence<Result<TopNResultValue>>> seqOfSequences){     return new MergeSequence<Result<TopNResultValue>>(getOrdering() seqOfSequences);   } } ,CLASS_INSTANCE_CREATION, line no: 253, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,aggs,SIMPLE_NAME, line no: 255, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,postAggs,SIMPLE_NAME, line no: 256, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,AggregatorUtil.pruneDependentPostAgg(query.getPostAggregatorSpecs() query.getTopNMetricSpec().getMetricName(query.getDimensionSpec())),METHOD_INVOCATION, line no: 256, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,pruneDependentPostAgg,SIMPLE_NAME, line no: 256, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,query.getTopNMetricSpec().getMetricName(query.getDimensionSpec()),METHOD_INVOCATION, line no: 258, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,getMetricName,SIMPLE_NAME, line no: 259, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,computeCacheKey,SIMPLE_NAME, line no: 263, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,1,NUMBER_LITERAL, line no: 275, 1.0, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,getCacheObjectClazz,SIMPLE_NAME, line no: 289, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,prepareForCache,SIMPLE_NAME, line no: 295, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,new Function<Result<TopNResultValue> Object>(){   @Override public Object apply(  final Result<TopNResultValue> input){     List<DimensionAndMetricValueExtractor> results=Lists.newArrayList(input.getValue());     final List<Object> retVal=Lists.newArrayListWithCapacity(results.size() + 1);     retVal.add(input.getTimestamp().getMillis());     for (    DimensionAndMetricValueExtractor result : results) {       List<Object> vals=Lists.newArrayListWithCapacity(aggs.size() + 2);       vals.add(result.getStringDimensionValue(query.getDimensionSpec().getOutputName()));       for (      AggregatorFactory agg : aggs) {         vals.add(result.getMetric(agg.getName()));       }       retVal.add(vals);     }     return retVal;   } } ,CLASS_INSTANCE_CREATION, line no: 297, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,results,SIMPLE_NAME, line no: 302, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,Lists.newArrayList(input.getValue()),METHOD_INVOCATION, line no: 302, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,input.getValue(),METHOD_INVOCATION, line no: 302, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,retVal,SIMPLE_NAME, line no: 303, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,Lists.newArrayListWithCapacity(results.size() + 1),METHOD_INVOCATION, line no: 303, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,newArrayListWithCapacity,SIMPLE_NAME, line no: 303, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,results.size() + 1,INFIX_EXPRESSION, line no: 303, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,results.size(),METHOD_INVOCATION, line no: 303, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,retVal.add(input.getTimestamp().getMillis()),METHOD_INVOCATION, line no: 306, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,add,SIMPLE_NAME, line no: 306, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,input.getTimestamp().getMillis(),METHOD_INVOCATION, line no: 306, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,input.getTimestamp(),METHOD_INVOCATION, line no: 306, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,getMillis,SIMPLE_NAME, line no: 306, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,vals,SIMPLE_NAME, line no: 308, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,Lists.newArrayListWithCapacity(aggs.size() + 2),METHOD_INVOCATION, line no: 308, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,aggs.size() + 2,INFIX_EXPRESSION, line no: 308, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,aggs.size(),METHOD_INVOCATION, line no: 308, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,2,NUMBER_LITERAL, line no: 308, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,vals.add(result.getStringDimensionValue(query.getDimensionSpec().getOutputName())),METHOD_INVOCATION, line no: 309, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,result.getStringDimensionValue(query.getDimensionSpec().getOutputName()),METHOD_INVOCATION, line no: 309, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,getStringDimensionValue,SIMPLE_NAME, line no: 309, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,retVal.add(vals),METHOD_INVOCATION, line no: 313, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,pullFromCache,SIMPLE_NAME, line no: 321, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,new Function<Object Result<TopNResultValue>>(){   private final QueryGranularity granularity=query.getGranularity();   @Override public Result<TopNResultValue> apply(  Object input){     List<Object> results=(List<Object>)input;     List<Map<String Object>> retVal=Lists.newArrayListWithCapacity(results.size());     Iterator<Object> inputIter=results.iterator();     DateTime timestamp=granularity.toDateTime(new DateTime(inputIter.next()).getMillis());     while (inputIter.hasNext()) {       List<Object> result=(List<Object>)inputIter.next();       Map<String Object> vals=Maps.newLinkedHashMap();       Iterator<AggregatorFactory> aggIter=aggs.iterator();       Iterator<Object> resultIter=result.iterator();       vals.put(query.getDimensionSpec().getOutputName() resultIter.next());       while (aggIter.hasNext() && resultIter.hasNext()) {         final AggregatorFactory factory=aggIter.next();         vals.put(factory.getName() factory.deserialize(resultIter.next()));       }       for (      PostAggregator postAgg : postAggs) {         vals.put(postAgg.getName() postAgg.compute(vals));       }       retVal.add(vals);     }     return new Result<TopNResultValue>(timestamp new TopNResultValue(retVal));   } } ,CLASS_INSTANCE_CREATION, line no: 323, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,(List<Object>)input,CAST_EXPRESSION, line no: 330, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,Lists.newArrayListWithCapacity(results.size()),METHOD_INVOCATION, line no: 331, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,inputIter,SIMPLE_NAME, line no: 333, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,results.iterator(),METHOD_INVOCATION, line no: 333, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,iterator,SIMPLE_NAME, line no: 333, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,timestamp,SIMPLE_NAME, line no: 334, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,granularity.toDateTime(new DateTime(inputIter.next()).getMillis()),METHOD_INVOCATION, line no: 334, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,toDateTime,SIMPLE_NAME, line no: 334, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,new DateTime(inputIter.next()).getMillis(),METHOD_INVOCATION, line no: 334, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,new DateTime(inputIter.next()),CLASS_INSTANCE_CREATION, line no: 334, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,inputIter.next(),METHOD_INVOCATION, line no: 334, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,inputIter.hasNext(),METHOD_INVOCATION, line no: 336, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,hasNext,SIMPLE_NAME, line no: 336, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,(List<Object>)inputIter.next(),CAST_EXPRESSION, line no: 337, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,Maps.newLinkedHashMap(),METHOD_INVOCATION, line no: 338, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,newLinkedHashMap,SIMPLE_NAME, line no: 338, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,aggIter,SIMPLE_NAME, line no: 340, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,aggs.iterator(),METHOD_INVOCATION, line no: 340, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,resultIter,SIMPLE_NAME, line no: 341, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,result.iterator(),METHOD_INVOCATION, line no: 341, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,vals.put(query.getDimensionSpec().getOutputName() resultIter.next()),METHOD_INVOCATION, line no: 343, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,resultIter.next(),METHOD_INVOCATION, line no: 343, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,aggIter.hasNext() && resultIter.hasNext(),INFIX_EXPRESSION, line no: 345, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,aggIter.hasNext(),METHOD_INVOCATION, line no: 345, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,resultIter.hasNext(),METHOD_INVOCATION, line no: 345, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,new Result<TopNResultValue>(timestamp new TopNResultValue(retVal)),CLASS_INSTANCE_CREATION, line no: 357, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,new TopNResultValue(retVal),CLASS_INSTANCE_CREATION, line no: 357, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,query,SIMPLE_NAME, line no: 20, 1.0, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,TypeReference,SIMPLE_NAME, line no: 22, 1.0, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,Function,SIMPLE_NAME, line no: 23, 1.0, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,Iterables,SIMPLE_NAME, line no: 25, 1.0, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,Lists,SIMPLE_NAME, line no: 26, 1.0, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,Maps,SIMPLE_NAME, line no: 27, 1.0, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,Sequence,SIMPLE_NAME, line no: 33, 1.0, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,granularity,SIMPLE_NAME, line no: 38, 1.0, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,QueryGranularity,SIMPLE_NAME, line no: 38, 1.0, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,CacheStrategy,SIMPLE_NAME, line no: 39, 1.0, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,Result,SIMPLE_NAME, line no: 45, 1.0, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,AggregatorFactory,SIMPLE_NAME, line no: 48, 1.0, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,AggregatorUtil,SIMPLE_NAME, line no: 49, 1.0, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,PostAggregator,SIMPLE_NAME, line no: 51, 1.0, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,DateTime,SIMPLE_NAME, line no: 53, 1.0, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,Iterator,SIMPLE_NAME, line no: 59, 1.0, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,List,SIMPLE_NAME, line no: 60, 1.0, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,Map,SIMPLE_NAME, line no: 61, 1.0, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,TopNResultValue,SIMPLE_NAME, line no: 65, 1.0, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,TopNQuery,SIMPLE_NAME, line no: 65, 1.0, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,Object,SIMPLE_NAME, line no: 72, 1.0, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,Override,SIMPLE_NAME, line no: 85, 1.0, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,@Override,MARKER_ANNOTATION, line no: 90, 1.0, 0.8636363636363636, 0.0
getName,SIMPLE_NAME, line no: 213,getGranularity,SIMPLE_NAME, line no: 95, 1.0, 0.5454545454545454, 0.0
getName,SIMPLE_NAME, line no: 213,input,SIMPLE_NAME, line no: 102, 1.0, 0.8636363636363636, 0.0
getName,SIMPLE_NAME, line no: 213,query.getGranularity(),METHOD_INVOCATION, line no: 108, 1.0, 0.8636363636363636, 0.0
getName,SIMPLE_NAME, line no: 213,query.getDimensionSpec(),METHOD_INVOCATION, line no: 109, 1.0, 0.8636363636363636, 0.0
getName,SIMPLE_NAME, line no: 213,getDimensionSpec,SIMPLE_NAME, line no: 109, 1.0, 0.8636363636363636, 0.0
getName,SIMPLE_NAME, line no: 213,query.getTopNMetricSpec(),METHOD_INVOCATION, line no: 110, 1.0, 0.8636363636363636, 0.0
getName,SIMPLE_NAME, line no: 213,getTopNMetricSpec,SIMPLE_NAME, line no: 110, 1.0, 0.8636363636363636, 0.0
getName,SIMPLE_NAME, line no: 213,query.getAggregatorSpecs(),METHOD_INVOCATION, line no: 112, 1.0, 0.8636363636363636, 0.0
getName,SIMPLE_NAME, line no: 213,getAggregatorSpecs,SIMPLE_NAME, line no: 112, 1.0, 0.8636363636363636, 0.0
getName,SIMPLE_NAME, line no: 213,query.getPostAggregatorSpecs(),METHOD_INVOCATION, line no: 113, 1.0, 0.8636363636363636, 0.0
getName,SIMPLE_NAME, line no: 213,getPostAggregatorSpecs,SIMPLE_NAME, line no: 113, 1.0, 0.8636363636363636, 0.0
getName,SIMPLE_NAME, line no: 213,mergeSequences,SIMPLE_NAME, line no: 120, 1.0, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,seqOfSequences,SIMPLE_NAME, line no: 120, 1.0, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,size,SIMPLE_NAME, line no: 138, 1.0, 0.9545454545454546, 0.0
getName,SIMPLE_NAME, line no: 213,fn,SIMPLE_NAME, line no: 144, 1.0, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   private String dimension=query.getDimensionSpec().getOutputName();   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> result){     List<Map<String Object>> serializedValues=Lists.newArrayList(Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){       @Override public Map<String Object> apply(      DimensionAndMetricValueExtractor input){         final Map<String Object> values=Maps.newHashMap();         for (        AggregatorFactory agg : query.getAggregatorSpecs()) {           values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));         }         for (        PostAggregator postAgg : prunePostAggregators(query)) {           Object calculatedPostAgg=input.getMetric(postAgg.getName());           if (calculatedPostAgg != null) {             values.put(postAgg.getName() calculatedPostAgg);           }  else {             values.put(postAgg.getName() postAgg.compute(values));           }         }         values.put(dimension input.getDimensionValue(dimension));         return values;       }     } ));     return new Result<TopNResultValue>(result.getTimestamp() new TopNResultValue(serializedValues));   } } ,CLASS_INSTANCE_CREATION, line no: 147, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,apply,SIMPLE_NAME, line no: 152, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,result,SIMPLE_NAME, line no: 152, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,serializedValues,SIMPLE_NAME, line no: 154, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,Lists.newArrayList(Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : prunePostAggregators(query)) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } )),METHOD_INVOCATION, line no: 154, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,newArrayList,SIMPLE_NAME, line no: 154, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : prunePostAggregators(query)) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } ),METHOD_INVOCATION, line no: 155, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,transform,SIMPLE_NAME, line no: 155, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,result.getValue(),METHOD_INVOCATION, line no: 156, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,getValue,SIMPLE_NAME, line no: 156, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : prunePostAggregators(query)) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } ,CLASS_INSTANCE_CREATION, line no: 157, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,DimensionAndMetricValueExtractor,SIMPLE_NAME, line no: 157, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,values,SIMPLE_NAME, line no: 162, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,Maps.newHashMap(),METHOD_INVOCATION, line no: 162, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,newHashMap,SIMPLE_NAME, line no: 162, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,agg,SIMPLE_NAME, line no: 163, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,put,SIMPLE_NAME, line no: 164, 1.0, 0.9545454545454546, 0.0
getName,SIMPLE_NAME, line no: 213,manipulate,SIMPLE_NAME, line no: 164, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,getMetric,SIMPLE_NAME, line no: 164, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,postAgg,SIMPLE_NAME, line no: 166, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,prunePostAggregators(query),METHOD_INVOCATION, line no: 166, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,prunePostAggregators,SIMPLE_NAME, line no: 166, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,calculatedPostAgg,SIMPLE_NAME, line no: 167, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,input.getMetric(postAgg.getName()),METHOD_INVOCATION, line no: 167, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,calculatedPostAgg != null,INFIX_EXPRESSION, line no: 168, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,null,NULL_LITERAL, line no: 168, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,values.put(dimension input.getDimensionValue(dimension)),METHOD_INVOCATION, line no: 174, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,input.getDimensionValue(dimension),METHOD_INVOCATION, line no: 174, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,getDimensionValue,SIMPLE_NAME, line no: 174, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,new Result<TopNResultValue>(result.getTimestamp() new TopNResultValue(serializedValues)),CLASS_INSTANCE_CREATION, line no: 182, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,result.getTimestamp(),METHOD_INVOCATION, line no: 183, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,getTimestamp,SIMPLE_NAME, line no: 183, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,new TopNResultValue(serializedValues),CLASS_INSTANCE_CREATION, line no: 184, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   private String dimension=query.getDimensionSpec().getOutputName();   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> result){     List<Map<String Object>> serializedValues=Lists.newArrayList(Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){       @Override public Map<String Object> apply(      DimensionAndMetricValueExtractor input){         final Map<String Object> values=Maps.newHashMap();         for (        AggregatorFactory agg : query.getAggregatorSpecs()) {           values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));         }         for (        PostAggregator postAgg : query.getPostAggregatorSpecs()) {           Object calculatedPostAgg=input.getMetric(postAgg.getName());           if (calculatedPostAgg != null) {             values.put(postAgg.getName() calculatedPostAgg);           }  else {             values.put(postAgg.getName() postAgg.compute(values));           }         }         for (        AggregatorFactory agg : query.getAggregatorSpecs()) {           values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));         }         values.put(dimension input.getDimensionValue(dimension));         return values;       }     } ));     return new Result<TopNResultValue>(result.getTimestamp() new TopNResultValue(serializedValues));   } } ,CLASS_INSTANCE_CREATION, line no: 195, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,Lists.newArrayList(Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : query.getPostAggregatorSpecs()) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } )),METHOD_INVOCATION, line no: 202, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : query.getPostAggregatorSpecs()) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } ),METHOD_INVOCATION, line no: 203, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : query.getPostAggregatorSpecs()) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } ,CLASS_INSTANCE_CREATION, line no: 205, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,new CacheStrategy<Result<TopNResultValue> Object TopNQuery>(){   private final List<AggregatorFactory> aggs=query.getAggregatorSpecs();   private final List<PostAggregator> postAggs=AggregatorUtil.pruneDependentPostAgg(query.getPostAggregatorSpecs() query.getTopNMetricSpec().getMetricName(query.getDimensionSpec()));   @Override public byte[] computeCacheKey(  TopNQuery query){     final byte[] dimensionSpecBytes=query.getDimensionSpec().getCacheKey();     final byte[] metricSpecBytes=query.getTopNMetricSpec().getCacheKey();     final DimFilter dimFilter=query.getDimensionsFilter();     final byte[] filterBytes=dimFilter == null ? new byte[]{} : dimFilter.getCacheKey();     final byte[] aggregatorBytes=QueryCacheHelper.computeAggregatorBytes(query.getAggregatorSpecs());     final byte[] granularityBytes=query.getGranularity().cacheKey();     return ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())).put(granularityBytes).put(filterBytes).put(aggregatorBytes).array();   }   @Override public TypeReference<Object> getCacheObjectClazz(){     return OBJECT_TYPE_REFERENCE;   }   @Override public Function<Result<TopNResultValue> Object> prepareForCache(){     return new Function<Result<TopNResultValue> Object>(){       @Override public Object apply(      final Result<TopNResultValue> input){         List<DimensionAndMetricValueExtractor> results=Lists.newArrayList(input.getValue());         final List<Object> retVal=Lists.newArrayListWithCapacity(results.size() + 1);         retVal.add(input.getTimestamp().getMillis());         for (        DimensionAndMetricValueExtractor result : results) {           List<Object> vals=Lists.newArrayListWithCapacity(aggs.size() + 2);           vals.add(result.getStringDimensionValue(query.getDimensionSpec().getOutputName()));           for (          AggregatorFactory agg : aggs) {             vals.add(result.getMetric(agg.getName()));           }           retVal.add(vals);         }         return retVal;       }     } ;   }   @Override public Function<Object Result<TopNResultValue>> pullFromCache(){     return new Function<Object Result<TopNResultValue>>(){       private final QueryGranularity granularity=query.getGranularity();       @Override public Result<TopNResultValue> apply(      Object input){         List<Object> results=(List<Object>)input;         List<Map<String Object>> retVal=Lists.newArrayListWithCapacity(results.size());         Iterator<Object> inputIter=results.iterator();         DateTime timestamp=granularity.toDateTime(new DateTime(inputIter.next()).getMillis());         while (inputIter.hasNext()) {           List<Object> result=(List<Object>)inputIter.next();           Map<String Object> vals=Maps.newLinkedHashMap();           Iterator<AggregatorFactory> aggIter=aggs.iterator();           Iterator<Object> resultIter=result.iterator();           vals.put(query.getDimensionSpec().getOutputName() resultIter.next());           while (aggIter.hasNext() && resultIter.hasNext()) {             final AggregatorFactory factory=aggIter.next();             vals.put(factory.getName() factory.deserialize(resultIter.next()));           }           for (          PostAggregator postAgg : postAggs) {             vals.put(postAgg.getName() postAgg.compute(vals));           }           retVal.add(vals);         }         return new Result<TopNResultValue>(timestamp new TopNResultValue(retVal));       }     } ;   }   @Override public Sequence<Result<TopNResultValue>> mergeSequences(  Sequence<Sequence<Result<TopNResultValue>>> seqOfSequences){     return new MergeSequence<Result<TopNResultValue>>(getOrdering() seqOfSequences);   } } ,CLASS_INSTANCE_CREATION, line no: 253, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,aggs,SIMPLE_NAME, line no: 255, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,postAggs,SIMPLE_NAME, line no: 256, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,AggregatorUtil.pruneDependentPostAgg(query.getPostAggregatorSpecs() query.getTopNMetricSpec().getMetricName(query.getDimensionSpec())),METHOD_INVOCATION, line no: 256, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,pruneDependentPostAgg,SIMPLE_NAME, line no: 256, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,computeCacheKey,SIMPLE_NAME, line no: 263, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,1,NUMBER_LITERAL, line no: 275, 1.0, 0.8636363636363636, 0.0
getName,SIMPLE_NAME, line no: 213,getCacheObjectClazz,SIMPLE_NAME, line no: 289, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,prepareForCache,SIMPLE_NAME, line no: 295, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,new Function<Result<TopNResultValue> Object>(){   @Override public Object apply(  final Result<TopNResultValue> input){     List<DimensionAndMetricValueExtractor> results=Lists.newArrayList(input.getValue());     final List<Object> retVal=Lists.newArrayListWithCapacity(results.size() + 1);     retVal.add(input.getTimestamp().getMillis());     for (    DimensionAndMetricValueExtractor result : results) {       List<Object> vals=Lists.newArrayListWithCapacity(aggs.size() + 2);       vals.add(result.getStringDimensionValue(query.getDimensionSpec().getOutputName()));       for (      AggregatorFactory agg : aggs) {         vals.add(result.getMetric(agg.getName()));       }       retVal.add(vals);     }     return retVal;   } } ,CLASS_INSTANCE_CREATION, line no: 297, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,results,SIMPLE_NAME, line no: 302, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,Lists.newArrayList(input.getValue()),METHOD_INVOCATION, line no: 302, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,input.getValue(),METHOD_INVOCATION, line no: 302, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,retVal,SIMPLE_NAME, line no: 303, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,Lists.newArrayListWithCapacity(results.size() + 1),METHOD_INVOCATION, line no: 303, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,newArrayListWithCapacity,SIMPLE_NAME, line no: 303, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,results.size() + 1,INFIX_EXPRESSION, line no: 303, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,results.size(),METHOD_INVOCATION, line no: 303, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,retVal.add(input.getTimestamp().getMillis()),METHOD_INVOCATION, line no: 306, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,add,SIMPLE_NAME, line no: 306, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,input.getTimestamp().getMillis(),METHOD_INVOCATION, line no: 306, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,input.getTimestamp(),METHOD_INVOCATION, line no: 306, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,getMillis,SIMPLE_NAME, line no: 306, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,vals,SIMPLE_NAME, line no: 308, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,Lists.newArrayListWithCapacity(aggs.size() + 2),METHOD_INVOCATION, line no: 308, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,aggs.size() + 2,INFIX_EXPRESSION, line no: 308, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,aggs.size(),METHOD_INVOCATION, line no: 308, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,2,NUMBER_LITERAL, line no: 308, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,vals.add(result.getStringDimensionValue(query.getDimensionSpec().getOutputName())),METHOD_INVOCATION, line no: 309, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,retVal.add(vals),METHOD_INVOCATION, line no: 313, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,pullFromCache,SIMPLE_NAME, line no: 321, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,new Function<Object Result<TopNResultValue>>(){   private final QueryGranularity granularity=query.getGranularity();   @Override public Result<TopNResultValue> apply(  Object input){     List<Object> results=(List<Object>)input;     List<Map<String Object>> retVal=Lists.newArrayListWithCapacity(results.size());     Iterator<Object> inputIter=results.iterator();     DateTime timestamp=granularity.toDateTime(new DateTime(inputIter.next()).getMillis());     while (inputIter.hasNext()) {       List<Object> result=(List<Object>)inputIter.next();       Map<String Object> vals=Maps.newLinkedHashMap();       Iterator<AggregatorFactory> aggIter=aggs.iterator();       Iterator<Object> resultIter=result.iterator();       vals.put(query.getDimensionSpec().getOutputName() resultIter.next());       while (aggIter.hasNext() && resultIter.hasNext()) {         final AggregatorFactory factory=aggIter.next();         vals.put(factory.getName() factory.deserialize(resultIter.next()));       }       for (      PostAggregator postAgg : postAggs) {         vals.put(postAgg.getName() postAgg.compute(vals));       }       retVal.add(vals);     }     return new Result<TopNResultValue>(timestamp new TopNResultValue(retVal));   } } ,CLASS_INSTANCE_CREATION, line no: 323, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,(List<Object>)input,CAST_EXPRESSION, line no: 330, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,Lists.newArrayListWithCapacity(results.size()),METHOD_INVOCATION, line no: 331, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,inputIter,SIMPLE_NAME, line no: 333, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,results.iterator(),METHOD_INVOCATION, line no: 333, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,iterator,SIMPLE_NAME, line no: 333, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,timestamp,SIMPLE_NAME, line no: 334, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,granularity.toDateTime(new DateTime(inputIter.next()).getMillis()),METHOD_INVOCATION, line no: 334, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,toDateTime,SIMPLE_NAME, line no: 334, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,new DateTime(inputIter.next()).getMillis(),METHOD_INVOCATION, line no: 334, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,new DateTime(inputIter.next()),CLASS_INSTANCE_CREATION, line no: 334, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,inputIter.next(),METHOD_INVOCATION, line no: 334, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,next,SIMPLE_NAME, line no: 334, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,inputIter.hasNext(),METHOD_INVOCATION, line no: 336, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,hasNext,SIMPLE_NAME, line no: 336, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,(List<Object>)inputIter.next(),CAST_EXPRESSION, line no: 337, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,Maps.newLinkedHashMap(),METHOD_INVOCATION, line no: 338, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,newLinkedHashMap,SIMPLE_NAME, line no: 338, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,aggIter,SIMPLE_NAME, line no: 340, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,aggs.iterator(),METHOD_INVOCATION, line no: 340, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,resultIter,SIMPLE_NAME, line no: 341, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,result.iterator(),METHOD_INVOCATION, line no: 341, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,vals.put(query.getDimensionSpec().getOutputName() resultIter.next()),METHOD_INVOCATION, line no: 343, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,resultIter.next(),METHOD_INVOCATION, line no: 343, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,aggIter.hasNext() && resultIter.hasNext(),INFIX_EXPRESSION, line no: 345, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,aggIter.hasNext(),METHOD_INVOCATION, line no: 345, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,resultIter.hasNext(),METHOD_INVOCATION, line no: 345, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,new Result<TopNResultValue>(timestamp new TopNResultValue(retVal)),CLASS_INSTANCE_CREATION, line no: 357, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,new TopNResultValue(retVal),CLASS_INSTANCE_CREATION, line no: 357, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,query,SIMPLE_NAME, line no: 20, 1.0, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,TypeReference,SIMPLE_NAME, line no: 22, 1.0, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,Function,SIMPLE_NAME, line no: 23, 1.0, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,Iterables,SIMPLE_NAME, line no: 25, 1.0, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,Lists,SIMPLE_NAME, line no: 26, 1.0, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,Maps,SIMPLE_NAME, line no: 27, 1.0, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,Sequence,SIMPLE_NAME, line no: 33, 1.0, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,granularity,SIMPLE_NAME, line no: 38, 1.0, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,QueryGranularity,SIMPLE_NAME, line no: 38, 1.0, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,CacheStrategy,SIMPLE_NAME, line no: 39, 1.0, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,Result,SIMPLE_NAME, line no: 45, 1.0, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,AggregatorFactory,SIMPLE_NAME, line no: 48, 1.0, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,AggregatorUtil,SIMPLE_NAME, line no: 49, 1.0, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,PostAggregator,SIMPLE_NAME, line no: 51, 1.0, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,DateTime,SIMPLE_NAME, line no: 53, 1.0, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,Iterator,SIMPLE_NAME, line no: 59, 1.0, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,List,SIMPLE_NAME, line no: 60, 1.0, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,Map,SIMPLE_NAME, line no: 61, 1.0, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,TopNResultValue,SIMPLE_NAME, line no: 65, 1.0, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,TopNQuery,SIMPLE_NAME, line no: 65, 1.0, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,Override,SIMPLE_NAME, line no: 85, 1.0, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,@Override,MARKER_ANNOTATION, line no: 90, 1.0, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,getGranularity,SIMPLE_NAME, line no: 95, 1.0, 0.5714285714285714, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,query.getGranularity(),METHOD_INVOCATION, line no: 108, 1.0, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,query.getDimensionSpec(),METHOD_INVOCATION, line no: 109, 1.0, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,getDimensionSpec,SIMPLE_NAME, line no: 109, 1.0, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,query.getTopNMetricSpec(),METHOD_INVOCATION, line no: 110, 1.0, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,getTopNMetricSpec,SIMPLE_NAME, line no: 110, 1.0, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,query.getAggregatorSpecs(),METHOD_INVOCATION, line no: 112, 1.0, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,getAggregatorSpecs,SIMPLE_NAME, line no: 112, 1.0, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,query.getPostAggregatorSpecs(),METHOD_INVOCATION, line no: 113, 1.0, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,getPostAggregatorSpecs,SIMPLE_NAME, line no: 113, 1.0, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,mergeSequences,SIMPLE_NAME, line no: 120, 1.0, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,seqOfSequences,SIMPLE_NAME, line no: 120, 1.0, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,String,SIMPLE_NAME, line no: 135, 1.0, 0.9523809523809523, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,size,SIMPLE_NAME, line no: 138, 1.0, 0.9523809523809523, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,fn,SIMPLE_NAME, line no: 144, 1.0, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   private String dimension=query.getDimensionSpec().getOutputName();   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> result){     List<Map<String Object>> serializedValues=Lists.newArrayList(Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){       @Override public Map<String Object> apply(      DimensionAndMetricValueExtractor input){         final Map<String Object> values=Maps.newHashMap();         for (        AggregatorFactory agg : query.getAggregatorSpecs()) {           values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));         }         for (        PostAggregator postAgg : prunePostAggregators(query)) {           Object calculatedPostAgg=input.getMetric(postAgg.getName());           if (calculatedPostAgg != null) {             values.put(postAgg.getName() calculatedPostAgg);           }  else {             values.put(postAgg.getName() postAgg.compute(values));           }         }         values.put(dimension input.getDimensionValue(dimension));         return values;       }     } ));     return new Result<TopNResultValue>(result.getTimestamp() new TopNResultValue(serializedValues));   } } ,CLASS_INSTANCE_CREATION, line no: 147, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,dimension,SIMPLE_NAME, line no: 149, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,query.getDimensionSpec().getOutputName(),METHOD_INVOCATION, line no: 149, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,getOutputName,SIMPLE_NAME, line no: 149, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,result,SIMPLE_NAME, line no: 152, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,serializedValues,SIMPLE_NAME, line no: 154, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,Lists.newArrayList(Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : prunePostAggregators(query)) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } )),METHOD_INVOCATION, line no: 154, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,newArrayList,SIMPLE_NAME, line no: 154, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : prunePostAggregators(query)) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } ),METHOD_INVOCATION, line no: 155, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,transform,SIMPLE_NAME, line no: 155, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,result.getValue(),METHOD_INVOCATION, line no: 156, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,getValue,SIMPLE_NAME, line no: 156, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : prunePostAggregators(query)) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } ,CLASS_INSTANCE_CREATION, line no: 157, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,DimensionAndMetricValueExtractor,SIMPLE_NAME, line no: 157, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,values,SIMPLE_NAME, line no: 162, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,Maps.newHashMap(),METHOD_INVOCATION, line no: 162, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,newHashMap,SIMPLE_NAME, line no: 162, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,agg,SIMPLE_NAME, line no: 163, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,agg.getName(),METHOD_INVOCATION, line no: 164, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,getName,SIMPLE_NAME, line no: 164, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 164, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,postAgg,SIMPLE_NAME, line no: 166, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,prunePostAggregators(query),METHOD_INVOCATION, line no: 166, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,prunePostAggregators,SIMPLE_NAME, line no: 166, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,input.getMetric(postAgg.getName()),METHOD_INVOCATION, line no: 167, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,postAgg.getName(),METHOD_INVOCATION, line no: 167, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,calculatedPostAgg != null,INFIX_EXPRESSION, line no: 168, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,null,NULL_LITERAL, line no: 168, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,values.put(dimension input.getDimensionValue(dimension)),METHOD_INVOCATION, line no: 174, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,input.getDimensionValue(dimension),METHOD_INVOCATION, line no: 174, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,new Result<TopNResultValue>(result.getTimestamp() new TopNResultValue(serializedValues)),CLASS_INSTANCE_CREATION, line no: 182, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,result.getTimestamp(),METHOD_INVOCATION, line no: 183, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,getTimestamp,SIMPLE_NAME, line no: 183, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,new TopNResultValue(serializedValues),CLASS_INSTANCE_CREATION, line no: 184, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   private String dimension=query.getDimensionSpec().getOutputName();   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> result){     List<Map<String Object>> serializedValues=Lists.newArrayList(Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){       @Override public Map<String Object> apply(      DimensionAndMetricValueExtractor input){         final Map<String Object> values=Maps.newHashMap();         for (        AggregatorFactory agg : query.getAggregatorSpecs()) {           values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));         }         for (        PostAggregator postAgg : query.getPostAggregatorSpecs()) {           Object calculatedPostAgg=input.getMetric(postAgg.getName());           if (calculatedPostAgg != null) {             values.put(postAgg.getName() calculatedPostAgg);           }  else {             values.put(postAgg.getName() postAgg.compute(values));           }         }         for (        AggregatorFactory agg : query.getAggregatorSpecs()) {           values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));         }         values.put(dimension input.getDimensionValue(dimension));         return values;       }     } ));     return new Result<TopNResultValue>(result.getTimestamp() new TopNResultValue(serializedValues));   } } ,CLASS_INSTANCE_CREATION, line no: 195, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,Lists.newArrayList(Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : query.getPostAggregatorSpecs()) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } )),METHOD_INVOCATION, line no: 202, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : query.getPostAggregatorSpecs()) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } ),METHOD_INVOCATION, line no: 203, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : query.getPostAggregatorSpecs()) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } ,CLASS_INSTANCE_CREATION, line no: 205, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,new CacheStrategy<Result<TopNResultValue> Object TopNQuery>(){   private final List<AggregatorFactory> aggs=query.getAggregatorSpecs();   private final List<PostAggregator> postAggs=AggregatorUtil.pruneDependentPostAgg(query.getPostAggregatorSpecs() query.getTopNMetricSpec().getMetricName(query.getDimensionSpec()));   @Override public byte[] computeCacheKey(  TopNQuery query){     final byte[] dimensionSpecBytes=query.getDimensionSpec().getCacheKey();     final byte[] metricSpecBytes=query.getTopNMetricSpec().getCacheKey();     final DimFilter dimFilter=query.getDimensionsFilter();     final byte[] filterBytes=dimFilter == null ? new byte[]{} : dimFilter.getCacheKey();     final byte[] aggregatorBytes=QueryCacheHelper.computeAggregatorBytes(query.getAggregatorSpecs());     final byte[] granularityBytes=query.getGranularity().cacheKey();     return ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())).put(granularityBytes).put(filterBytes).put(aggregatorBytes).array();   }   @Override public TypeReference<Object> getCacheObjectClazz(){     return OBJECT_TYPE_REFERENCE;   }   @Override public Function<Result<TopNResultValue> Object> prepareForCache(){     return new Function<Result<TopNResultValue> Object>(){       @Override public Object apply(      final Result<TopNResultValue> input){         List<DimensionAndMetricValueExtractor> results=Lists.newArrayList(input.getValue());         final List<Object> retVal=Lists.newArrayListWithCapacity(results.size() + 1);         retVal.add(input.getTimestamp().getMillis());         for (        DimensionAndMetricValueExtractor result : results) {           List<Object> vals=Lists.newArrayListWithCapacity(aggs.size() + 2);           vals.add(result.getStringDimensionValue(query.getDimensionSpec().getOutputName()));           for (          AggregatorFactory agg : aggs) {             vals.add(result.getMetric(agg.getName()));           }           retVal.add(vals);         }         return retVal;       }     } ;   }   @Override public Function<Object Result<TopNResultValue>> pullFromCache(){     return new Function<Object Result<TopNResultValue>>(){       private final QueryGranularity granularity=query.getGranularity();       @Override public Result<TopNResultValue> apply(      Object input){         List<Object> results=(List<Object>)input;         List<Map<String Object>> retVal=Lists.newArrayListWithCapacity(results.size());         Iterator<Object> inputIter=results.iterator();         DateTime timestamp=granularity.toDateTime(new DateTime(inputIter.next()).getMillis());         while (inputIter.hasNext()) {           List<Object> result=(List<Object>)inputIter.next();           Map<String Object> vals=Maps.newLinkedHashMap();           Iterator<AggregatorFactory> aggIter=aggs.iterator();           Iterator<Object> resultIter=result.iterator();           vals.put(query.getDimensionSpec().getOutputName() resultIter.next());           while (aggIter.hasNext() && resultIter.hasNext()) {             final AggregatorFactory factory=aggIter.next();             vals.put(factory.getName() factory.deserialize(resultIter.next()));           }           for (          PostAggregator postAgg : postAggs) {             vals.put(postAgg.getName() postAgg.compute(vals));           }           retVal.add(vals);         }         return new Result<TopNResultValue>(timestamp new TopNResultValue(retVal));       }     } ;   }   @Override public Sequence<Result<TopNResultValue>> mergeSequences(  Sequence<Sequence<Result<TopNResultValue>>> seqOfSequences){     return new MergeSequence<Result<TopNResultValue>>(getOrdering() seqOfSequences);   } } ,CLASS_INSTANCE_CREATION, line no: 253, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,aggs,SIMPLE_NAME, line no: 255, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,postAggs,SIMPLE_NAME, line no: 256, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,AggregatorUtil.pruneDependentPostAgg(query.getPostAggregatorSpecs() query.getTopNMetricSpec().getMetricName(query.getDimensionSpec())),METHOD_INVOCATION, line no: 256, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,pruneDependentPostAgg,SIMPLE_NAME, line no: 256, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,query.getTopNMetricSpec().getMetricName(query.getDimensionSpec()),METHOD_INVOCATION, line no: 258, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,getMetricName,SIMPLE_NAME, line no: 259, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,computeCacheKey,SIMPLE_NAME, line no: 263, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,1,NUMBER_LITERAL, line no: 275, 1.0, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,getCacheObjectClazz,SIMPLE_NAME, line no: 289, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,prepareForCache,SIMPLE_NAME, line no: 295, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,new Function<Result<TopNResultValue> Object>(){   @Override public Object apply(  final Result<TopNResultValue> input){     List<DimensionAndMetricValueExtractor> results=Lists.newArrayList(input.getValue());     final List<Object> retVal=Lists.newArrayListWithCapacity(results.size() + 1);     retVal.add(input.getTimestamp().getMillis());     for (    DimensionAndMetricValueExtractor result : results) {       List<Object> vals=Lists.newArrayListWithCapacity(aggs.size() + 2);       vals.add(result.getStringDimensionValue(query.getDimensionSpec().getOutputName()));       for (      AggregatorFactory agg : aggs) {         vals.add(result.getMetric(agg.getName()));       }       retVal.add(vals);     }     return retVal;   } } ,CLASS_INSTANCE_CREATION, line no: 297, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,results,SIMPLE_NAME, line no: 302, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,Lists.newArrayList(input.getValue()),METHOD_INVOCATION, line no: 302, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,input.getValue(),METHOD_INVOCATION, line no: 302, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,retVal,SIMPLE_NAME, line no: 303, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,Lists.newArrayListWithCapacity(results.size() + 1),METHOD_INVOCATION, line no: 303, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,newArrayListWithCapacity,SIMPLE_NAME, line no: 303, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,results.size() + 1,INFIX_EXPRESSION, line no: 303, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,results.size(),METHOD_INVOCATION, line no: 303, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,retVal.add(input.getTimestamp().getMillis()),METHOD_INVOCATION, line no: 306, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,add,SIMPLE_NAME, line no: 306, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,input.getTimestamp().getMillis(),METHOD_INVOCATION, line no: 306, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,input.getTimestamp(),METHOD_INVOCATION, line no: 306, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,getMillis,SIMPLE_NAME, line no: 306, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,vals,SIMPLE_NAME, line no: 308, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,Lists.newArrayListWithCapacity(aggs.size() + 2),METHOD_INVOCATION, line no: 308, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,aggs.size() + 2,INFIX_EXPRESSION, line no: 308, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,aggs.size(),METHOD_INVOCATION, line no: 308, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,2,NUMBER_LITERAL, line no: 308, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,vals.add(result.getStringDimensionValue(query.getDimensionSpec().getOutputName())),METHOD_INVOCATION, line no: 309, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,result.getStringDimensionValue(query.getDimensionSpec().getOutputName()),METHOD_INVOCATION, line no: 309, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,getStringDimensionValue,SIMPLE_NAME, line no: 309, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,retVal.add(vals),METHOD_INVOCATION, line no: 313, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,pullFromCache,SIMPLE_NAME, line no: 321, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,new Function<Object Result<TopNResultValue>>(){   private final QueryGranularity granularity=query.getGranularity();   @Override public Result<TopNResultValue> apply(  Object input){     List<Object> results=(List<Object>)input;     List<Map<String Object>> retVal=Lists.newArrayListWithCapacity(results.size());     Iterator<Object> inputIter=results.iterator();     DateTime timestamp=granularity.toDateTime(new DateTime(inputIter.next()).getMillis());     while (inputIter.hasNext()) {       List<Object> result=(List<Object>)inputIter.next();       Map<String Object> vals=Maps.newLinkedHashMap();       Iterator<AggregatorFactory> aggIter=aggs.iterator();       Iterator<Object> resultIter=result.iterator();       vals.put(query.getDimensionSpec().getOutputName() resultIter.next());       while (aggIter.hasNext() && resultIter.hasNext()) {         final AggregatorFactory factory=aggIter.next();         vals.put(factory.getName() factory.deserialize(resultIter.next()));       }       for (      PostAggregator postAgg : postAggs) {         vals.put(postAgg.getName() postAgg.compute(vals));       }       retVal.add(vals);     }     return new Result<TopNResultValue>(timestamp new TopNResultValue(retVal));   } } ,CLASS_INSTANCE_CREATION, line no: 323, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,(List<Object>)input,CAST_EXPRESSION, line no: 330, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,Lists.newArrayListWithCapacity(results.size()),METHOD_INVOCATION, line no: 331, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,inputIter,SIMPLE_NAME, line no: 333, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,results.iterator(),METHOD_INVOCATION, line no: 333, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,iterator,SIMPLE_NAME, line no: 333, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,timestamp,SIMPLE_NAME, line no: 334, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,granularity.toDateTime(new DateTime(inputIter.next()).getMillis()),METHOD_INVOCATION, line no: 334, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,toDateTime,SIMPLE_NAME, line no: 334, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,new DateTime(inputIter.next()).getMillis(),METHOD_INVOCATION, line no: 334, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,new DateTime(inputIter.next()),CLASS_INSTANCE_CREATION, line no: 334, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,inputIter.next(),METHOD_INVOCATION, line no: 334, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,inputIter.hasNext(),METHOD_INVOCATION, line no: 336, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,hasNext,SIMPLE_NAME, line no: 336, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,(List<Object>)inputIter.next(),CAST_EXPRESSION, line no: 337, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,Maps.newLinkedHashMap(),METHOD_INVOCATION, line no: 338, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,newLinkedHashMap,SIMPLE_NAME, line no: 338, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,aggIter,SIMPLE_NAME, line no: 340, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,aggs.iterator(),METHOD_INVOCATION, line no: 340, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,resultIter,SIMPLE_NAME, line no: 341, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,result.iterator(),METHOD_INVOCATION, line no: 341, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,vals.put(query.getDimensionSpec().getOutputName() resultIter.next()),METHOD_INVOCATION, line no: 343, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,resultIter.next(),METHOD_INVOCATION, line no: 343, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,aggIter.hasNext() && resultIter.hasNext(),INFIX_EXPRESSION, line no: 345, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,aggIter.hasNext(),METHOD_INVOCATION, line no: 345, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,resultIter.hasNext(),METHOD_INVOCATION, line no: 345, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,new Result<TopNResultValue>(timestamp new TopNResultValue(retVal)),CLASS_INSTANCE_CREATION, line no: 357, 1.0, 1.0, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,new TopNResultValue(retVal),CLASS_INSTANCE_CREATION, line no: 357, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,query,SIMPLE_NAME, line no: 20, 1.0, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,TypeReference,SIMPLE_NAME, line no: 22, 1.0, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,Function,SIMPLE_NAME, line no: 23, 1.0, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,Iterables,SIMPLE_NAME, line no: 25, 1.0, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,Lists,SIMPLE_NAME, line no: 26, 1.0, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,Maps,SIMPLE_NAME, line no: 27, 1.0, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,Sequence,SIMPLE_NAME, line no: 33, 1.0, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,granularity,SIMPLE_NAME, line no: 38, 1.0, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,QueryGranularity,SIMPLE_NAME, line no: 38, 1.0, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,CacheStrategy,SIMPLE_NAME, line no: 39, 1.0, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,Result,SIMPLE_NAME, line no: 45, 1.0, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,AggregatorFactory,SIMPLE_NAME, line no: 48, 1.0, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,AggregatorUtil,SIMPLE_NAME, line no: 49, 1.0, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,io.druid.query.aggregation.MetricManipulationFn,QUALIFIED_NAME, line no: 50, 1.0, 0.0, 1.0
fn,SIMPLE_NAME, line no: 213,PostAggregator,SIMPLE_NAME, line no: 51, 1.0, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,DateTime,SIMPLE_NAME, line no: 53, 1.0, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,Iterator,SIMPLE_NAME, line no: 59, 1.0, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,List,SIMPLE_NAME, line no: 60, 1.0, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,Map,SIMPLE_NAME, line no: 61, 1.0, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,TopNResultValue,SIMPLE_NAME, line no: 65, 1.0, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,TopNQuery,SIMPLE_NAME, line no: 65, 1.0, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,Object,SIMPLE_NAME, line no: 72, 1.0, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,Override,SIMPLE_NAME, line no: 85, 1.0, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,@Override,MARKER_ANNOTATION, line no: 90, 1.0, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,getGranularity,SIMPLE_NAME, line no: 95, 1.0, 0.5454545454545454, 0.0
fn,SIMPLE_NAME, line no: 213,input,SIMPLE_NAME, line no: 102, 1.0, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,query.getGranularity(),METHOD_INVOCATION, line no: 108, 1.0, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,query.getDimensionSpec(),METHOD_INVOCATION, line no: 109, 1.0, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,getDimensionSpec,SIMPLE_NAME, line no: 109, 1.0, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,query.getTopNMetricSpec(),METHOD_INVOCATION, line no: 110, 1.0, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,getTopNMetricSpec,SIMPLE_NAME, line no: 110, 1.0, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,query.getAggregatorSpecs(),METHOD_INVOCATION, line no: 112, 1.0, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,getAggregatorSpecs,SIMPLE_NAME, line no: 112, 1.0, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,query.getPostAggregatorSpecs(),METHOD_INVOCATION, line no: 113, 1.0, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,getPostAggregatorSpecs,SIMPLE_NAME, line no: 113, 1.0, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,mergeSequences,SIMPLE_NAME, line no: 120, 1.0, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,seqOfSequences,SIMPLE_NAME, line no: 120, 1.0, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,String,SIMPLE_NAME, line no: 135, 1.0, 0.9545454545454546, 0.0
fn,SIMPLE_NAME, line no: 213,size,SIMPLE_NAME, line no: 138, 1.0, 0.9545454545454546, 0.0
fn,SIMPLE_NAME, line no: 213,new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   private String dimension=query.getDimensionSpec().getOutputName();   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> result){     List<Map<String Object>> serializedValues=Lists.newArrayList(Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){       @Override public Map<String Object> apply(      DimensionAndMetricValueExtractor input){         final Map<String Object> values=Maps.newHashMap();         for (        AggregatorFactory agg : query.getAggregatorSpecs()) {           values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));         }         for (        PostAggregator postAgg : prunePostAggregators(query)) {           Object calculatedPostAgg=input.getMetric(postAgg.getName());           if (calculatedPostAgg != null) {             values.put(postAgg.getName() calculatedPostAgg);           }  else {             values.put(postAgg.getName() postAgg.compute(values));           }         }         values.put(dimension input.getDimensionValue(dimension));         return values;       }     } ));     return new Result<TopNResultValue>(result.getTimestamp() new TopNResultValue(serializedValues));   } } ,CLASS_INSTANCE_CREATION, line no: 147, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,dimension,SIMPLE_NAME, line no: 149, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,query.getDimensionSpec().getOutputName(),METHOD_INVOCATION, line no: 149, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,getOutputName,SIMPLE_NAME, line no: 149, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,apply,SIMPLE_NAME, line no: 152, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,result,SIMPLE_NAME, line no: 152, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,serializedValues,SIMPLE_NAME, line no: 154, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,Lists.newArrayList(Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : prunePostAggregators(query)) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } )),METHOD_INVOCATION, line no: 154, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,newArrayList,SIMPLE_NAME, line no: 154, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : prunePostAggregators(query)) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } ),METHOD_INVOCATION, line no: 155, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,transform,SIMPLE_NAME, line no: 155, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,result.getValue(),METHOD_INVOCATION, line no: 156, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,getValue,SIMPLE_NAME, line no: 156, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : prunePostAggregators(query)) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } ,CLASS_INSTANCE_CREATION, line no: 157, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,DimensionAndMetricValueExtractor,SIMPLE_NAME, line no: 157, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,values,SIMPLE_NAME, line no: 162, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,Maps.newHashMap(),METHOD_INVOCATION, line no: 162, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,newHashMap,SIMPLE_NAME, line no: 162, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,agg,SIMPLE_NAME, line no: 163, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,put,SIMPLE_NAME, line no: 164, 1.0, 0.9545454545454546, 0.0
fn,SIMPLE_NAME, line no: 213,getName,SIMPLE_NAME, line no: 164, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,manipulate,SIMPLE_NAME, line no: 164, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,getMetric,SIMPLE_NAME, line no: 164, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,postAgg,SIMPLE_NAME, line no: 166, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,prunePostAggregators(query),METHOD_INVOCATION, line no: 166, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,prunePostAggregators,SIMPLE_NAME, line no: 166, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,calculatedPostAgg,SIMPLE_NAME, line no: 167, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,input.getMetric(postAgg.getName()),METHOD_INVOCATION, line no: 167, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,postAgg.getName(),METHOD_INVOCATION, line no: 167, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,calculatedPostAgg != null,INFIX_EXPRESSION, line no: 168, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,null,NULL_LITERAL, line no: 168, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,values.put(dimension input.getDimensionValue(dimension)),METHOD_INVOCATION, line no: 174, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,input.getDimensionValue(dimension),METHOD_INVOCATION, line no: 174, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,getDimensionValue,SIMPLE_NAME, line no: 174, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,new Result<TopNResultValue>(result.getTimestamp() new TopNResultValue(serializedValues)),CLASS_INSTANCE_CREATION, line no: 182, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,result.getTimestamp(),METHOD_INVOCATION, line no: 183, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,getTimestamp,SIMPLE_NAME, line no: 183, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,new TopNResultValue(serializedValues),CLASS_INSTANCE_CREATION, line no: 184, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   private String dimension=query.getDimensionSpec().getOutputName();   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> result){     List<Map<String Object>> serializedValues=Lists.newArrayList(Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){       @Override public Map<String Object> apply(      DimensionAndMetricValueExtractor input){         final Map<String Object> values=Maps.newHashMap();         for (        AggregatorFactory agg : query.getAggregatorSpecs()) {           values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));         }         for (        PostAggregator postAgg : query.getPostAggregatorSpecs()) {           Object calculatedPostAgg=input.getMetric(postAgg.getName());           if (calculatedPostAgg != null) {             values.put(postAgg.getName() calculatedPostAgg);           }  else {             values.put(postAgg.getName() postAgg.compute(values));           }         }         for (        AggregatorFactory agg : query.getAggregatorSpecs()) {           values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));         }         values.put(dimension input.getDimensionValue(dimension));         return values;       }     } ));     return new Result<TopNResultValue>(result.getTimestamp() new TopNResultValue(serializedValues));   } } ,CLASS_INSTANCE_CREATION, line no: 195, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,Lists.newArrayList(Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : query.getPostAggregatorSpecs()) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } )),METHOD_INVOCATION, line no: 202, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : query.getPostAggregatorSpecs()) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } ),METHOD_INVOCATION, line no: 203, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : query.getPostAggregatorSpecs()) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } ,CLASS_INSTANCE_CREATION, line no: 205, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,new CacheStrategy<Result<TopNResultValue> Object TopNQuery>(){   private final List<AggregatorFactory> aggs=query.getAggregatorSpecs();   private final List<PostAggregator> postAggs=AggregatorUtil.pruneDependentPostAgg(query.getPostAggregatorSpecs() query.getTopNMetricSpec().getMetricName(query.getDimensionSpec()));   @Override public byte[] computeCacheKey(  TopNQuery query){     final byte[] dimensionSpecBytes=query.getDimensionSpec().getCacheKey();     final byte[] metricSpecBytes=query.getTopNMetricSpec().getCacheKey();     final DimFilter dimFilter=query.getDimensionsFilter();     final byte[] filterBytes=dimFilter == null ? new byte[]{} : dimFilter.getCacheKey();     final byte[] aggregatorBytes=QueryCacheHelper.computeAggregatorBytes(query.getAggregatorSpecs());     final byte[] granularityBytes=query.getGranularity().cacheKey();     return ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())).put(granularityBytes).put(filterBytes).put(aggregatorBytes).array();   }   @Override public TypeReference<Object> getCacheObjectClazz(){     return OBJECT_TYPE_REFERENCE;   }   @Override public Function<Result<TopNResultValue> Object> prepareForCache(){     return new Function<Result<TopNResultValue> Object>(){       @Override public Object apply(      final Result<TopNResultValue> input){         List<DimensionAndMetricValueExtractor> results=Lists.newArrayList(input.getValue());         final List<Object> retVal=Lists.newArrayListWithCapacity(results.size() + 1);         retVal.add(input.getTimestamp().getMillis());         for (        DimensionAndMetricValueExtractor result : results) {           List<Object> vals=Lists.newArrayListWithCapacity(aggs.size() + 2);           vals.add(result.getStringDimensionValue(query.getDimensionSpec().getOutputName()));           for (          AggregatorFactory agg : aggs) {             vals.add(result.getMetric(agg.getName()));           }           retVal.add(vals);         }         return retVal;       }     } ;   }   @Override public Function<Object Result<TopNResultValue>> pullFromCache(){     return new Function<Object Result<TopNResultValue>>(){       private final QueryGranularity granularity=query.getGranularity();       @Override public Result<TopNResultValue> apply(      Object input){         List<Object> results=(List<Object>)input;         List<Map<String Object>> retVal=Lists.newArrayListWithCapacity(results.size());         Iterator<Object> inputIter=results.iterator();         DateTime timestamp=granularity.toDateTime(new DateTime(inputIter.next()).getMillis());         while (inputIter.hasNext()) {           List<Object> result=(List<Object>)inputIter.next();           Map<String Object> vals=Maps.newLinkedHashMap();           Iterator<AggregatorFactory> aggIter=aggs.iterator();           Iterator<Object> resultIter=result.iterator();           vals.put(query.getDimensionSpec().getOutputName() resultIter.next());           while (aggIter.hasNext() && resultIter.hasNext()) {             final AggregatorFactory factory=aggIter.next();             vals.put(factory.getName() factory.deserialize(resultIter.next()));           }           for (          PostAggregator postAgg : postAggs) {             vals.put(postAgg.getName() postAgg.compute(vals));           }           retVal.add(vals);         }         return new Result<TopNResultValue>(timestamp new TopNResultValue(retVal));       }     } ;   }   @Override public Sequence<Result<TopNResultValue>> mergeSequences(  Sequence<Sequence<Result<TopNResultValue>>> seqOfSequences){     return new MergeSequence<Result<TopNResultValue>>(getOrdering() seqOfSequences);   } } ,CLASS_INSTANCE_CREATION, line no: 253, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,aggs,SIMPLE_NAME, line no: 255, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,postAggs,SIMPLE_NAME, line no: 256, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,AggregatorUtil.pruneDependentPostAgg(query.getPostAggregatorSpecs() query.getTopNMetricSpec().getMetricName(query.getDimensionSpec())),METHOD_INVOCATION, line no: 256, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,pruneDependentPostAgg,SIMPLE_NAME, line no: 256, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,query.getTopNMetricSpec().getMetricName(query.getDimensionSpec()),METHOD_INVOCATION, line no: 258, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,getMetricName,SIMPLE_NAME, line no: 259, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,computeCacheKey,SIMPLE_NAME, line no: 263, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,1,NUMBER_LITERAL, line no: 275, 1.0, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,getCacheObjectClazz,SIMPLE_NAME, line no: 289, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,prepareForCache,SIMPLE_NAME, line no: 295, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,new Function<Result<TopNResultValue> Object>(){   @Override public Object apply(  final Result<TopNResultValue> input){     List<DimensionAndMetricValueExtractor> results=Lists.newArrayList(input.getValue());     final List<Object> retVal=Lists.newArrayListWithCapacity(results.size() + 1);     retVal.add(input.getTimestamp().getMillis());     for (    DimensionAndMetricValueExtractor result : results) {       List<Object> vals=Lists.newArrayListWithCapacity(aggs.size() + 2);       vals.add(result.getStringDimensionValue(query.getDimensionSpec().getOutputName()));       for (      AggregatorFactory agg : aggs) {         vals.add(result.getMetric(agg.getName()));       }       retVal.add(vals);     }     return retVal;   } } ,CLASS_INSTANCE_CREATION, line no: 297, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,results,SIMPLE_NAME, line no: 302, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,Lists.newArrayList(input.getValue()),METHOD_INVOCATION, line no: 302, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,input.getValue(),METHOD_INVOCATION, line no: 302, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,retVal,SIMPLE_NAME, line no: 303, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,Lists.newArrayListWithCapacity(results.size() + 1),METHOD_INVOCATION, line no: 303, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,newArrayListWithCapacity,SIMPLE_NAME, line no: 303, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,results.size() + 1,INFIX_EXPRESSION, line no: 303, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,results.size(),METHOD_INVOCATION, line no: 303, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,retVal.add(input.getTimestamp().getMillis()),METHOD_INVOCATION, line no: 306, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,add,SIMPLE_NAME, line no: 306, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,input.getTimestamp().getMillis(),METHOD_INVOCATION, line no: 306, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,input.getTimestamp(),METHOD_INVOCATION, line no: 306, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,getMillis,SIMPLE_NAME, line no: 306, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,vals,SIMPLE_NAME, line no: 308, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,Lists.newArrayListWithCapacity(aggs.size() + 2),METHOD_INVOCATION, line no: 308, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,aggs.size() + 2,INFIX_EXPRESSION, line no: 308, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,aggs.size(),METHOD_INVOCATION, line no: 308, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,2,NUMBER_LITERAL, line no: 308, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,vals.add(result.getStringDimensionValue(query.getDimensionSpec().getOutputName())),METHOD_INVOCATION, line no: 309, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,result.getStringDimensionValue(query.getDimensionSpec().getOutputName()),METHOD_INVOCATION, line no: 309, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,getStringDimensionValue,SIMPLE_NAME, line no: 309, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,retVal.add(vals),METHOD_INVOCATION, line no: 313, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,pullFromCache,SIMPLE_NAME, line no: 321, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,new Function<Object Result<TopNResultValue>>(){   private final QueryGranularity granularity=query.getGranularity();   @Override public Result<TopNResultValue> apply(  Object input){     List<Object> results=(List<Object>)input;     List<Map<String Object>> retVal=Lists.newArrayListWithCapacity(results.size());     Iterator<Object> inputIter=results.iterator();     DateTime timestamp=granularity.toDateTime(new DateTime(inputIter.next()).getMillis());     while (inputIter.hasNext()) {       List<Object> result=(List<Object>)inputIter.next();       Map<String Object> vals=Maps.newLinkedHashMap();       Iterator<AggregatorFactory> aggIter=aggs.iterator();       Iterator<Object> resultIter=result.iterator();       vals.put(query.getDimensionSpec().getOutputName() resultIter.next());       while (aggIter.hasNext() && resultIter.hasNext()) {         final AggregatorFactory factory=aggIter.next();         vals.put(factory.getName() factory.deserialize(resultIter.next()));       }       for (      PostAggregator postAgg : postAggs) {         vals.put(postAgg.getName() postAgg.compute(vals));       }       retVal.add(vals);     }     return new Result<TopNResultValue>(timestamp new TopNResultValue(retVal));   } } ,CLASS_INSTANCE_CREATION, line no: 323, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,(List<Object>)input,CAST_EXPRESSION, line no: 330, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,Lists.newArrayListWithCapacity(results.size()),METHOD_INVOCATION, line no: 331, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,inputIter,SIMPLE_NAME, line no: 333, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,results.iterator(),METHOD_INVOCATION, line no: 333, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,iterator,SIMPLE_NAME, line no: 333, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,timestamp,SIMPLE_NAME, line no: 334, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,granularity.toDateTime(new DateTime(inputIter.next()).getMillis()),METHOD_INVOCATION, line no: 334, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,toDateTime,SIMPLE_NAME, line no: 334, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,new DateTime(inputIter.next()).getMillis(),METHOD_INVOCATION, line no: 334, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,new DateTime(inputIter.next()),CLASS_INSTANCE_CREATION, line no: 334, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,inputIter.next(),METHOD_INVOCATION, line no: 334, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,next,SIMPLE_NAME, line no: 334, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,inputIter.hasNext(),METHOD_INVOCATION, line no: 336, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,hasNext,SIMPLE_NAME, line no: 336, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,(List<Object>)inputIter.next(),CAST_EXPRESSION, line no: 337, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,Maps.newLinkedHashMap(),METHOD_INVOCATION, line no: 338, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,newLinkedHashMap,SIMPLE_NAME, line no: 338, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,aggIter,SIMPLE_NAME, line no: 340, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,aggs.iterator(),METHOD_INVOCATION, line no: 340, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,resultIter,SIMPLE_NAME, line no: 341, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,result.iterator(),METHOD_INVOCATION, line no: 341, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,vals.put(query.getDimensionSpec().getOutputName() resultIter.next()),METHOD_INVOCATION, line no: 343, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,resultIter.next(),METHOD_INVOCATION, line no: 343, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,aggIter.hasNext() && resultIter.hasNext(),INFIX_EXPRESSION, line no: 345, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,aggIter.hasNext(),METHOD_INVOCATION, line no: 345, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,resultIter.hasNext(),METHOD_INVOCATION, line no: 345, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,new Result<TopNResultValue>(timestamp new TopNResultValue(retVal)),CLASS_INSTANCE_CREATION, line no: 357, 1.0, 1.0, 0.0
fn,SIMPLE_NAME, line no: 213,new TopNResultValue(retVal),CLASS_INSTANCE_CREATION, line no: 357, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,query,SIMPLE_NAME, line no: 20, 1.0, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,TypeReference,SIMPLE_NAME, line no: 22, 1.0, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,Function,SIMPLE_NAME, line no: 23, 1.0, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,Iterables,SIMPLE_NAME, line no: 25, 1.0, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,Lists,SIMPLE_NAME, line no: 26, 1.0, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,Maps,SIMPLE_NAME, line no: 27, 1.0, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,Sequence,SIMPLE_NAME, line no: 33, 1.0, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,granularity,SIMPLE_NAME, line no: 38, 1.0, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,QueryGranularity,SIMPLE_NAME, line no: 38, 1.0, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,CacheStrategy,SIMPLE_NAME, line no: 39, 1.0, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,Result,SIMPLE_NAME, line no: 45, 1.0, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,AggregatorFactory,SIMPLE_NAME, line no: 48, 1.0, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,AggregatorUtil,SIMPLE_NAME, line no: 49, 1.0, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,PostAggregator,SIMPLE_NAME, line no: 51, 1.0, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,DateTime,SIMPLE_NAME, line no: 53, 1.0, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,Iterator,SIMPLE_NAME, line no: 59, 1.0, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,List,SIMPLE_NAME, line no: 60, 1.0, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,Map,SIMPLE_NAME, line no: 61, 1.0, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,TopNResultValue,SIMPLE_NAME, line no: 65, 1.0, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,TopNQuery,SIMPLE_NAME, line no: 65, 1.0, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,Override,SIMPLE_NAME, line no: 85, 1.0, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,@Override,MARKER_ANNOTATION, line no: 90, 1.0, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,getGranularity,SIMPLE_NAME, line no: 95, 1.0, 0.5454545454545454, 0.0
manipulate,SIMPLE_NAME, line no: 213,query.getGranularity(),METHOD_INVOCATION, line no: 108, 1.0, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,query.getDimensionSpec(),METHOD_INVOCATION, line no: 109, 1.0, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,getDimensionSpec,SIMPLE_NAME, line no: 109, 1.0, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,query.getTopNMetricSpec(),METHOD_INVOCATION, line no: 110, 1.0, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,getTopNMetricSpec,SIMPLE_NAME, line no: 110, 1.0, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,query.getAggregatorSpecs(),METHOD_INVOCATION, line no: 112, 1.0, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,getAggregatorSpecs,SIMPLE_NAME, line no: 112, 1.0, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,query.getPostAggregatorSpecs(),METHOD_INVOCATION, line no: 113, 1.0, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,getPostAggregatorSpecs,SIMPLE_NAME, line no: 113, 1.0, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,mergeSequences,SIMPLE_NAME, line no: 120, 1.0, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,seqOfSequences,SIMPLE_NAME, line no: 120, 1.0, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,String,SIMPLE_NAME, line no: 135, 1.0, 0.9545454545454546, 0.0
manipulate,SIMPLE_NAME, line no: 213,size,SIMPLE_NAME, line no: 138, 1.0, 0.9545454545454546, 0.0
manipulate,SIMPLE_NAME, line no: 213,fn,SIMPLE_NAME, line no: 144, 1.0, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   private String dimension=query.getDimensionSpec().getOutputName();   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> result){     List<Map<String Object>> serializedValues=Lists.newArrayList(Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){       @Override public Map<String Object> apply(      DimensionAndMetricValueExtractor input){         final Map<String Object> values=Maps.newHashMap();         for (        AggregatorFactory agg : query.getAggregatorSpecs()) {           values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));         }         for (        PostAggregator postAgg : prunePostAggregators(query)) {           Object calculatedPostAgg=input.getMetric(postAgg.getName());           if (calculatedPostAgg != null) {             values.put(postAgg.getName() calculatedPostAgg);           }  else {             values.put(postAgg.getName() postAgg.compute(values));           }         }         values.put(dimension input.getDimensionValue(dimension));         return values;       }     } ));     return new Result<TopNResultValue>(result.getTimestamp() new TopNResultValue(serializedValues));   } } ,CLASS_INSTANCE_CREATION, line no: 147, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,dimension,SIMPLE_NAME, line no: 149, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,query.getDimensionSpec().getOutputName(),METHOD_INVOCATION, line no: 149, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,getOutputName,SIMPLE_NAME, line no: 149, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,result,SIMPLE_NAME, line no: 152, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,serializedValues,SIMPLE_NAME, line no: 154, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,Lists.newArrayList(Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : prunePostAggregators(query)) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } )),METHOD_INVOCATION, line no: 154, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,newArrayList,SIMPLE_NAME, line no: 154, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : prunePostAggregators(query)) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } ),METHOD_INVOCATION, line no: 155, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,transform,SIMPLE_NAME, line no: 155, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,result.getValue(),METHOD_INVOCATION, line no: 156, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,getValue,SIMPLE_NAME, line no: 156, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : prunePostAggregators(query)) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } ,CLASS_INSTANCE_CREATION, line no: 157, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,DimensionAndMetricValueExtractor,SIMPLE_NAME, line no: 157, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,values,SIMPLE_NAME, line no: 162, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,Maps.newHashMap(),METHOD_INVOCATION, line no: 162, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,newHashMap,SIMPLE_NAME, line no: 162, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,agg,SIMPLE_NAME, line no: 163, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,getName,SIMPLE_NAME, line no: 164, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,postAgg,SIMPLE_NAME, line no: 166, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,prunePostAggregators(query),METHOD_INVOCATION, line no: 166, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,prunePostAggregators,SIMPLE_NAME, line no: 166, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,postAgg.getName(),METHOD_INVOCATION, line no: 167, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,calculatedPostAgg != null,INFIX_EXPRESSION, line no: 168, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,null,NULL_LITERAL, line no: 168, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,new Result<TopNResultValue>(result.getTimestamp() new TopNResultValue(serializedValues)),CLASS_INSTANCE_CREATION, line no: 182, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,result.getTimestamp(),METHOD_INVOCATION, line no: 183, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,getTimestamp,SIMPLE_NAME, line no: 183, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,new TopNResultValue(serializedValues),CLASS_INSTANCE_CREATION, line no: 184, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   private String dimension=query.getDimensionSpec().getOutputName();   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> result){     List<Map<String Object>> serializedValues=Lists.newArrayList(Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){       @Override public Map<String Object> apply(      DimensionAndMetricValueExtractor input){         final Map<String Object> values=Maps.newHashMap();         for (        AggregatorFactory agg : query.getAggregatorSpecs()) {           values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));         }         for (        PostAggregator postAgg : query.getPostAggregatorSpecs()) {           Object calculatedPostAgg=input.getMetric(postAgg.getName());           if (calculatedPostAgg != null) {             values.put(postAgg.getName() calculatedPostAgg);           }  else {             values.put(postAgg.getName() postAgg.compute(values));           }         }         for (        AggregatorFactory agg : query.getAggregatorSpecs()) {           values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));         }         values.put(dimension input.getDimensionValue(dimension));         return values;       }     } ));     return new Result<TopNResultValue>(result.getTimestamp() new TopNResultValue(serializedValues));   } } ,CLASS_INSTANCE_CREATION, line no: 195, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,Lists.newArrayList(Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : query.getPostAggregatorSpecs()) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } )),METHOD_INVOCATION, line no: 202, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : query.getPostAggregatorSpecs()) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } ),METHOD_INVOCATION, line no: 203, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : query.getPostAggregatorSpecs()) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } ,CLASS_INSTANCE_CREATION, line no: 205, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,new CacheStrategy<Result<TopNResultValue> Object TopNQuery>(){   private final List<AggregatorFactory> aggs=query.getAggregatorSpecs();   private final List<PostAggregator> postAggs=AggregatorUtil.pruneDependentPostAgg(query.getPostAggregatorSpecs() query.getTopNMetricSpec().getMetricName(query.getDimensionSpec()));   @Override public byte[] computeCacheKey(  TopNQuery query){     final byte[] dimensionSpecBytes=query.getDimensionSpec().getCacheKey();     final byte[] metricSpecBytes=query.getTopNMetricSpec().getCacheKey();     final DimFilter dimFilter=query.getDimensionsFilter();     final byte[] filterBytes=dimFilter == null ? new byte[]{} : dimFilter.getCacheKey();     final byte[] aggregatorBytes=QueryCacheHelper.computeAggregatorBytes(query.getAggregatorSpecs());     final byte[] granularityBytes=query.getGranularity().cacheKey();     return ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())).put(granularityBytes).put(filterBytes).put(aggregatorBytes).array();   }   @Override public TypeReference<Object> getCacheObjectClazz(){     return OBJECT_TYPE_REFERENCE;   }   @Override public Function<Result<TopNResultValue> Object> prepareForCache(){     return new Function<Result<TopNResultValue> Object>(){       @Override public Object apply(      final Result<TopNResultValue> input){         List<DimensionAndMetricValueExtractor> results=Lists.newArrayList(input.getValue());         final List<Object> retVal=Lists.newArrayListWithCapacity(results.size() + 1);         retVal.add(input.getTimestamp().getMillis());         for (        DimensionAndMetricValueExtractor result : results) {           List<Object> vals=Lists.newArrayListWithCapacity(aggs.size() + 2);           vals.add(result.getStringDimensionValue(query.getDimensionSpec().getOutputName()));           for (          AggregatorFactory agg : aggs) {             vals.add(result.getMetric(agg.getName()));           }           retVal.add(vals);         }         return retVal;       }     } ;   }   @Override public Function<Object Result<TopNResultValue>> pullFromCache(){     return new Function<Object Result<TopNResultValue>>(){       private final QueryGranularity granularity=query.getGranularity();       @Override public Result<TopNResultValue> apply(      Object input){         List<Object> results=(List<Object>)input;         List<Map<String Object>> retVal=Lists.newArrayListWithCapacity(results.size());         Iterator<Object> inputIter=results.iterator();         DateTime timestamp=granularity.toDateTime(new DateTime(inputIter.next()).getMillis());         while (inputIter.hasNext()) {           List<Object> result=(List<Object>)inputIter.next();           Map<String Object> vals=Maps.newLinkedHashMap();           Iterator<AggregatorFactory> aggIter=aggs.iterator();           Iterator<Object> resultIter=result.iterator();           vals.put(query.getDimensionSpec().getOutputName() resultIter.next());           while (aggIter.hasNext() && resultIter.hasNext()) {             final AggregatorFactory factory=aggIter.next();             vals.put(factory.getName() factory.deserialize(resultIter.next()));           }           for (          PostAggregator postAgg : postAggs) {             vals.put(postAgg.getName() postAgg.compute(vals));           }           retVal.add(vals);         }         return new Result<TopNResultValue>(timestamp new TopNResultValue(retVal));       }     } ;   }   @Override public Sequence<Result<TopNResultValue>> mergeSequences(  Sequence<Sequence<Result<TopNResultValue>>> seqOfSequences){     return new MergeSequence<Result<TopNResultValue>>(getOrdering() seqOfSequences);   } } ,CLASS_INSTANCE_CREATION, line no: 253, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,aggs,SIMPLE_NAME, line no: 255, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,postAggs,SIMPLE_NAME, line no: 256, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,AggregatorUtil.pruneDependentPostAgg(query.getPostAggregatorSpecs() query.getTopNMetricSpec().getMetricName(query.getDimensionSpec())),METHOD_INVOCATION, line no: 256, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,pruneDependentPostAgg,SIMPLE_NAME, line no: 256, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,query.getTopNMetricSpec().getMetricName(query.getDimensionSpec()),METHOD_INVOCATION, line no: 258, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,getMetricName,SIMPLE_NAME, line no: 259, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,computeCacheKey,SIMPLE_NAME, line no: 263, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,1,NUMBER_LITERAL, line no: 275, 1.0, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,getCacheObjectClazz,SIMPLE_NAME, line no: 289, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,prepareForCache,SIMPLE_NAME, line no: 295, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,new Function<Result<TopNResultValue> Object>(){   @Override public Object apply(  final Result<TopNResultValue> input){     List<DimensionAndMetricValueExtractor> results=Lists.newArrayList(input.getValue());     final List<Object> retVal=Lists.newArrayListWithCapacity(results.size() + 1);     retVal.add(input.getTimestamp().getMillis());     for (    DimensionAndMetricValueExtractor result : results) {       List<Object> vals=Lists.newArrayListWithCapacity(aggs.size() + 2);       vals.add(result.getStringDimensionValue(query.getDimensionSpec().getOutputName()));       for (      AggregatorFactory agg : aggs) {         vals.add(result.getMetric(agg.getName()));       }       retVal.add(vals);     }     return retVal;   } } ,CLASS_INSTANCE_CREATION, line no: 297, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,results,SIMPLE_NAME, line no: 302, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,Lists.newArrayList(input.getValue()),METHOD_INVOCATION, line no: 302, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,input.getValue(),METHOD_INVOCATION, line no: 302, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,retVal,SIMPLE_NAME, line no: 303, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,Lists.newArrayListWithCapacity(results.size() + 1),METHOD_INVOCATION, line no: 303, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,newArrayListWithCapacity,SIMPLE_NAME, line no: 303, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,results.size() + 1,INFIX_EXPRESSION, line no: 303, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,results.size(),METHOD_INVOCATION, line no: 303, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,retVal.add(input.getTimestamp().getMillis()),METHOD_INVOCATION, line no: 306, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,add,SIMPLE_NAME, line no: 306, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,input.getTimestamp().getMillis(),METHOD_INVOCATION, line no: 306, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,input.getTimestamp(),METHOD_INVOCATION, line no: 306, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,getMillis,SIMPLE_NAME, line no: 306, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,vals,SIMPLE_NAME, line no: 308, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,Lists.newArrayListWithCapacity(aggs.size() + 2),METHOD_INVOCATION, line no: 308, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,aggs.size() + 2,INFIX_EXPRESSION, line no: 308, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,aggs.size(),METHOD_INVOCATION, line no: 308, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,2,NUMBER_LITERAL, line no: 308, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,vals.add(result.getStringDimensionValue(query.getDimensionSpec().getOutputName())),METHOD_INVOCATION, line no: 309, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,result.getStringDimensionValue(query.getDimensionSpec().getOutputName()),METHOD_INVOCATION, line no: 309, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,getStringDimensionValue,SIMPLE_NAME, line no: 309, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,retVal.add(vals),METHOD_INVOCATION, line no: 313, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,pullFromCache,SIMPLE_NAME, line no: 321, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,new Function<Object Result<TopNResultValue>>(){   private final QueryGranularity granularity=query.getGranularity();   @Override public Result<TopNResultValue> apply(  Object input){     List<Object> results=(List<Object>)input;     List<Map<String Object>> retVal=Lists.newArrayListWithCapacity(results.size());     Iterator<Object> inputIter=results.iterator();     DateTime timestamp=granularity.toDateTime(new DateTime(inputIter.next()).getMillis());     while (inputIter.hasNext()) {       List<Object> result=(List<Object>)inputIter.next();       Map<String Object> vals=Maps.newLinkedHashMap();       Iterator<AggregatorFactory> aggIter=aggs.iterator();       Iterator<Object> resultIter=result.iterator();       vals.put(query.getDimensionSpec().getOutputName() resultIter.next());       while (aggIter.hasNext() && resultIter.hasNext()) {         final AggregatorFactory factory=aggIter.next();         vals.put(factory.getName() factory.deserialize(resultIter.next()));       }       for (      PostAggregator postAgg : postAggs) {         vals.put(postAgg.getName() postAgg.compute(vals));       }       retVal.add(vals);     }     return new Result<TopNResultValue>(timestamp new TopNResultValue(retVal));   } } ,CLASS_INSTANCE_CREATION, line no: 323, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,(List<Object>)input,CAST_EXPRESSION, line no: 330, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,Lists.newArrayListWithCapacity(results.size()),METHOD_INVOCATION, line no: 331, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,inputIter,SIMPLE_NAME, line no: 333, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,results.iterator(),METHOD_INVOCATION, line no: 333, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,iterator,SIMPLE_NAME, line no: 333, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,timestamp,SIMPLE_NAME, line no: 334, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,granularity.toDateTime(new DateTime(inputIter.next()).getMillis()),METHOD_INVOCATION, line no: 334, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,toDateTime,SIMPLE_NAME, line no: 334, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,new DateTime(inputIter.next()).getMillis(),METHOD_INVOCATION, line no: 334, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,new DateTime(inputIter.next()),CLASS_INSTANCE_CREATION, line no: 334, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,inputIter.hasNext(),METHOD_INVOCATION, line no: 336, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,hasNext,SIMPLE_NAME, line no: 336, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,(List<Object>)inputIter.next(),CAST_EXPRESSION, line no: 337, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,Maps.newLinkedHashMap(),METHOD_INVOCATION, line no: 338, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,newLinkedHashMap,SIMPLE_NAME, line no: 338, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,aggIter,SIMPLE_NAME, line no: 340, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,aggs.iterator(),METHOD_INVOCATION, line no: 340, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,resultIter,SIMPLE_NAME, line no: 341, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,result.iterator(),METHOD_INVOCATION, line no: 341, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,aggIter.hasNext() && resultIter.hasNext(),INFIX_EXPRESSION, line no: 345, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,aggIter.hasNext(),METHOD_INVOCATION, line no: 345, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,resultIter.hasNext(),METHOD_INVOCATION, line no: 345, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,new Result<TopNResultValue>(timestamp new TopNResultValue(retVal)),CLASS_INSTANCE_CREATION, line no: 357, 1.0, 1.0, 0.0
manipulate,SIMPLE_NAME, line no: 213,new TopNResultValue(retVal),CLASS_INSTANCE_CREATION, line no: 357, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,query,SIMPLE_NAME, line no: 20, 1.0, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,TypeReference,SIMPLE_NAME, line no: 22, 1.0, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,Function,SIMPLE_NAME, line no: 23, 1.0, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,Iterables,SIMPLE_NAME, line no: 25, 1.0, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,Lists,SIMPLE_NAME, line no: 26, 1.0, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,Maps,SIMPLE_NAME, line no: 27, 1.0, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,Sequence,SIMPLE_NAME, line no: 33, 1.0, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,granularity,SIMPLE_NAME, line no: 38, 1.0, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,QueryGranularity,SIMPLE_NAME, line no: 38, 1.0, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,CacheStrategy,SIMPLE_NAME, line no: 39, 1.0, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,Result,SIMPLE_NAME, line no: 45, 1.0, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,io.druid.query.aggregation.AggregatorFactory,QUALIFIED_NAME, line no: 48, 1.0, 0.0, 1.0
agg,SIMPLE_NAME, line no: 213,AggregatorUtil,SIMPLE_NAME, line no: 49, 1.0, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,PostAggregator,SIMPLE_NAME, line no: 51, 1.0, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,DateTime,SIMPLE_NAME, line no: 53, 1.0, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,Iterator,SIMPLE_NAME, line no: 59, 1.0, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,List,SIMPLE_NAME, line no: 60, 1.0, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,Map,SIMPLE_NAME, line no: 61, 1.0, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,TopNResultValue,SIMPLE_NAME, line no: 65, 1.0, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,TopNQuery,SIMPLE_NAME, line no: 65, 1.0, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,Object,SIMPLE_NAME, line no: 72, 1.0, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,Override,SIMPLE_NAME, line no: 85, 1.0, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,@Override,MARKER_ANNOTATION, line no: 90, 1.0, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,getGranularity,SIMPLE_NAME, line no: 95, 1.0, 0.5454545454545454, 0.0
agg,SIMPLE_NAME, line no: 213,input,SIMPLE_NAME, line no: 102, 1.0, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,query.getGranularity(),METHOD_INVOCATION, line no: 108, 1.0, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,query.getDimensionSpec(),METHOD_INVOCATION, line no: 109, 1.0, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,getDimensionSpec,SIMPLE_NAME, line no: 109, 1.0, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,query.getTopNMetricSpec(),METHOD_INVOCATION, line no: 110, 1.0, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,getTopNMetricSpec,SIMPLE_NAME, line no: 110, 1.0, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,query.getAggregatorSpecs(),METHOD_INVOCATION, line no: 112, 1.0, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,getAggregatorSpecs,SIMPLE_NAME, line no: 112, 1.0, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,query.getPostAggregatorSpecs(),METHOD_INVOCATION, line no: 113, 1.0, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,getPostAggregatorSpecs,SIMPLE_NAME, line no: 113, 1.0, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,mergeSequences,SIMPLE_NAME, line no: 120, 1.0, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,seqOfSequences,SIMPLE_NAME, line no: 120, 1.0, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,String,SIMPLE_NAME, line no: 135, 1.0, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,size,SIMPLE_NAME, line no: 138, 1.0, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,fn,SIMPLE_NAME, line no: 144, 1.0, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   private String dimension=query.getDimensionSpec().getOutputName();   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> result){     List<Map<String Object>> serializedValues=Lists.newArrayList(Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){       @Override public Map<String Object> apply(      DimensionAndMetricValueExtractor input){         final Map<String Object> values=Maps.newHashMap();         for (        AggregatorFactory agg : query.getAggregatorSpecs()) {           values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));         }         for (        PostAggregator postAgg : prunePostAggregators(query)) {           Object calculatedPostAgg=input.getMetric(postAgg.getName());           if (calculatedPostAgg != null) {             values.put(postAgg.getName() calculatedPostAgg);           }  else {             values.put(postAgg.getName() postAgg.compute(values));           }         }         values.put(dimension input.getDimensionValue(dimension));         return values;       }     } ));     return new Result<TopNResultValue>(result.getTimestamp() new TopNResultValue(serializedValues));   } } ,CLASS_INSTANCE_CREATION, line no: 147, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,dimension,SIMPLE_NAME, line no: 149, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,query.getDimensionSpec().getOutputName(),METHOD_INVOCATION, line no: 149, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,getOutputName,SIMPLE_NAME, line no: 149, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,apply,SIMPLE_NAME, line no: 152, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,result,SIMPLE_NAME, line no: 152, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,serializedValues,SIMPLE_NAME, line no: 154, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,Lists.newArrayList(Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : prunePostAggregators(query)) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } )),METHOD_INVOCATION, line no: 154, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,newArrayList,SIMPLE_NAME, line no: 154, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : prunePostAggregators(query)) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } ),METHOD_INVOCATION, line no: 155, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,transform,SIMPLE_NAME, line no: 155, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,result.getValue(),METHOD_INVOCATION, line no: 156, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,getValue,SIMPLE_NAME, line no: 156, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : prunePostAggregators(query)) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } ,CLASS_INSTANCE_CREATION, line no: 157, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,DimensionAndMetricValueExtractor,SIMPLE_NAME, line no: 157, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,values,SIMPLE_NAME, line no: 162, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,Maps.newHashMap(),METHOD_INVOCATION, line no: 162, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,newHashMap,SIMPLE_NAME, line no: 162, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,put,SIMPLE_NAME, line no: 164, 1.0, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,getName,SIMPLE_NAME, line no: 164, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,manipulate,SIMPLE_NAME, line no: 164, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,getMetric,SIMPLE_NAME, line no: 164, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,postAgg,SIMPLE_NAME, line no: 166, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,prunePostAggregators(query),METHOD_INVOCATION, line no: 166, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,prunePostAggregators,SIMPLE_NAME, line no: 166, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,calculatedPostAgg,SIMPLE_NAME, line no: 167, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,input.getMetric(postAgg.getName()),METHOD_INVOCATION, line no: 167, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,postAgg.getName(),METHOD_INVOCATION, line no: 167, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,calculatedPostAgg != null,INFIX_EXPRESSION, line no: 168, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,null,NULL_LITERAL, line no: 168, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,values.put(dimension input.getDimensionValue(dimension)),METHOD_INVOCATION, line no: 174, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,input.getDimensionValue(dimension),METHOD_INVOCATION, line no: 174, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,getDimensionValue,SIMPLE_NAME, line no: 174, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,new Result<TopNResultValue>(result.getTimestamp() new TopNResultValue(serializedValues)),CLASS_INSTANCE_CREATION, line no: 182, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,result.getTimestamp(),METHOD_INVOCATION, line no: 183, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,getTimestamp,SIMPLE_NAME, line no: 183, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,new TopNResultValue(serializedValues),CLASS_INSTANCE_CREATION, line no: 184, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   private String dimension=query.getDimensionSpec().getOutputName();   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> result){     List<Map<String Object>> serializedValues=Lists.newArrayList(Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){       @Override public Map<String Object> apply(      DimensionAndMetricValueExtractor input){         final Map<String Object> values=Maps.newHashMap();         for (        AggregatorFactory agg : query.getAggregatorSpecs()) {           values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));         }         for (        PostAggregator postAgg : query.getPostAggregatorSpecs()) {           Object calculatedPostAgg=input.getMetric(postAgg.getName());           if (calculatedPostAgg != null) {             values.put(postAgg.getName() calculatedPostAgg);           }  else {             values.put(postAgg.getName() postAgg.compute(values));           }         }         for (        AggregatorFactory agg : query.getAggregatorSpecs()) {           values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));         }         values.put(dimension input.getDimensionValue(dimension));         return values;       }     } ));     return new Result<TopNResultValue>(result.getTimestamp() new TopNResultValue(serializedValues));   } } ,CLASS_INSTANCE_CREATION, line no: 195, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,Lists.newArrayList(Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : query.getPostAggregatorSpecs()) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } )),METHOD_INVOCATION, line no: 202, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : query.getPostAggregatorSpecs()) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } ),METHOD_INVOCATION, line no: 203, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : query.getPostAggregatorSpecs()) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } ,CLASS_INSTANCE_CREATION, line no: 205, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,new CacheStrategy<Result<TopNResultValue> Object TopNQuery>(){   private final List<AggregatorFactory> aggs=query.getAggregatorSpecs();   private final List<PostAggregator> postAggs=AggregatorUtil.pruneDependentPostAgg(query.getPostAggregatorSpecs() query.getTopNMetricSpec().getMetricName(query.getDimensionSpec()));   @Override public byte[] computeCacheKey(  TopNQuery query){     final byte[] dimensionSpecBytes=query.getDimensionSpec().getCacheKey();     final byte[] metricSpecBytes=query.getTopNMetricSpec().getCacheKey();     final DimFilter dimFilter=query.getDimensionsFilter();     final byte[] filterBytes=dimFilter == null ? new byte[]{} : dimFilter.getCacheKey();     final byte[] aggregatorBytes=QueryCacheHelper.computeAggregatorBytes(query.getAggregatorSpecs());     final byte[] granularityBytes=query.getGranularity().cacheKey();     return ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())).put(granularityBytes).put(filterBytes).put(aggregatorBytes).array();   }   @Override public TypeReference<Object> getCacheObjectClazz(){     return OBJECT_TYPE_REFERENCE;   }   @Override public Function<Result<TopNResultValue> Object> prepareForCache(){     return new Function<Result<TopNResultValue> Object>(){       @Override public Object apply(      final Result<TopNResultValue> input){         List<DimensionAndMetricValueExtractor> results=Lists.newArrayList(input.getValue());         final List<Object> retVal=Lists.newArrayListWithCapacity(results.size() + 1);         retVal.add(input.getTimestamp().getMillis());         for (        DimensionAndMetricValueExtractor result : results) {           List<Object> vals=Lists.newArrayListWithCapacity(aggs.size() + 2);           vals.add(result.getStringDimensionValue(query.getDimensionSpec().getOutputName()));           for (          AggregatorFactory agg : aggs) {             vals.add(result.getMetric(agg.getName()));           }           retVal.add(vals);         }         return retVal;       }     } ;   }   @Override public Function<Object Result<TopNResultValue>> pullFromCache(){     return new Function<Object Result<TopNResultValue>>(){       private final QueryGranularity granularity=query.getGranularity();       @Override public Result<TopNResultValue> apply(      Object input){         List<Object> results=(List<Object>)input;         List<Map<String Object>> retVal=Lists.newArrayListWithCapacity(results.size());         Iterator<Object> inputIter=results.iterator();         DateTime timestamp=granularity.toDateTime(new DateTime(inputIter.next()).getMillis());         while (inputIter.hasNext()) {           List<Object> result=(List<Object>)inputIter.next();           Map<String Object> vals=Maps.newLinkedHashMap();           Iterator<AggregatorFactory> aggIter=aggs.iterator();           Iterator<Object> resultIter=result.iterator();           vals.put(query.getDimensionSpec().getOutputName() resultIter.next());           while (aggIter.hasNext() && resultIter.hasNext()) {             final AggregatorFactory factory=aggIter.next();             vals.put(factory.getName() factory.deserialize(resultIter.next()));           }           for (          PostAggregator postAgg : postAggs) {             vals.put(postAgg.getName() postAgg.compute(vals));           }           retVal.add(vals);         }         return new Result<TopNResultValue>(timestamp new TopNResultValue(retVal));       }     } ;   }   @Override public Sequence<Result<TopNResultValue>> mergeSequences(  Sequence<Sequence<Result<TopNResultValue>>> seqOfSequences){     return new MergeSequence<Result<TopNResultValue>>(getOrdering() seqOfSequences);   } } ,CLASS_INSTANCE_CREATION, line no: 253, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,aggs,SIMPLE_NAME, line no: 255, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,postAggs,SIMPLE_NAME, line no: 256, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,AggregatorUtil.pruneDependentPostAgg(query.getPostAggregatorSpecs() query.getTopNMetricSpec().getMetricName(query.getDimensionSpec())),METHOD_INVOCATION, line no: 256, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,pruneDependentPostAgg,SIMPLE_NAME, line no: 256, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,query.getTopNMetricSpec().getMetricName(query.getDimensionSpec()),METHOD_INVOCATION, line no: 258, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,getMetricName,SIMPLE_NAME, line no: 259, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,computeCacheKey,SIMPLE_NAME, line no: 263, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,1,NUMBER_LITERAL, line no: 275, 1.0, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,getCacheObjectClazz,SIMPLE_NAME, line no: 289, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,prepareForCache,SIMPLE_NAME, line no: 295, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,new Function<Result<TopNResultValue> Object>(){   @Override public Object apply(  final Result<TopNResultValue> input){     List<DimensionAndMetricValueExtractor> results=Lists.newArrayList(input.getValue());     final List<Object> retVal=Lists.newArrayListWithCapacity(results.size() + 1);     retVal.add(input.getTimestamp().getMillis());     for (    DimensionAndMetricValueExtractor result : results) {       List<Object> vals=Lists.newArrayListWithCapacity(aggs.size() + 2);       vals.add(result.getStringDimensionValue(query.getDimensionSpec().getOutputName()));       for (      AggregatorFactory agg : aggs) {         vals.add(result.getMetric(agg.getName()));       }       retVal.add(vals);     }     return retVal;   } } ,CLASS_INSTANCE_CREATION, line no: 297, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,results,SIMPLE_NAME, line no: 302, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,Lists.newArrayList(input.getValue()),METHOD_INVOCATION, line no: 302, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,input.getValue(),METHOD_INVOCATION, line no: 302, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,retVal,SIMPLE_NAME, line no: 303, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,Lists.newArrayListWithCapacity(results.size() + 1),METHOD_INVOCATION, line no: 303, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,newArrayListWithCapacity,SIMPLE_NAME, line no: 303, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,results.size() + 1,INFIX_EXPRESSION, line no: 303, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,results.size(),METHOD_INVOCATION, line no: 303, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,retVal.add(input.getTimestamp().getMillis()),METHOD_INVOCATION, line no: 306, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,add,SIMPLE_NAME, line no: 306, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,input.getTimestamp().getMillis(),METHOD_INVOCATION, line no: 306, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,input.getTimestamp(),METHOD_INVOCATION, line no: 306, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,getMillis,SIMPLE_NAME, line no: 306, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,vals,SIMPLE_NAME, line no: 308, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,Lists.newArrayListWithCapacity(aggs.size() + 2),METHOD_INVOCATION, line no: 308, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,aggs.size() + 2,INFIX_EXPRESSION, line no: 308, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,aggs.size(),METHOD_INVOCATION, line no: 308, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,2,NUMBER_LITERAL, line no: 308, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,vals.add(result.getStringDimensionValue(query.getDimensionSpec().getOutputName())),METHOD_INVOCATION, line no: 309, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,result.getStringDimensionValue(query.getDimensionSpec().getOutputName()),METHOD_INVOCATION, line no: 309, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,getStringDimensionValue,SIMPLE_NAME, line no: 309, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,retVal.add(vals),METHOD_INVOCATION, line no: 313, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,pullFromCache,SIMPLE_NAME, line no: 321, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,new Function<Object Result<TopNResultValue>>(){   private final QueryGranularity granularity=query.getGranularity();   @Override public Result<TopNResultValue> apply(  Object input){     List<Object> results=(List<Object>)input;     List<Map<String Object>> retVal=Lists.newArrayListWithCapacity(results.size());     Iterator<Object> inputIter=results.iterator();     DateTime timestamp=granularity.toDateTime(new DateTime(inputIter.next()).getMillis());     while (inputIter.hasNext()) {       List<Object> result=(List<Object>)inputIter.next();       Map<String Object> vals=Maps.newLinkedHashMap();       Iterator<AggregatorFactory> aggIter=aggs.iterator();       Iterator<Object> resultIter=result.iterator();       vals.put(query.getDimensionSpec().getOutputName() resultIter.next());       while (aggIter.hasNext() && resultIter.hasNext()) {         final AggregatorFactory factory=aggIter.next();         vals.put(factory.getName() factory.deserialize(resultIter.next()));       }       for (      PostAggregator postAgg : postAggs) {         vals.put(postAgg.getName() postAgg.compute(vals));       }       retVal.add(vals);     }     return new Result<TopNResultValue>(timestamp new TopNResultValue(retVal));   } } ,CLASS_INSTANCE_CREATION, line no: 323, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,(List<Object>)input,CAST_EXPRESSION, line no: 330, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,Lists.newArrayListWithCapacity(results.size()),METHOD_INVOCATION, line no: 331, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,inputIter,SIMPLE_NAME, line no: 333, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,results.iterator(),METHOD_INVOCATION, line no: 333, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,iterator,SIMPLE_NAME, line no: 333, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,timestamp,SIMPLE_NAME, line no: 334, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,granularity.toDateTime(new DateTime(inputIter.next()).getMillis()),METHOD_INVOCATION, line no: 334, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,toDateTime,SIMPLE_NAME, line no: 334, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,new DateTime(inputIter.next()).getMillis(),METHOD_INVOCATION, line no: 334, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,new DateTime(inputIter.next()),CLASS_INSTANCE_CREATION, line no: 334, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,inputIter.next(),METHOD_INVOCATION, line no: 334, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,inputIter.hasNext(),METHOD_INVOCATION, line no: 336, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,hasNext,SIMPLE_NAME, line no: 336, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,(List<Object>)inputIter.next(),CAST_EXPRESSION, line no: 337, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,Maps.newLinkedHashMap(),METHOD_INVOCATION, line no: 338, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,newLinkedHashMap,SIMPLE_NAME, line no: 338, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,aggIter,SIMPLE_NAME, line no: 340, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,aggs.iterator(),METHOD_INVOCATION, line no: 340, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,resultIter,SIMPLE_NAME, line no: 341, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,result.iterator(),METHOD_INVOCATION, line no: 341, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,vals.put(query.getDimensionSpec().getOutputName() resultIter.next()),METHOD_INVOCATION, line no: 343, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,resultIter.next(),METHOD_INVOCATION, line no: 343, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,aggIter.hasNext() && resultIter.hasNext(),INFIX_EXPRESSION, line no: 345, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,aggIter.hasNext(),METHOD_INVOCATION, line no: 345, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,resultIter.hasNext(),METHOD_INVOCATION, line no: 345, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,new Result<TopNResultValue>(timestamp new TopNResultValue(retVal)),CLASS_INSTANCE_CREATION, line no: 357, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,new TopNResultValue(retVal),CLASS_INSTANCE_CREATION, line no: 357, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,query,SIMPLE_NAME, line no: 20, 1.0, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,TypeReference,SIMPLE_NAME, line no: 22, 1.0, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,Function,SIMPLE_NAME, line no: 23, 1.0, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,Iterables,SIMPLE_NAME, line no: 25, 1.0, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,Lists,SIMPLE_NAME, line no: 26, 1.0, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,Maps,SIMPLE_NAME, line no: 27, 1.0, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,Sequence,SIMPLE_NAME, line no: 33, 1.0, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,granularity,SIMPLE_NAME, line no: 38, 1.0, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,QueryGranularity,SIMPLE_NAME, line no: 38, 1.0, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,CacheStrategy,SIMPLE_NAME, line no: 39, 1.0, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,Result,SIMPLE_NAME, line no: 45, 1.0, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,AggregatorFactory,SIMPLE_NAME, line no: 48, 1.0, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,AggregatorUtil,SIMPLE_NAME, line no: 49, 1.0, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,PostAggregator,SIMPLE_NAME, line no: 51, 1.0, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,DateTime,SIMPLE_NAME, line no: 53, 1.0, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,Iterator,SIMPLE_NAME, line no: 59, 1.0, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,List,SIMPLE_NAME, line no: 60, 1.0, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,Map,SIMPLE_NAME, line no: 61, 1.0, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,TopNResultValue,SIMPLE_NAME, line no: 65, 1.0, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,TopNQuery,SIMPLE_NAME, line no: 65, 1.0, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,Override,SIMPLE_NAME, line no: 85, 1.0, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,@Override,MARKER_ANNOTATION, line no: 90, 1.0, 0.8636363636363636, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,getGranularity,SIMPLE_NAME, line no: 95, 1.0, 0.5454545454545454, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,query.getGranularity(),METHOD_INVOCATION, line no: 108, 1.0, 0.8181818181818182, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,query.getDimensionSpec(),METHOD_INVOCATION, line no: 109, 1.0, 0.8181818181818182, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,getDimensionSpec,SIMPLE_NAME, line no: 109, 1.0, 0.8181818181818182, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,query.getTopNMetricSpec(),METHOD_INVOCATION, line no: 110, 1.0, 0.8181818181818182, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,getTopNMetricSpec,SIMPLE_NAME, line no: 110, 1.0, 0.8181818181818182, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,query.getAggregatorSpecs(),METHOD_INVOCATION, line no: 112, 1.0, 0.8181818181818182, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,getAggregatorSpecs,SIMPLE_NAME, line no: 112, 1.0, 0.8181818181818182, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,query.getPostAggregatorSpecs(),METHOD_INVOCATION, line no: 113, 1.0, 0.8181818181818182, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,getPostAggregatorSpecs,SIMPLE_NAME, line no: 113, 1.0, 0.8181818181818182, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,mergeSequences,SIMPLE_NAME, line no: 120, 1.0, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,seqOfSequences,SIMPLE_NAME, line no: 120, 1.0, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,String,SIMPLE_NAME, line no: 135, 1.0, 0.9545454545454546, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,size,SIMPLE_NAME, line no: 138, 1.0, 0.9545454545454546, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   private String dimension=query.getDimensionSpec().getOutputName();   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> result){     List<Map<String Object>> serializedValues=Lists.newArrayList(Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){       @Override public Map<String Object> apply(      DimensionAndMetricValueExtractor input){         final Map<String Object> values=Maps.newHashMap();         for (        AggregatorFactory agg : query.getAggregatorSpecs()) {           values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));         }         for (        PostAggregator postAgg : prunePostAggregators(query)) {           Object calculatedPostAgg=input.getMetric(postAgg.getName());           if (calculatedPostAgg != null) {             values.put(postAgg.getName() calculatedPostAgg);           }  else {             values.put(postAgg.getName() postAgg.compute(values));           }         }         values.put(dimension input.getDimensionValue(dimension));         return values;       }     } ));     return new Result<TopNResultValue>(result.getTimestamp() new TopNResultValue(serializedValues));   } } ,CLASS_INSTANCE_CREATION, line no: 147, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,dimension,SIMPLE_NAME, line no: 149, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,query.getDimensionSpec().getOutputName(),METHOD_INVOCATION, line no: 149, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,getOutputName,SIMPLE_NAME, line no: 149, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,result,SIMPLE_NAME, line no: 152, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,serializedValues,SIMPLE_NAME, line no: 154, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,Lists.newArrayList(Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : prunePostAggregators(query)) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } )),METHOD_INVOCATION, line no: 154, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,newArrayList,SIMPLE_NAME, line no: 154, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : prunePostAggregators(query)) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } ),METHOD_INVOCATION, line no: 155, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,transform,SIMPLE_NAME, line no: 155, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,result.getValue(),METHOD_INVOCATION, line no: 156, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,getValue,SIMPLE_NAME, line no: 156, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : prunePostAggregators(query)) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } ,CLASS_INSTANCE_CREATION, line no: 157, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,DimensionAndMetricValueExtractor,SIMPLE_NAME, line no: 157, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,values,SIMPLE_NAME, line no: 162, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,Maps.newHashMap(),METHOD_INVOCATION, line no: 162, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,newHashMap,SIMPLE_NAME, line no: 162, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,agg,SIMPLE_NAME, line no: 163, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,agg.getName(),METHOD_INVOCATION, line no: 164, 1.0, 0.9545454545454546, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,getName,SIMPLE_NAME, line no: 164, 1.0, 0.9545454545454546, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,postAgg,SIMPLE_NAME, line no: 166, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,prunePostAggregators(query),METHOD_INVOCATION, line no: 166, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,prunePostAggregators,SIMPLE_NAME, line no: 166, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,input.getMetric(postAgg.getName()),METHOD_INVOCATION, line no: 167, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,postAgg.getName(),METHOD_INVOCATION, line no: 167, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,values.put(dimension input.getDimensionValue(dimension)),METHOD_INVOCATION, line no: 174, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,input.getDimensionValue(dimension),METHOD_INVOCATION, line no: 174, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,new Result<TopNResultValue>(result.getTimestamp() new TopNResultValue(serializedValues)),CLASS_INSTANCE_CREATION, line no: 182, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,result.getTimestamp(),METHOD_INVOCATION, line no: 183, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,getTimestamp,SIMPLE_NAME, line no: 183, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,new TopNResultValue(serializedValues),CLASS_INSTANCE_CREATION, line no: 184, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   private String dimension=query.getDimensionSpec().getOutputName();   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> result){     List<Map<String Object>> serializedValues=Lists.newArrayList(Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){       @Override public Map<String Object> apply(      DimensionAndMetricValueExtractor input){         final Map<String Object> values=Maps.newHashMap();         for (        AggregatorFactory agg : query.getAggregatorSpecs()) {           values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));         }         for (        PostAggregator postAgg : query.getPostAggregatorSpecs()) {           Object calculatedPostAgg=input.getMetric(postAgg.getName());           if (calculatedPostAgg != null) {             values.put(postAgg.getName() calculatedPostAgg);           }  else {             values.put(postAgg.getName() postAgg.compute(values));           }         }         for (        AggregatorFactory agg : query.getAggregatorSpecs()) {           values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));         }         values.put(dimension input.getDimensionValue(dimension));         return values;       }     } ));     return new Result<TopNResultValue>(result.getTimestamp() new TopNResultValue(serializedValues));   } } ,CLASS_INSTANCE_CREATION, line no: 195, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,Lists.newArrayList(Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : query.getPostAggregatorSpecs()) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } )),METHOD_INVOCATION, line no: 202, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : query.getPostAggregatorSpecs()) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } ),METHOD_INVOCATION, line no: 203, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : query.getPostAggregatorSpecs()) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } ,CLASS_INSTANCE_CREATION, line no: 205, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,new CacheStrategy<Result<TopNResultValue> Object TopNQuery>(){   private final List<AggregatorFactory> aggs=query.getAggregatorSpecs();   private final List<PostAggregator> postAggs=AggregatorUtil.pruneDependentPostAgg(query.getPostAggregatorSpecs() query.getTopNMetricSpec().getMetricName(query.getDimensionSpec()));   @Override public byte[] computeCacheKey(  TopNQuery query){     final byte[] dimensionSpecBytes=query.getDimensionSpec().getCacheKey();     final byte[] metricSpecBytes=query.getTopNMetricSpec().getCacheKey();     final DimFilter dimFilter=query.getDimensionsFilter();     final byte[] filterBytes=dimFilter == null ? new byte[]{} : dimFilter.getCacheKey();     final byte[] aggregatorBytes=QueryCacheHelper.computeAggregatorBytes(query.getAggregatorSpecs());     final byte[] granularityBytes=query.getGranularity().cacheKey();     return ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())).put(granularityBytes).put(filterBytes).put(aggregatorBytes).array();   }   @Override public TypeReference<Object> getCacheObjectClazz(){     return OBJECT_TYPE_REFERENCE;   }   @Override public Function<Result<TopNResultValue> Object> prepareForCache(){     return new Function<Result<TopNResultValue> Object>(){       @Override public Object apply(      final Result<TopNResultValue> input){         List<DimensionAndMetricValueExtractor> results=Lists.newArrayList(input.getValue());         final List<Object> retVal=Lists.newArrayListWithCapacity(results.size() + 1);         retVal.add(input.getTimestamp().getMillis());         for (        DimensionAndMetricValueExtractor result : results) {           List<Object> vals=Lists.newArrayListWithCapacity(aggs.size() + 2);           vals.add(result.getStringDimensionValue(query.getDimensionSpec().getOutputName()));           for (          AggregatorFactory agg : aggs) {             vals.add(result.getMetric(agg.getName()));           }           retVal.add(vals);         }         return retVal;       }     } ;   }   @Override public Function<Object Result<TopNResultValue>> pullFromCache(){     return new Function<Object Result<TopNResultValue>>(){       private final QueryGranularity granularity=query.getGranularity();       @Override public Result<TopNResultValue> apply(      Object input){         List<Object> results=(List<Object>)input;         List<Map<String Object>> retVal=Lists.newArrayListWithCapacity(results.size());         Iterator<Object> inputIter=results.iterator();         DateTime timestamp=granularity.toDateTime(new DateTime(inputIter.next()).getMillis());         while (inputIter.hasNext()) {           List<Object> result=(List<Object>)inputIter.next();           Map<String Object> vals=Maps.newLinkedHashMap();           Iterator<AggregatorFactory> aggIter=aggs.iterator();           Iterator<Object> resultIter=result.iterator();           vals.put(query.getDimensionSpec().getOutputName() resultIter.next());           while (aggIter.hasNext() && resultIter.hasNext()) {             final AggregatorFactory factory=aggIter.next();             vals.put(factory.getName() factory.deserialize(resultIter.next()));           }           for (          PostAggregator postAgg : postAggs) {             vals.put(postAgg.getName() postAgg.compute(vals));           }           retVal.add(vals);         }         return new Result<TopNResultValue>(timestamp new TopNResultValue(retVal));       }     } ;   }   @Override public Sequence<Result<TopNResultValue>> mergeSequences(  Sequence<Sequence<Result<TopNResultValue>>> seqOfSequences){     return new MergeSequence<Result<TopNResultValue>>(getOrdering() seqOfSequences);   } } ,CLASS_INSTANCE_CREATION, line no: 253, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,aggs,SIMPLE_NAME, line no: 255, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,postAggs,SIMPLE_NAME, line no: 256, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,AggregatorUtil.pruneDependentPostAgg(query.getPostAggregatorSpecs() query.getTopNMetricSpec().getMetricName(query.getDimensionSpec())),METHOD_INVOCATION, line no: 256, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,pruneDependentPostAgg,SIMPLE_NAME, line no: 256, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,query.getTopNMetricSpec().getMetricName(query.getDimensionSpec()),METHOD_INVOCATION, line no: 258, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,getMetricName,SIMPLE_NAME, line no: 259, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,computeCacheKey,SIMPLE_NAME, line no: 263, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,1,NUMBER_LITERAL, line no: 275, 1.0, 0.8636363636363636, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,getCacheObjectClazz,SIMPLE_NAME, line no: 289, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,prepareForCache,SIMPLE_NAME, line no: 295, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,new Function<Result<TopNResultValue> Object>(){   @Override public Object apply(  final Result<TopNResultValue> input){     List<DimensionAndMetricValueExtractor> results=Lists.newArrayList(input.getValue());     final List<Object> retVal=Lists.newArrayListWithCapacity(results.size() + 1);     retVal.add(input.getTimestamp().getMillis());     for (    DimensionAndMetricValueExtractor result : results) {       List<Object> vals=Lists.newArrayListWithCapacity(aggs.size() + 2);       vals.add(result.getStringDimensionValue(query.getDimensionSpec().getOutputName()));       for (      AggregatorFactory agg : aggs) {         vals.add(result.getMetric(agg.getName()));       }       retVal.add(vals);     }     return retVal;   } } ,CLASS_INSTANCE_CREATION, line no: 297, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,results,SIMPLE_NAME, line no: 302, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,Lists.newArrayList(input.getValue()),METHOD_INVOCATION, line no: 302, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,input.getValue(),METHOD_INVOCATION, line no: 302, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,retVal,SIMPLE_NAME, line no: 303, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,Lists.newArrayListWithCapacity(results.size() + 1),METHOD_INVOCATION, line no: 303, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,newArrayListWithCapacity,SIMPLE_NAME, line no: 303, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,results.size() + 1,INFIX_EXPRESSION, line no: 303, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,results.size(),METHOD_INVOCATION, line no: 303, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,retVal.add(input.getTimestamp().getMillis()),METHOD_INVOCATION, line no: 306, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,add,SIMPLE_NAME, line no: 306, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,input.getTimestamp().getMillis(),METHOD_INVOCATION, line no: 306, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,input.getTimestamp(),METHOD_INVOCATION, line no: 306, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,getMillis,SIMPLE_NAME, line no: 306, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,vals,SIMPLE_NAME, line no: 308, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,Lists.newArrayListWithCapacity(aggs.size() + 2),METHOD_INVOCATION, line no: 308, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,aggs.size() + 2,INFIX_EXPRESSION, line no: 308, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,aggs.size(),METHOD_INVOCATION, line no: 308, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,2,NUMBER_LITERAL, line no: 308, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,vals.add(result.getStringDimensionValue(query.getDimensionSpec().getOutputName())),METHOD_INVOCATION, line no: 309, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,result.getStringDimensionValue(query.getDimensionSpec().getOutputName()),METHOD_INVOCATION, line no: 309, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,getStringDimensionValue,SIMPLE_NAME, line no: 309, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,retVal.add(vals),METHOD_INVOCATION, line no: 313, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,pullFromCache,SIMPLE_NAME, line no: 321, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,new Function<Object Result<TopNResultValue>>(){   private final QueryGranularity granularity=query.getGranularity();   @Override public Result<TopNResultValue> apply(  Object input){     List<Object> results=(List<Object>)input;     List<Map<String Object>> retVal=Lists.newArrayListWithCapacity(results.size());     Iterator<Object> inputIter=results.iterator();     DateTime timestamp=granularity.toDateTime(new DateTime(inputIter.next()).getMillis());     while (inputIter.hasNext()) {       List<Object> result=(List<Object>)inputIter.next();       Map<String Object> vals=Maps.newLinkedHashMap();       Iterator<AggregatorFactory> aggIter=aggs.iterator();       Iterator<Object> resultIter=result.iterator();       vals.put(query.getDimensionSpec().getOutputName() resultIter.next());       while (aggIter.hasNext() && resultIter.hasNext()) {         final AggregatorFactory factory=aggIter.next();         vals.put(factory.getName() factory.deserialize(resultIter.next()));       }       for (      PostAggregator postAgg : postAggs) {         vals.put(postAgg.getName() postAgg.compute(vals));       }       retVal.add(vals);     }     return new Result<TopNResultValue>(timestamp new TopNResultValue(retVal));   } } ,CLASS_INSTANCE_CREATION, line no: 323, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,(List<Object>)input,CAST_EXPRESSION, line no: 330, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,Lists.newArrayListWithCapacity(results.size()),METHOD_INVOCATION, line no: 331, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,inputIter,SIMPLE_NAME, line no: 333, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,results.iterator(),METHOD_INVOCATION, line no: 333, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,iterator,SIMPLE_NAME, line no: 333, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,timestamp,SIMPLE_NAME, line no: 334, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,granularity.toDateTime(new DateTime(inputIter.next()).getMillis()),METHOD_INVOCATION, line no: 334, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,toDateTime,SIMPLE_NAME, line no: 334, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,new DateTime(inputIter.next()).getMillis(),METHOD_INVOCATION, line no: 334, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,new DateTime(inputIter.next()),CLASS_INSTANCE_CREATION, line no: 334, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,inputIter.next(),METHOD_INVOCATION, line no: 334, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,inputIter.hasNext(),METHOD_INVOCATION, line no: 336, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,hasNext,SIMPLE_NAME, line no: 336, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,(List<Object>)inputIter.next(),CAST_EXPRESSION, line no: 337, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,Maps.newLinkedHashMap(),METHOD_INVOCATION, line no: 338, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,newLinkedHashMap,SIMPLE_NAME, line no: 338, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,aggIter,SIMPLE_NAME, line no: 340, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,aggs.iterator(),METHOD_INVOCATION, line no: 340, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,resultIter,SIMPLE_NAME, line no: 341, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,result.iterator(),METHOD_INVOCATION, line no: 341, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,vals.put(query.getDimensionSpec().getOutputName() resultIter.next()),METHOD_INVOCATION, line no: 343, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,resultIter.next(),METHOD_INVOCATION, line no: 343, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,aggIter.hasNext() && resultIter.hasNext(),INFIX_EXPRESSION, line no: 345, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,aggIter.hasNext(),METHOD_INVOCATION, line no: 345, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,resultIter.hasNext(),METHOD_INVOCATION, line no: 345, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,new Result<TopNResultValue>(timestamp new TopNResultValue(retVal)),CLASS_INSTANCE_CREATION, line no: 357, 1.0, 1.0, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,new TopNResultValue(retVal),CLASS_INSTANCE_CREATION, line no: 357, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,query,SIMPLE_NAME, line no: 20, 1.0, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,TypeReference,SIMPLE_NAME, line no: 22, 1.0, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,Function,SIMPLE_NAME, line no: 23, 1.0, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,Iterables,SIMPLE_NAME, line no: 25, 1.0, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,Lists,SIMPLE_NAME, line no: 26, 1.0, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,Maps,SIMPLE_NAME, line no: 27, 1.0, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,Sequence,SIMPLE_NAME, line no: 33, 1.0, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,granularity,SIMPLE_NAME, line no: 38, 1.0, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,QueryGranularity,SIMPLE_NAME, line no: 38, 1.0, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,CacheStrategy,SIMPLE_NAME, line no: 39, 1.0, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,Result,SIMPLE_NAME, line no: 45, 1.0, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,AggregatorFactory,SIMPLE_NAME, line no: 48, 1.0, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,AggregatorUtil,SIMPLE_NAME, line no: 49, 1.0, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,PostAggregator,SIMPLE_NAME, line no: 51, 1.0, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,DateTime,SIMPLE_NAME, line no: 53, 1.0, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,Iterator,SIMPLE_NAME, line no: 59, 1.0, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,List,SIMPLE_NAME, line no: 60, 1.0, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,Map,SIMPLE_NAME, line no: 61, 1.0, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,TopNResultValue,SIMPLE_NAME, line no: 65, 1.0, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,TopNQuery,SIMPLE_NAME, line no: 65, 1.0, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,Object,SIMPLE_NAME, line no: 72, 1.0, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,Override,SIMPLE_NAME, line no: 85, 1.0, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,@Override,MARKER_ANNOTATION, line no: 90, 1.0, 0.8695652173913043, 0.0
input,SIMPLE_NAME, line no: 213,getGranularity,SIMPLE_NAME, line no: 95, 1.0, 0.5217391304347826, 0.0
input,SIMPLE_NAME, line no: 213,query.getGranularity(),METHOD_INVOCATION, line no: 108, 1.0, 0.8260869565217391, 0.0
input,SIMPLE_NAME, line no: 213,query.getDimensionSpec(),METHOD_INVOCATION, line no: 109, 1.0, 0.8260869565217391, 0.0
input,SIMPLE_NAME, line no: 213,getDimensionSpec,SIMPLE_NAME, line no: 109, 1.0, 0.8260869565217391, 0.0
input,SIMPLE_NAME, line no: 213,query.getTopNMetricSpec(),METHOD_INVOCATION, line no: 110, 1.0, 0.8260869565217391, 0.0
input,SIMPLE_NAME, line no: 213,getTopNMetricSpec,SIMPLE_NAME, line no: 110, 1.0, 0.8260869565217391, 0.0
input,SIMPLE_NAME, line no: 213,query.getAggregatorSpecs(),METHOD_INVOCATION, line no: 112, 1.0, 0.8260869565217391, 0.0
input,SIMPLE_NAME, line no: 213,getAggregatorSpecs,SIMPLE_NAME, line no: 112, 1.0, 0.8260869565217391, 0.0
input,SIMPLE_NAME, line no: 213,query.getPostAggregatorSpecs(),METHOD_INVOCATION, line no: 113, 1.0, 0.8260869565217391, 0.0
input,SIMPLE_NAME, line no: 213,getPostAggregatorSpecs,SIMPLE_NAME, line no: 113, 1.0, 0.8260869565217391, 0.0
input,SIMPLE_NAME, line no: 213,mergeSequences,SIMPLE_NAME, line no: 120, 1.0, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,seqOfSequences,SIMPLE_NAME, line no: 120, 1.0, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,String,SIMPLE_NAME, line no: 135, 1.0, 0.9565217391304348, 0.0
input,SIMPLE_NAME, line no: 213,size,SIMPLE_NAME, line no: 138, 1.0, 0.9565217391304348, 0.0
input,SIMPLE_NAME, line no: 213,new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   private String dimension=query.getDimensionSpec().getOutputName();   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> result){     List<Map<String Object>> serializedValues=Lists.newArrayList(Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){       @Override public Map<String Object> apply(      DimensionAndMetricValueExtractor input){         final Map<String Object> values=Maps.newHashMap();         for (        AggregatorFactory agg : query.getAggregatorSpecs()) {           values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));         }         for (        PostAggregator postAgg : prunePostAggregators(query)) {           Object calculatedPostAgg=input.getMetric(postAgg.getName());           if (calculatedPostAgg != null) {             values.put(postAgg.getName() calculatedPostAgg);           }  else {             values.put(postAgg.getName() postAgg.compute(values));           }         }         values.put(dimension input.getDimensionValue(dimension));         return values;       }     } ));     return new Result<TopNResultValue>(result.getTimestamp() new TopNResultValue(serializedValues));   } } ,CLASS_INSTANCE_CREATION, line no: 147, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,dimension,SIMPLE_NAME, line no: 149, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,query.getDimensionSpec().getOutputName(),METHOD_INVOCATION, line no: 149, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,getOutputName,SIMPLE_NAME, line no: 149, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,apply,SIMPLE_NAME, line no: 152, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,serializedValues,SIMPLE_NAME, line no: 154, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,Lists.newArrayList(Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : prunePostAggregators(query)) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } )),METHOD_INVOCATION, line no: 154, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,newArrayList,SIMPLE_NAME, line no: 154, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : prunePostAggregators(query)) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } ),METHOD_INVOCATION, line no: 155, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,transform,SIMPLE_NAME, line no: 155, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,result.getValue(),METHOD_INVOCATION, line no: 156, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,getValue,SIMPLE_NAME, line no: 156, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : prunePostAggregators(query)) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } ,CLASS_INSTANCE_CREATION, line no: 157, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,values,SIMPLE_NAME, line no: 162, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,Maps.newHashMap(),METHOD_INVOCATION, line no: 162, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,newHashMap,SIMPLE_NAME, line no: 162, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,agg,SIMPLE_NAME, line no: 163, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,put,SIMPLE_NAME, line no: 164, 1.0, 0.9130434782608695, 0.0
input,SIMPLE_NAME, line no: 213,getName,SIMPLE_NAME, line no: 164, 1.0, 0.9565217391304348, 0.0
input,SIMPLE_NAME, line no: 213,getMetric,SIMPLE_NAME, line no: 164, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,postAgg,SIMPLE_NAME, line no: 166, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,prunePostAggregators(query),METHOD_INVOCATION, line no: 166, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,prunePostAggregators,SIMPLE_NAME, line no: 166, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,input.getMetric(postAgg.getName()),METHOD_INVOCATION, line no: 167, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,postAgg.getName(),METHOD_INVOCATION, line no: 167, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,values.put(dimension input.getDimensionValue(dimension)),METHOD_INVOCATION, line no: 174, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,input.getDimensionValue(dimension),METHOD_INVOCATION, line no: 174, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,getDimensionValue,SIMPLE_NAME, line no: 174, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,new Result<TopNResultValue>(result.getTimestamp() new TopNResultValue(serializedValues)),CLASS_INSTANCE_CREATION, line no: 182, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,result.getTimestamp(),METHOD_INVOCATION, line no: 183, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,getTimestamp,SIMPLE_NAME, line no: 183, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,new TopNResultValue(serializedValues),CLASS_INSTANCE_CREATION, line no: 184, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   private String dimension=query.getDimensionSpec().getOutputName();   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> result){     List<Map<String Object>> serializedValues=Lists.newArrayList(Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){       @Override public Map<String Object> apply(      DimensionAndMetricValueExtractor input){         final Map<String Object> values=Maps.newHashMap();         for (        AggregatorFactory agg : query.getAggregatorSpecs()) {           values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));         }         for (        PostAggregator postAgg : query.getPostAggregatorSpecs()) {           Object calculatedPostAgg=input.getMetric(postAgg.getName());           if (calculatedPostAgg != null) {             values.put(postAgg.getName() calculatedPostAgg);           }  else {             values.put(postAgg.getName() postAgg.compute(values));           }         }         for (        AggregatorFactory agg : query.getAggregatorSpecs()) {           values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));         }         values.put(dimension input.getDimensionValue(dimension));         return values;       }     } ));     return new Result<TopNResultValue>(result.getTimestamp() new TopNResultValue(serializedValues));   } } ,CLASS_INSTANCE_CREATION, line no: 195, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,Lists.newArrayList(Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : query.getPostAggregatorSpecs()) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } )),METHOD_INVOCATION, line no: 202, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : query.getPostAggregatorSpecs()) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } ),METHOD_INVOCATION, line no: 203, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : query.getPostAggregatorSpecs()) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } ,CLASS_INSTANCE_CREATION, line no: 205, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,new CacheStrategy<Result<TopNResultValue> Object TopNQuery>(){   private final List<AggregatorFactory> aggs=query.getAggregatorSpecs();   private final List<PostAggregator> postAggs=AggregatorUtil.pruneDependentPostAgg(query.getPostAggregatorSpecs() query.getTopNMetricSpec().getMetricName(query.getDimensionSpec()));   @Override public byte[] computeCacheKey(  TopNQuery query){     final byte[] dimensionSpecBytes=query.getDimensionSpec().getCacheKey();     final byte[] metricSpecBytes=query.getTopNMetricSpec().getCacheKey();     final DimFilter dimFilter=query.getDimensionsFilter();     final byte[] filterBytes=dimFilter == null ? new byte[]{} : dimFilter.getCacheKey();     final byte[] aggregatorBytes=QueryCacheHelper.computeAggregatorBytes(query.getAggregatorSpecs());     final byte[] granularityBytes=query.getGranularity().cacheKey();     return ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())).put(granularityBytes).put(filterBytes).put(aggregatorBytes).array();   }   @Override public TypeReference<Object> getCacheObjectClazz(){     return OBJECT_TYPE_REFERENCE;   }   @Override public Function<Result<TopNResultValue> Object> prepareForCache(){     return new Function<Result<TopNResultValue> Object>(){       @Override public Object apply(      final Result<TopNResultValue> input){         List<DimensionAndMetricValueExtractor> results=Lists.newArrayList(input.getValue());         final List<Object> retVal=Lists.newArrayListWithCapacity(results.size() + 1);         retVal.add(input.getTimestamp().getMillis());         for (        DimensionAndMetricValueExtractor result : results) {           List<Object> vals=Lists.newArrayListWithCapacity(aggs.size() + 2);           vals.add(result.getStringDimensionValue(query.getDimensionSpec().getOutputName()));           for (          AggregatorFactory agg : aggs) {             vals.add(result.getMetric(agg.getName()));           }           retVal.add(vals);         }         return retVal;       }     } ;   }   @Override public Function<Object Result<TopNResultValue>> pullFromCache(){     return new Function<Object Result<TopNResultValue>>(){       private final QueryGranularity granularity=query.getGranularity();       @Override public Result<TopNResultValue> apply(      Object input){         List<Object> results=(List<Object>)input;         List<Map<String Object>> retVal=Lists.newArrayListWithCapacity(results.size());         Iterator<Object> inputIter=results.iterator();         DateTime timestamp=granularity.toDateTime(new DateTime(inputIter.next()).getMillis());         while (inputIter.hasNext()) {           List<Object> result=(List<Object>)inputIter.next();           Map<String Object> vals=Maps.newLinkedHashMap();           Iterator<AggregatorFactory> aggIter=aggs.iterator();           Iterator<Object> resultIter=result.iterator();           vals.put(query.getDimensionSpec().getOutputName() resultIter.next());           while (aggIter.hasNext() && resultIter.hasNext()) {             final AggregatorFactory factory=aggIter.next();             vals.put(factory.getName() factory.deserialize(resultIter.next()));           }           for (          PostAggregator postAgg : postAggs) {             vals.put(postAgg.getName() postAgg.compute(vals));           }           retVal.add(vals);         }         return new Result<TopNResultValue>(timestamp new TopNResultValue(retVal));       }     } ;   }   @Override public Sequence<Result<TopNResultValue>> mergeSequences(  Sequence<Sequence<Result<TopNResultValue>>> seqOfSequences){     return new MergeSequence<Result<TopNResultValue>>(getOrdering() seqOfSequences);   } } ,CLASS_INSTANCE_CREATION, line no: 253, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,aggs,SIMPLE_NAME, line no: 255, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,postAggs,SIMPLE_NAME, line no: 256, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,AggregatorUtil.pruneDependentPostAgg(query.getPostAggregatorSpecs() query.getTopNMetricSpec().getMetricName(query.getDimensionSpec())),METHOD_INVOCATION, line no: 256, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,pruneDependentPostAgg,SIMPLE_NAME, line no: 256, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,query.getTopNMetricSpec().getMetricName(query.getDimensionSpec()),METHOD_INVOCATION, line no: 258, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,getMetricName,SIMPLE_NAME, line no: 259, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,computeCacheKey,SIMPLE_NAME, line no: 263, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,1,NUMBER_LITERAL, line no: 275, 1.0, 0.8695652173913043, 0.0
input,SIMPLE_NAME, line no: 213,getCacheObjectClazz,SIMPLE_NAME, line no: 289, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,prepareForCache,SIMPLE_NAME, line no: 295, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,new Function<Result<TopNResultValue> Object>(){   @Override public Object apply(  final Result<TopNResultValue> input){     List<DimensionAndMetricValueExtractor> results=Lists.newArrayList(input.getValue());     final List<Object> retVal=Lists.newArrayListWithCapacity(results.size() + 1);     retVal.add(input.getTimestamp().getMillis());     for (    DimensionAndMetricValueExtractor result : results) {       List<Object> vals=Lists.newArrayListWithCapacity(aggs.size() + 2);       vals.add(result.getStringDimensionValue(query.getDimensionSpec().getOutputName()));       for (      AggregatorFactory agg : aggs) {         vals.add(result.getMetric(agg.getName()));       }       retVal.add(vals);     }     return retVal;   } } ,CLASS_INSTANCE_CREATION, line no: 297, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,results,SIMPLE_NAME, line no: 302, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,Lists.newArrayList(input.getValue()),METHOD_INVOCATION, line no: 302, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,input.getValue(),METHOD_INVOCATION, line no: 302, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,retVal,SIMPLE_NAME, line no: 303, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,Lists.newArrayListWithCapacity(results.size() + 1),METHOD_INVOCATION, line no: 303, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,newArrayListWithCapacity,SIMPLE_NAME, line no: 303, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,results.size() + 1,INFIX_EXPRESSION, line no: 303, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,results.size(),METHOD_INVOCATION, line no: 303, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,retVal.add(input.getTimestamp().getMillis()),METHOD_INVOCATION, line no: 306, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,add,SIMPLE_NAME, line no: 306, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,input.getTimestamp().getMillis(),METHOD_INVOCATION, line no: 306, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,input.getTimestamp(),METHOD_INVOCATION, line no: 306, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,getMillis,SIMPLE_NAME, line no: 306, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,vals,SIMPLE_NAME, line no: 308, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,Lists.newArrayListWithCapacity(aggs.size() + 2),METHOD_INVOCATION, line no: 308, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,aggs.size() + 2,INFIX_EXPRESSION, line no: 308, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,aggs.size(),METHOD_INVOCATION, line no: 308, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,2,NUMBER_LITERAL, line no: 308, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,vals.add(result.getStringDimensionValue(query.getDimensionSpec().getOutputName())),METHOD_INVOCATION, line no: 309, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,result.getStringDimensionValue(query.getDimensionSpec().getOutputName()),METHOD_INVOCATION, line no: 309, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,getStringDimensionValue,SIMPLE_NAME, line no: 309, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,retVal.add(vals),METHOD_INVOCATION, line no: 313, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,pullFromCache,SIMPLE_NAME, line no: 321, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,new Function<Object Result<TopNResultValue>>(){   private final QueryGranularity granularity=query.getGranularity();   @Override public Result<TopNResultValue> apply(  Object input){     List<Object> results=(List<Object>)input;     List<Map<String Object>> retVal=Lists.newArrayListWithCapacity(results.size());     Iterator<Object> inputIter=results.iterator();     DateTime timestamp=granularity.toDateTime(new DateTime(inputIter.next()).getMillis());     while (inputIter.hasNext()) {       List<Object> result=(List<Object>)inputIter.next();       Map<String Object> vals=Maps.newLinkedHashMap();       Iterator<AggregatorFactory> aggIter=aggs.iterator();       Iterator<Object> resultIter=result.iterator();       vals.put(query.getDimensionSpec().getOutputName() resultIter.next());       while (aggIter.hasNext() && resultIter.hasNext()) {         final AggregatorFactory factory=aggIter.next();         vals.put(factory.getName() factory.deserialize(resultIter.next()));       }       for (      PostAggregator postAgg : postAggs) {         vals.put(postAgg.getName() postAgg.compute(vals));       }       retVal.add(vals);     }     return new Result<TopNResultValue>(timestamp new TopNResultValue(retVal));   } } ,CLASS_INSTANCE_CREATION, line no: 323, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,(List<Object>)input,CAST_EXPRESSION, line no: 330, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,Lists.newArrayListWithCapacity(results.size()),METHOD_INVOCATION, line no: 331, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,inputIter,SIMPLE_NAME, line no: 333, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,results.iterator(),METHOD_INVOCATION, line no: 333, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,iterator,SIMPLE_NAME, line no: 333, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,timestamp,SIMPLE_NAME, line no: 334, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,granularity.toDateTime(new DateTime(inputIter.next()).getMillis()),METHOD_INVOCATION, line no: 334, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,toDateTime,SIMPLE_NAME, line no: 334, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,new DateTime(inputIter.next()).getMillis(),METHOD_INVOCATION, line no: 334, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,new DateTime(inputIter.next()),CLASS_INSTANCE_CREATION, line no: 334, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,inputIter.next(),METHOD_INVOCATION, line no: 334, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,next,SIMPLE_NAME, line no: 334, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,inputIter.hasNext(),METHOD_INVOCATION, line no: 336, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,hasNext,SIMPLE_NAME, line no: 336, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,(List<Object>)inputIter.next(),CAST_EXPRESSION, line no: 337, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,Maps.newLinkedHashMap(),METHOD_INVOCATION, line no: 338, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,newLinkedHashMap,SIMPLE_NAME, line no: 338, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,aggIter,SIMPLE_NAME, line no: 340, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,aggs.iterator(),METHOD_INVOCATION, line no: 340, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,resultIter,SIMPLE_NAME, line no: 341, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,result.iterator(),METHOD_INVOCATION, line no: 341, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,vals.put(query.getDimensionSpec().getOutputName() resultIter.next()),METHOD_INVOCATION, line no: 343, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,resultIter.next(),METHOD_INVOCATION, line no: 343, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,aggIter.hasNext() && resultIter.hasNext(),INFIX_EXPRESSION, line no: 345, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,aggIter.hasNext(),METHOD_INVOCATION, line no: 345, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,resultIter.hasNext(),METHOD_INVOCATION, line no: 345, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,new Result<TopNResultValue>(timestamp new TopNResultValue(retVal)),CLASS_INSTANCE_CREATION, line no: 357, 1.0, 1.0, 0.0
input,SIMPLE_NAME, line no: 213,new TopNResultValue(retVal),CLASS_INSTANCE_CREATION, line no: 357, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,query,SIMPLE_NAME, line no: 20, 1.0, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,TypeReference,SIMPLE_NAME, line no: 22, 1.0, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,Function,SIMPLE_NAME, line no: 23, 1.0, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,Iterables,SIMPLE_NAME, line no: 25, 1.0, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,Lists,SIMPLE_NAME, line no: 26, 1.0, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,Maps,SIMPLE_NAME, line no: 27, 1.0, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,Sequence,SIMPLE_NAME, line no: 33, 1.0, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,granularity,SIMPLE_NAME, line no: 38, 1.0, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,QueryGranularity,SIMPLE_NAME, line no: 38, 1.0, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,CacheStrategy,SIMPLE_NAME, line no: 39, 1.0, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,Result,SIMPLE_NAME, line no: 45, 1.0, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,AggregatorFactory,SIMPLE_NAME, line no: 48, 1.0, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,AggregatorUtil,SIMPLE_NAME, line no: 49, 1.0, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,PostAggregator,SIMPLE_NAME, line no: 51, 1.0, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,DateTime,SIMPLE_NAME, line no: 53, 1.0, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,Iterator,SIMPLE_NAME, line no: 59, 1.0, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,List,SIMPLE_NAME, line no: 60, 1.0, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,Map,SIMPLE_NAME, line no: 61, 1.0, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,TopNResultValue,SIMPLE_NAME, line no: 65, 1.0, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,TopNQuery,SIMPLE_NAME, line no: 65, 1.0, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,Override,SIMPLE_NAME, line no: 85, 1.0, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,@Override,MARKER_ANNOTATION, line no: 90, 1.0, 0.8695652173913043, 0.0
getMetric,SIMPLE_NAME, line no: 213,getGranularity,SIMPLE_NAME, line no: 95, 1.0, 0.5217391304347826, 0.0
getMetric,SIMPLE_NAME, line no: 213,query.getGranularity(),METHOD_INVOCATION, line no: 108, 1.0, 0.8260869565217391, 0.0
getMetric,SIMPLE_NAME, line no: 213,query.getDimensionSpec(),METHOD_INVOCATION, line no: 109, 1.0, 0.8260869565217391, 0.0
getMetric,SIMPLE_NAME, line no: 213,getDimensionSpec,SIMPLE_NAME, line no: 109, 1.0, 0.8260869565217391, 0.0
getMetric,SIMPLE_NAME, line no: 213,query.getTopNMetricSpec(),METHOD_INVOCATION, line no: 110, 1.0, 0.8260869565217391, 0.0
getMetric,SIMPLE_NAME, line no: 213,getTopNMetricSpec,SIMPLE_NAME, line no: 110, 1.0, 0.8260869565217391, 0.0
getMetric,SIMPLE_NAME, line no: 213,query.getAggregatorSpecs(),METHOD_INVOCATION, line no: 112, 1.0, 0.8260869565217391, 0.0
getMetric,SIMPLE_NAME, line no: 213,getAggregatorSpecs,SIMPLE_NAME, line no: 112, 1.0, 0.8260869565217391, 0.0
getMetric,SIMPLE_NAME, line no: 213,query.getPostAggregatorSpecs(),METHOD_INVOCATION, line no: 113, 1.0, 0.8260869565217391, 0.0
getMetric,SIMPLE_NAME, line no: 213,getPostAggregatorSpecs,SIMPLE_NAME, line no: 113, 1.0, 0.8260869565217391, 0.0
getMetric,SIMPLE_NAME, line no: 213,mergeSequences,SIMPLE_NAME, line no: 120, 1.0, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,seqOfSequences,SIMPLE_NAME, line no: 120, 1.0, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,String,SIMPLE_NAME, line no: 135, 1.0, 0.9565217391304348, 0.0
getMetric,SIMPLE_NAME, line no: 213,size,SIMPLE_NAME, line no: 138, 1.0, 0.9565217391304348, 0.0
getMetric,SIMPLE_NAME, line no: 213,new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   private String dimension=query.getDimensionSpec().getOutputName();   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> result){     List<Map<String Object>> serializedValues=Lists.newArrayList(Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){       @Override public Map<String Object> apply(      DimensionAndMetricValueExtractor input){         final Map<String Object> values=Maps.newHashMap();         for (        AggregatorFactory agg : query.getAggregatorSpecs()) {           values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));         }         for (        PostAggregator postAgg : prunePostAggregators(query)) {           Object calculatedPostAgg=input.getMetric(postAgg.getName());           if (calculatedPostAgg != null) {             values.put(postAgg.getName() calculatedPostAgg);           }  else {             values.put(postAgg.getName() postAgg.compute(values));           }         }         values.put(dimension input.getDimensionValue(dimension));         return values;       }     } ));     return new Result<TopNResultValue>(result.getTimestamp() new TopNResultValue(serializedValues));   } } ,CLASS_INSTANCE_CREATION, line no: 147, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,dimension,SIMPLE_NAME, line no: 149, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,query.getDimensionSpec().getOutputName(),METHOD_INVOCATION, line no: 149, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,getOutputName,SIMPLE_NAME, line no: 149, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,result,SIMPLE_NAME, line no: 152, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,serializedValues,SIMPLE_NAME, line no: 154, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,Lists.newArrayList(Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : prunePostAggregators(query)) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } )),METHOD_INVOCATION, line no: 154, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,newArrayList,SIMPLE_NAME, line no: 154, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : prunePostAggregators(query)) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } ),METHOD_INVOCATION, line no: 155, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,transform,SIMPLE_NAME, line no: 155, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,result.getValue(),METHOD_INVOCATION, line no: 156, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,getValue,SIMPLE_NAME, line no: 156, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : prunePostAggregators(query)) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } ,CLASS_INSTANCE_CREATION, line no: 157, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,DimensionAndMetricValueExtractor,SIMPLE_NAME, line no: 157, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,values,SIMPLE_NAME, line no: 162, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,Maps.newHashMap(),METHOD_INVOCATION, line no: 162, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,newHashMap,SIMPLE_NAME, line no: 162, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,agg,SIMPLE_NAME, line no: 163, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,getName,SIMPLE_NAME, line no: 164, 1.0, 0.9565217391304348, 0.0
getMetric,SIMPLE_NAME, line no: 213,postAgg,SIMPLE_NAME, line no: 166, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,prunePostAggregators(query),METHOD_INVOCATION, line no: 166, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,prunePostAggregators,SIMPLE_NAME, line no: 166, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,postAgg.getName(),METHOD_INVOCATION, line no: 167, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,new Result<TopNResultValue>(result.getTimestamp() new TopNResultValue(serializedValues)),CLASS_INSTANCE_CREATION, line no: 182, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,result.getTimestamp(),METHOD_INVOCATION, line no: 183, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,getTimestamp,SIMPLE_NAME, line no: 183, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,new TopNResultValue(serializedValues),CLASS_INSTANCE_CREATION, line no: 184, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   private String dimension=query.getDimensionSpec().getOutputName();   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> result){     List<Map<String Object>> serializedValues=Lists.newArrayList(Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){       @Override public Map<String Object> apply(      DimensionAndMetricValueExtractor input){         final Map<String Object> values=Maps.newHashMap();         for (        AggregatorFactory agg : query.getAggregatorSpecs()) {           values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));         }         for (        PostAggregator postAgg : query.getPostAggregatorSpecs()) {           Object calculatedPostAgg=input.getMetric(postAgg.getName());           if (calculatedPostAgg != null) {             values.put(postAgg.getName() calculatedPostAgg);           }  else {             values.put(postAgg.getName() postAgg.compute(values));           }         }         for (        AggregatorFactory agg : query.getAggregatorSpecs()) {           values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));         }         values.put(dimension input.getDimensionValue(dimension));         return values;       }     } ));     return new Result<TopNResultValue>(result.getTimestamp() new TopNResultValue(serializedValues));   } } ,CLASS_INSTANCE_CREATION, line no: 195, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,Lists.newArrayList(Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : query.getPostAggregatorSpecs()) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } )),METHOD_INVOCATION, line no: 202, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : query.getPostAggregatorSpecs()) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } ),METHOD_INVOCATION, line no: 203, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : query.getPostAggregatorSpecs()) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } ,CLASS_INSTANCE_CREATION, line no: 205, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,new CacheStrategy<Result<TopNResultValue> Object TopNQuery>(){   private final List<AggregatorFactory> aggs=query.getAggregatorSpecs();   private final List<PostAggregator> postAggs=AggregatorUtil.pruneDependentPostAgg(query.getPostAggregatorSpecs() query.getTopNMetricSpec().getMetricName(query.getDimensionSpec()));   @Override public byte[] computeCacheKey(  TopNQuery query){     final byte[] dimensionSpecBytes=query.getDimensionSpec().getCacheKey();     final byte[] metricSpecBytes=query.getTopNMetricSpec().getCacheKey();     final DimFilter dimFilter=query.getDimensionsFilter();     final byte[] filterBytes=dimFilter == null ? new byte[]{} : dimFilter.getCacheKey();     final byte[] aggregatorBytes=QueryCacheHelper.computeAggregatorBytes(query.getAggregatorSpecs());     final byte[] granularityBytes=query.getGranularity().cacheKey();     return ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())).put(granularityBytes).put(filterBytes).put(aggregatorBytes).array();   }   @Override public TypeReference<Object> getCacheObjectClazz(){     return OBJECT_TYPE_REFERENCE;   }   @Override public Function<Result<TopNResultValue> Object> prepareForCache(){     return new Function<Result<TopNResultValue> Object>(){       @Override public Object apply(      final Result<TopNResultValue> input){         List<DimensionAndMetricValueExtractor> results=Lists.newArrayList(input.getValue());         final List<Object> retVal=Lists.newArrayListWithCapacity(results.size() + 1);         retVal.add(input.getTimestamp().getMillis());         for (        DimensionAndMetricValueExtractor result : results) {           List<Object> vals=Lists.newArrayListWithCapacity(aggs.size() + 2);           vals.add(result.getStringDimensionValue(query.getDimensionSpec().getOutputName()));           for (          AggregatorFactory agg : aggs) {             vals.add(result.getMetric(agg.getName()));           }           retVal.add(vals);         }         return retVal;       }     } ;   }   @Override public Function<Object Result<TopNResultValue>> pullFromCache(){     return new Function<Object Result<TopNResultValue>>(){       private final QueryGranularity granularity=query.getGranularity();       @Override public Result<TopNResultValue> apply(      Object input){         List<Object> results=(List<Object>)input;         List<Map<String Object>> retVal=Lists.newArrayListWithCapacity(results.size());         Iterator<Object> inputIter=results.iterator();         DateTime timestamp=granularity.toDateTime(new DateTime(inputIter.next()).getMillis());         while (inputIter.hasNext()) {           List<Object> result=(List<Object>)inputIter.next();           Map<String Object> vals=Maps.newLinkedHashMap();           Iterator<AggregatorFactory> aggIter=aggs.iterator();           Iterator<Object> resultIter=result.iterator();           vals.put(query.getDimensionSpec().getOutputName() resultIter.next());           while (aggIter.hasNext() && resultIter.hasNext()) {             final AggregatorFactory factory=aggIter.next();             vals.put(factory.getName() factory.deserialize(resultIter.next()));           }           for (          PostAggregator postAgg : postAggs) {             vals.put(postAgg.getName() postAgg.compute(vals));           }           retVal.add(vals);         }         return new Result<TopNResultValue>(timestamp new TopNResultValue(retVal));       }     } ;   }   @Override public Sequence<Result<TopNResultValue>> mergeSequences(  Sequence<Sequence<Result<TopNResultValue>>> seqOfSequences){     return new MergeSequence<Result<TopNResultValue>>(getOrdering() seqOfSequences);   } } ,CLASS_INSTANCE_CREATION, line no: 253, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,aggs,SIMPLE_NAME, line no: 255, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,postAggs,SIMPLE_NAME, line no: 256, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,AggregatorUtil.pruneDependentPostAgg(query.getPostAggregatorSpecs() query.getTopNMetricSpec().getMetricName(query.getDimensionSpec())),METHOD_INVOCATION, line no: 256, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,pruneDependentPostAgg,SIMPLE_NAME, line no: 256, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,query.getTopNMetricSpec().getMetricName(query.getDimensionSpec()),METHOD_INVOCATION, line no: 258, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,getMetricName,SIMPLE_NAME, line no: 259, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,computeCacheKey,SIMPLE_NAME, line no: 263, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,1,NUMBER_LITERAL, line no: 275, 1.0, 0.8695652173913043, 0.0
getMetric,SIMPLE_NAME, line no: 213,getCacheObjectClazz,SIMPLE_NAME, line no: 289, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,prepareForCache,SIMPLE_NAME, line no: 295, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,new Function<Result<TopNResultValue> Object>(){   @Override public Object apply(  final Result<TopNResultValue> input){     List<DimensionAndMetricValueExtractor> results=Lists.newArrayList(input.getValue());     final List<Object> retVal=Lists.newArrayListWithCapacity(results.size() + 1);     retVal.add(input.getTimestamp().getMillis());     for (    DimensionAndMetricValueExtractor result : results) {       List<Object> vals=Lists.newArrayListWithCapacity(aggs.size() + 2);       vals.add(result.getStringDimensionValue(query.getDimensionSpec().getOutputName()));       for (      AggregatorFactory agg : aggs) {         vals.add(result.getMetric(agg.getName()));       }       retVal.add(vals);     }     return retVal;   } } ,CLASS_INSTANCE_CREATION, line no: 297, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,results,SIMPLE_NAME, line no: 302, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,Lists.newArrayList(input.getValue()),METHOD_INVOCATION, line no: 302, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,input.getValue(),METHOD_INVOCATION, line no: 302, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,retVal,SIMPLE_NAME, line no: 303, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,Lists.newArrayListWithCapacity(results.size() + 1),METHOD_INVOCATION, line no: 303, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,newArrayListWithCapacity,SIMPLE_NAME, line no: 303, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,results.size() + 1,INFIX_EXPRESSION, line no: 303, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,results.size(),METHOD_INVOCATION, line no: 303, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,retVal.add(input.getTimestamp().getMillis()),METHOD_INVOCATION, line no: 306, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,add,SIMPLE_NAME, line no: 306, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,input.getTimestamp().getMillis(),METHOD_INVOCATION, line no: 306, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,input.getTimestamp(),METHOD_INVOCATION, line no: 306, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,getMillis,SIMPLE_NAME, line no: 306, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,vals,SIMPLE_NAME, line no: 308, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,Lists.newArrayListWithCapacity(aggs.size() + 2),METHOD_INVOCATION, line no: 308, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,aggs.size() + 2,INFIX_EXPRESSION, line no: 308, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,aggs.size(),METHOD_INVOCATION, line no: 308, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,2,NUMBER_LITERAL, line no: 308, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,vals.add(result.getStringDimensionValue(query.getDimensionSpec().getOutputName())),METHOD_INVOCATION, line no: 309, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,result.getStringDimensionValue(query.getDimensionSpec().getOutputName()),METHOD_INVOCATION, line no: 309, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,getStringDimensionValue,SIMPLE_NAME, line no: 309, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,retVal.add(vals),METHOD_INVOCATION, line no: 313, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,pullFromCache,SIMPLE_NAME, line no: 321, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,new Function<Object Result<TopNResultValue>>(){   private final QueryGranularity granularity=query.getGranularity();   @Override public Result<TopNResultValue> apply(  Object input){     List<Object> results=(List<Object>)input;     List<Map<String Object>> retVal=Lists.newArrayListWithCapacity(results.size());     Iterator<Object> inputIter=results.iterator();     DateTime timestamp=granularity.toDateTime(new DateTime(inputIter.next()).getMillis());     while (inputIter.hasNext()) {       List<Object> result=(List<Object>)inputIter.next();       Map<String Object> vals=Maps.newLinkedHashMap();       Iterator<AggregatorFactory> aggIter=aggs.iterator();       Iterator<Object> resultIter=result.iterator();       vals.put(query.getDimensionSpec().getOutputName() resultIter.next());       while (aggIter.hasNext() && resultIter.hasNext()) {         final AggregatorFactory factory=aggIter.next();         vals.put(factory.getName() factory.deserialize(resultIter.next()));       }       for (      PostAggregator postAgg : postAggs) {         vals.put(postAgg.getName() postAgg.compute(vals));       }       retVal.add(vals);     }     return new Result<TopNResultValue>(timestamp new TopNResultValue(retVal));   } } ,CLASS_INSTANCE_CREATION, line no: 323, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,(List<Object>)input,CAST_EXPRESSION, line no: 330, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,Lists.newArrayListWithCapacity(results.size()),METHOD_INVOCATION, line no: 331, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,inputIter,SIMPLE_NAME, line no: 333, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,results.iterator(),METHOD_INVOCATION, line no: 333, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,iterator,SIMPLE_NAME, line no: 333, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,timestamp,SIMPLE_NAME, line no: 334, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,granularity.toDateTime(new DateTime(inputIter.next()).getMillis()),METHOD_INVOCATION, line no: 334, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,toDateTime,SIMPLE_NAME, line no: 334, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,new DateTime(inputIter.next()).getMillis(),METHOD_INVOCATION, line no: 334, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,new DateTime(inputIter.next()),CLASS_INSTANCE_CREATION, line no: 334, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,inputIter.hasNext(),METHOD_INVOCATION, line no: 336, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,hasNext,SIMPLE_NAME, line no: 336, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,(List<Object>)inputIter.next(),CAST_EXPRESSION, line no: 337, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,Maps.newLinkedHashMap(),METHOD_INVOCATION, line no: 338, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,newLinkedHashMap,SIMPLE_NAME, line no: 338, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,aggIter,SIMPLE_NAME, line no: 340, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,aggs.iterator(),METHOD_INVOCATION, line no: 340, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,resultIter,SIMPLE_NAME, line no: 341, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,result.iterator(),METHOD_INVOCATION, line no: 341, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,aggIter.hasNext() && resultIter.hasNext(),INFIX_EXPRESSION, line no: 345, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,aggIter.hasNext(),METHOD_INVOCATION, line no: 345, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,resultIter.hasNext(),METHOD_INVOCATION, line no: 345, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,new Result<TopNResultValue>(timestamp new TopNResultValue(retVal)),CLASS_INSTANCE_CREATION, line no: 357, 1.0, 1.0, 0.0
getMetric,SIMPLE_NAME, line no: 213,new TopNResultValue(retVal),CLASS_INSTANCE_CREATION, line no: 357, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,query,SIMPLE_NAME, line no: 20, 1.0, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,TypeReference,SIMPLE_NAME, line no: 22, 1.0, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,Function,SIMPLE_NAME, line no: 23, 1.0, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,Iterables,SIMPLE_NAME, line no: 25, 1.0, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,Lists,SIMPLE_NAME, line no: 26, 1.0, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,Maps,SIMPLE_NAME, line no: 27, 1.0, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,Sequence,SIMPLE_NAME, line no: 33, 1.0, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,granularity,SIMPLE_NAME, line no: 38, 1.0, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,QueryGranularity,SIMPLE_NAME, line no: 38, 1.0, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,CacheStrategy,SIMPLE_NAME, line no: 39, 1.0, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,Result,SIMPLE_NAME, line no: 45, 1.0, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,AggregatorFactory,SIMPLE_NAME, line no: 48, 1.0, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,AggregatorUtil,SIMPLE_NAME, line no: 49, 1.0, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,PostAggregator,SIMPLE_NAME, line no: 51, 1.0, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,DateTime,SIMPLE_NAME, line no: 53, 1.0, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,Iterator,SIMPLE_NAME, line no: 59, 1.0, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,List,SIMPLE_NAME, line no: 60, 1.0, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,Map,SIMPLE_NAME, line no: 61, 1.0, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,TopNResultValue,SIMPLE_NAME, line no: 65, 1.0, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,TopNQuery,SIMPLE_NAME, line no: 65, 1.0, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,Object,SIMPLE_NAME, line no: 72, 1.0, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,Override,SIMPLE_NAME, line no: 85, 1.0, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,@Override,MARKER_ANNOTATION, line no: 90, 1.0, 0.8260869565217391, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,getGranularity,SIMPLE_NAME, line no: 95, 1.0, 0.5217391304347826, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,input,SIMPLE_NAME, line no: 102, 1.0, 0.8260869565217391, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,query.getGranularity(),METHOD_INVOCATION, line no: 108, 1.0, 0.782608695652174, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,query.getDimensionSpec(),METHOD_INVOCATION, line no: 109, 1.0, 0.782608695652174, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,getDimensionSpec,SIMPLE_NAME, line no: 109, 1.0, 0.782608695652174, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,query.getTopNMetricSpec(),METHOD_INVOCATION, line no: 110, 1.0, 0.782608695652174, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,getTopNMetricSpec,SIMPLE_NAME, line no: 110, 1.0, 0.782608695652174, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,query.getAggregatorSpecs(),METHOD_INVOCATION, line no: 112, 1.0, 0.782608695652174, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,getAggregatorSpecs,SIMPLE_NAME, line no: 112, 1.0, 0.782608695652174, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,query.getPostAggregatorSpecs(),METHOD_INVOCATION, line no: 113, 1.0, 0.782608695652174, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,getPostAggregatorSpecs,SIMPLE_NAME, line no: 113, 1.0, 0.782608695652174, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,mergeSequences,SIMPLE_NAME, line no: 120, 1.0, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,seqOfSequences,SIMPLE_NAME, line no: 120, 1.0, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,size,SIMPLE_NAME, line no: 138, 1.0, 0.9565217391304348, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   private String dimension=query.getDimensionSpec().getOutputName();   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> result){     List<Map<String Object>> serializedValues=Lists.newArrayList(Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){       @Override public Map<String Object> apply(      DimensionAndMetricValueExtractor input){         final Map<String Object> values=Maps.newHashMap();         for (        AggregatorFactory agg : query.getAggregatorSpecs()) {           values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));         }         for (        PostAggregator postAgg : prunePostAggregators(query)) {           Object calculatedPostAgg=input.getMetric(postAgg.getName());           if (calculatedPostAgg != null) {             values.put(postAgg.getName() calculatedPostAgg);           }  else {             values.put(postAgg.getName() postAgg.compute(values));           }         }         values.put(dimension input.getDimensionValue(dimension));         return values;       }     } ));     return new Result<TopNResultValue>(result.getTimestamp() new TopNResultValue(serializedValues));   } } ,CLASS_INSTANCE_CREATION, line no: 147, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,query.getDimensionSpec().getOutputName(),METHOD_INVOCATION, line no: 149, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,apply,SIMPLE_NAME, line no: 152, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,result,SIMPLE_NAME, line no: 152, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,serializedValues,SIMPLE_NAME, line no: 154, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,Lists.newArrayList(Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : prunePostAggregators(query)) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } )),METHOD_INVOCATION, line no: 154, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,newArrayList,SIMPLE_NAME, line no: 154, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : prunePostAggregators(query)) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } ),METHOD_INVOCATION, line no: 155, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,transform,SIMPLE_NAME, line no: 155, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,result.getValue(),METHOD_INVOCATION, line no: 156, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,getValue,SIMPLE_NAME, line no: 156, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : prunePostAggregators(query)) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } ,CLASS_INSTANCE_CREATION, line no: 157, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,DimensionAndMetricValueExtractor,SIMPLE_NAME, line no: 157, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,values,SIMPLE_NAME, line no: 162, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,Maps.newHashMap(),METHOD_INVOCATION, line no: 162, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,newHashMap,SIMPLE_NAME, line no: 162, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,agg,SIMPLE_NAME, line no: 163, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,put,SIMPLE_NAME, line no: 164, 1.0, 0.8695652173913043, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,postAgg,SIMPLE_NAME, line no: 166, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,prunePostAggregators(query),METHOD_INVOCATION, line no: 166, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,prunePostAggregators,SIMPLE_NAME, line no: 166, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,postAgg.getName(),METHOD_INVOCATION, line no: 167, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,values.put(dimension input.getDimensionValue(dimension)),METHOD_INVOCATION, line no: 174, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,input.getDimensionValue(dimension),METHOD_INVOCATION, line no: 174, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,getDimensionValue,SIMPLE_NAME, line no: 174, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,new Result<TopNResultValue>(result.getTimestamp() new TopNResultValue(serializedValues)),CLASS_INSTANCE_CREATION, line no: 182, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,result.getTimestamp(),METHOD_INVOCATION, line no: 183, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,getTimestamp,SIMPLE_NAME, line no: 183, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,new TopNResultValue(serializedValues),CLASS_INSTANCE_CREATION, line no: 184, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   private String dimension=query.getDimensionSpec().getOutputName();   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> result){     List<Map<String Object>> serializedValues=Lists.newArrayList(Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){       @Override public Map<String Object> apply(      DimensionAndMetricValueExtractor input){         final Map<String Object> values=Maps.newHashMap();         for (        AggregatorFactory agg : query.getAggregatorSpecs()) {           values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));         }         for (        PostAggregator postAgg : query.getPostAggregatorSpecs()) {           Object calculatedPostAgg=input.getMetric(postAgg.getName());           if (calculatedPostAgg != null) {             values.put(postAgg.getName() calculatedPostAgg);           }  else {             values.put(postAgg.getName() postAgg.compute(values));           }         }         for (        AggregatorFactory agg : query.getAggregatorSpecs()) {           values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));         }         values.put(dimension input.getDimensionValue(dimension));         return values;       }     } ));     return new Result<TopNResultValue>(result.getTimestamp() new TopNResultValue(serializedValues));   } } ,CLASS_INSTANCE_CREATION, line no: 195, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,Lists.newArrayList(Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : query.getPostAggregatorSpecs()) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } )),METHOD_INVOCATION, line no: 202, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : query.getPostAggregatorSpecs()) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } ),METHOD_INVOCATION, line no: 203, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : query.getPostAggregatorSpecs()) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } ,CLASS_INSTANCE_CREATION, line no: 205, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,new CacheStrategy<Result<TopNResultValue> Object TopNQuery>(){   private final List<AggregatorFactory> aggs=query.getAggregatorSpecs();   private final List<PostAggregator> postAggs=AggregatorUtil.pruneDependentPostAgg(query.getPostAggregatorSpecs() query.getTopNMetricSpec().getMetricName(query.getDimensionSpec()));   @Override public byte[] computeCacheKey(  TopNQuery query){     final byte[] dimensionSpecBytes=query.getDimensionSpec().getCacheKey();     final byte[] metricSpecBytes=query.getTopNMetricSpec().getCacheKey();     final DimFilter dimFilter=query.getDimensionsFilter();     final byte[] filterBytes=dimFilter == null ? new byte[]{} : dimFilter.getCacheKey();     final byte[] aggregatorBytes=QueryCacheHelper.computeAggregatorBytes(query.getAggregatorSpecs());     final byte[] granularityBytes=query.getGranularity().cacheKey();     return ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())).put(granularityBytes).put(filterBytes).put(aggregatorBytes).array();   }   @Override public TypeReference<Object> getCacheObjectClazz(){     return OBJECT_TYPE_REFERENCE;   }   @Override public Function<Result<TopNResultValue> Object> prepareForCache(){     return new Function<Result<TopNResultValue> Object>(){       @Override public Object apply(      final Result<TopNResultValue> input){         List<DimensionAndMetricValueExtractor> results=Lists.newArrayList(input.getValue());         final List<Object> retVal=Lists.newArrayListWithCapacity(results.size() + 1);         retVal.add(input.getTimestamp().getMillis());         for (        DimensionAndMetricValueExtractor result : results) {           List<Object> vals=Lists.newArrayListWithCapacity(aggs.size() + 2);           vals.add(result.getStringDimensionValue(query.getDimensionSpec().getOutputName()));           for (          AggregatorFactory agg : aggs) {             vals.add(result.getMetric(agg.getName()));           }           retVal.add(vals);         }         return retVal;       }     } ;   }   @Override public Function<Object Result<TopNResultValue>> pullFromCache(){     return new Function<Object Result<TopNResultValue>>(){       private final QueryGranularity granularity=query.getGranularity();       @Override public Result<TopNResultValue> apply(      Object input){         List<Object> results=(List<Object>)input;         List<Map<String Object>> retVal=Lists.newArrayListWithCapacity(results.size());         Iterator<Object> inputIter=results.iterator();         DateTime timestamp=granularity.toDateTime(new DateTime(inputIter.next()).getMillis());         while (inputIter.hasNext()) {           List<Object> result=(List<Object>)inputIter.next();           Map<String Object> vals=Maps.newLinkedHashMap();           Iterator<AggregatorFactory> aggIter=aggs.iterator();           Iterator<Object> resultIter=result.iterator();           vals.put(query.getDimensionSpec().getOutputName() resultIter.next());           while (aggIter.hasNext() && resultIter.hasNext()) {             final AggregatorFactory factory=aggIter.next();             vals.put(factory.getName() factory.deserialize(resultIter.next()));           }           for (          PostAggregator postAgg : postAggs) {             vals.put(postAgg.getName() postAgg.compute(vals));           }           retVal.add(vals);         }         return new Result<TopNResultValue>(timestamp new TopNResultValue(retVal));       }     } ;   }   @Override public Sequence<Result<TopNResultValue>> mergeSequences(  Sequence<Sequence<Result<TopNResultValue>>> seqOfSequences){     return new MergeSequence<Result<TopNResultValue>>(getOrdering() seqOfSequences);   } } ,CLASS_INSTANCE_CREATION, line no: 253, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,aggs,SIMPLE_NAME, line no: 255, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,postAggs,SIMPLE_NAME, line no: 256, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,AggregatorUtil.pruneDependentPostAgg(query.getPostAggregatorSpecs() query.getTopNMetricSpec().getMetricName(query.getDimensionSpec())),METHOD_INVOCATION, line no: 256, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,pruneDependentPostAgg,SIMPLE_NAME, line no: 256, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,query.getTopNMetricSpec().getMetricName(query.getDimensionSpec()),METHOD_INVOCATION, line no: 258, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,computeCacheKey,SIMPLE_NAME, line no: 263, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,1,NUMBER_LITERAL, line no: 275, 1.0, 0.8695652173913043, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,getCacheObjectClazz,SIMPLE_NAME, line no: 289, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,prepareForCache,SIMPLE_NAME, line no: 295, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,new Function<Result<TopNResultValue> Object>(){   @Override public Object apply(  final Result<TopNResultValue> input){     List<DimensionAndMetricValueExtractor> results=Lists.newArrayList(input.getValue());     final List<Object> retVal=Lists.newArrayListWithCapacity(results.size() + 1);     retVal.add(input.getTimestamp().getMillis());     for (    DimensionAndMetricValueExtractor result : results) {       List<Object> vals=Lists.newArrayListWithCapacity(aggs.size() + 2);       vals.add(result.getStringDimensionValue(query.getDimensionSpec().getOutputName()));       for (      AggregatorFactory agg : aggs) {         vals.add(result.getMetric(agg.getName()));       }       retVal.add(vals);     }     return retVal;   } } ,CLASS_INSTANCE_CREATION, line no: 297, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,results,SIMPLE_NAME, line no: 302, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,Lists.newArrayList(input.getValue()),METHOD_INVOCATION, line no: 302, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,input.getValue(),METHOD_INVOCATION, line no: 302, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,retVal,SIMPLE_NAME, line no: 303, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,Lists.newArrayListWithCapacity(results.size() + 1),METHOD_INVOCATION, line no: 303, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,newArrayListWithCapacity,SIMPLE_NAME, line no: 303, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,results.size() + 1,INFIX_EXPRESSION, line no: 303, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,results.size(),METHOD_INVOCATION, line no: 303, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,retVal.add(input.getTimestamp().getMillis()),METHOD_INVOCATION, line no: 306, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,add,SIMPLE_NAME, line no: 306, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,input.getTimestamp().getMillis(),METHOD_INVOCATION, line no: 306, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,input.getTimestamp(),METHOD_INVOCATION, line no: 306, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,getMillis,SIMPLE_NAME, line no: 306, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,vals,SIMPLE_NAME, line no: 308, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,Lists.newArrayListWithCapacity(aggs.size() + 2),METHOD_INVOCATION, line no: 308, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,aggs.size() + 2,INFIX_EXPRESSION, line no: 308, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,aggs.size(),METHOD_INVOCATION, line no: 308, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,2,NUMBER_LITERAL, line no: 308, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,vals.add(result.getStringDimensionValue(query.getDimensionSpec().getOutputName())),METHOD_INVOCATION, line no: 309, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,result.getStringDimensionValue(query.getDimensionSpec().getOutputName()),METHOD_INVOCATION, line no: 309, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,retVal.add(vals),METHOD_INVOCATION, line no: 313, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,pullFromCache,SIMPLE_NAME, line no: 321, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,new Function<Object Result<TopNResultValue>>(){   private final QueryGranularity granularity=query.getGranularity();   @Override public Result<TopNResultValue> apply(  Object input){     List<Object> results=(List<Object>)input;     List<Map<String Object>> retVal=Lists.newArrayListWithCapacity(results.size());     Iterator<Object> inputIter=results.iterator();     DateTime timestamp=granularity.toDateTime(new DateTime(inputIter.next()).getMillis());     while (inputIter.hasNext()) {       List<Object> result=(List<Object>)inputIter.next();       Map<String Object> vals=Maps.newLinkedHashMap();       Iterator<AggregatorFactory> aggIter=aggs.iterator();       Iterator<Object> resultIter=result.iterator();       vals.put(query.getDimensionSpec().getOutputName() resultIter.next());       while (aggIter.hasNext() && resultIter.hasNext()) {         final AggregatorFactory factory=aggIter.next();         vals.put(factory.getName() factory.deserialize(resultIter.next()));       }       for (      PostAggregator postAgg : postAggs) {         vals.put(postAgg.getName() postAgg.compute(vals));       }       retVal.add(vals);     }     return new Result<TopNResultValue>(timestamp new TopNResultValue(retVal));   } } ,CLASS_INSTANCE_CREATION, line no: 323, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,(List<Object>)input,CAST_EXPRESSION, line no: 330, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,Lists.newArrayListWithCapacity(results.size()),METHOD_INVOCATION, line no: 331, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,inputIter,SIMPLE_NAME, line no: 333, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,results.iterator(),METHOD_INVOCATION, line no: 333, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,iterator,SIMPLE_NAME, line no: 333, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,timestamp,SIMPLE_NAME, line no: 334, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,granularity.toDateTime(new DateTime(inputIter.next()).getMillis()),METHOD_INVOCATION, line no: 334, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,toDateTime,SIMPLE_NAME, line no: 334, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,new DateTime(inputIter.next()).getMillis(),METHOD_INVOCATION, line no: 334, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,new DateTime(inputIter.next()),CLASS_INSTANCE_CREATION, line no: 334, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,inputIter.next(),METHOD_INVOCATION, line no: 334, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,next,SIMPLE_NAME, line no: 334, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,inputIter.hasNext(),METHOD_INVOCATION, line no: 336, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,hasNext,SIMPLE_NAME, line no: 336, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,(List<Object>)inputIter.next(),CAST_EXPRESSION, line no: 337, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,Maps.newLinkedHashMap(),METHOD_INVOCATION, line no: 338, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,newLinkedHashMap,SIMPLE_NAME, line no: 338, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,aggIter,SIMPLE_NAME, line no: 340, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,aggs.iterator(),METHOD_INVOCATION, line no: 340, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,resultIter,SIMPLE_NAME, line no: 341, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,result.iterator(),METHOD_INVOCATION, line no: 341, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,vals.put(query.getDimensionSpec().getOutputName() resultIter.next()),METHOD_INVOCATION, line no: 343, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,resultIter.next(),METHOD_INVOCATION, line no: 343, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,aggIter.hasNext() && resultIter.hasNext(),INFIX_EXPRESSION, line no: 345, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,aggIter.hasNext(),METHOD_INVOCATION, line no: 345, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,resultIter.hasNext(),METHOD_INVOCATION, line no: 345, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,new Result<TopNResultValue>(timestamp new TopNResultValue(retVal)),CLASS_INSTANCE_CREATION, line no: 357, 1.0, 1.0, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,new TopNResultValue(retVal),CLASS_INSTANCE_CREATION, line no: 357, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,query,SIMPLE_NAME, line no: 20, 1.0, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,TypeReference,SIMPLE_NAME, line no: 22, 1.0, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,Function,SIMPLE_NAME, line no: 23, 1.0, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,Iterables,SIMPLE_NAME, line no: 25, 1.0, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,Lists,SIMPLE_NAME, line no: 26, 1.0, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,Maps,SIMPLE_NAME, line no: 27, 1.0, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,Sequence,SIMPLE_NAME, line no: 33, 1.0, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,granularity,SIMPLE_NAME, line no: 38, 1.0, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,QueryGranularity,SIMPLE_NAME, line no: 38, 1.0, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,CacheStrategy,SIMPLE_NAME, line no: 39, 1.0, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,Result,SIMPLE_NAME, line no: 45, 1.0, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,io.druid.query.aggregation.AggregatorFactory,QUALIFIED_NAME, line no: 48, 1.0, 0.0, 1.0
agg,SIMPLE_NAME, line no: 213,AggregatorUtil,SIMPLE_NAME, line no: 49, 1.0, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,PostAggregator,SIMPLE_NAME, line no: 51, 1.0, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,DateTime,SIMPLE_NAME, line no: 53, 1.0, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,Iterator,SIMPLE_NAME, line no: 59, 1.0, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,List,SIMPLE_NAME, line no: 60, 1.0, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,Map,SIMPLE_NAME, line no: 61, 1.0, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,TopNResultValue,SIMPLE_NAME, line no: 65, 1.0, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,TopNQuery,SIMPLE_NAME, line no: 65, 1.0, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,Object,SIMPLE_NAME, line no: 72, 1.0, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,Override,SIMPLE_NAME, line no: 85, 1.0, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,@Override,MARKER_ANNOTATION, line no: 90, 1.0, 0.8333333333333334, 0.0
agg,SIMPLE_NAME, line no: 213,getGranularity,SIMPLE_NAME, line no: 95, 1.0, 0.5, 0.0
agg,SIMPLE_NAME, line no: 213,input,SIMPLE_NAME, line no: 102, 1.0, 0.8333333333333334, 0.0
agg,SIMPLE_NAME, line no: 213,query.getGranularity(),METHOD_INVOCATION, line no: 108, 1.0, 0.7916666666666666, 0.0
agg,SIMPLE_NAME, line no: 213,query.getDimensionSpec(),METHOD_INVOCATION, line no: 109, 1.0, 0.7916666666666666, 0.0
agg,SIMPLE_NAME, line no: 213,getDimensionSpec,SIMPLE_NAME, line no: 109, 1.0, 0.7916666666666666, 0.0
agg,SIMPLE_NAME, line no: 213,query.getTopNMetricSpec(),METHOD_INVOCATION, line no: 110, 1.0, 0.7916666666666666, 0.0
agg,SIMPLE_NAME, line no: 213,getTopNMetricSpec,SIMPLE_NAME, line no: 110, 1.0, 0.7916666666666666, 0.0
agg,SIMPLE_NAME, line no: 213,query.getAggregatorSpecs(),METHOD_INVOCATION, line no: 112, 1.0, 0.7916666666666666, 0.0
agg,SIMPLE_NAME, line no: 213,getAggregatorSpecs,SIMPLE_NAME, line no: 112, 1.0, 0.7916666666666666, 0.0
agg,SIMPLE_NAME, line no: 213,query.getPostAggregatorSpecs(),METHOD_INVOCATION, line no: 113, 1.0, 0.7916666666666666, 0.0
agg,SIMPLE_NAME, line no: 213,getPostAggregatorSpecs,SIMPLE_NAME, line no: 113, 1.0, 0.7916666666666666, 0.0
agg,SIMPLE_NAME, line no: 213,mergeSequences,SIMPLE_NAME, line no: 120, 1.0, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,seqOfSequences,SIMPLE_NAME, line no: 120, 1.0, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,String,SIMPLE_NAME, line no: 135, 1.0, 0.9583333333333334, 0.0
agg,SIMPLE_NAME, line no: 213,size,SIMPLE_NAME, line no: 138, 1.0, 0.9583333333333334, 0.0
agg,SIMPLE_NAME, line no: 213,new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   private String dimension=query.getDimensionSpec().getOutputName();   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> result){     List<Map<String Object>> serializedValues=Lists.newArrayList(Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){       @Override public Map<String Object> apply(      DimensionAndMetricValueExtractor input){         final Map<String Object> values=Maps.newHashMap();         for (        AggregatorFactory agg : query.getAggregatorSpecs()) {           values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));         }         for (        PostAggregator postAgg : prunePostAggregators(query)) {           Object calculatedPostAgg=input.getMetric(postAgg.getName());           if (calculatedPostAgg != null) {             values.put(postAgg.getName() calculatedPostAgg);           }  else {             values.put(postAgg.getName() postAgg.compute(values));           }         }         values.put(dimension input.getDimensionValue(dimension));         return values;       }     } ));     return new Result<TopNResultValue>(result.getTimestamp() new TopNResultValue(serializedValues));   } } ,CLASS_INSTANCE_CREATION, line no: 147, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,dimension,SIMPLE_NAME, line no: 149, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,query.getDimensionSpec().getOutputName(),METHOD_INVOCATION, line no: 149, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,getOutputName,SIMPLE_NAME, line no: 149, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,apply,SIMPLE_NAME, line no: 152, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,result,SIMPLE_NAME, line no: 152, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,serializedValues,SIMPLE_NAME, line no: 154, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,Lists.newArrayList(Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : prunePostAggregators(query)) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } )),METHOD_INVOCATION, line no: 154, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,newArrayList,SIMPLE_NAME, line no: 154, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : prunePostAggregators(query)) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } ),METHOD_INVOCATION, line no: 155, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,transform,SIMPLE_NAME, line no: 155, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,result.getValue(),METHOD_INVOCATION, line no: 156, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,getValue,SIMPLE_NAME, line no: 156, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : prunePostAggregators(query)) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } ,CLASS_INSTANCE_CREATION, line no: 157, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,DimensionAndMetricValueExtractor,SIMPLE_NAME, line no: 157, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,values,SIMPLE_NAME, line no: 162, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,Maps.newHashMap(),METHOD_INVOCATION, line no: 162, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,newHashMap,SIMPLE_NAME, line no: 162, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,put,SIMPLE_NAME, line no: 164, 1.0, 0.875, 0.0
agg,SIMPLE_NAME, line no: 213,getName,SIMPLE_NAME, line no: 164, 1.0, 0.9166666666666666, 0.0
agg,SIMPLE_NAME, line no: 213,postAgg,SIMPLE_NAME, line no: 166, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,prunePostAggregators(query),METHOD_INVOCATION, line no: 166, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,prunePostAggregators,SIMPLE_NAME, line no: 166, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,postAgg.getName(),METHOD_INVOCATION, line no: 167, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,values.put(dimension input.getDimensionValue(dimension)),METHOD_INVOCATION, line no: 174, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,input.getDimensionValue(dimension),METHOD_INVOCATION, line no: 174, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,getDimensionValue,SIMPLE_NAME, line no: 174, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,new Result<TopNResultValue>(result.getTimestamp() new TopNResultValue(serializedValues)),CLASS_INSTANCE_CREATION, line no: 182, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,result.getTimestamp(),METHOD_INVOCATION, line no: 183, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,getTimestamp,SIMPLE_NAME, line no: 183, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,new TopNResultValue(serializedValues),CLASS_INSTANCE_CREATION, line no: 184, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   private String dimension=query.getDimensionSpec().getOutputName();   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> result){     List<Map<String Object>> serializedValues=Lists.newArrayList(Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){       @Override public Map<String Object> apply(      DimensionAndMetricValueExtractor input){         final Map<String Object> values=Maps.newHashMap();         for (        AggregatorFactory agg : query.getAggregatorSpecs()) {           values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));         }         for (        PostAggregator postAgg : query.getPostAggregatorSpecs()) {           Object calculatedPostAgg=input.getMetric(postAgg.getName());           if (calculatedPostAgg != null) {             values.put(postAgg.getName() calculatedPostAgg);           }  else {             values.put(postAgg.getName() postAgg.compute(values));           }         }         for (        AggregatorFactory agg : query.getAggregatorSpecs()) {           values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));         }         values.put(dimension input.getDimensionValue(dimension));         return values;       }     } ));     return new Result<TopNResultValue>(result.getTimestamp() new TopNResultValue(serializedValues));   } } ,CLASS_INSTANCE_CREATION, line no: 195, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,Lists.newArrayList(Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : query.getPostAggregatorSpecs()) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } )),METHOD_INVOCATION, line no: 202, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : query.getPostAggregatorSpecs()) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } ),METHOD_INVOCATION, line no: 203, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : query.getPostAggregatorSpecs()) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } ,CLASS_INSTANCE_CREATION, line no: 205, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,new CacheStrategy<Result<TopNResultValue> Object TopNQuery>(){   private final List<AggregatorFactory> aggs=query.getAggregatorSpecs();   private final List<PostAggregator> postAggs=AggregatorUtil.pruneDependentPostAgg(query.getPostAggregatorSpecs() query.getTopNMetricSpec().getMetricName(query.getDimensionSpec()));   @Override public byte[] computeCacheKey(  TopNQuery query){     final byte[] dimensionSpecBytes=query.getDimensionSpec().getCacheKey();     final byte[] metricSpecBytes=query.getTopNMetricSpec().getCacheKey();     final DimFilter dimFilter=query.getDimensionsFilter();     final byte[] filterBytes=dimFilter == null ? new byte[]{} : dimFilter.getCacheKey();     final byte[] aggregatorBytes=QueryCacheHelper.computeAggregatorBytes(query.getAggregatorSpecs());     final byte[] granularityBytes=query.getGranularity().cacheKey();     return ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())).put(granularityBytes).put(filterBytes).put(aggregatorBytes).array();   }   @Override public TypeReference<Object> getCacheObjectClazz(){     return OBJECT_TYPE_REFERENCE;   }   @Override public Function<Result<TopNResultValue> Object> prepareForCache(){     return new Function<Result<TopNResultValue> Object>(){       @Override public Object apply(      final Result<TopNResultValue> input){         List<DimensionAndMetricValueExtractor> results=Lists.newArrayList(input.getValue());         final List<Object> retVal=Lists.newArrayListWithCapacity(results.size() + 1);         retVal.add(input.getTimestamp().getMillis());         for (        DimensionAndMetricValueExtractor result : results) {           List<Object> vals=Lists.newArrayListWithCapacity(aggs.size() + 2);           vals.add(result.getStringDimensionValue(query.getDimensionSpec().getOutputName()));           for (          AggregatorFactory agg : aggs) {             vals.add(result.getMetric(agg.getName()));           }           retVal.add(vals);         }         return retVal;       }     } ;   }   @Override public Function<Object Result<TopNResultValue>> pullFromCache(){     return new Function<Object Result<TopNResultValue>>(){       private final QueryGranularity granularity=query.getGranularity();       @Override public Result<TopNResultValue> apply(      Object input){         List<Object> results=(List<Object>)input;         List<Map<String Object>> retVal=Lists.newArrayListWithCapacity(results.size());         Iterator<Object> inputIter=results.iterator();         DateTime timestamp=granularity.toDateTime(new DateTime(inputIter.next()).getMillis());         while (inputIter.hasNext()) {           List<Object> result=(List<Object>)inputIter.next();           Map<String Object> vals=Maps.newLinkedHashMap();           Iterator<AggregatorFactory> aggIter=aggs.iterator();           Iterator<Object> resultIter=result.iterator();           vals.put(query.getDimensionSpec().getOutputName() resultIter.next());           while (aggIter.hasNext() && resultIter.hasNext()) {             final AggregatorFactory factory=aggIter.next();             vals.put(factory.getName() factory.deserialize(resultIter.next()));           }           for (          PostAggregator postAgg : postAggs) {             vals.put(postAgg.getName() postAgg.compute(vals));           }           retVal.add(vals);         }         return new Result<TopNResultValue>(timestamp new TopNResultValue(retVal));       }     } ;   }   @Override public Sequence<Result<TopNResultValue>> mergeSequences(  Sequence<Sequence<Result<TopNResultValue>>> seqOfSequences){     return new MergeSequence<Result<TopNResultValue>>(getOrdering() seqOfSequences);   } } ,CLASS_INSTANCE_CREATION, line no: 253, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,aggs,SIMPLE_NAME, line no: 255, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,postAggs,SIMPLE_NAME, line no: 256, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,AggregatorUtil.pruneDependentPostAgg(query.getPostAggregatorSpecs() query.getTopNMetricSpec().getMetricName(query.getDimensionSpec())),METHOD_INVOCATION, line no: 256, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,pruneDependentPostAgg,SIMPLE_NAME, line no: 256, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,query.getTopNMetricSpec().getMetricName(query.getDimensionSpec()),METHOD_INVOCATION, line no: 258, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,getMetricName,SIMPLE_NAME, line no: 259, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,computeCacheKey,SIMPLE_NAME, line no: 263, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,1,NUMBER_LITERAL, line no: 275, 1.0, 0.875, 0.0
agg,SIMPLE_NAME, line no: 213,getCacheObjectClazz,SIMPLE_NAME, line no: 289, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,prepareForCache,SIMPLE_NAME, line no: 295, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,new Function<Result<TopNResultValue> Object>(){   @Override public Object apply(  final Result<TopNResultValue> input){     List<DimensionAndMetricValueExtractor> results=Lists.newArrayList(input.getValue());     final List<Object> retVal=Lists.newArrayListWithCapacity(results.size() + 1);     retVal.add(input.getTimestamp().getMillis());     for (    DimensionAndMetricValueExtractor result : results) {       List<Object> vals=Lists.newArrayListWithCapacity(aggs.size() + 2);       vals.add(result.getStringDimensionValue(query.getDimensionSpec().getOutputName()));       for (      AggregatorFactory agg : aggs) {         vals.add(result.getMetric(agg.getName()));       }       retVal.add(vals);     }     return retVal;   } } ,CLASS_INSTANCE_CREATION, line no: 297, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,results,SIMPLE_NAME, line no: 302, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,Lists.newArrayList(input.getValue()),METHOD_INVOCATION, line no: 302, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,input.getValue(),METHOD_INVOCATION, line no: 302, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,retVal,SIMPLE_NAME, line no: 303, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,Lists.newArrayListWithCapacity(results.size() + 1),METHOD_INVOCATION, line no: 303, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,newArrayListWithCapacity,SIMPLE_NAME, line no: 303, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,results.size() + 1,INFIX_EXPRESSION, line no: 303, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,results.size(),METHOD_INVOCATION, line no: 303, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,retVal.add(input.getTimestamp().getMillis()),METHOD_INVOCATION, line no: 306, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,add,SIMPLE_NAME, line no: 306, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,input.getTimestamp().getMillis(),METHOD_INVOCATION, line no: 306, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,input.getTimestamp(),METHOD_INVOCATION, line no: 306, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,getMillis,SIMPLE_NAME, line no: 306, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,vals,SIMPLE_NAME, line no: 308, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,Lists.newArrayListWithCapacity(aggs.size() + 2),METHOD_INVOCATION, line no: 308, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,aggs.size() + 2,INFIX_EXPRESSION, line no: 308, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,aggs.size(),METHOD_INVOCATION, line no: 308, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,2,NUMBER_LITERAL, line no: 308, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,vals.add(result.getStringDimensionValue(query.getDimensionSpec().getOutputName())),METHOD_INVOCATION, line no: 309, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,result.getStringDimensionValue(query.getDimensionSpec().getOutputName()),METHOD_INVOCATION, line no: 309, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,getStringDimensionValue,SIMPLE_NAME, line no: 309, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,retVal.add(vals),METHOD_INVOCATION, line no: 313, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,pullFromCache,SIMPLE_NAME, line no: 321, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,new Function<Object Result<TopNResultValue>>(){   private final QueryGranularity granularity=query.getGranularity();   @Override public Result<TopNResultValue> apply(  Object input){     List<Object> results=(List<Object>)input;     List<Map<String Object>> retVal=Lists.newArrayListWithCapacity(results.size());     Iterator<Object> inputIter=results.iterator();     DateTime timestamp=granularity.toDateTime(new DateTime(inputIter.next()).getMillis());     while (inputIter.hasNext()) {       List<Object> result=(List<Object>)inputIter.next();       Map<String Object> vals=Maps.newLinkedHashMap();       Iterator<AggregatorFactory> aggIter=aggs.iterator();       Iterator<Object> resultIter=result.iterator();       vals.put(query.getDimensionSpec().getOutputName() resultIter.next());       while (aggIter.hasNext() && resultIter.hasNext()) {         final AggregatorFactory factory=aggIter.next();         vals.put(factory.getName() factory.deserialize(resultIter.next()));       }       for (      PostAggregator postAgg : postAggs) {         vals.put(postAgg.getName() postAgg.compute(vals));       }       retVal.add(vals);     }     return new Result<TopNResultValue>(timestamp new TopNResultValue(retVal));   } } ,CLASS_INSTANCE_CREATION, line no: 323, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,(List<Object>)input,CAST_EXPRESSION, line no: 330, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,Lists.newArrayListWithCapacity(results.size()),METHOD_INVOCATION, line no: 331, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,inputIter,SIMPLE_NAME, line no: 333, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,results.iterator(),METHOD_INVOCATION, line no: 333, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,iterator,SIMPLE_NAME, line no: 333, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,timestamp,SIMPLE_NAME, line no: 334, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,granularity.toDateTime(new DateTime(inputIter.next()).getMillis()),METHOD_INVOCATION, line no: 334, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,toDateTime,SIMPLE_NAME, line no: 334, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,new DateTime(inputIter.next()).getMillis(),METHOD_INVOCATION, line no: 334, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,new DateTime(inputIter.next()),CLASS_INSTANCE_CREATION, line no: 334, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,inputIter.next(),METHOD_INVOCATION, line no: 334, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,inputIter.hasNext(),METHOD_INVOCATION, line no: 336, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,hasNext,SIMPLE_NAME, line no: 336, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,(List<Object>)inputIter.next(),CAST_EXPRESSION, line no: 337, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,Maps.newLinkedHashMap(),METHOD_INVOCATION, line no: 338, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,newLinkedHashMap,SIMPLE_NAME, line no: 338, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,aggIter,SIMPLE_NAME, line no: 340, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,aggs.iterator(),METHOD_INVOCATION, line no: 340, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,resultIter,SIMPLE_NAME, line no: 341, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,result.iterator(),METHOD_INVOCATION, line no: 341, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,vals.put(query.getDimensionSpec().getOutputName() resultIter.next()),METHOD_INVOCATION, line no: 343, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,resultIter.next(),METHOD_INVOCATION, line no: 343, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,aggIter.hasNext() && resultIter.hasNext(),INFIX_EXPRESSION, line no: 345, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,aggIter.hasNext(),METHOD_INVOCATION, line no: 345, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,resultIter.hasNext(),METHOD_INVOCATION, line no: 345, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,new Result<TopNResultValue>(timestamp new TopNResultValue(retVal)),CLASS_INSTANCE_CREATION, line no: 357, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,new TopNResultValue(retVal),CLASS_INSTANCE_CREATION, line no: 357, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,query,SIMPLE_NAME, line no: 20, 1.0, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,TypeReference,SIMPLE_NAME, line no: 22, 1.0, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,Function,SIMPLE_NAME, line no: 23, 1.0, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,Iterables,SIMPLE_NAME, line no: 25, 1.0, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,Lists,SIMPLE_NAME, line no: 26, 1.0, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,Maps,SIMPLE_NAME, line no: 27, 1.0, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,Sequence,SIMPLE_NAME, line no: 33, 1.0, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,granularity,SIMPLE_NAME, line no: 38, 1.0, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,QueryGranularity,SIMPLE_NAME, line no: 38, 1.0, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,CacheStrategy,SIMPLE_NAME, line no: 39, 1.0, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,Result,SIMPLE_NAME, line no: 45, 1.0, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,AggregatorFactory,SIMPLE_NAME, line no: 48, 1.0, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,AggregatorUtil,SIMPLE_NAME, line no: 49, 1.0, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,PostAggregator,SIMPLE_NAME, line no: 51, 1.0, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,DateTime,SIMPLE_NAME, line no: 53, 1.0, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,Iterator,SIMPLE_NAME, line no: 59, 1.0, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,List,SIMPLE_NAME, line no: 60, 1.0, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,Map,SIMPLE_NAME, line no: 61, 1.0, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,TopNResultValue,SIMPLE_NAME, line no: 65, 1.0, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,TopNQuery,SIMPLE_NAME, line no: 65, 1.0, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,Object,SIMPLE_NAME, line no: 72, 1.0, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,Override,SIMPLE_NAME, line no: 85, 1.0, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,@Override,MARKER_ANNOTATION, line no: 90, 1.0, 0.8333333333333334, 0.0
getName,SIMPLE_NAME, line no: 213,getGranularity,SIMPLE_NAME, line no: 95, 1.0, 0.5, 0.0
getName,SIMPLE_NAME, line no: 213,input,SIMPLE_NAME, line no: 102, 1.0, 0.8333333333333334, 0.0
getName,SIMPLE_NAME, line no: 213,query.getGranularity(),METHOD_INVOCATION, line no: 108, 1.0, 0.7916666666666666, 0.0
getName,SIMPLE_NAME, line no: 213,query.getDimensionSpec(),METHOD_INVOCATION, line no: 109, 1.0, 0.7916666666666666, 0.0
getName,SIMPLE_NAME, line no: 213,getDimensionSpec,SIMPLE_NAME, line no: 109, 1.0, 0.7916666666666666, 0.0
getName,SIMPLE_NAME, line no: 213,query.getTopNMetricSpec(),METHOD_INVOCATION, line no: 110, 1.0, 0.7916666666666666, 0.0
getName,SIMPLE_NAME, line no: 213,getTopNMetricSpec,SIMPLE_NAME, line no: 110, 1.0, 0.7916666666666666, 0.0
getName,SIMPLE_NAME, line no: 213,query.getAggregatorSpecs(),METHOD_INVOCATION, line no: 112, 1.0, 0.7916666666666666, 0.0
getName,SIMPLE_NAME, line no: 213,getAggregatorSpecs,SIMPLE_NAME, line no: 112, 1.0, 0.7916666666666666, 0.0
getName,SIMPLE_NAME, line no: 213,query.getPostAggregatorSpecs(),METHOD_INVOCATION, line no: 113, 1.0, 0.7916666666666666, 0.0
getName,SIMPLE_NAME, line no: 213,getPostAggregatorSpecs,SIMPLE_NAME, line no: 113, 1.0, 0.7916666666666666, 0.0
getName,SIMPLE_NAME, line no: 213,mergeSequences,SIMPLE_NAME, line no: 120, 1.0, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,seqOfSequences,SIMPLE_NAME, line no: 120, 1.0, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,size,SIMPLE_NAME, line no: 138, 1.0, 0.9583333333333334, 0.0
getName,SIMPLE_NAME, line no: 213,new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   private String dimension=query.getDimensionSpec().getOutputName();   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> result){     List<Map<String Object>> serializedValues=Lists.newArrayList(Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){       @Override public Map<String Object> apply(      DimensionAndMetricValueExtractor input){         final Map<String Object> values=Maps.newHashMap();         for (        AggregatorFactory agg : query.getAggregatorSpecs()) {           values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));         }         for (        PostAggregator postAgg : prunePostAggregators(query)) {           Object calculatedPostAgg=input.getMetric(postAgg.getName());           if (calculatedPostAgg != null) {             values.put(postAgg.getName() calculatedPostAgg);           }  else {             values.put(postAgg.getName() postAgg.compute(values));           }         }         values.put(dimension input.getDimensionValue(dimension));         return values;       }     } ));     return new Result<TopNResultValue>(result.getTimestamp() new TopNResultValue(serializedValues));   } } ,CLASS_INSTANCE_CREATION, line no: 147, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,apply,SIMPLE_NAME, line no: 152, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,result,SIMPLE_NAME, line no: 152, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,serializedValues,SIMPLE_NAME, line no: 154, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,Lists.newArrayList(Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : prunePostAggregators(query)) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } )),METHOD_INVOCATION, line no: 154, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,newArrayList,SIMPLE_NAME, line no: 154, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : prunePostAggregators(query)) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } ),METHOD_INVOCATION, line no: 155, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,transform,SIMPLE_NAME, line no: 155, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,result.getValue(),METHOD_INVOCATION, line no: 156, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,getValue,SIMPLE_NAME, line no: 156, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : prunePostAggregators(query)) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } ,CLASS_INSTANCE_CREATION, line no: 157, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,DimensionAndMetricValueExtractor,SIMPLE_NAME, line no: 157, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,values,SIMPLE_NAME, line no: 162, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,Maps.newHashMap(),METHOD_INVOCATION, line no: 162, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,newHashMap,SIMPLE_NAME, line no: 162, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,agg,SIMPLE_NAME, line no: 163, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,put,SIMPLE_NAME, line no: 164, 1.0, 0.875, 0.0
getName,SIMPLE_NAME, line no: 213,postAgg,SIMPLE_NAME, line no: 166, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,prunePostAggregators(query),METHOD_INVOCATION, line no: 166, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,prunePostAggregators,SIMPLE_NAME, line no: 166, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,values.put(dimension input.getDimensionValue(dimension)),METHOD_INVOCATION, line no: 174, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,input.getDimensionValue(dimension),METHOD_INVOCATION, line no: 174, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,getDimensionValue,SIMPLE_NAME, line no: 174, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,new Result<TopNResultValue>(result.getTimestamp() new TopNResultValue(serializedValues)),CLASS_INSTANCE_CREATION, line no: 182, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,result.getTimestamp(),METHOD_INVOCATION, line no: 183, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,getTimestamp,SIMPLE_NAME, line no: 183, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,new TopNResultValue(serializedValues),CLASS_INSTANCE_CREATION, line no: 184, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   private String dimension=query.getDimensionSpec().getOutputName();   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> result){     List<Map<String Object>> serializedValues=Lists.newArrayList(Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){       @Override public Map<String Object> apply(      DimensionAndMetricValueExtractor input){         final Map<String Object> values=Maps.newHashMap();         for (        AggregatorFactory agg : query.getAggregatorSpecs()) {           values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));         }         for (        PostAggregator postAgg : query.getPostAggregatorSpecs()) {           Object calculatedPostAgg=input.getMetric(postAgg.getName());           if (calculatedPostAgg != null) {             values.put(postAgg.getName() calculatedPostAgg);           }  else {             values.put(postAgg.getName() postAgg.compute(values));           }         }         for (        AggregatorFactory agg : query.getAggregatorSpecs()) {           values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));         }         values.put(dimension input.getDimensionValue(dimension));         return values;       }     } ));     return new Result<TopNResultValue>(result.getTimestamp() new TopNResultValue(serializedValues));   } } ,CLASS_INSTANCE_CREATION, line no: 195, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,Lists.newArrayList(Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : query.getPostAggregatorSpecs()) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } )),METHOD_INVOCATION, line no: 202, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,Iterables.transform(result.getValue() new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : query.getPostAggregatorSpecs()) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } ),METHOD_INVOCATION, line no: 203, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,new Function<DimensionAndMetricValueExtractor Map<String Object>>(){   @Override public Map<String Object> apply(  DimensionAndMetricValueExtractor input){     final Map<String Object> values=Maps.newHashMap();     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     for (    PostAggregator postAgg : query.getPostAggregatorSpecs()) {       Object calculatedPostAgg=input.getMetric(postAgg.getName());       if (calculatedPostAgg != null) {         values.put(postAgg.getName() calculatedPostAgg);       }  else {         values.put(postAgg.getName() postAgg.compute(values));       }     }     for (    AggregatorFactory agg : query.getAggregatorSpecs()) {       values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName())));     }     values.put(dimension input.getDimensionValue(dimension));     return values;   } } ,CLASS_INSTANCE_CREATION, line no: 205, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,new CacheStrategy<Result<TopNResultValue> Object TopNQuery>(){   private final List<AggregatorFactory> aggs=query.getAggregatorSpecs();   private final List<PostAggregator> postAggs=AggregatorUtil.pruneDependentPostAgg(query.getPostAggregatorSpecs() query.getTopNMetricSpec().getMetricName(query.getDimensionSpec()));   @Override public byte[] computeCacheKey(  TopNQuery query){     final byte[] dimensionSpecBytes=query.getDimensionSpec().getCacheKey();     final byte[] metricSpecBytes=query.getTopNMetricSpec().getCacheKey();     final DimFilter dimFilter=query.getDimensionsFilter();     final byte[] filterBytes=dimFilter == null ? new byte[]{} : dimFilter.getCacheKey();     final byte[] aggregatorBytes=QueryCacheHelper.computeAggregatorBytes(query.getAggregatorSpecs());     final byte[] granularityBytes=query.getGranularity().cacheKey();     return ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())).put(granularityBytes).put(filterBytes).put(aggregatorBytes).array();   }   @Override public TypeReference<Object> getCacheObjectClazz(){     return OBJECT_TYPE_REFERENCE;   }   @Override public Function<Result<TopNResultValue> Object> prepareForCache(){     return new Function<Result<TopNResultValue> Object>(){       @Override public Object apply(      final Result<TopNResultValue> input){         List<DimensionAndMetricValueExtractor> results=Lists.newArrayList(input.getValue());         final List<Object> retVal=Lists.newArrayListWithCapacity(results.size() + 1);         retVal.add(input.getTimestamp().getMillis());         for (        DimensionAndMetricValueExtractor result : results) {           List<Object> vals=Lists.newArrayListWithCapacity(aggs.size() + 2);           vals.add(result.getStringDimensionValue(query.getDimensionSpec().getOutputName()));           for (          AggregatorFactory agg : aggs) {             vals.add(result.getMetric(agg.getName()));           }           retVal.add(vals);         }         return retVal;       }     } ;   }   @Override public Function<Object Result<TopNResultValue>> pullFromCache(){     return new Function<Object Result<TopNResultValue>>(){       private final QueryGranularity granularity=query.getGranularity();       @Override public Result<TopNResultValue> apply(      Object input){         List<Object> results=(List<Object>)input;         List<Map<String Object>> retVal=Lists.newArrayListWithCapacity(results.size());         Iterator<Object> inputIter=results.iterator();         DateTime timestamp=granularity.toDateTime(new DateTime(inputIter.next()).getMillis());         while (inputIter.hasNext()) {           List<Object> result=(List<Object>)inputIter.next();           Map<String Object> vals=Maps.newLinkedHashMap();           Iterator<AggregatorFactory> aggIter=aggs.iterator();           Iterator<Object> resultIter=result.iterator();           vals.put(query.getDimensionSpec().getOutputName() resultIter.next());           while (aggIter.hasNext() && resultIter.hasNext()) {             final AggregatorFactory factory=aggIter.next();             vals.put(factory.getName() factory.deserialize(resultIter.next()));           }           for (          PostAggregator postAgg : postAggs) {             vals.put(postAgg.getName() postAgg.compute(vals));           }           retVal.add(vals);         }         return new Result<TopNResultValue>(timestamp new TopNResultValue(retVal));       }     } ;   }   @Override public Sequence<Result<TopNResultValue>> mergeSequences(  Sequence<Sequence<Result<TopNResultValue>>> seqOfSequences){     return new MergeSequence<Result<TopNResultValue>>(getOrdering() seqOfSequences);   } } ,CLASS_INSTANCE_CREATION, line no: 253, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,aggs,SIMPLE_NAME, line no: 255, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,postAggs,SIMPLE_NAME, line no: 256, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,AggregatorUtil.pruneDependentPostAgg(query.getPostAggregatorSpecs() query.getTopNMetricSpec().getMetricName(query.getDimensionSpec())),METHOD_INVOCATION, line no: 256, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,pruneDependentPostAgg,SIMPLE_NAME, line no: 256, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,computeCacheKey,SIMPLE_NAME, line no: 263, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,1,NUMBER_LITERAL, line no: 275, 1.0, 0.875, 0.0
getName,SIMPLE_NAME, line no: 213,getCacheObjectClazz,SIMPLE_NAME, line no: 289, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,prepareForCache,SIMPLE_NAME, line no: 295, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,new Function<Result<TopNResultValue> Object>(){   @Override public Object apply(  final Result<TopNResultValue> input){     List<DimensionAndMetricValueExtractor> results=Lists.newArrayList(input.getValue());     final List<Object> retVal=Lists.newArrayListWithCapacity(results.size() + 1);     retVal.add(input.getTimestamp().getMillis());     for (    DimensionAndMetricValueExtractor result : results) {       List<Object> vals=Lists.newArrayListWithCapacity(aggs.size() + 2);       vals.add(result.getStringDimensionValue(query.getDimensionSpec().getOutputName()));       for (      AggregatorFactory agg : aggs) {         vals.add(result.getMetric(agg.getName()));       }       retVal.add(vals);     }     return retVal;   } } ,CLASS_INSTANCE_CREATION, line no: 297, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,results,SIMPLE_NAME, line no: 302, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,Lists.newArrayList(input.getValue()),METHOD_INVOCATION, line no: 302, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,input.getValue(),METHOD_INVOCATION, line no: 302, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,retVal,SIMPLE_NAME, line no: 303, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,Lists.newArrayListWithCapacity(results.size() + 1),METHOD_INVOCATION, line no: 303, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,newArrayListWithCapacity,SIMPLE_NAME, line no: 303, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,results.size() + 1,INFIX_EXPRESSION, line no: 303, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,results.size(),METHOD_INVOCATION, line no: 303, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,retVal.add(input.getTimestamp().getMillis()),METHOD_INVOCATION, line no: 306, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,add,SIMPLE_NAME, line no: 306, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,input.getTimestamp().getMillis(),METHOD_INVOCATION, line no: 306, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,input.getTimestamp(),METHOD_INVOCATION, line no: 306, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,getMillis,SIMPLE_NAME, line no: 306, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,vals,SIMPLE_NAME, line no: 308, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,Lists.newArrayListWithCapacity(aggs.size() + 2),METHOD_INVOCATION, line no: 308, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,aggs.size() + 2,INFIX_EXPRESSION, line no: 308, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,aggs.size(),METHOD_INVOCATION, line no: 308, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,2,NUMBER_LITERAL, line no: 308, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,vals.add(result.getStringDimensionValue(query.getDimensionSpec().getOutputName())),METHOD_INVOCATION, line no: 309, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,retVal.add(vals),METHOD_INVOCATION, line no: 313, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,pullFromCache,SIMPLE_NAME, line no: 321, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,new Function<Object Result<TopNResultValue>>(){   private final QueryGranularity granularity=query.getGranularity();   @Override public Result<TopNResultValue> apply(  Object input){     List<Object> results=(List<Object>)input;     List<Map<String Object>> retVal=Lists.newArrayListWithCapacity(results.size());     Iterator<Object> inputIter=results.iterator();     DateTime timestamp=granularity.toDateTime(new DateTime(inputIter.next()).getMillis());     while (inputIter.hasNext()) {       List<Object> result=(List<Object>)inputIter.next();       Map<String Object> vals=Maps.newLinkedHashMap();       Iterator<AggregatorFactory> aggIter=aggs.iterator();       Iterator<Object> resultIter=result.iterator();       vals.put(query.getDimensionSpec().getOutputName() resultIter.next());       while (aggIter.hasNext() && resultIter.hasNext()) {         final AggregatorFactory factory=aggIter.next();         vals.put(factory.getName() factory.deserialize(resultIter.next()));       }       for (      PostAggregator postAgg : postAggs) {         vals.put(postAgg.getName() postAgg.compute(vals));       }       retVal.add(vals);     }     return new Result<TopNResultValue>(timestamp new TopNResultValue(retVal));   } } ,CLASS_INSTANCE_CREATION, line no: 323, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,(List<Object>)input,CAST_EXPRESSION, line no: 330, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,Lists.newArrayListWithCapacity(results.size()),METHOD_INVOCATION, line no: 331, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,inputIter,SIMPLE_NAME, line no: 333, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,results.iterator(),METHOD_INVOCATION, line no: 333, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,iterator,SIMPLE_NAME, line no: 333, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,timestamp,SIMPLE_NAME, line no: 334, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,granularity.toDateTime(new DateTime(inputIter.next()).getMillis()),METHOD_INVOCATION, line no: 334, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,toDateTime,SIMPLE_NAME, line no: 334, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,new DateTime(inputIter.next()).getMillis(),METHOD_INVOCATION, line no: 334, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,new DateTime(inputIter.next()),CLASS_INSTANCE_CREATION, line no: 334, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,inputIter.next(),METHOD_INVOCATION, line no: 334, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,next,SIMPLE_NAME, line no: 334, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,inputIter.hasNext(),METHOD_INVOCATION, line no: 336, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,hasNext,SIMPLE_NAME, line no: 336, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,(List<Object>)inputIter.next(),CAST_EXPRESSION, line no: 337, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,Maps.newLinkedHashMap(),METHOD_INVOCATION, line no: 338, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,newLinkedHashMap,SIMPLE_NAME, line no: 338, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,aggIter,SIMPLE_NAME, line no: 340, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,aggs.iterator(),METHOD_INVOCATION, line no: 340, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,resultIter,SIMPLE_NAME, line no: 341, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,result.iterator(),METHOD_INVOCATION, line no: 341, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,vals.put(query.getDimensionSpec().getOutputName() resultIter.next()),METHOD_INVOCATION, line no: 343, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,resultIter.next(),METHOD_INVOCATION, line no: 343, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,aggIter.hasNext() && resultIter.hasNext(),INFIX_EXPRESSION, line no: 345, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,aggIter.hasNext(),METHOD_INVOCATION, line no: 345, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,resultIter.hasNext(),METHOD_INVOCATION, line no: 345, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,new Result<TopNResultValue>(timestamp new TopNResultValue(retVal)),CLASS_INSTANCE_CREATION, line no: 357, 1.0, 1.0, 0.0
getName,SIMPLE_NAME, line no: 213,new TopNResultValue(retVal),CLASS_INSTANCE_CREATION, line no: 357, 1.0, 1.0, 0.0
agg,SIMPLE_NAME, line no: 213,ServiceMetricEvent,SIMPLE_NAME, line no: 36, 0.9583333333333334, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,Interval,SIMPLE_NAME, line no: 54, 0.9583333333333334, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,Minutes,SIMPLE_NAME, line no: 55, 0.9583333333333334, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,COMMA_JOIN,SIMPLE_NAME, line no: 68, 0.9583333333333334, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,query.getThreshold(),METHOD_INVOCATION, line no: 111, 0.9583333333333334, 0.7916666666666666, 0.0
agg,SIMPLE_NAME, line no: 213,getThreshold,SIMPLE_NAME, line no: 111, 0.9583333333333334, 0.7916666666666666, 0.0
agg,SIMPLE_NAME, line no: 213,Builder,SIMPLE_NAME, line no: 126, 0.9583333333333334, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,numMinutes,SIMPLE_NAME, line no: 128, 0.9583333333333334, 0.9583333333333334, 0.0
agg,SIMPLE_NAME, line no: 213,0,NUMBER_LITERAL, line no: 128, 0.9583333333333334, 0.9583333333333334, 0.0
agg,SIMPLE_NAME, line no: 213,interval,SIMPLE_NAME, line no: 129, 0.9583333333333334, 0.9583333333333334, 0.0
agg,SIMPLE_NAME, line no: 213,query.getIntervals(),METHOD_INVOCATION, line no: 129, 0.9583333333333334, 0.9583333333333334, 0.0
agg,SIMPLE_NAME, line no: 213,getIntervals,SIMPLE_NAME, line no: 129, 0.9583333333333334, 0.9583333333333334, 0.0
agg,SIMPLE_NAME, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()).setUser4(String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension())).setUser5(COMMA_JOIN.join(query.getIntervals())).setUser6(String.valueOf(query.hasFilters())).setUser7(String.format("% d aggs" query.getAggregatorSpecs().size())).setUser9(Minutes.minutes(numMinutes).toString()),METHOD_INVOCATION, line no: 133, 0.9583333333333334, 0.9583333333333334, 0.0
agg,SIMPLE_NAME, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()).setUser4(String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension())).setUser5(COMMA_JOIN.join(query.getIntervals())).setUser6(String.valueOf(query.hasFilters())).setUser7(String.format("% d aggs" query.getAggregatorSpecs().size())),METHOD_INVOCATION, line no: 133, 0.9583333333333334, 0.9583333333333334, 0.0
agg,SIMPLE_NAME, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()).setUser4(String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension())).setUser5(COMMA_JOIN.join(query.getIntervals())).setUser6(String.valueOf(query.hasFilters())),METHOD_INVOCATION, line no: 133, 0.9583333333333334, 0.9583333333333334, 0.0
agg,SIMPLE_NAME, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()).setUser4(String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension())).setUser5(COMMA_JOIN.join(query.getIntervals())),METHOD_INVOCATION, line no: 133, 0.9583333333333334, 0.9583333333333334, 0.0
agg,SIMPLE_NAME, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()).setUser4(String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension())),METHOD_INVOCATION, line no: 133, 0.9583333333333334, 0.9583333333333334, 0.0
agg,SIMPLE_NAME, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()),METHOD_INVOCATION, line no: 133, 0.9583333333333334, 0.9583333333333334, 0.0
agg,SIMPLE_NAME, line no: 213,new ServiceMetricEvent.Builder(),CLASS_INSTANCE_CREATION, line no: 133, 0.9583333333333334, 0.9583333333333334, 0.0
agg,SIMPLE_NAME, line no: 213,ServiceMetricEvent.Builder,QUALIFIED_NAME, line no: 133, 0.9583333333333334, 0.9583333333333334, 0.0
agg,SIMPLE_NAME, line no: 213,setUser2,SIMPLE_NAME, line no: 134, 0.9583333333333334, 0.9583333333333334, 0.0
agg,SIMPLE_NAME, line no: 213,query.getDataSource().toString(),METHOD_INVOCATION, line no: 134, 0.9583333333333334, 0.9583333333333334, 0.0
agg,SIMPLE_NAME, line no: 213,query.getDataSource(),METHOD_INVOCATION, line no: 134, 0.9583333333333334, 0.9583333333333334, 0.0
agg,SIMPLE_NAME, line no: 213,getDataSource,SIMPLE_NAME, line no: 134, 0.9583333333333334, 0.9583333333333334, 0.0
agg,SIMPLE_NAME, line no: 213,toString,SIMPLE_NAME, line no: 134, 0.9583333333333334, 0.9583333333333334, 0.0
agg,SIMPLE_NAME, line no: 213,setUser4,SIMPLE_NAME, line no: 135, 0.9583333333333334, 0.9583333333333334, 0.0
agg,SIMPLE_NAME, line no: 213,String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension()),METHOD_INVOCATION, line no: 135, 0.9583333333333334, 0.9583333333333334, 0.0
agg,SIMPLE_NAME, line no: 213,format,SIMPLE_NAME, line no: 135, 0.9583333333333334, 0.9583333333333334, 0.0
agg,SIMPLE_NAME, line no: 213,"topN/%s/%s",STRING_LITERAL, line no: 135, 0.9583333333333334, 0.9583333333333334, 0.0
agg,SIMPLE_NAME, line no: 213,query.getDimensionSpec().getDimension(),METHOD_INVOCATION, line no: 135, 0.9583333333333334, 0.9583333333333334, 0.0
agg,SIMPLE_NAME, line no: 213,getDimension,SIMPLE_NAME, line no: 135, 0.9583333333333334, 0.9583333333333334, 0.0
agg,SIMPLE_NAME, line no: 213,setUser5,SIMPLE_NAME, line no: 136, 0.9583333333333334, 0.9583333333333334, 0.0
agg,SIMPLE_NAME, line no: 213,COMMA_JOIN.join(query.getIntervals()),METHOD_INVOCATION, line no: 136, 0.9583333333333334, 0.9583333333333334, 0.0
agg,SIMPLE_NAME, line no: 213,join,SIMPLE_NAME, line no: 136, 0.9583333333333334, 0.9583333333333334, 0.0
agg,SIMPLE_NAME, line no: 213,setUser6,SIMPLE_NAME, line no: 137, 0.9583333333333334, 0.9583333333333334, 0.0
agg,SIMPLE_NAME, line no: 213,String.valueOf(query.hasFilters()),METHOD_INVOCATION, line no: 137, 0.9583333333333334, 0.9583333333333334, 0.0
agg,SIMPLE_NAME, line no: 213,valueOf,SIMPLE_NAME, line no: 137, 0.9583333333333334, 0.9583333333333334, 0.0
agg,SIMPLE_NAME, line no: 213,query.hasFilters(),METHOD_INVOCATION, line no: 137, 0.9583333333333334, 0.9583333333333334, 0.0
agg,SIMPLE_NAME, line no: 213,hasFilters,SIMPLE_NAME, line no: 137, 0.9583333333333334, 0.9583333333333334, 0.0
agg,SIMPLE_NAME, line no: 213,setUser7,SIMPLE_NAME, line no: 138, 0.9583333333333334, 0.9583333333333334, 0.0
agg,SIMPLE_NAME, line no: 213,String.format("% d aggs" query.getAggregatorSpecs().size()),METHOD_INVOCATION, line no: 138, 0.9583333333333334, 0.9583333333333334, 0.0
agg,SIMPLE_NAME, line no: 213,"% d aggs",STRING_LITERAL, line no: 138, 0.9583333333333334, 0.9583333333333334, 0.0
agg,SIMPLE_NAME, line no: 213,query.getAggregatorSpecs().size(),METHOD_INVOCATION, line no: 138, 0.9583333333333334, 0.9583333333333334, 0.0
agg,SIMPLE_NAME, line no: 213,setUser9,SIMPLE_NAME, line no: 139, 0.9583333333333334, 0.9583333333333334, 0.0
agg,SIMPLE_NAME, line no: 213,Minutes.minutes(numMinutes).toString(),METHOD_INVOCATION, line no: 139, 0.9583333333333334, 0.9583333333333334, 0.0
agg,SIMPLE_NAME, line no: 213,Minutes.minutes(numMinutes),METHOD_INVOCATION, line no: 139, 0.9583333333333334, 0.9583333333333334, 0.0
agg,SIMPLE_NAME, line no: 213,minutes,SIMPLE_NAME, line no: 139, 0.9583333333333334, 0.9583333333333334, 0.0
agg,SIMPLE_NAME, line no: 213,agg.getName(),METHOD_INVOCATION, line no: 164, 0.9583333333333334, 0.875, 0.0
agg,SIMPLE_NAME, line no: 213,getMetric,SIMPLE_NAME, line no: 164, 0.9583333333333334, 0.9583333333333334, 0.0
agg,SIMPLE_NAME, line no: 213,input.getMetric(postAgg.getName()),METHOD_INVOCATION, line no: 167, 0.9583333333333334, 0.9583333333333334, 0.0
getName,SIMPLE_NAME, line no: 213,ServiceMetricEvent,SIMPLE_NAME, line no: 36, 0.9583333333333334, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,Interval,SIMPLE_NAME, line no: 54, 0.9583333333333334, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,Minutes,SIMPLE_NAME, line no: 55, 0.9583333333333334, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,COMMA_JOIN,SIMPLE_NAME, line no: 68, 0.9583333333333334, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,query.getThreshold(),METHOD_INVOCATION, line no: 111, 0.9583333333333334, 0.7916666666666666, 0.0
getName,SIMPLE_NAME, line no: 213,getThreshold,SIMPLE_NAME, line no: 111, 0.9583333333333334, 0.7916666666666666, 0.0
getName,SIMPLE_NAME, line no: 213,Builder,SIMPLE_NAME, line no: 126, 0.9583333333333334, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,numMinutes,SIMPLE_NAME, line no: 128, 0.9583333333333334, 0.9583333333333334, 0.0
getName,SIMPLE_NAME, line no: 213,0,NUMBER_LITERAL, line no: 128, 0.9583333333333334, 0.9583333333333334, 0.0
getName,SIMPLE_NAME, line no: 213,interval,SIMPLE_NAME, line no: 129, 0.9583333333333334, 0.9583333333333334, 0.0
getName,SIMPLE_NAME, line no: 213,query.getIntervals(),METHOD_INVOCATION, line no: 129, 0.9583333333333334, 0.9583333333333334, 0.0
getName,SIMPLE_NAME, line no: 213,getIntervals,SIMPLE_NAME, line no: 129, 0.9583333333333334, 0.9583333333333334, 0.0
getName,SIMPLE_NAME, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()).setUser4(String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension())).setUser5(COMMA_JOIN.join(query.getIntervals())).setUser6(String.valueOf(query.hasFilters())).setUser7(String.format("% d aggs" query.getAggregatorSpecs().size())).setUser9(Minutes.minutes(numMinutes).toString()),METHOD_INVOCATION, line no: 133, 0.9583333333333334, 0.9583333333333334, 0.0
getName,SIMPLE_NAME, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()).setUser4(String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension())).setUser5(COMMA_JOIN.join(query.getIntervals())).setUser6(String.valueOf(query.hasFilters())).setUser7(String.format("% d aggs" query.getAggregatorSpecs().size())),METHOD_INVOCATION, line no: 133, 0.9583333333333334, 0.9583333333333334, 0.0
getName,SIMPLE_NAME, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()).setUser4(String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension())).setUser5(COMMA_JOIN.join(query.getIntervals())).setUser6(String.valueOf(query.hasFilters())),METHOD_INVOCATION, line no: 133, 0.9583333333333334, 0.9583333333333334, 0.0
getName,SIMPLE_NAME, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()).setUser4(String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension())).setUser5(COMMA_JOIN.join(query.getIntervals())),METHOD_INVOCATION, line no: 133, 0.9583333333333334, 0.9583333333333334, 0.0
getName,SIMPLE_NAME, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()).setUser4(String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension())),METHOD_INVOCATION, line no: 133, 0.9583333333333334, 0.9583333333333334, 0.0
getName,SIMPLE_NAME, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()),METHOD_INVOCATION, line no: 133, 0.9583333333333334, 0.9583333333333334, 0.0
getName,SIMPLE_NAME, line no: 213,new ServiceMetricEvent.Builder(),CLASS_INSTANCE_CREATION, line no: 133, 0.9583333333333334, 0.9583333333333334, 0.0
getName,SIMPLE_NAME, line no: 213,ServiceMetricEvent.Builder,QUALIFIED_NAME, line no: 133, 0.9583333333333334, 0.9583333333333334, 0.0
getName,SIMPLE_NAME, line no: 213,setUser2,SIMPLE_NAME, line no: 134, 0.9583333333333334, 0.9583333333333334, 0.0
getName,SIMPLE_NAME, line no: 213,query.getDataSource(),METHOD_INVOCATION, line no: 134, 0.9583333333333334, 0.9583333333333334, 0.0
getName,SIMPLE_NAME, line no: 213,getDataSource,SIMPLE_NAME, line no: 134, 0.9583333333333334, 0.9583333333333334, 0.0
getName,SIMPLE_NAME, line no: 213,setUser4,SIMPLE_NAME, line no: 135, 0.9583333333333334, 0.9583333333333334, 0.0
getName,SIMPLE_NAME, line no: 213,setUser5,SIMPLE_NAME, line no: 136, 0.9583333333333334, 0.9583333333333334, 0.0
getName,SIMPLE_NAME, line no: 213,COMMA_JOIN.join(query.getIntervals()),METHOD_INVOCATION, line no: 136, 0.9583333333333334, 0.9583333333333334, 0.0
getName,SIMPLE_NAME, line no: 213,join,SIMPLE_NAME, line no: 136, 0.9583333333333334, 0.9583333333333334, 0.0
getName,SIMPLE_NAME, line no: 213,setUser6,SIMPLE_NAME, line no: 137, 0.9583333333333334, 0.9583333333333334, 0.0
getName,SIMPLE_NAME, line no: 213,query.hasFilters(),METHOD_INVOCATION, line no: 137, 0.9583333333333334, 0.9583333333333334, 0.0
getName,SIMPLE_NAME, line no: 213,hasFilters,SIMPLE_NAME, line no: 137, 0.9583333333333334, 0.9583333333333334, 0.0
getName,SIMPLE_NAME, line no: 213,setUser7,SIMPLE_NAME, line no: 138, 0.9583333333333334, 0.9583333333333334, 0.0
getName,SIMPLE_NAME, line no: 213,query.getAggregatorSpecs().size(),METHOD_INVOCATION, line no: 138, 0.9583333333333334, 0.9583333333333334, 0.0
getName,SIMPLE_NAME, line no: 213,setUser9,SIMPLE_NAME, line no: 139, 0.9583333333333334, 0.9583333333333334, 0.0
getName,SIMPLE_NAME, line no: 213,Minutes.minutes(numMinutes).toString(),METHOD_INVOCATION, line no: 139, 0.9583333333333334, 0.9583333333333334, 0.0
getName,SIMPLE_NAME, line no: 213,Minutes.minutes(numMinutes),METHOD_INVOCATION, line no: 139, 0.9583333333333334, 0.9583333333333334, 0.0
getName,SIMPLE_NAME, line no: 213,minutes,SIMPLE_NAME, line no: 139, 0.9583333333333334, 0.9583333333333334, 0.0
getName,SIMPLE_NAME, line no: 213,getMetric,SIMPLE_NAME, line no: 164, 0.9583333333333334, 0.9583333333333334, 0.0
getName,SIMPLE_NAME, line no: 213,input.getMetric(postAgg.getName()),METHOD_INVOCATION, line no: 167, 0.9583333333333334, 0.9583333333333334, 0.0
input,SIMPLE_NAME, line no: 213,ServiceMetricEvent,SIMPLE_NAME, line no: 36, 0.9565217391304348, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,Interval,SIMPLE_NAME, line no: 54, 0.9565217391304348, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,Minutes,SIMPLE_NAME, line no: 55, 0.9565217391304348, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,COMMA_JOIN,SIMPLE_NAME, line no: 68, 0.9565217391304348, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,query.getThreshold(),METHOD_INVOCATION, line no: 111, 0.9565217391304348, 0.8260869565217391, 0.0
input,SIMPLE_NAME, line no: 213,getThreshold,SIMPLE_NAME, line no: 111, 0.9565217391304348, 0.8260869565217391, 0.0
input,SIMPLE_NAME, line no: 213,Builder,SIMPLE_NAME, line no: 126, 0.9565217391304348, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,numMinutes,SIMPLE_NAME, line no: 128, 0.9565217391304348, 0.9565217391304348, 0.0
input,SIMPLE_NAME, line no: 213,0,NUMBER_LITERAL, line no: 128, 0.9565217391304348, 0.9565217391304348, 0.0
input,SIMPLE_NAME, line no: 213,interval,SIMPLE_NAME, line no: 129, 0.9565217391304348, 0.9565217391304348, 0.0
input,SIMPLE_NAME, line no: 213,query.getIntervals(),METHOD_INVOCATION, line no: 129, 0.9565217391304348, 0.9565217391304348, 0.0
input,SIMPLE_NAME, line no: 213,getIntervals,SIMPLE_NAME, line no: 129, 0.9565217391304348, 0.9565217391304348, 0.0
input,SIMPLE_NAME, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()).setUser4(String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension())).setUser5(COMMA_JOIN.join(query.getIntervals())).setUser6(String.valueOf(query.hasFilters())).setUser7(String.format("% d aggs" query.getAggregatorSpecs().size())).setUser9(Minutes.minutes(numMinutes).toString()),METHOD_INVOCATION, line no: 133, 0.9565217391304348, 0.9565217391304348, 0.0
input,SIMPLE_NAME, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()).setUser4(String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension())).setUser5(COMMA_JOIN.join(query.getIntervals())).setUser6(String.valueOf(query.hasFilters())).setUser7(String.format("% d aggs" query.getAggregatorSpecs().size())),METHOD_INVOCATION, line no: 133, 0.9565217391304348, 0.9565217391304348, 0.0
input,SIMPLE_NAME, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()).setUser4(String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension())).setUser5(COMMA_JOIN.join(query.getIntervals())).setUser6(String.valueOf(query.hasFilters())),METHOD_INVOCATION, line no: 133, 0.9565217391304348, 0.9565217391304348, 0.0
input,SIMPLE_NAME, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()).setUser4(String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension())).setUser5(COMMA_JOIN.join(query.getIntervals())),METHOD_INVOCATION, line no: 133, 0.9565217391304348, 0.9565217391304348, 0.0
input,SIMPLE_NAME, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()).setUser4(String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension())),METHOD_INVOCATION, line no: 133, 0.9565217391304348, 0.9565217391304348, 0.0
input,SIMPLE_NAME, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()),METHOD_INVOCATION, line no: 133, 0.9565217391304348, 0.9565217391304348, 0.0
input,SIMPLE_NAME, line no: 213,new ServiceMetricEvent.Builder(),CLASS_INSTANCE_CREATION, line no: 133, 0.9565217391304348, 0.9565217391304348, 0.0
input,SIMPLE_NAME, line no: 213,ServiceMetricEvent.Builder,QUALIFIED_NAME, line no: 133, 0.9565217391304348, 0.9565217391304348, 0.0
input,SIMPLE_NAME, line no: 213,setUser2,SIMPLE_NAME, line no: 134, 0.9565217391304348, 0.9565217391304348, 0.0
input,SIMPLE_NAME, line no: 213,query.getDataSource().toString(),METHOD_INVOCATION, line no: 134, 0.9565217391304348, 0.9565217391304348, 0.0
input,SIMPLE_NAME, line no: 213,query.getDataSource(),METHOD_INVOCATION, line no: 134, 0.9565217391304348, 0.9565217391304348, 0.0
input,SIMPLE_NAME, line no: 213,getDataSource,SIMPLE_NAME, line no: 134, 0.9565217391304348, 0.9565217391304348, 0.0
input,SIMPLE_NAME, line no: 213,toString,SIMPLE_NAME, line no: 134, 0.9565217391304348, 0.9565217391304348, 0.0
input,SIMPLE_NAME, line no: 213,setUser4,SIMPLE_NAME, line no: 135, 0.9565217391304348, 0.9565217391304348, 0.0
input,SIMPLE_NAME, line no: 213,String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension()),METHOD_INVOCATION, line no: 135, 0.9565217391304348, 0.9565217391304348, 0.0
input,SIMPLE_NAME, line no: 213,format,SIMPLE_NAME, line no: 135, 0.9565217391304348, 0.9565217391304348, 0.0
input,SIMPLE_NAME, line no: 213,"topN/%s/%s",STRING_LITERAL, line no: 135, 0.9565217391304348, 0.9565217391304348, 0.0
input,SIMPLE_NAME, line no: 213,query.getDimensionSpec().getDimension(),METHOD_INVOCATION, line no: 135, 0.9565217391304348, 0.9565217391304348, 0.0
input,SIMPLE_NAME, line no: 213,getDimension,SIMPLE_NAME, line no: 135, 0.9565217391304348, 0.9565217391304348, 0.0
input,SIMPLE_NAME, line no: 213,setUser5,SIMPLE_NAME, line no: 136, 0.9565217391304348, 0.9565217391304348, 0.0
input,SIMPLE_NAME, line no: 213,COMMA_JOIN.join(query.getIntervals()),METHOD_INVOCATION, line no: 136, 0.9565217391304348, 0.9565217391304348, 0.0
input,SIMPLE_NAME, line no: 213,join,SIMPLE_NAME, line no: 136, 0.9565217391304348, 0.9565217391304348, 0.0
input,SIMPLE_NAME, line no: 213,setUser6,SIMPLE_NAME, line no: 137, 0.9565217391304348, 0.9565217391304348, 0.0
input,SIMPLE_NAME, line no: 213,String.valueOf(query.hasFilters()),METHOD_INVOCATION, line no: 137, 0.9565217391304348, 0.9565217391304348, 0.0
input,SIMPLE_NAME, line no: 213,valueOf,SIMPLE_NAME, line no: 137, 0.9565217391304348, 0.9565217391304348, 0.0
input,SIMPLE_NAME, line no: 213,query.hasFilters(),METHOD_INVOCATION, line no: 137, 0.9565217391304348, 0.9565217391304348, 0.0
input,SIMPLE_NAME, line no: 213,hasFilters,SIMPLE_NAME, line no: 137, 0.9565217391304348, 0.9565217391304348, 0.0
input,SIMPLE_NAME, line no: 213,setUser7,SIMPLE_NAME, line no: 138, 0.9565217391304348, 0.9565217391304348, 0.0
input,SIMPLE_NAME, line no: 213,String.format("% d aggs" query.getAggregatorSpecs().size()),METHOD_INVOCATION, line no: 138, 0.9565217391304348, 0.9565217391304348, 0.0
input,SIMPLE_NAME, line no: 213,"% d aggs",STRING_LITERAL, line no: 138, 0.9565217391304348, 0.9565217391304348, 0.0
input,SIMPLE_NAME, line no: 213,query.getAggregatorSpecs().size(),METHOD_INVOCATION, line no: 138, 0.9565217391304348, 0.9565217391304348, 0.0
input,SIMPLE_NAME, line no: 213,setUser9,SIMPLE_NAME, line no: 139, 0.9565217391304348, 0.9565217391304348, 0.0
input,SIMPLE_NAME, line no: 213,Minutes.minutes(numMinutes).toString(),METHOD_INVOCATION, line no: 139, 0.9565217391304348, 0.9565217391304348, 0.0
input,SIMPLE_NAME, line no: 213,Minutes.minutes(numMinutes),METHOD_INVOCATION, line no: 139, 0.9565217391304348, 0.9565217391304348, 0.0
input,SIMPLE_NAME, line no: 213,minutes,SIMPLE_NAME, line no: 139, 0.9565217391304348, 0.9565217391304348, 0.0
input,SIMPLE_NAME, line no: 213,fn,SIMPLE_NAME, line no: 144, 0.9565217391304348, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,agg.getName(),METHOD_INVOCATION, line no: 164, 0.9565217391304348, 0.9130434782608695, 0.0
input,SIMPLE_NAME, line no: 213,manipulate,SIMPLE_NAME, line no: 164, 0.9565217391304348, 0.9565217391304348, 0.0
input,SIMPLE_NAME, line no: 213,input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 164, 0.9565217391304348, 0.9565217391304348, 0.0
input,SIMPLE_NAME, line no: 213,calculatedPostAgg,SIMPLE_NAME, line no: 167, 0.9565217391304348, 0.9565217391304348, 0.0
input,SIMPLE_NAME, line no: 213,calculatedPostAgg != null,INFIX_EXPRESSION, line no: 168, 0.9565217391304348, 0.9565217391304348, 0.0
input,SIMPLE_NAME, line no: 213,null,NULL_LITERAL, line no: 168, 0.9565217391304348, 0.9565217391304348, 0.0
getMetric,SIMPLE_NAME, line no: 213,ServiceMetricEvent,SIMPLE_NAME, line no: 36, 0.9565217391304348, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,Interval,SIMPLE_NAME, line no: 54, 0.9565217391304348, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,Minutes,SIMPLE_NAME, line no: 55, 0.9565217391304348, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,COMMA_JOIN,SIMPLE_NAME, line no: 68, 0.9565217391304348, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,query.getThreshold(),METHOD_INVOCATION, line no: 111, 0.9565217391304348, 0.8260869565217391, 0.0
getMetric,SIMPLE_NAME, line no: 213,getThreshold,SIMPLE_NAME, line no: 111, 0.9565217391304348, 0.8260869565217391, 0.0
getMetric,SIMPLE_NAME, line no: 213,Builder,SIMPLE_NAME, line no: 126, 0.9565217391304348, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,numMinutes,SIMPLE_NAME, line no: 128, 0.9565217391304348, 0.9565217391304348, 0.0
getMetric,SIMPLE_NAME, line no: 213,0,NUMBER_LITERAL, line no: 128, 0.9565217391304348, 0.9565217391304348, 0.0
getMetric,SIMPLE_NAME, line no: 213,interval,SIMPLE_NAME, line no: 129, 0.9565217391304348, 0.9565217391304348, 0.0
getMetric,SIMPLE_NAME, line no: 213,query.getIntervals(),METHOD_INVOCATION, line no: 129, 0.9565217391304348, 0.9565217391304348, 0.0
getMetric,SIMPLE_NAME, line no: 213,getIntervals,SIMPLE_NAME, line no: 129, 0.9565217391304348, 0.9565217391304348, 0.0
getMetric,SIMPLE_NAME, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()).setUser4(String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension())).setUser5(COMMA_JOIN.join(query.getIntervals())).setUser6(String.valueOf(query.hasFilters())).setUser7(String.format("% d aggs" query.getAggregatorSpecs().size())).setUser9(Minutes.minutes(numMinutes).toString()),METHOD_INVOCATION, line no: 133, 0.9565217391304348, 0.9565217391304348, 0.0
getMetric,SIMPLE_NAME, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()).setUser4(String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension())).setUser5(COMMA_JOIN.join(query.getIntervals())).setUser6(String.valueOf(query.hasFilters())).setUser7(String.format("% d aggs" query.getAggregatorSpecs().size())),METHOD_INVOCATION, line no: 133, 0.9565217391304348, 0.9565217391304348, 0.0
getMetric,SIMPLE_NAME, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()).setUser4(String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension())).setUser5(COMMA_JOIN.join(query.getIntervals())).setUser6(String.valueOf(query.hasFilters())),METHOD_INVOCATION, line no: 133, 0.9565217391304348, 0.9565217391304348, 0.0
getMetric,SIMPLE_NAME, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()).setUser4(String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension())).setUser5(COMMA_JOIN.join(query.getIntervals())),METHOD_INVOCATION, line no: 133, 0.9565217391304348, 0.9565217391304348, 0.0
getMetric,SIMPLE_NAME, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()).setUser4(String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension())),METHOD_INVOCATION, line no: 133, 0.9565217391304348, 0.9565217391304348, 0.0
getMetric,SIMPLE_NAME, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()),METHOD_INVOCATION, line no: 133, 0.9565217391304348, 0.9565217391304348, 0.0
getMetric,SIMPLE_NAME, line no: 213,new ServiceMetricEvent.Builder(),CLASS_INSTANCE_CREATION, line no: 133, 0.9565217391304348, 0.9565217391304348, 0.0
getMetric,SIMPLE_NAME, line no: 213,ServiceMetricEvent.Builder,QUALIFIED_NAME, line no: 133, 0.9565217391304348, 0.9565217391304348, 0.0
getMetric,SIMPLE_NAME, line no: 213,setUser2,SIMPLE_NAME, line no: 134, 0.9565217391304348, 0.9565217391304348, 0.0
getMetric,SIMPLE_NAME, line no: 213,query.getDataSource().toString(),METHOD_INVOCATION, line no: 134, 0.9565217391304348, 0.9565217391304348, 0.0
getMetric,SIMPLE_NAME, line no: 213,query.getDataSource(),METHOD_INVOCATION, line no: 134, 0.9565217391304348, 0.9565217391304348, 0.0
getMetric,SIMPLE_NAME, line no: 213,getDataSource,SIMPLE_NAME, line no: 134, 0.9565217391304348, 0.9565217391304348, 0.0
getMetric,SIMPLE_NAME, line no: 213,toString,SIMPLE_NAME, line no: 134, 0.9565217391304348, 0.9565217391304348, 0.0
getMetric,SIMPLE_NAME, line no: 213,setUser4,SIMPLE_NAME, line no: 135, 0.9565217391304348, 0.9565217391304348, 0.0
getMetric,SIMPLE_NAME, line no: 213,String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension()),METHOD_INVOCATION, line no: 135, 0.9565217391304348, 0.9565217391304348, 0.0
getMetric,SIMPLE_NAME, line no: 213,format,SIMPLE_NAME, line no: 135, 0.9565217391304348, 0.9565217391304348, 0.0
getMetric,SIMPLE_NAME, line no: 213,"topN/%s/%s",STRING_LITERAL, line no: 135, 0.9565217391304348, 0.9565217391304348, 0.0
getMetric,SIMPLE_NAME, line no: 213,query.getDimensionSpec().getDimension(),METHOD_INVOCATION, line no: 135, 0.9565217391304348, 0.9565217391304348, 0.0
getMetric,SIMPLE_NAME, line no: 213,getDimension,SIMPLE_NAME, line no: 135, 0.9565217391304348, 0.9565217391304348, 0.0
getMetric,SIMPLE_NAME, line no: 213,setUser5,SIMPLE_NAME, line no: 136, 0.9565217391304348, 0.9565217391304348, 0.0
getMetric,SIMPLE_NAME, line no: 213,COMMA_JOIN.join(query.getIntervals()),METHOD_INVOCATION, line no: 136, 0.9565217391304348, 0.9565217391304348, 0.0
getMetric,SIMPLE_NAME, line no: 213,join,SIMPLE_NAME, line no: 136, 0.9565217391304348, 0.9565217391304348, 0.0
getMetric,SIMPLE_NAME, line no: 213,setUser6,SIMPLE_NAME, line no: 137, 0.9565217391304348, 0.9565217391304348, 0.0
getMetric,SIMPLE_NAME, line no: 213,String.valueOf(query.hasFilters()),METHOD_INVOCATION, line no: 137, 0.9565217391304348, 0.9565217391304348, 0.0
getMetric,SIMPLE_NAME, line no: 213,valueOf,SIMPLE_NAME, line no: 137, 0.9565217391304348, 0.9565217391304348, 0.0
getMetric,SIMPLE_NAME, line no: 213,query.hasFilters(),METHOD_INVOCATION, line no: 137, 0.9565217391304348, 0.9565217391304348, 0.0
getMetric,SIMPLE_NAME, line no: 213,hasFilters,SIMPLE_NAME, line no: 137, 0.9565217391304348, 0.9565217391304348, 0.0
getMetric,SIMPLE_NAME, line no: 213,setUser7,SIMPLE_NAME, line no: 138, 0.9565217391304348, 0.9565217391304348, 0.0
getMetric,SIMPLE_NAME, line no: 213,String.format("% d aggs" query.getAggregatorSpecs().size()),METHOD_INVOCATION, line no: 138, 0.9565217391304348, 0.9565217391304348, 0.0
getMetric,SIMPLE_NAME, line no: 213,"% d aggs",STRING_LITERAL, line no: 138, 0.9565217391304348, 0.9565217391304348, 0.0
getMetric,SIMPLE_NAME, line no: 213,query.getAggregatorSpecs().size(),METHOD_INVOCATION, line no: 138, 0.9565217391304348, 0.9565217391304348, 0.0
getMetric,SIMPLE_NAME, line no: 213,setUser9,SIMPLE_NAME, line no: 139, 0.9565217391304348, 0.9565217391304348, 0.0
getMetric,SIMPLE_NAME, line no: 213,Minutes.minutes(numMinutes).toString(),METHOD_INVOCATION, line no: 139, 0.9565217391304348, 0.9565217391304348, 0.0
getMetric,SIMPLE_NAME, line no: 213,Minutes.minutes(numMinutes),METHOD_INVOCATION, line no: 139, 0.9565217391304348, 0.9565217391304348, 0.0
getMetric,SIMPLE_NAME, line no: 213,minutes,SIMPLE_NAME, line no: 139, 0.9565217391304348, 0.9565217391304348, 0.0
getMetric,SIMPLE_NAME, line no: 213,fn,SIMPLE_NAME, line no: 144, 0.9565217391304348, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,agg.getName(),METHOD_INVOCATION, line no: 164, 0.9565217391304348, 0.9130434782608695, 0.0
getMetric,SIMPLE_NAME, line no: 213,calculatedPostAgg != null,INFIX_EXPRESSION, line no: 168, 0.9565217391304348, 0.9565217391304348, 0.0
getMetric,SIMPLE_NAME, line no: 213,null,NULL_LITERAL, line no: 168, 0.9565217391304348, 0.9565217391304348, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,ServiceMetricEvent,SIMPLE_NAME, line no: 36, 0.9565217391304348, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,Interval,SIMPLE_NAME, line no: 54, 0.9565217391304348, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,Minutes,SIMPLE_NAME, line no: 55, 0.9565217391304348, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,COMMA_JOIN,SIMPLE_NAME, line no: 68, 0.9565217391304348, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,query.getThreshold(),METHOD_INVOCATION, line no: 111, 0.9565217391304348, 0.782608695652174, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,getThreshold,SIMPLE_NAME, line no: 111, 0.9565217391304348, 0.782608695652174, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,Builder,SIMPLE_NAME, line no: 126, 0.9565217391304348, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,numMinutes,SIMPLE_NAME, line no: 128, 0.9565217391304348, 0.9565217391304348, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,0,NUMBER_LITERAL, line no: 128, 0.9565217391304348, 0.9565217391304348, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,interval,SIMPLE_NAME, line no: 129, 0.9565217391304348, 0.9565217391304348, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,query.getIntervals(),METHOD_INVOCATION, line no: 129, 0.9565217391304348, 0.9565217391304348, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,getIntervals,SIMPLE_NAME, line no: 129, 0.9565217391304348, 0.9565217391304348, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()).setUser4(String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension())).setUser5(COMMA_JOIN.join(query.getIntervals())).setUser6(String.valueOf(query.hasFilters())).setUser7(String.format("% d aggs" query.getAggregatorSpecs().size())).setUser9(Minutes.minutes(numMinutes).toString()),METHOD_INVOCATION, line no: 133, 0.9565217391304348, 0.9565217391304348, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()).setUser4(String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension())).setUser5(COMMA_JOIN.join(query.getIntervals())).setUser6(String.valueOf(query.hasFilters())).setUser7(String.format("% d aggs" query.getAggregatorSpecs().size())),METHOD_INVOCATION, line no: 133, 0.9565217391304348, 0.9565217391304348, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()).setUser4(String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension())).setUser5(COMMA_JOIN.join(query.getIntervals())).setUser6(String.valueOf(query.hasFilters())),METHOD_INVOCATION, line no: 133, 0.9565217391304348, 0.9565217391304348, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()).setUser4(String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension())).setUser5(COMMA_JOIN.join(query.getIntervals())),METHOD_INVOCATION, line no: 133, 0.9565217391304348, 0.9565217391304348, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()).setUser4(String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension())),METHOD_INVOCATION, line no: 133, 0.9565217391304348, 0.9565217391304348, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()),METHOD_INVOCATION, line no: 133, 0.9565217391304348, 0.9565217391304348, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,new ServiceMetricEvent.Builder(),CLASS_INSTANCE_CREATION, line no: 133, 0.9565217391304348, 0.9565217391304348, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,ServiceMetricEvent.Builder,QUALIFIED_NAME, line no: 133, 0.9565217391304348, 0.9565217391304348, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,setUser2,SIMPLE_NAME, line no: 134, 0.9565217391304348, 0.9565217391304348, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,query.getDataSource().toString(),METHOD_INVOCATION, line no: 134, 0.9565217391304348, 0.9565217391304348, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,query.getDataSource(),METHOD_INVOCATION, line no: 134, 0.9565217391304348, 0.9565217391304348, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,getDataSource,SIMPLE_NAME, line no: 134, 0.9565217391304348, 0.9565217391304348, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,setUser4,SIMPLE_NAME, line no: 135, 0.9565217391304348, 0.9565217391304348, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension()),METHOD_INVOCATION, line no: 135, 0.9565217391304348, 0.9565217391304348, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,"topN/%s/%s",STRING_LITERAL, line no: 135, 0.9565217391304348, 0.9565217391304348, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,query.getDimensionSpec().getDimension(),METHOD_INVOCATION, line no: 135, 0.9565217391304348, 0.9565217391304348, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,setUser5,SIMPLE_NAME, line no: 136, 0.9565217391304348, 0.9565217391304348, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,COMMA_JOIN.join(query.getIntervals()),METHOD_INVOCATION, line no: 136, 0.9565217391304348, 0.9565217391304348, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,join,SIMPLE_NAME, line no: 136, 0.9565217391304348, 0.9565217391304348, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,setUser6,SIMPLE_NAME, line no: 137, 0.9565217391304348, 0.9565217391304348, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,String.valueOf(query.hasFilters()),METHOD_INVOCATION, line no: 137, 0.9565217391304348, 0.9565217391304348, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,query.hasFilters(),METHOD_INVOCATION, line no: 137, 0.9565217391304348, 0.9565217391304348, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,hasFilters,SIMPLE_NAME, line no: 137, 0.9565217391304348, 0.9565217391304348, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,setUser7,SIMPLE_NAME, line no: 138, 0.9565217391304348, 0.9565217391304348, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,String.format("% d aggs" query.getAggregatorSpecs().size()),METHOD_INVOCATION, line no: 138, 0.9565217391304348, 0.9565217391304348, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,"% d aggs",STRING_LITERAL, line no: 138, 0.9565217391304348, 0.9565217391304348, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,query.getAggregatorSpecs().size(),METHOD_INVOCATION, line no: 138, 0.9565217391304348, 0.9565217391304348, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,setUser9,SIMPLE_NAME, line no: 139, 0.9565217391304348, 0.9565217391304348, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,Minutes.minutes(numMinutes).toString(),METHOD_INVOCATION, line no: 139, 0.9565217391304348, 0.9565217391304348, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,Minutes.minutes(numMinutes),METHOD_INVOCATION, line no: 139, 0.9565217391304348, 0.9565217391304348, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,minutes,SIMPLE_NAME, line no: 139, 0.9565217391304348, 0.9565217391304348, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 164, 0.9565217391304348, 0.9565217391304348, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,getMetric,SIMPLE_NAME, line no: 164, 0.9565217391304348, 0.9565217391304348, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,input.getMetric(postAgg.getName()),METHOD_INVOCATION, line no: 167, 0.9565217391304348, 0.9565217391304348, 0.0
agg,SIMPLE_NAME, line no: 213,ServiceMetricEvent,SIMPLE_NAME, line no: 36, 0.9545454545454546, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,Interval,SIMPLE_NAME, line no: 54, 0.9545454545454546, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,Minutes,SIMPLE_NAME, line no: 55, 0.9545454545454546, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,COMMA_JOIN,SIMPLE_NAME, line no: 68, 0.9545454545454546, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,query.getThreshold(),METHOD_INVOCATION, line no: 111, 0.9545454545454546, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,getThreshold,SIMPLE_NAME, line no: 111, 0.9545454545454546, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,Builder,SIMPLE_NAME, line no: 126, 0.9545454545454546, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,numMinutes,SIMPLE_NAME, line no: 128, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,0,NUMBER_LITERAL, line no: 128, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,interval,SIMPLE_NAME, line no: 129, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,query.getIntervals(),METHOD_INVOCATION, line no: 129, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,getIntervals,SIMPLE_NAME, line no: 129, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()).setUser4(String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension())).setUser5(COMMA_JOIN.join(query.getIntervals())).setUser6(String.valueOf(query.hasFilters())).setUser7(String.format("% d aggs" query.getAggregatorSpecs().size())).setUser9(Minutes.minutes(numMinutes).toString()),METHOD_INVOCATION, line no: 133, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()).setUser4(String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension())).setUser5(COMMA_JOIN.join(query.getIntervals())).setUser6(String.valueOf(query.hasFilters())).setUser7(String.format("% d aggs" query.getAggregatorSpecs().size())),METHOD_INVOCATION, line no: 133, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()).setUser4(String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension())).setUser5(COMMA_JOIN.join(query.getIntervals())).setUser6(String.valueOf(query.hasFilters())),METHOD_INVOCATION, line no: 133, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()).setUser4(String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension())).setUser5(COMMA_JOIN.join(query.getIntervals())),METHOD_INVOCATION, line no: 133, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()).setUser4(String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension())),METHOD_INVOCATION, line no: 133, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()),METHOD_INVOCATION, line no: 133, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,new ServiceMetricEvent.Builder(),CLASS_INSTANCE_CREATION, line no: 133, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,ServiceMetricEvent.Builder,QUALIFIED_NAME, line no: 133, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,setUser2,SIMPLE_NAME, line no: 134, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,query.getDataSource().toString(),METHOD_INVOCATION, line no: 134, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,query.getDataSource(),METHOD_INVOCATION, line no: 134, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,getDataSource,SIMPLE_NAME, line no: 134, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,toString,SIMPLE_NAME, line no: 134, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,setUser4,SIMPLE_NAME, line no: 135, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension()),METHOD_INVOCATION, line no: 135, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,format,SIMPLE_NAME, line no: 135, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,"topN/%s/%s",STRING_LITERAL, line no: 135, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,query.getDimensionSpec().getDimension(),METHOD_INVOCATION, line no: 135, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,getDimension,SIMPLE_NAME, line no: 135, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,setUser5,SIMPLE_NAME, line no: 136, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,COMMA_JOIN.join(query.getIntervals()),METHOD_INVOCATION, line no: 136, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,join,SIMPLE_NAME, line no: 136, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,setUser6,SIMPLE_NAME, line no: 137, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,String.valueOf(query.hasFilters()),METHOD_INVOCATION, line no: 137, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,valueOf,SIMPLE_NAME, line no: 137, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,query.hasFilters(),METHOD_INVOCATION, line no: 137, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,hasFilters,SIMPLE_NAME, line no: 137, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,setUser7,SIMPLE_NAME, line no: 138, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,String.format("% d aggs" query.getAggregatorSpecs().size()),METHOD_INVOCATION, line no: 138, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,"% d aggs",STRING_LITERAL, line no: 138, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,query.getAggregatorSpecs().size(),METHOD_INVOCATION, line no: 138, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,setUser9,SIMPLE_NAME, line no: 139, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,Minutes.minutes(numMinutes).toString(),METHOD_INVOCATION, line no: 139, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,Minutes.minutes(numMinutes),METHOD_INVOCATION, line no: 139, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,minutes,SIMPLE_NAME, line no: 139, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,agg.getName(),METHOD_INVOCATION, line no: 164, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 164, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 164, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,factory.getName(),METHOD_INVOCATION, line no: 347, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,factory.deserialize(resultIter.next()),METHOD_INVOCATION, line no: 347, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,deserialize,SIMPLE_NAME, line no: 347, 0.9545454545454546, 0.9545454545454546, 0.0
getName,SIMPLE_NAME, line no: 213,ServiceMetricEvent,SIMPLE_NAME, line no: 36, 0.9545454545454546, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,Interval,SIMPLE_NAME, line no: 54, 0.9545454545454546, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,Minutes,SIMPLE_NAME, line no: 55, 0.9545454545454546, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,COMMA_JOIN,SIMPLE_NAME, line no: 68, 0.9545454545454546, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,query.getThreshold(),METHOD_INVOCATION, line no: 111, 0.9545454545454546, 0.8636363636363636, 0.0
getName,SIMPLE_NAME, line no: 213,getThreshold,SIMPLE_NAME, line no: 111, 0.9545454545454546, 0.8636363636363636, 0.0
getName,SIMPLE_NAME, line no: 213,Builder,SIMPLE_NAME, line no: 126, 0.9545454545454546, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,numMinutes,SIMPLE_NAME, line no: 128, 0.9545454545454546, 0.9545454545454546, 0.0
getName,SIMPLE_NAME, line no: 213,0,NUMBER_LITERAL, line no: 128, 0.9545454545454546, 0.9545454545454546, 0.0
getName,SIMPLE_NAME, line no: 213,interval,SIMPLE_NAME, line no: 129, 0.9545454545454546, 0.9545454545454546, 0.0
getName,SIMPLE_NAME, line no: 213,query.getIntervals(),METHOD_INVOCATION, line no: 129, 0.9545454545454546, 0.9545454545454546, 0.0
getName,SIMPLE_NAME, line no: 213,getIntervals,SIMPLE_NAME, line no: 129, 0.9545454545454546, 0.9545454545454546, 0.0
getName,SIMPLE_NAME, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()).setUser4(String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension())).setUser5(COMMA_JOIN.join(query.getIntervals())).setUser6(String.valueOf(query.hasFilters())).setUser7(String.format("% d aggs" query.getAggregatorSpecs().size())).setUser9(Minutes.minutes(numMinutes).toString()),METHOD_INVOCATION, line no: 133, 0.9545454545454546, 0.9545454545454546, 0.0
getName,SIMPLE_NAME, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()).setUser4(String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension())).setUser5(COMMA_JOIN.join(query.getIntervals())).setUser6(String.valueOf(query.hasFilters())).setUser7(String.format("% d aggs" query.getAggregatorSpecs().size())),METHOD_INVOCATION, line no: 133, 0.9545454545454546, 0.9545454545454546, 0.0
getName,SIMPLE_NAME, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()).setUser4(String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension())).setUser5(COMMA_JOIN.join(query.getIntervals())).setUser6(String.valueOf(query.hasFilters())),METHOD_INVOCATION, line no: 133, 0.9545454545454546, 0.9545454545454546, 0.0
getName,SIMPLE_NAME, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()).setUser4(String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension())).setUser5(COMMA_JOIN.join(query.getIntervals())),METHOD_INVOCATION, line no: 133, 0.9545454545454546, 0.9545454545454546, 0.0
getName,SIMPLE_NAME, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()).setUser4(String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension())),METHOD_INVOCATION, line no: 133, 0.9545454545454546, 0.9545454545454546, 0.0
getName,SIMPLE_NAME, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()),METHOD_INVOCATION, line no: 133, 0.9545454545454546, 0.9545454545454546, 0.0
getName,SIMPLE_NAME, line no: 213,new ServiceMetricEvent.Builder(),CLASS_INSTANCE_CREATION, line no: 133, 0.9545454545454546, 0.9545454545454546, 0.0
getName,SIMPLE_NAME, line no: 213,ServiceMetricEvent.Builder,QUALIFIED_NAME, line no: 133, 0.9545454545454546, 0.9545454545454546, 0.0
getName,SIMPLE_NAME, line no: 213,setUser2,SIMPLE_NAME, line no: 134, 0.9545454545454546, 0.9545454545454546, 0.0
getName,SIMPLE_NAME, line no: 213,query.getDataSource(),METHOD_INVOCATION, line no: 134, 0.9545454545454546, 0.9545454545454546, 0.0
getName,SIMPLE_NAME, line no: 213,getDataSource,SIMPLE_NAME, line no: 134, 0.9545454545454546, 0.9545454545454546, 0.0
getName,SIMPLE_NAME, line no: 213,setUser4,SIMPLE_NAME, line no: 135, 0.9545454545454546, 0.9545454545454546, 0.0
getName,SIMPLE_NAME, line no: 213,setUser5,SIMPLE_NAME, line no: 136, 0.9545454545454546, 0.9545454545454546, 0.0
getName,SIMPLE_NAME, line no: 213,COMMA_JOIN.join(query.getIntervals()),METHOD_INVOCATION, line no: 136, 0.9545454545454546, 0.9545454545454546, 0.0
getName,SIMPLE_NAME, line no: 213,join,SIMPLE_NAME, line no: 136, 0.9545454545454546, 0.9545454545454546, 0.0
getName,SIMPLE_NAME, line no: 213,setUser6,SIMPLE_NAME, line no: 137, 0.9545454545454546, 0.9545454545454546, 0.0
getName,SIMPLE_NAME, line no: 213,query.hasFilters(),METHOD_INVOCATION, line no: 137, 0.9545454545454546, 0.9545454545454546, 0.0
getName,SIMPLE_NAME, line no: 213,hasFilters,SIMPLE_NAME, line no: 137, 0.9545454545454546, 0.9545454545454546, 0.0
getName,SIMPLE_NAME, line no: 213,setUser7,SIMPLE_NAME, line no: 138, 0.9545454545454546, 0.9545454545454546, 0.0
getName,SIMPLE_NAME, line no: 213,query.getAggregatorSpecs().size(),METHOD_INVOCATION, line no: 138, 0.9545454545454546, 0.9545454545454546, 0.0
getName,SIMPLE_NAME, line no: 213,setUser9,SIMPLE_NAME, line no: 139, 0.9545454545454546, 0.9545454545454546, 0.0
getName,SIMPLE_NAME, line no: 213,Minutes.minutes(numMinutes).toString(),METHOD_INVOCATION, line no: 139, 0.9545454545454546, 0.9545454545454546, 0.0
getName,SIMPLE_NAME, line no: 213,Minutes.minutes(numMinutes),METHOD_INVOCATION, line no: 139, 0.9545454545454546, 0.9545454545454546, 0.0
getName,SIMPLE_NAME, line no: 213,minutes,SIMPLE_NAME, line no: 139, 0.9545454545454546, 0.9545454545454546, 0.0
getName,SIMPLE_NAME, line no: 213,fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 164, 0.9545454545454546, 0.9545454545454546, 0.0
getName,SIMPLE_NAME, line no: 213,input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 164, 0.9545454545454546, 0.9545454545454546, 0.0
getName,SIMPLE_NAME, line no: 213,factory,SIMPLE_NAME, line no: 346, 0.9545454545454546, 0.8181818181818182, 0.0
getName,SIMPLE_NAME, line no: 213,factory.deserialize(resultIter.next()),METHOD_INVOCATION, line no: 347, 0.9545454545454546, 0.9545454545454546, 0.0
getName,SIMPLE_NAME, line no: 213,deserialize,SIMPLE_NAME, line no: 347, 0.9545454545454546, 0.9545454545454546, 0.0
fn,SIMPLE_NAME, line no: 213,ServiceMetricEvent,SIMPLE_NAME, line no: 36, 0.9545454545454546, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,Interval,SIMPLE_NAME, line no: 54, 0.9545454545454546, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,Minutes,SIMPLE_NAME, line no: 55, 0.9545454545454546, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,COMMA_JOIN,SIMPLE_NAME, line no: 68, 0.9545454545454546, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,query.getThreshold(),METHOD_INVOCATION, line no: 111, 0.9545454545454546, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,getThreshold,SIMPLE_NAME, line no: 111, 0.9545454545454546, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,Builder,SIMPLE_NAME, line no: 126, 0.9545454545454546, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,numMinutes,SIMPLE_NAME, line no: 128, 0.9545454545454546, 0.9545454545454546, 0.0
fn,SIMPLE_NAME, line no: 213,0,NUMBER_LITERAL, line no: 128, 0.9545454545454546, 0.9545454545454546, 0.0
fn,SIMPLE_NAME, line no: 213,interval,SIMPLE_NAME, line no: 129, 0.9545454545454546, 0.9545454545454546, 0.0
fn,SIMPLE_NAME, line no: 213,query.getIntervals(),METHOD_INVOCATION, line no: 129, 0.9545454545454546, 0.9545454545454546, 0.0
fn,SIMPLE_NAME, line no: 213,getIntervals,SIMPLE_NAME, line no: 129, 0.9545454545454546, 0.9545454545454546, 0.0
fn,SIMPLE_NAME, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()).setUser4(String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension())).setUser5(COMMA_JOIN.join(query.getIntervals())).setUser6(String.valueOf(query.hasFilters())).setUser7(String.format("% d aggs" query.getAggregatorSpecs().size())).setUser9(Minutes.minutes(numMinutes).toString()),METHOD_INVOCATION, line no: 133, 0.9545454545454546, 0.9545454545454546, 0.0
fn,SIMPLE_NAME, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()).setUser4(String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension())).setUser5(COMMA_JOIN.join(query.getIntervals())).setUser6(String.valueOf(query.hasFilters())).setUser7(String.format("% d aggs" query.getAggregatorSpecs().size())),METHOD_INVOCATION, line no: 133, 0.9545454545454546, 0.9545454545454546, 0.0
fn,SIMPLE_NAME, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()).setUser4(String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension())).setUser5(COMMA_JOIN.join(query.getIntervals())).setUser6(String.valueOf(query.hasFilters())),METHOD_INVOCATION, line no: 133, 0.9545454545454546, 0.9545454545454546, 0.0
fn,SIMPLE_NAME, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()).setUser4(String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension())).setUser5(COMMA_JOIN.join(query.getIntervals())),METHOD_INVOCATION, line no: 133, 0.9545454545454546, 0.9545454545454546, 0.0
fn,SIMPLE_NAME, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()).setUser4(String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension())),METHOD_INVOCATION, line no: 133, 0.9545454545454546, 0.9545454545454546, 0.0
fn,SIMPLE_NAME, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()),METHOD_INVOCATION, line no: 133, 0.9545454545454546, 0.9545454545454546, 0.0
fn,SIMPLE_NAME, line no: 213,new ServiceMetricEvent.Builder(),CLASS_INSTANCE_CREATION, line no: 133, 0.9545454545454546, 0.9545454545454546, 0.0
fn,SIMPLE_NAME, line no: 213,ServiceMetricEvent.Builder,QUALIFIED_NAME, line no: 133, 0.9545454545454546, 0.9545454545454546, 0.0
fn,SIMPLE_NAME, line no: 213,setUser2,SIMPLE_NAME, line no: 134, 0.9545454545454546, 0.9545454545454546, 0.0
fn,SIMPLE_NAME, line no: 213,query.getDataSource().toString(),METHOD_INVOCATION, line no: 134, 0.9545454545454546, 0.9545454545454546, 0.0
fn,SIMPLE_NAME, line no: 213,query.getDataSource(),METHOD_INVOCATION, line no: 134, 0.9545454545454546, 0.9545454545454546, 0.0
fn,SIMPLE_NAME, line no: 213,getDataSource,SIMPLE_NAME, line no: 134, 0.9545454545454546, 0.9545454545454546, 0.0
fn,SIMPLE_NAME, line no: 213,toString,SIMPLE_NAME, line no: 134, 0.9545454545454546, 0.9545454545454546, 0.0
fn,SIMPLE_NAME, line no: 213,setUser4,SIMPLE_NAME, line no: 135, 0.9545454545454546, 0.9545454545454546, 0.0
fn,SIMPLE_NAME, line no: 213,String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension()),METHOD_INVOCATION, line no: 135, 0.9545454545454546, 0.9545454545454546, 0.0
fn,SIMPLE_NAME, line no: 213,format,SIMPLE_NAME, line no: 135, 0.9545454545454546, 0.9545454545454546, 0.0
fn,SIMPLE_NAME, line no: 213,"topN/%s/%s",STRING_LITERAL, line no: 135, 0.9545454545454546, 0.9545454545454546, 0.0
fn,SIMPLE_NAME, line no: 213,query.getDimensionSpec().getDimension(),METHOD_INVOCATION, line no: 135, 0.9545454545454546, 0.9545454545454546, 0.0
fn,SIMPLE_NAME, line no: 213,getDimension,SIMPLE_NAME, line no: 135, 0.9545454545454546, 0.9545454545454546, 0.0
fn,SIMPLE_NAME, line no: 213,setUser5,SIMPLE_NAME, line no: 136, 0.9545454545454546, 0.9545454545454546, 0.0
fn,SIMPLE_NAME, line no: 213,COMMA_JOIN.join(query.getIntervals()),METHOD_INVOCATION, line no: 136, 0.9545454545454546, 0.9545454545454546, 0.0
fn,SIMPLE_NAME, line no: 213,join,SIMPLE_NAME, line no: 136, 0.9545454545454546, 0.9545454545454546, 0.0
fn,SIMPLE_NAME, line no: 213,setUser6,SIMPLE_NAME, line no: 137, 0.9545454545454546, 0.9545454545454546, 0.0
fn,SIMPLE_NAME, line no: 213,String.valueOf(query.hasFilters()),METHOD_INVOCATION, line no: 137, 0.9545454545454546, 0.9545454545454546, 0.0
fn,SIMPLE_NAME, line no: 213,valueOf,SIMPLE_NAME, line no: 137, 0.9545454545454546, 0.9545454545454546, 0.0
fn,SIMPLE_NAME, line no: 213,query.hasFilters(),METHOD_INVOCATION, line no: 137, 0.9545454545454546, 0.9545454545454546, 0.0
fn,SIMPLE_NAME, line no: 213,hasFilters,SIMPLE_NAME, line no: 137, 0.9545454545454546, 0.9545454545454546, 0.0
fn,SIMPLE_NAME, line no: 213,setUser7,SIMPLE_NAME, line no: 138, 0.9545454545454546, 0.9545454545454546, 0.0
fn,SIMPLE_NAME, line no: 213,String.format("% d aggs" query.getAggregatorSpecs().size()),METHOD_INVOCATION, line no: 138, 0.9545454545454546, 0.9545454545454546, 0.0
fn,SIMPLE_NAME, line no: 213,"% d aggs",STRING_LITERAL, line no: 138, 0.9545454545454546, 0.9545454545454546, 0.0
fn,SIMPLE_NAME, line no: 213,query.getAggregatorSpecs().size(),METHOD_INVOCATION, line no: 138, 0.9545454545454546, 0.9545454545454546, 0.0
fn,SIMPLE_NAME, line no: 213,setUser9,SIMPLE_NAME, line no: 139, 0.9545454545454546, 0.9545454545454546, 0.0
fn,SIMPLE_NAME, line no: 213,Minutes.minutes(numMinutes).toString(),METHOD_INVOCATION, line no: 139, 0.9545454545454546, 0.9545454545454546, 0.0
fn,SIMPLE_NAME, line no: 213,Minutes.minutes(numMinutes),METHOD_INVOCATION, line no: 139, 0.9545454545454546, 0.9545454545454546, 0.0
fn,SIMPLE_NAME, line no: 213,minutes,SIMPLE_NAME, line no: 139, 0.9545454545454546, 0.9545454545454546, 0.0
fn,SIMPLE_NAME, line no: 213,agg.getName(),METHOD_INVOCATION, line no: 164, 0.9545454545454546, 0.9545454545454546, 0.0
fn,SIMPLE_NAME, line no: 213,fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 164, 0.9545454545454546, 0.9545454545454546, 0.0
fn,SIMPLE_NAME, line no: 213,input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 164, 0.9545454545454546, 0.9545454545454546, 0.0
fn,SIMPLE_NAME, line no: 213,factory,SIMPLE_NAME, line no: 346, 0.9545454545454546, 0.8181818181818182, 0.0
fn,SIMPLE_NAME, line no: 213,factory.getName(),METHOD_INVOCATION, line no: 347, 0.9545454545454546, 0.9545454545454546, 0.0
fn,SIMPLE_NAME, line no: 213,factory.deserialize(resultIter.next()),METHOD_INVOCATION, line no: 347, 0.9545454545454546, 0.9545454545454546, 0.0
fn,SIMPLE_NAME, line no: 213,deserialize,SIMPLE_NAME, line no: 347, 0.9545454545454546, 0.9545454545454546, 0.0
manipulate,SIMPLE_NAME, line no: 213,ServiceMetricEvent,SIMPLE_NAME, line no: 36, 0.9545454545454546, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,Interval,SIMPLE_NAME, line no: 54, 0.9545454545454546, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,Minutes,SIMPLE_NAME, line no: 55, 0.9545454545454546, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,COMMA_JOIN,SIMPLE_NAME, line no: 68, 0.9545454545454546, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,query.getThreshold(),METHOD_INVOCATION, line no: 111, 0.9545454545454546, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,getThreshold,SIMPLE_NAME, line no: 111, 0.9545454545454546, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,Builder,SIMPLE_NAME, line no: 126, 0.9545454545454546, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,numMinutes,SIMPLE_NAME, line no: 128, 0.9545454545454546, 0.9545454545454546, 0.0
manipulate,SIMPLE_NAME, line no: 213,0,NUMBER_LITERAL, line no: 128, 0.9545454545454546, 0.9545454545454546, 0.0
manipulate,SIMPLE_NAME, line no: 213,interval,SIMPLE_NAME, line no: 129, 0.9545454545454546, 0.9545454545454546, 0.0
manipulate,SIMPLE_NAME, line no: 213,query.getIntervals(),METHOD_INVOCATION, line no: 129, 0.9545454545454546, 0.9545454545454546, 0.0
manipulate,SIMPLE_NAME, line no: 213,getIntervals,SIMPLE_NAME, line no: 129, 0.9545454545454546, 0.9545454545454546, 0.0
manipulate,SIMPLE_NAME, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()).setUser4(String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension())).setUser5(COMMA_JOIN.join(query.getIntervals())).setUser6(String.valueOf(query.hasFilters())).setUser7(String.format("% d aggs" query.getAggregatorSpecs().size())).setUser9(Minutes.minutes(numMinutes).toString()),METHOD_INVOCATION, line no: 133, 0.9545454545454546, 0.9545454545454546, 0.0
manipulate,SIMPLE_NAME, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()).setUser4(String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension())).setUser5(COMMA_JOIN.join(query.getIntervals())).setUser6(String.valueOf(query.hasFilters())).setUser7(String.format("% d aggs" query.getAggregatorSpecs().size())),METHOD_INVOCATION, line no: 133, 0.9545454545454546, 0.9545454545454546, 0.0
manipulate,SIMPLE_NAME, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()).setUser4(String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension())).setUser5(COMMA_JOIN.join(query.getIntervals())).setUser6(String.valueOf(query.hasFilters())),METHOD_INVOCATION, line no: 133, 0.9545454545454546, 0.9545454545454546, 0.0
manipulate,SIMPLE_NAME, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()).setUser4(String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension())).setUser5(COMMA_JOIN.join(query.getIntervals())),METHOD_INVOCATION, line no: 133, 0.9545454545454546, 0.9545454545454546, 0.0
manipulate,SIMPLE_NAME, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()).setUser4(String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension())),METHOD_INVOCATION, line no: 133, 0.9545454545454546, 0.9545454545454546, 0.0
manipulate,SIMPLE_NAME, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()),METHOD_INVOCATION, line no: 133, 0.9545454545454546, 0.9545454545454546, 0.0
manipulate,SIMPLE_NAME, line no: 213,new ServiceMetricEvent.Builder(),CLASS_INSTANCE_CREATION, line no: 133, 0.9545454545454546, 0.9545454545454546, 0.0
manipulate,SIMPLE_NAME, line no: 213,ServiceMetricEvent.Builder,QUALIFIED_NAME, line no: 133, 0.9545454545454546, 0.9545454545454546, 0.0
manipulate,SIMPLE_NAME, line no: 213,setUser2,SIMPLE_NAME, line no: 134, 0.9545454545454546, 0.9545454545454546, 0.0
manipulate,SIMPLE_NAME, line no: 213,query.getDataSource().toString(),METHOD_INVOCATION, line no: 134, 0.9545454545454546, 0.9545454545454546, 0.0
manipulate,SIMPLE_NAME, line no: 213,query.getDataSource(),METHOD_INVOCATION, line no: 134, 0.9545454545454546, 0.9545454545454546, 0.0
manipulate,SIMPLE_NAME, line no: 213,getDataSource,SIMPLE_NAME, line no: 134, 0.9545454545454546, 0.9545454545454546, 0.0
manipulate,SIMPLE_NAME, line no: 213,toString,SIMPLE_NAME, line no: 134, 0.9545454545454546, 0.9545454545454546, 0.0
manipulate,SIMPLE_NAME, line no: 213,setUser4,SIMPLE_NAME, line no: 135, 0.9545454545454546, 0.9545454545454546, 0.0
manipulate,SIMPLE_NAME, line no: 213,String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension()),METHOD_INVOCATION, line no: 135, 0.9545454545454546, 0.9545454545454546, 0.0
manipulate,SIMPLE_NAME, line no: 213,format,SIMPLE_NAME, line no: 135, 0.9545454545454546, 0.9545454545454546, 0.0
manipulate,SIMPLE_NAME, line no: 213,"topN/%s/%s",STRING_LITERAL, line no: 135, 0.9545454545454546, 0.9545454545454546, 0.0
manipulate,SIMPLE_NAME, line no: 213,query.getDimensionSpec().getDimension(),METHOD_INVOCATION, line no: 135, 0.9545454545454546, 0.9545454545454546, 0.0
manipulate,SIMPLE_NAME, line no: 213,getDimension,SIMPLE_NAME, line no: 135, 0.9545454545454546, 0.9545454545454546, 0.0
manipulate,SIMPLE_NAME, line no: 213,setUser5,SIMPLE_NAME, line no: 136, 0.9545454545454546, 0.9545454545454546, 0.0
manipulate,SIMPLE_NAME, line no: 213,COMMA_JOIN.join(query.getIntervals()),METHOD_INVOCATION, line no: 136, 0.9545454545454546, 0.9545454545454546, 0.0
manipulate,SIMPLE_NAME, line no: 213,join,SIMPLE_NAME, line no: 136, 0.9545454545454546, 0.9545454545454546, 0.0
manipulate,SIMPLE_NAME, line no: 213,setUser6,SIMPLE_NAME, line no: 137, 0.9545454545454546, 0.9545454545454546, 0.0
manipulate,SIMPLE_NAME, line no: 213,String.valueOf(query.hasFilters()),METHOD_INVOCATION, line no: 137, 0.9545454545454546, 0.9545454545454546, 0.0
manipulate,SIMPLE_NAME, line no: 213,valueOf,SIMPLE_NAME, line no: 137, 0.9545454545454546, 0.9545454545454546, 0.0
manipulate,SIMPLE_NAME, line no: 213,query.hasFilters(),METHOD_INVOCATION, line no: 137, 0.9545454545454546, 0.9545454545454546, 0.0
manipulate,SIMPLE_NAME, line no: 213,hasFilters,SIMPLE_NAME, line no: 137, 0.9545454545454546, 0.9545454545454546, 0.0
manipulate,SIMPLE_NAME, line no: 213,setUser7,SIMPLE_NAME, line no: 138, 0.9545454545454546, 0.9545454545454546, 0.0
manipulate,SIMPLE_NAME, line no: 213,String.format("% d aggs" query.getAggregatorSpecs().size()),METHOD_INVOCATION, line no: 138, 0.9545454545454546, 0.9545454545454546, 0.0
manipulate,SIMPLE_NAME, line no: 213,"% d aggs",STRING_LITERAL, line no: 138, 0.9545454545454546, 0.9545454545454546, 0.0
manipulate,SIMPLE_NAME, line no: 213,query.getAggregatorSpecs().size(),METHOD_INVOCATION, line no: 138, 0.9545454545454546, 0.9545454545454546, 0.0
manipulate,SIMPLE_NAME, line no: 213,setUser9,SIMPLE_NAME, line no: 139, 0.9545454545454546, 0.9545454545454546, 0.0
manipulate,SIMPLE_NAME, line no: 213,Minutes.minutes(numMinutes).toString(),METHOD_INVOCATION, line no: 139, 0.9545454545454546, 0.9545454545454546, 0.0
manipulate,SIMPLE_NAME, line no: 213,Minutes.minutes(numMinutes),METHOD_INVOCATION, line no: 139, 0.9545454545454546, 0.9545454545454546, 0.0
manipulate,SIMPLE_NAME, line no: 213,minutes,SIMPLE_NAME, line no: 139, 0.9545454545454546, 0.9545454545454546, 0.0
manipulate,SIMPLE_NAME, line no: 213,agg.getName(),METHOD_INVOCATION, line no: 164, 0.9545454545454546, 0.9545454545454546, 0.0
manipulate,SIMPLE_NAME, line no: 213,factory,SIMPLE_NAME, line no: 346, 0.9545454545454546, 0.8181818181818182, 0.0
manipulate,SIMPLE_NAME, line no: 213,factory.getName(),METHOD_INVOCATION, line no: 347, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,ServiceMetricEvent,SIMPLE_NAME, line no: 36, 0.9545454545454546, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,Interval,SIMPLE_NAME, line no: 54, 0.9545454545454546, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,Minutes,SIMPLE_NAME, line no: 55, 0.9545454545454546, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,COMMA_JOIN,SIMPLE_NAME, line no: 68, 0.9545454545454546, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,query.getThreshold(),METHOD_INVOCATION, line no: 111, 0.9545454545454546, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,getThreshold,SIMPLE_NAME, line no: 111, 0.9545454545454546, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,Builder,SIMPLE_NAME, line no: 126, 0.9545454545454546, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,numMinutes,SIMPLE_NAME, line no: 128, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,0,NUMBER_LITERAL, line no: 128, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,interval,SIMPLE_NAME, line no: 129, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,query.getIntervals(),METHOD_INVOCATION, line no: 129, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,getIntervals,SIMPLE_NAME, line no: 129, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()).setUser4(String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension())).setUser5(COMMA_JOIN.join(query.getIntervals())).setUser6(String.valueOf(query.hasFilters())).setUser7(String.format("% d aggs" query.getAggregatorSpecs().size())).setUser9(Minutes.minutes(numMinutes).toString()),METHOD_INVOCATION, line no: 133, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()).setUser4(String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension())).setUser5(COMMA_JOIN.join(query.getIntervals())).setUser6(String.valueOf(query.hasFilters())).setUser7(String.format("% d aggs" query.getAggregatorSpecs().size())),METHOD_INVOCATION, line no: 133, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()).setUser4(String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension())).setUser5(COMMA_JOIN.join(query.getIntervals())).setUser6(String.valueOf(query.hasFilters())),METHOD_INVOCATION, line no: 133, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()).setUser4(String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension())).setUser5(COMMA_JOIN.join(query.getIntervals())),METHOD_INVOCATION, line no: 133, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()).setUser4(String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension())),METHOD_INVOCATION, line no: 133, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()),METHOD_INVOCATION, line no: 133, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,new ServiceMetricEvent.Builder(),CLASS_INSTANCE_CREATION, line no: 133, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,ServiceMetricEvent.Builder,QUALIFIED_NAME, line no: 133, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,setUser2,SIMPLE_NAME, line no: 134, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,query.getDataSource().toString(),METHOD_INVOCATION, line no: 134, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,query.getDataSource(),METHOD_INVOCATION, line no: 134, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,getDataSource,SIMPLE_NAME, line no: 134, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,toString,SIMPLE_NAME, line no: 134, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,setUser4,SIMPLE_NAME, line no: 135, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension()),METHOD_INVOCATION, line no: 135, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,format,SIMPLE_NAME, line no: 135, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,"topN/%s/%s",STRING_LITERAL, line no: 135, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,query.getDimensionSpec().getDimension(),METHOD_INVOCATION, line no: 135, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,getDimension,SIMPLE_NAME, line no: 135, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,setUser5,SIMPLE_NAME, line no: 136, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,COMMA_JOIN.join(query.getIntervals()),METHOD_INVOCATION, line no: 136, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,join,SIMPLE_NAME, line no: 136, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,setUser6,SIMPLE_NAME, line no: 137, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,String.valueOf(query.hasFilters()),METHOD_INVOCATION, line no: 137, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,valueOf,SIMPLE_NAME, line no: 137, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,query.hasFilters(),METHOD_INVOCATION, line no: 137, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,hasFilters,SIMPLE_NAME, line no: 137, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,setUser7,SIMPLE_NAME, line no: 138, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,String.format("% d aggs" query.getAggregatorSpecs().size()),METHOD_INVOCATION, line no: 138, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,"% d aggs",STRING_LITERAL, line no: 138, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,query.getAggregatorSpecs().size(),METHOD_INVOCATION, line no: 138, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,setUser9,SIMPLE_NAME, line no: 139, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,Minutes.minutes(numMinutes).toString(),METHOD_INVOCATION, line no: 139, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,Minutes.minutes(numMinutes),METHOD_INVOCATION, line no: 139, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,minutes,SIMPLE_NAME, line no: 139, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,agg.getName(),METHOD_INVOCATION, line no: 164, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 164, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 164, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,factory.getName(),METHOD_INVOCATION, line no: 347, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,factory.deserialize(resultIter.next()),METHOD_INVOCATION, line no: 347, 0.9545454545454546, 0.9545454545454546, 0.0
agg,SIMPLE_NAME, line no: 213,deserialize,SIMPLE_NAME, line no: 347, 0.9545454545454546, 0.9545454545454546, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,ServiceMetricEvent,SIMPLE_NAME, line no: 36, 0.9545454545454546, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,Interval,SIMPLE_NAME, line no: 54, 0.9545454545454546, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,Minutes,SIMPLE_NAME, line no: 55, 0.9545454545454546, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,COMMA_JOIN,SIMPLE_NAME, line no: 68, 0.9545454545454546, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,query.getThreshold(),METHOD_INVOCATION, line no: 111, 0.9545454545454546, 0.8181818181818182, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,getThreshold,SIMPLE_NAME, line no: 111, 0.9545454545454546, 0.8181818181818182, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,Builder,SIMPLE_NAME, line no: 126, 0.9545454545454546, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,numMinutes,SIMPLE_NAME, line no: 128, 0.9545454545454546, 0.9545454545454546, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,0,NUMBER_LITERAL, line no: 128, 0.9545454545454546, 0.9545454545454546, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,interval,SIMPLE_NAME, line no: 129, 0.9545454545454546, 0.9545454545454546, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,query.getIntervals(),METHOD_INVOCATION, line no: 129, 0.9545454545454546, 0.9545454545454546, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,getIntervals,SIMPLE_NAME, line no: 129, 0.9545454545454546, 0.9545454545454546, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()).setUser4(String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension())).setUser5(COMMA_JOIN.join(query.getIntervals())).setUser6(String.valueOf(query.hasFilters())).setUser7(String.format("% d aggs" query.getAggregatorSpecs().size())).setUser9(Minutes.minutes(numMinutes).toString()),METHOD_INVOCATION, line no: 133, 0.9545454545454546, 0.9545454545454546, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()).setUser4(String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension())).setUser5(COMMA_JOIN.join(query.getIntervals())).setUser6(String.valueOf(query.hasFilters())).setUser7(String.format("% d aggs" query.getAggregatorSpecs().size())),METHOD_INVOCATION, line no: 133, 0.9545454545454546, 0.9545454545454546, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()).setUser4(String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension())).setUser5(COMMA_JOIN.join(query.getIntervals())).setUser6(String.valueOf(query.hasFilters())),METHOD_INVOCATION, line no: 133, 0.9545454545454546, 0.9545454545454546, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()).setUser4(String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension())).setUser5(COMMA_JOIN.join(query.getIntervals())),METHOD_INVOCATION, line no: 133, 0.9545454545454546, 0.9545454545454546, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()).setUser4(String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension())),METHOD_INVOCATION, line no: 133, 0.9545454545454546, 0.9545454545454546, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()),METHOD_INVOCATION, line no: 133, 0.9545454545454546, 0.9545454545454546, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,new ServiceMetricEvent.Builder(),CLASS_INSTANCE_CREATION, line no: 133, 0.9545454545454546, 0.9545454545454546, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,ServiceMetricEvent.Builder,QUALIFIED_NAME, line no: 133, 0.9545454545454546, 0.9545454545454546, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,setUser2,SIMPLE_NAME, line no: 134, 0.9545454545454546, 0.9545454545454546, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,query.getDataSource().toString(),METHOD_INVOCATION, line no: 134, 0.9545454545454546, 0.9545454545454546, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,query.getDataSource(),METHOD_INVOCATION, line no: 134, 0.9545454545454546, 0.9545454545454546, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,getDataSource,SIMPLE_NAME, line no: 134, 0.9545454545454546, 0.9545454545454546, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,toString,SIMPLE_NAME, line no: 134, 0.9545454545454546, 0.9545454545454546, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,setUser4,SIMPLE_NAME, line no: 135, 0.9545454545454546, 0.9545454545454546, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension()),METHOD_INVOCATION, line no: 135, 0.9545454545454546, 0.9545454545454546, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,format,SIMPLE_NAME, line no: 135, 0.9545454545454546, 0.9545454545454546, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,"topN/%s/%s",STRING_LITERAL, line no: 135, 0.9545454545454546, 0.9545454545454546, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,query.getDimensionSpec().getDimension(),METHOD_INVOCATION, line no: 135, 0.9545454545454546, 0.9545454545454546, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,getDimension,SIMPLE_NAME, line no: 135, 0.9545454545454546, 0.9545454545454546, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,setUser5,SIMPLE_NAME, line no: 136, 0.9545454545454546, 0.9545454545454546, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,COMMA_JOIN.join(query.getIntervals()),METHOD_INVOCATION, line no: 136, 0.9545454545454546, 0.9545454545454546, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,join,SIMPLE_NAME, line no: 136, 0.9545454545454546, 0.9545454545454546, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,setUser6,SIMPLE_NAME, line no: 137, 0.9545454545454546, 0.9545454545454546, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,String.valueOf(query.hasFilters()),METHOD_INVOCATION, line no: 137, 0.9545454545454546, 0.9545454545454546, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,valueOf,SIMPLE_NAME, line no: 137, 0.9545454545454546, 0.9545454545454546, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,query.hasFilters(),METHOD_INVOCATION, line no: 137, 0.9545454545454546, 0.9545454545454546, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,hasFilters,SIMPLE_NAME, line no: 137, 0.9545454545454546, 0.9545454545454546, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,setUser7,SIMPLE_NAME, line no: 138, 0.9545454545454546, 0.9545454545454546, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,String.format("% d aggs" query.getAggregatorSpecs().size()),METHOD_INVOCATION, line no: 138, 0.9545454545454546, 0.9545454545454546, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,"% d aggs",STRING_LITERAL, line no: 138, 0.9545454545454546, 0.9545454545454546, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,query.getAggregatorSpecs().size(),METHOD_INVOCATION, line no: 138, 0.9545454545454546, 0.9545454545454546, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,setUser9,SIMPLE_NAME, line no: 139, 0.9545454545454546, 0.9545454545454546, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,Minutes.minutes(numMinutes).toString(),METHOD_INVOCATION, line no: 139, 0.9545454545454546, 0.9545454545454546, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,Minutes.minutes(numMinutes),METHOD_INVOCATION, line no: 139, 0.9545454545454546, 0.9545454545454546, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,minutes,SIMPLE_NAME, line no: 139, 0.9545454545454546, 0.9545454545454546, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,fn,SIMPLE_NAME, line no: 144, 0.9545454545454546, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 164, 0.9545454545454546, 0.9545454545454546, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,calculatedPostAgg != null,INFIX_EXPRESSION, line no: 168, 0.9545454545454546, 0.9545454545454546, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,null,NULL_LITERAL, line no: 168, 0.9545454545454546, 0.9545454545454546, 0.0
values,SIMPLE_NAME, line no: 213,ServiceMetricEvent,SIMPLE_NAME, line no: 36, 0.9523809523809523, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,Interval,SIMPLE_NAME, line no: 54, 0.9523809523809523, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,Minutes,SIMPLE_NAME, line no: 55, 0.9523809523809523, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,COMMA_JOIN,SIMPLE_NAME, line no: 68, 0.9523809523809523, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,query.getThreshold(),METHOD_INVOCATION, line no: 111, 0.9523809523809523, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,getThreshold,SIMPLE_NAME, line no: 111, 0.9523809523809523, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,Builder,SIMPLE_NAME, line no: 126, 0.9523809523809523, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,numMinutes,SIMPLE_NAME, line no: 128, 0.9523809523809523, 0.9523809523809523, 0.0
values,SIMPLE_NAME, line no: 213,0,NUMBER_LITERAL, line no: 128, 0.9523809523809523, 0.9523809523809523, 0.0
values,SIMPLE_NAME, line no: 213,interval,SIMPLE_NAME, line no: 129, 0.9523809523809523, 0.9523809523809523, 0.0
values,SIMPLE_NAME, line no: 213,query.getIntervals(),METHOD_INVOCATION, line no: 129, 0.9523809523809523, 0.9523809523809523, 0.0
values,SIMPLE_NAME, line no: 213,getIntervals,SIMPLE_NAME, line no: 129, 0.9523809523809523, 0.9523809523809523, 0.0
values,SIMPLE_NAME, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()).setUser4(String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension())).setUser5(COMMA_JOIN.join(query.getIntervals())).setUser6(String.valueOf(query.hasFilters())).setUser7(String.format("% d aggs" query.getAggregatorSpecs().size())).setUser9(Minutes.minutes(numMinutes).toString()),METHOD_INVOCATION, line no: 133, 0.9523809523809523, 0.9523809523809523, 0.0
values,SIMPLE_NAME, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()).setUser4(String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension())).setUser5(COMMA_JOIN.join(query.getIntervals())).setUser6(String.valueOf(query.hasFilters())).setUser7(String.format("% d aggs" query.getAggregatorSpecs().size())),METHOD_INVOCATION, line no: 133, 0.9523809523809523, 0.9523809523809523, 0.0
values,SIMPLE_NAME, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()).setUser4(String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension())).setUser5(COMMA_JOIN.join(query.getIntervals())).setUser6(String.valueOf(query.hasFilters())),METHOD_INVOCATION, line no: 133, 0.9523809523809523, 0.9523809523809523, 0.0
values,SIMPLE_NAME, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()).setUser4(String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension())).setUser5(COMMA_JOIN.join(query.getIntervals())),METHOD_INVOCATION, line no: 133, 0.9523809523809523, 0.9523809523809523, 0.0
values,SIMPLE_NAME, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()).setUser4(String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension())),METHOD_INVOCATION, line no: 133, 0.9523809523809523, 0.9523809523809523, 0.0
values,SIMPLE_NAME, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()),METHOD_INVOCATION, line no: 133, 0.9523809523809523, 0.9523809523809523, 0.0
values,SIMPLE_NAME, line no: 213,new ServiceMetricEvent.Builder(),CLASS_INSTANCE_CREATION, line no: 133, 0.9523809523809523, 0.9523809523809523, 0.0
values,SIMPLE_NAME, line no: 213,ServiceMetricEvent.Builder,QUALIFIED_NAME, line no: 133, 0.9523809523809523, 0.9523809523809523, 0.0
values,SIMPLE_NAME, line no: 213,setUser2,SIMPLE_NAME, line no: 134, 0.9523809523809523, 0.9523809523809523, 0.0
values,SIMPLE_NAME, line no: 213,query.getDataSource().toString(),METHOD_INVOCATION, line no: 134, 0.9523809523809523, 0.9523809523809523, 0.0
values,SIMPLE_NAME, line no: 213,query.getDataSource(),METHOD_INVOCATION, line no: 134, 0.9523809523809523, 0.9523809523809523, 0.0
values,SIMPLE_NAME, line no: 213,getDataSource,SIMPLE_NAME, line no: 134, 0.9523809523809523, 0.9523809523809523, 0.0
values,SIMPLE_NAME, line no: 213,toString,SIMPLE_NAME, line no: 134, 0.9523809523809523, 0.9523809523809523, 0.0
values,SIMPLE_NAME, line no: 213,setUser4,SIMPLE_NAME, line no: 135, 0.9523809523809523, 0.9523809523809523, 0.0
values,SIMPLE_NAME, line no: 213,String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension()),METHOD_INVOCATION, line no: 135, 0.9523809523809523, 0.9523809523809523, 0.0
values,SIMPLE_NAME, line no: 213,format,SIMPLE_NAME, line no: 135, 0.9523809523809523, 0.9523809523809523, 0.0
values,SIMPLE_NAME, line no: 213,"topN/%s/%s",STRING_LITERAL, line no: 135, 0.9523809523809523, 0.9523809523809523, 0.0
values,SIMPLE_NAME, line no: 213,query.getDimensionSpec().getDimension(),METHOD_INVOCATION, line no: 135, 0.9523809523809523, 0.9523809523809523, 0.0
values,SIMPLE_NAME, line no: 213,getDimension,SIMPLE_NAME, line no: 135, 0.9523809523809523, 0.9523809523809523, 0.0
values,SIMPLE_NAME, line no: 213,setUser5,SIMPLE_NAME, line no: 136, 0.9523809523809523, 0.9523809523809523, 0.0
values,SIMPLE_NAME, line no: 213,COMMA_JOIN.join(query.getIntervals()),METHOD_INVOCATION, line no: 136, 0.9523809523809523, 0.9523809523809523, 0.0
values,SIMPLE_NAME, line no: 213,join,SIMPLE_NAME, line no: 136, 0.9523809523809523, 0.9523809523809523, 0.0
values,SIMPLE_NAME, line no: 213,setUser6,SIMPLE_NAME, line no: 137, 0.9523809523809523, 0.9523809523809523, 0.0
values,SIMPLE_NAME, line no: 213,String.valueOf(query.hasFilters()),METHOD_INVOCATION, line no: 137, 0.9523809523809523, 0.9523809523809523, 0.0
values,SIMPLE_NAME, line no: 213,valueOf,SIMPLE_NAME, line no: 137, 0.9523809523809523, 0.9523809523809523, 0.0
values,SIMPLE_NAME, line no: 213,query.hasFilters(),METHOD_INVOCATION, line no: 137, 0.9523809523809523, 0.9523809523809523, 0.0
values,SIMPLE_NAME, line no: 213,hasFilters,SIMPLE_NAME, line no: 137, 0.9523809523809523, 0.9523809523809523, 0.0
values,SIMPLE_NAME, line no: 213,setUser7,SIMPLE_NAME, line no: 138, 0.9523809523809523, 0.9523809523809523, 0.0
values,SIMPLE_NAME, line no: 213,String.format("% d aggs" query.getAggregatorSpecs().size()),METHOD_INVOCATION, line no: 138, 0.9523809523809523, 0.9523809523809523, 0.0
values,SIMPLE_NAME, line no: 213,"% d aggs",STRING_LITERAL, line no: 138, 0.9523809523809523, 0.9523809523809523, 0.0
values,SIMPLE_NAME, line no: 213,query.getAggregatorSpecs().size(),METHOD_INVOCATION, line no: 138, 0.9523809523809523, 0.9523809523809523, 0.0
values,SIMPLE_NAME, line no: 213,setUser9,SIMPLE_NAME, line no: 139, 0.9523809523809523, 0.9523809523809523, 0.0
values,SIMPLE_NAME, line no: 213,Minutes.minutes(numMinutes).toString(),METHOD_INVOCATION, line no: 139, 0.9523809523809523, 0.9523809523809523, 0.0
values,SIMPLE_NAME, line no: 213,Minutes.minutes(numMinutes),METHOD_INVOCATION, line no: 139, 0.9523809523809523, 0.9523809523809523, 0.0
values,SIMPLE_NAME, line no: 213,minutes,SIMPLE_NAME, line no: 139, 0.9523809523809523, 0.9523809523809523, 0.0
values,SIMPLE_NAME, line no: 213,values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 164, 0.9523809523809523, 0.9523809523809523, 0.0
values,SIMPLE_NAME, line no: 213,agg.getName(),METHOD_INVOCATION, line no: 164, 0.9523809523809523, 0.9523809523809523, 0.0
values,SIMPLE_NAME, line no: 213,fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 164, 0.9523809523809523, 0.9523809523809523, 0.0
values,SIMPLE_NAME, line no: 213,input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 164, 0.9523809523809523, 0.9523809523809523, 0.0
values,SIMPLE_NAME, line no: 213,factory,SIMPLE_NAME, line no: 346, 0.9523809523809523, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,vals.put(factory.getName() factory.deserialize(resultIter.next())),METHOD_INVOCATION, line no: 347, 0.9523809523809523, 0.9523809523809523, 0.0
values,SIMPLE_NAME, line no: 213,factory.getName(),METHOD_INVOCATION, line no: 347, 0.9523809523809523, 0.9523809523809523, 0.0
values,SIMPLE_NAME, line no: 213,factory.deserialize(resultIter.next()),METHOD_INVOCATION, line no: 347, 0.9523809523809523, 0.9523809523809523, 0.0
values,SIMPLE_NAME, line no: 213,deserialize,SIMPLE_NAME, line no: 347, 0.9523809523809523, 0.9523809523809523, 0.0
put,SIMPLE_NAME, line no: 213,ServiceMetricEvent,SIMPLE_NAME, line no: 36, 0.9523809523809523, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,Interval,SIMPLE_NAME, line no: 54, 0.9523809523809523, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,Minutes,SIMPLE_NAME, line no: 55, 0.9523809523809523, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,COMMA_JOIN,SIMPLE_NAME, line no: 68, 0.9523809523809523, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,query.getThreshold(),METHOD_INVOCATION, line no: 111, 0.9523809523809523, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,getThreshold,SIMPLE_NAME, line no: 111, 0.9523809523809523, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,Builder,SIMPLE_NAME, line no: 126, 0.9523809523809523, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,numMinutes,SIMPLE_NAME, line no: 128, 0.9523809523809523, 0.9523809523809523, 0.0
put,SIMPLE_NAME, line no: 213,0,NUMBER_LITERAL, line no: 128, 0.9523809523809523, 0.9523809523809523, 0.0
put,SIMPLE_NAME, line no: 213,interval,SIMPLE_NAME, line no: 129, 0.9523809523809523, 0.9523809523809523, 0.0
put,SIMPLE_NAME, line no: 213,query.getIntervals(),METHOD_INVOCATION, line no: 129, 0.9523809523809523, 0.9523809523809523, 0.0
put,SIMPLE_NAME, line no: 213,getIntervals,SIMPLE_NAME, line no: 129, 0.9523809523809523, 0.9523809523809523, 0.0
put,SIMPLE_NAME, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()).setUser4(String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension())).setUser5(COMMA_JOIN.join(query.getIntervals())).setUser6(String.valueOf(query.hasFilters())).setUser7(String.format("% d aggs" query.getAggregatorSpecs().size())).setUser9(Minutes.minutes(numMinutes).toString()),METHOD_INVOCATION, line no: 133, 0.9523809523809523, 0.9523809523809523, 0.0
put,SIMPLE_NAME, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()).setUser4(String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension())).setUser5(COMMA_JOIN.join(query.getIntervals())).setUser6(String.valueOf(query.hasFilters())).setUser7(String.format("% d aggs" query.getAggregatorSpecs().size())),METHOD_INVOCATION, line no: 133, 0.9523809523809523, 0.9523809523809523, 0.0
put,SIMPLE_NAME, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()).setUser4(String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension())).setUser5(COMMA_JOIN.join(query.getIntervals())).setUser6(String.valueOf(query.hasFilters())),METHOD_INVOCATION, line no: 133, 0.9523809523809523, 0.9523809523809523, 0.0
put,SIMPLE_NAME, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()).setUser4(String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension())).setUser5(COMMA_JOIN.join(query.getIntervals())),METHOD_INVOCATION, line no: 133, 0.9523809523809523, 0.9523809523809523, 0.0
put,SIMPLE_NAME, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()).setUser4(String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension())),METHOD_INVOCATION, line no: 133, 0.9523809523809523, 0.9523809523809523, 0.0
put,SIMPLE_NAME, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()),METHOD_INVOCATION, line no: 133, 0.9523809523809523, 0.9523809523809523, 0.0
put,SIMPLE_NAME, line no: 213,new ServiceMetricEvent.Builder(),CLASS_INSTANCE_CREATION, line no: 133, 0.9523809523809523, 0.9523809523809523, 0.0
put,SIMPLE_NAME, line no: 213,ServiceMetricEvent.Builder,QUALIFIED_NAME, line no: 133, 0.9523809523809523, 0.9523809523809523, 0.0
put,SIMPLE_NAME, line no: 213,setUser2,SIMPLE_NAME, line no: 134, 0.9523809523809523, 0.9523809523809523, 0.0
put,SIMPLE_NAME, line no: 213,query.getDataSource().toString(),METHOD_INVOCATION, line no: 134, 0.9523809523809523, 0.9523809523809523, 0.0
put,SIMPLE_NAME, line no: 213,query.getDataSource(),METHOD_INVOCATION, line no: 134, 0.9523809523809523, 0.9523809523809523, 0.0
put,SIMPLE_NAME, line no: 213,getDataSource,SIMPLE_NAME, line no: 134, 0.9523809523809523, 0.9523809523809523, 0.0
put,SIMPLE_NAME, line no: 213,toString,SIMPLE_NAME, line no: 134, 0.9523809523809523, 0.9523809523809523, 0.0
put,SIMPLE_NAME, line no: 213,setUser4,SIMPLE_NAME, line no: 135, 0.9523809523809523, 0.9523809523809523, 0.0
put,SIMPLE_NAME, line no: 213,String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension()),METHOD_INVOCATION, line no: 135, 0.9523809523809523, 0.9523809523809523, 0.0
put,SIMPLE_NAME, line no: 213,format,SIMPLE_NAME, line no: 135, 0.9523809523809523, 0.9523809523809523, 0.0
put,SIMPLE_NAME, line no: 213,"topN/%s/%s",STRING_LITERAL, line no: 135, 0.9523809523809523, 0.9523809523809523, 0.0
put,SIMPLE_NAME, line no: 213,query.getDimensionSpec().getDimension(),METHOD_INVOCATION, line no: 135, 0.9523809523809523, 0.9523809523809523, 0.0
put,SIMPLE_NAME, line no: 213,getDimension,SIMPLE_NAME, line no: 135, 0.9523809523809523, 0.9523809523809523, 0.0
put,SIMPLE_NAME, line no: 213,setUser5,SIMPLE_NAME, line no: 136, 0.9523809523809523, 0.9523809523809523, 0.0
put,SIMPLE_NAME, line no: 213,COMMA_JOIN.join(query.getIntervals()),METHOD_INVOCATION, line no: 136, 0.9523809523809523, 0.9523809523809523, 0.0
put,SIMPLE_NAME, line no: 213,join,SIMPLE_NAME, line no: 136, 0.9523809523809523, 0.9523809523809523, 0.0
put,SIMPLE_NAME, line no: 213,setUser6,SIMPLE_NAME, line no: 137, 0.9523809523809523, 0.9523809523809523, 0.0
put,SIMPLE_NAME, line no: 213,String.valueOf(query.hasFilters()),METHOD_INVOCATION, line no: 137, 0.9523809523809523, 0.9523809523809523, 0.0
put,SIMPLE_NAME, line no: 213,valueOf,SIMPLE_NAME, line no: 137, 0.9523809523809523, 0.9523809523809523, 0.0
put,SIMPLE_NAME, line no: 213,query.hasFilters(),METHOD_INVOCATION, line no: 137, 0.9523809523809523, 0.9523809523809523, 0.0
put,SIMPLE_NAME, line no: 213,hasFilters,SIMPLE_NAME, line no: 137, 0.9523809523809523, 0.9523809523809523, 0.0
put,SIMPLE_NAME, line no: 213,setUser7,SIMPLE_NAME, line no: 138, 0.9523809523809523, 0.9523809523809523, 0.0
put,SIMPLE_NAME, line no: 213,String.format("% d aggs" query.getAggregatorSpecs().size()),METHOD_INVOCATION, line no: 138, 0.9523809523809523, 0.9523809523809523, 0.0
put,SIMPLE_NAME, line no: 213,"% d aggs",STRING_LITERAL, line no: 138, 0.9523809523809523, 0.9523809523809523, 0.0
put,SIMPLE_NAME, line no: 213,query.getAggregatorSpecs().size(),METHOD_INVOCATION, line no: 138, 0.9523809523809523, 0.9523809523809523, 0.0
put,SIMPLE_NAME, line no: 213,setUser9,SIMPLE_NAME, line no: 139, 0.9523809523809523, 0.9523809523809523, 0.0
put,SIMPLE_NAME, line no: 213,Minutes.minutes(numMinutes).toString(),METHOD_INVOCATION, line no: 139, 0.9523809523809523, 0.9523809523809523, 0.0
put,SIMPLE_NAME, line no: 213,Minutes.minutes(numMinutes),METHOD_INVOCATION, line no: 139, 0.9523809523809523, 0.9523809523809523, 0.0
put,SIMPLE_NAME, line no: 213,minutes,SIMPLE_NAME, line no: 139, 0.9523809523809523, 0.9523809523809523, 0.0
put,SIMPLE_NAME, line no: 213,agg.getName(),METHOD_INVOCATION, line no: 164, 0.9523809523809523, 0.9523809523809523, 0.0
put,SIMPLE_NAME, line no: 213,factory,SIMPLE_NAME, line no: 346, 0.9523809523809523, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,factory.getName(),METHOD_INVOCATION, line no: 347, 0.9523809523809523, 0.9523809523809523, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,ServiceMetricEvent,SIMPLE_NAME, line no: 36, 0.9523809523809523, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,Interval,SIMPLE_NAME, line no: 54, 0.9523809523809523, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,Minutes,SIMPLE_NAME, line no: 55, 0.9523809523809523, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,COMMA_JOIN,SIMPLE_NAME, line no: 68, 0.9523809523809523, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,query.getThreshold(),METHOD_INVOCATION, line no: 111, 0.9523809523809523, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,getThreshold,SIMPLE_NAME, line no: 111, 0.9523809523809523, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,Builder,SIMPLE_NAME, line no: 126, 0.9523809523809523, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,numMinutes,SIMPLE_NAME, line no: 128, 0.9523809523809523, 0.9523809523809523, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,0,NUMBER_LITERAL, line no: 128, 0.9523809523809523, 0.9523809523809523, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,interval,SIMPLE_NAME, line no: 129, 0.9523809523809523, 0.9523809523809523, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,query.getIntervals(),METHOD_INVOCATION, line no: 129, 0.9523809523809523, 0.9523809523809523, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,getIntervals,SIMPLE_NAME, line no: 129, 0.9523809523809523, 0.9523809523809523, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()).setUser4(String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension())).setUser5(COMMA_JOIN.join(query.getIntervals())).setUser6(String.valueOf(query.hasFilters())).setUser7(String.format("% d aggs" query.getAggregatorSpecs().size())).setUser9(Minutes.minutes(numMinutes).toString()),METHOD_INVOCATION, line no: 133, 0.9523809523809523, 0.9523809523809523, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()).setUser4(String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension())).setUser5(COMMA_JOIN.join(query.getIntervals())).setUser6(String.valueOf(query.hasFilters())).setUser7(String.format("% d aggs" query.getAggregatorSpecs().size())),METHOD_INVOCATION, line no: 133, 0.9523809523809523, 0.9523809523809523, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()).setUser4(String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension())).setUser5(COMMA_JOIN.join(query.getIntervals())).setUser6(String.valueOf(query.hasFilters())),METHOD_INVOCATION, line no: 133, 0.9523809523809523, 0.9523809523809523, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()).setUser4(String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension())).setUser5(COMMA_JOIN.join(query.getIntervals())),METHOD_INVOCATION, line no: 133, 0.9523809523809523, 0.9523809523809523, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()).setUser4(String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension())),METHOD_INVOCATION, line no: 133, 0.9523809523809523, 0.9523809523809523, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()),METHOD_INVOCATION, line no: 133, 0.9523809523809523, 0.9523809523809523, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,new ServiceMetricEvent.Builder(),CLASS_INSTANCE_CREATION, line no: 133, 0.9523809523809523, 0.9523809523809523, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,ServiceMetricEvent.Builder,QUALIFIED_NAME, line no: 133, 0.9523809523809523, 0.9523809523809523, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,setUser2,SIMPLE_NAME, line no: 134, 0.9523809523809523, 0.9523809523809523, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,query.getDataSource().toString(),METHOD_INVOCATION, line no: 134, 0.9523809523809523, 0.9523809523809523, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,query.getDataSource(),METHOD_INVOCATION, line no: 134, 0.9523809523809523, 0.9523809523809523, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,getDataSource,SIMPLE_NAME, line no: 134, 0.9523809523809523, 0.9523809523809523, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,setUser4,SIMPLE_NAME, line no: 135, 0.9523809523809523, 0.9523809523809523, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension()),METHOD_INVOCATION, line no: 135, 0.9523809523809523, 0.9523809523809523, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,"topN/%s/%s",STRING_LITERAL, line no: 135, 0.9523809523809523, 0.9523809523809523, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,query.getDimensionSpec().getDimension(),METHOD_INVOCATION, line no: 135, 0.9523809523809523, 0.9523809523809523, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,setUser5,SIMPLE_NAME, line no: 136, 0.9523809523809523, 0.9523809523809523, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,COMMA_JOIN.join(query.getIntervals()),METHOD_INVOCATION, line no: 136, 0.9523809523809523, 0.9523809523809523, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,join,SIMPLE_NAME, line no: 136, 0.9523809523809523, 0.9523809523809523, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,setUser6,SIMPLE_NAME, line no: 137, 0.9523809523809523, 0.9523809523809523, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,String.valueOf(query.hasFilters()),METHOD_INVOCATION, line no: 137, 0.9523809523809523, 0.9523809523809523, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,query.hasFilters(),METHOD_INVOCATION, line no: 137, 0.9523809523809523, 0.9523809523809523, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,hasFilters,SIMPLE_NAME, line no: 137, 0.9523809523809523, 0.9523809523809523, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,setUser7,SIMPLE_NAME, line no: 138, 0.9523809523809523, 0.9523809523809523, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,String.format("% d aggs" query.getAggregatorSpecs().size()),METHOD_INVOCATION, line no: 138, 0.9523809523809523, 0.9523809523809523, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,"% d aggs",STRING_LITERAL, line no: 138, 0.9523809523809523, 0.9523809523809523, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,query.getAggregatorSpecs().size(),METHOD_INVOCATION, line no: 138, 0.9523809523809523, 0.9523809523809523, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,setUser9,SIMPLE_NAME, line no: 139, 0.9523809523809523, 0.9523809523809523, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,Minutes.minutes(numMinutes).toString(),METHOD_INVOCATION, line no: 139, 0.9523809523809523, 0.9523809523809523, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,Minutes.minutes(numMinutes),METHOD_INVOCATION, line no: 139, 0.9523809523809523, 0.9523809523809523, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,minutes,SIMPLE_NAME, line no: 139, 0.9523809523809523, 0.9523809523809523, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 164, 0.9523809523809523, 0.9523809523809523, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,factory,SIMPLE_NAME, line no: 346, 0.9523809523809523, 0.8095238095238095, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,factory.getName(),METHOD_INVOCATION, line no: 347, 0.9523809523809523, 0.9523809523809523, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,factory.deserialize(resultIter.next()),METHOD_INVOCATION, line no: 347, 0.9523809523809523, 0.9523809523809523, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,deserialize,SIMPLE_NAME, line no: 347, 0.9523809523809523, 0.9523809523809523, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,ServiceMetricEvent,SIMPLE_NAME, line no: 36, 0.9523809523809523, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,Interval,SIMPLE_NAME, line no: 54, 0.9523809523809523, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,Minutes,SIMPLE_NAME, line no: 55, 0.9523809523809523, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,COMMA_JOIN,SIMPLE_NAME, line no: 68, 0.9523809523809523, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,query.getThreshold(),METHOD_INVOCATION, line no: 111, 0.9523809523809523, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,getThreshold,SIMPLE_NAME, line no: 111, 0.9523809523809523, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,Builder,SIMPLE_NAME, line no: 126, 0.9523809523809523, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,numMinutes,SIMPLE_NAME, line no: 128, 0.9523809523809523, 0.9523809523809523, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,0,NUMBER_LITERAL, line no: 128, 0.9523809523809523, 0.9523809523809523, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,interval,SIMPLE_NAME, line no: 129, 0.9523809523809523, 0.9523809523809523, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,query.getIntervals(),METHOD_INVOCATION, line no: 129, 0.9523809523809523, 0.9523809523809523, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,getIntervals,SIMPLE_NAME, line no: 129, 0.9523809523809523, 0.9523809523809523, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()).setUser4(String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension())).setUser5(COMMA_JOIN.join(query.getIntervals())).setUser6(String.valueOf(query.hasFilters())).setUser7(String.format("% d aggs" query.getAggregatorSpecs().size())).setUser9(Minutes.minutes(numMinutes).toString()),METHOD_INVOCATION, line no: 133, 0.9523809523809523, 0.9523809523809523, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()).setUser4(String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension())).setUser5(COMMA_JOIN.join(query.getIntervals())).setUser6(String.valueOf(query.hasFilters())).setUser7(String.format("% d aggs" query.getAggregatorSpecs().size())),METHOD_INVOCATION, line no: 133, 0.9523809523809523, 0.9523809523809523, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()).setUser4(String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension())).setUser5(COMMA_JOIN.join(query.getIntervals())).setUser6(String.valueOf(query.hasFilters())),METHOD_INVOCATION, line no: 133, 0.9523809523809523, 0.9523809523809523, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()).setUser4(String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension())).setUser5(COMMA_JOIN.join(query.getIntervals())),METHOD_INVOCATION, line no: 133, 0.9523809523809523, 0.9523809523809523, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()).setUser4(String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension())),METHOD_INVOCATION, line no: 133, 0.9523809523809523, 0.9523809523809523, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()),METHOD_INVOCATION, line no: 133, 0.9523809523809523, 0.9523809523809523, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,new ServiceMetricEvent.Builder(),CLASS_INSTANCE_CREATION, line no: 133, 0.9523809523809523, 0.9523809523809523, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,ServiceMetricEvent.Builder,QUALIFIED_NAME, line no: 133, 0.9523809523809523, 0.9523809523809523, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,setUser2,SIMPLE_NAME, line no: 134, 0.9523809523809523, 0.9523809523809523, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,query.getDataSource().toString(),METHOD_INVOCATION, line no: 134, 0.9523809523809523, 0.9523809523809523, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,query.getDataSource(),METHOD_INVOCATION, line no: 134, 0.9523809523809523, 0.9523809523809523, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,getDataSource,SIMPLE_NAME, line no: 134, 0.9523809523809523, 0.9523809523809523, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,toString,SIMPLE_NAME, line no: 134, 0.9523809523809523, 0.9523809523809523, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,setUser4,SIMPLE_NAME, line no: 135, 0.9523809523809523, 0.9523809523809523, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension()),METHOD_INVOCATION, line no: 135, 0.9523809523809523, 0.9523809523809523, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,format,SIMPLE_NAME, line no: 135, 0.9523809523809523, 0.9523809523809523, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,"topN/%s/%s",STRING_LITERAL, line no: 135, 0.9523809523809523, 0.9523809523809523, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,query.getDimensionSpec().getDimension(),METHOD_INVOCATION, line no: 135, 0.9523809523809523, 0.9523809523809523, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,getDimension,SIMPLE_NAME, line no: 135, 0.9523809523809523, 0.9523809523809523, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,setUser5,SIMPLE_NAME, line no: 136, 0.9523809523809523, 0.9523809523809523, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,COMMA_JOIN.join(query.getIntervals()),METHOD_INVOCATION, line no: 136, 0.9523809523809523, 0.9523809523809523, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,join,SIMPLE_NAME, line no: 136, 0.9523809523809523, 0.9523809523809523, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,setUser6,SIMPLE_NAME, line no: 137, 0.9523809523809523, 0.9523809523809523, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,String.valueOf(query.hasFilters()),METHOD_INVOCATION, line no: 137, 0.9523809523809523, 0.9523809523809523, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,valueOf,SIMPLE_NAME, line no: 137, 0.9523809523809523, 0.9523809523809523, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,query.hasFilters(),METHOD_INVOCATION, line no: 137, 0.9523809523809523, 0.9523809523809523, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,hasFilters,SIMPLE_NAME, line no: 137, 0.9523809523809523, 0.9523809523809523, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,setUser7,SIMPLE_NAME, line no: 138, 0.9523809523809523, 0.9523809523809523, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,String.format("% d aggs" query.getAggregatorSpecs().size()),METHOD_INVOCATION, line no: 138, 0.9523809523809523, 0.9523809523809523, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,"% d aggs",STRING_LITERAL, line no: 138, 0.9523809523809523, 0.9523809523809523, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,query.getAggregatorSpecs().size(),METHOD_INVOCATION, line no: 138, 0.9523809523809523, 0.9523809523809523, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,setUser9,SIMPLE_NAME, line no: 139, 0.9523809523809523, 0.9523809523809523, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,Minutes.minutes(numMinutes).toString(),METHOD_INVOCATION, line no: 139, 0.9523809523809523, 0.9523809523809523, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,Minutes.minutes(numMinutes),METHOD_INVOCATION, line no: 139, 0.9523809523809523, 0.9523809523809523, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,minutes,SIMPLE_NAME, line no: 139, 0.9523809523809523, 0.9523809523809523, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 164, 0.9523809523809523, 0.9523809523809523, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,factory,SIMPLE_NAME, line no: 346, 0.9523809523809523, 0.8095238095238095, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,factory.getName(),METHOD_INVOCATION, line no: 347, 0.9523809523809523, 0.9523809523809523, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,factory.deserialize(resultIter.next()),METHOD_INVOCATION, line no: 347, 0.9523809523809523, 0.9523809523809523, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,ServiceMetricEvent,SIMPLE_NAME, line no: 36, 0.95, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,Interval,SIMPLE_NAME, line no: 54, 0.95, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,Minutes,SIMPLE_NAME, line no: 55, 0.95, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,COMMA_JOIN,SIMPLE_NAME, line no: 68, 0.95, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,query.getThreshold(),METHOD_INVOCATION, line no: 111, 0.95, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,getThreshold,SIMPLE_NAME, line no: 111, 0.95, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,Builder,SIMPLE_NAME, line no: 126, 0.95, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,numMinutes,SIMPLE_NAME, line no: 128, 0.95, 0.95, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,0,NUMBER_LITERAL, line no: 128, 0.95, 0.95, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,interval,SIMPLE_NAME, line no: 129, 0.95, 0.95, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,query.getIntervals(),METHOD_INVOCATION, line no: 129, 0.95, 0.95, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,getIntervals,SIMPLE_NAME, line no: 129, 0.95, 0.95, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()).setUser4(String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension())).setUser5(COMMA_JOIN.join(query.getIntervals())).setUser6(String.valueOf(query.hasFilters())).setUser7(String.format("% d aggs" query.getAggregatorSpecs().size())).setUser9(Minutes.minutes(numMinutes).toString()),METHOD_INVOCATION, line no: 133, 0.95, 0.95, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()).setUser4(String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension())).setUser5(COMMA_JOIN.join(query.getIntervals())).setUser6(String.valueOf(query.hasFilters())).setUser7(String.format("% d aggs" query.getAggregatorSpecs().size())),METHOD_INVOCATION, line no: 133, 0.95, 0.95, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()).setUser4(String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension())).setUser5(COMMA_JOIN.join(query.getIntervals())).setUser6(String.valueOf(query.hasFilters())),METHOD_INVOCATION, line no: 133, 0.95, 0.95, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()).setUser4(String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension())).setUser5(COMMA_JOIN.join(query.getIntervals())),METHOD_INVOCATION, line no: 133, 0.95, 0.95, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()).setUser4(String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension())),METHOD_INVOCATION, line no: 133, 0.95, 0.95, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,new ServiceMetricEvent.Builder().setUser2(query.getDataSource().toString()),METHOD_INVOCATION, line no: 133, 0.95, 0.95, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,new ServiceMetricEvent.Builder(),CLASS_INSTANCE_CREATION, line no: 133, 0.95, 0.95, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,ServiceMetricEvent.Builder,QUALIFIED_NAME, line no: 133, 0.95, 0.95, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,setUser2,SIMPLE_NAME, line no: 134, 0.95, 0.95, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,query.getDataSource().toString(),METHOD_INVOCATION, line no: 134, 0.95, 0.95, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,query.getDataSource(),METHOD_INVOCATION, line no: 134, 0.95, 0.95, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,getDataSource,SIMPLE_NAME, line no: 134, 0.95, 0.95, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,toString,SIMPLE_NAME, line no: 134, 0.95, 0.95, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,setUser4,SIMPLE_NAME, line no: 135, 0.95, 0.95, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,String.format("topN/%s/%s" query.getThreshold() query.getDimensionSpec().getDimension()),METHOD_INVOCATION, line no: 135, 0.95, 0.95, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,format,SIMPLE_NAME, line no: 135, 0.95, 0.95, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,"topN/%s/%s",STRING_LITERAL, line no: 135, 0.95, 0.95, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,query.getDimensionSpec().getDimension(),METHOD_INVOCATION, line no: 135, 0.95, 0.95, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,getDimension,SIMPLE_NAME, line no: 135, 0.95, 0.95, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,setUser5,SIMPLE_NAME, line no: 136, 0.95, 0.95, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,COMMA_JOIN.join(query.getIntervals()),METHOD_INVOCATION, line no: 136, 0.95, 0.95, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,join,SIMPLE_NAME, line no: 136, 0.95, 0.95, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,setUser6,SIMPLE_NAME, line no: 137, 0.95, 0.95, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,String.valueOf(query.hasFilters()),METHOD_INVOCATION, line no: 137, 0.95, 0.95, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,valueOf,SIMPLE_NAME, line no: 137, 0.95, 0.95, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,query.hasFilters(),METHOD_INVOCATION, line no: 137, 0.95, 0.95, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,hasFilters,SIMPLE_NAME, line no: 137, 0.95, 0.95, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,setUser7,SIMPLE_NAME, line no: 138, 0.95, 0.95, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,String.format("% d aggs" query.getAggregatorSpecs().size()),METHOD_INVOCATION, line no: 138, 0.95, 0.95, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,"% d aggs",STRING_LITERAL, line no: 138, 0.95, 0.95, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,query.getAggregatorSpecs().size(),METHOD_INVOCATION, line no: 138, 0.95, 0.95, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,setUser9,SIMPLE_NAME, line no: 139, 0.95, 0.95, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,Minutes.minutes(numMinutes).toString(),METHOD_INVOCATION, line no: 139, 0.95, 0.95, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,Minutes.minutes(numMinutes),METHOD_INVOCATION, line no: 139, 0.95, 0.95, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,minutes,SIMPLE_NAME, line no: 139, 0.95, 0.95, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,factory,SIMPLE_NAME, line no: 346, 0.95, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,vals.put(factory.getName() factory.deserialize(resultIter.next())),METHOD_INVOCATION, line no: 347, 0.95, 0.95, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,factory.getName(),METHOD_INVOCATION, line no: 347, 0.95, 0.95, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,factory.deserialize(resultIter.next()),METHOD_INVOCATION, line no: 347, 0.95, 0.95, 0.0
agg,SIMPLE_NAME, line no: 213,fn,SIMPLE_NAME, line no: 144, 0.9166666666666666, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,manipulate,SIMPLE_NAME, line no: 164, 0.9166666666666666, 0.9166666666666666, 0.0
agg,SIMPLE_NAME, line no: 213,input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 164, 0.9166666666666666, 0.9166666666666666, 0.0
agg,SIMPLE_NAME, line no: 213,calculatedPostAgg,SIMPLE_NAME, line no: 167, 0.9166666666666666, 0.9166666666666666, 0.0
agg,SIMPLE_NAME, line no: 213,calculatedPostAgg != null,INFIX_EXPRESSION, line no: 168, 0.9166666666666666, 0.9166666666666666, 0.0
agg,SIMPLE_NAME, line no: 213,null,NULL_LITERAL, line no: 168, 0.9166666666666666, 0.9166666666666666, 0.0
getName,SIMPLE_NAME, line no: 213,fn,SIMPLE_NAME, line no: 144, 0.9166666666666666, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,manipulate,SIMPLE_NAME, line no: 164, 0.9166666666666666, 0.9166666666666666, 0.0
getName,SIMPLE_NAME, line no: 213,input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 164, 0.9166666666666666, 0.9166666666666666, 0.0
getName,SIMPLE_NAME, line no: 213,calculatedPostAgg,SIMPLE_NAME, line no: 167, 0.9166666666666666, 0.9166666666666666, 0.0
getName,SIMPLE_NAME, line no: 213,calculatedPostAgg != null,INFIX_EXPRESSION, line no: 168, 0.9166666666666666, 0.9166666666666666, 0.0
getName,SIMPLE_NAME, line no: 213,null,NULL_LITERAL, line no: 168, 0.9166666666666666, 0.9166666666666666, 0.0
input,SIMPLE_NAME, line no: 213,fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 164, 0.9130434782608695, 0.9130434782608695, 0.0
input,SIMPLE_NAME, line no: 213,factory,SIMPLE_NAME, line no: 346, 0.9130434782608695, 0.782608695652174, 0.0
input,SIMPLE_NAME, line no: 213,factory.getName(),METHOD_INVOCATION, line no: 347, 0.9130434782608695, 0.9130434782608695, 0.0
input,SIMPLE_NAME, line no: 213,factory.deserialize(resultIter.next()),METHOD_INVOCATION, line no: 347, 0.9130434782608695, 0.9130434782608695, 0.0
input,SIMPLE_NAME, line no: 213,deserialize,SIMPLE_NAME, line no: 347, 0.9130434782608695, 0.9130434782608695, 0.0
getMetric,SIMPLE_NAME, line no: 213,factory,SIMPLE_NAME, line no: 346, 0.9130434782608695, 0.782608695652174, 0.0
getMetric,SIMPLE_NAME, line no: 213,factory.getName(),METHOD_INVOCATION, line no: 347, 0.9130434782608695, 0.9130434782608695, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,fn,SIMPLE_NAME, line no: 144, 0.9130434782608695, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 164, 0.9130434782608695, 0.9130434782608695, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,manipulate,SIMPLE_NAME, line no: 164, 0.9130434782608695, 0.9130434782608695, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,calculatedPostAgg,SIMPLE_NAME, line no: 167, 0.9130434782608695, 0.9130434782608695, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,calculatedPostAgg != null,INFIX_EXPRESSION, line no: 168, 0.9130434782608695, 0.9130434782608695, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,null,NULL_LITERAL, line no: 168, 0.9130434782608695, 0.9130434782608695, 0.0
agg,SIMPLE_NAME, line no: 213,values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 164, 0.9090909090909091, 0.9090909090909091, 0.0
agg,SIMPLE_NAME, line no: 213,vals.put(factory.getName() factory.deserialize(resultIter.next())),METHOD_INVOCATION, line no: 347, 0.9090909090909091, 0.9090909090909091, 0.0
getName,SIMPLE_NAME, line no: 213,values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 164, 0.9090909090909091, 0.9090909090909091, 0.0
getName,SIMPLE_NAME, line no: 213,vals.put(factory.getName() factory.deserialize(resultIter.next())),METHOD_INVOCATION, line no: 347, 0.9090909090909091, 0.9090909090909091, 0.0
fn,SIMPLE_NAME, line no: 213,values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 164, 0.9090909090909091, 0.9090909090909091, 0.0
fn,SIMPLE_NAME, line no: 213,vals.put(factory.getName() factory.deserialize(resultIter.next())),METHOD_INVOCATION, line no: 347, 0.9090909090909091, 0.9090909090909091, 0.0
agg,SIMPLE_NAME, line no: 213,values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 164, 0.9090909090909091, 0.9090909090909091, 0.0
agg,SIMPLE_NAME, line no: 213,vals.put(factory.getName() factory.deserialize(resultIter.next())),METHOD_INVOCATION, line no: 347, 0.9090909090909091, 0.9090909090909091, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 164, 0.9090909090909091, 0.9090909090909091, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,factory,SIMPLE_NAME, line no: 346, 0.9090909090909091, 0.7727272727272727, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,factory.getName(),METHOD_INVOCATION, line no: 347, 0.9090909090909091, 0.9090909090909091, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,factory.deserialize(resultIter.next()),METHOD_INVOCATION, line no: 347, 0.9090909090909091, 0.9090909090909091, 0.0
values,SIMPLE_NAME, line no: 213,aggIter.next(),METHOD_INVOCATION, line no: 346, 0.9047619047619048, 0.9047619047619048, 0.0
put,SIMPLE_NAME, line no: 213,aggIter.next(),METHOD_INVOCATION, line no: 346, 0.9047619047619048, 0.9047619047619048, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,vals.put(factory.getName() factory.deserialize(resultIter.next())),METHOD_INVOCATION, line no: 347, 0.9047619047619048, 0.9047619047619048, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,vals.put(factory.getName() factory.deserialize(resultIter.next())),METHOD_INVOCATION, line no: 347, 0.9047619047619048, 0.9047619047619048, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,aggIter.next(),METHOD_INVOCATION, line no: 346, 0.9, 0.9, 0.0
agg,SIMPLE_NAME, line no: 213,Ints,SIMPLE_NAME, line no: 29, 0.875, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,Sequences,SIMPLE_NAME, line no: 34, 0.875, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,QueryCacheHelper,SIMPLE_NAME, line no: 42, 0.875, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,DimFilter,SIMPLE_NAME, line no: 52, 0.875, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,ByteBuffer,SIMPLE_NAME, line no: 58, 0.875, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,TOPN_QUERY,SIMPLE_NAME, line no: 67, 0.875, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,runner,SIMPLE_NAME, line no: 86, 0.875, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,(TopNQuery)input,CAST_EXPRESSION, line no: 105, 0.875, 0.75, 0.0
agg,SIMPLE_NAME, line no: 213,fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 164, 0.875, 0.875, 0.0
agg,SIMPLE_NAME, line no: 213,dimensionSpecBytes,SIMPLE_NAME, line no: 265, 0.875, 0.875, 0.0
agg,SIMPLE_NAME, line no: 213,query.getDimensionSpec().getCacheKey(),METHOD_INVOCATION, line no: 265, 0.875, 0.875, 0.0
agg,SIMPLE_NAME, line no: 213,getCacheKey,SIMPLE_NAME, line no: 265, 0.875, 0.875, 0.0
agg,SIMPLE_NAME, line no: 213,metricSpecBytes,SIMPLE_NAME, line no: 266, 0.875, 0.875, 0.0
agg,SIMPLE_NAME, line no: 213,query.getTopNMetricSpec().getCacheKey(),METHOD_INVOCATION, line no: 266, 0.875, 0.875, 0.0
agg,SIMPLE_NAME, line no: 213,dimFilter,SIMPLE_NAME, line no: 268, 0.875, 0.875, 0.0
agg,SIMPLE_NAME, line no: 213,query.getDimensionsFilter(),METHOD_INVOCATION, line no: 268, 0.875, 0.875, 0.0
agg,SIMPLE_NAME, line no: 213,getDimensionsFilter,SIMPLE_NAME, line no: 268, 0.875, 0.875, 0.0
agg,SIMPLE_NAME, line no: 213,filterBytes,SIMPLE_NAME, line no: 269, 0.875, 0.875, 0.0
agg,SIMPLE_NAME, line no: 213,dimFilter == null ? new byte[]{} : dimFilter.getCacheKey(),CONDITIONAL_EXPRESSION, line no: 269, 0.875, 0.875, 0.0
agg,SIMPLE_NAME, line no: 213,dimFilter == null,INFIX_EXPRESSION, line no: 269, 0.875, 0.875, 0.0
agg,SIMPLE_NAME, line no: 213,new byte[]{},ARRAY_CREATION, line no: 269, 0.875, 0.875, 0.0
agg,SIMPLE_NAME, line no: 213,{},ARRAY_INITIALIZER, line no: 269, 0.875, 0.875, 0.0
agg,SIMPLE_NAME, line no: 213,dimFilter.getCacheKey(),METHOD_INVOCATION, line no: 269, 0.875, 0.875, 0.0
agg,SIMPLE_NAME, line no: 213,aggregatorBytes,SIMPLE_NAME, line no: 270, 0.875, 0.875, 0.0
agg,SIMPLE_NAME, line no: 213,QueryCacheHelper.computeAggregatorBytes(query.getAggregatorSpecs()),METHOD_INVOCATION, line no: 270, 0.875, 0.875, 0.0
agg,SIMPLE_NAME, line no: 213,computeAggregatorBytes,SIMPLE_NAME, line no: 270, 0.875, 0.875, 0.0
agg,SIMPLE_NAME, line no: 213,granularityBytes,SIMPLE_NAME, line no: 271, 0.875, 0.875, 0.0
agg,SIMPLE_NAME, line no: 213,query.getGranularity().cacheKey(),METHOD_INVOCATION, line no: 271, 0.875, 0.875, 0.0
agg,SIMPLE_NAME, line no: 213,cacheKey,SIMPLE_NAME, line no: 271, 0.875, 0.875, 0.0
agg,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())).put(granularityBytes).put(filterBytes).put(aggregatorBytes).array(),METHOD_INVOCATION, line no: 273, 0.875, 0.875, 0.0
agg,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())).put(granularityBytes).put(filterBytes).put(aggregatorBytes),METHOD_INVOCATION, line no: 273, 0.875, 0.875, 0.0
agg,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())).put(granularityBytes).put(filterBytes),METHOD_INVOCATION, line no: 273, 0.875, 0.875, 0.0
agg,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())).put(granularityBytes),METHOD_INVOCATION, line no: 273, 0.875, 0.875, 0.0
agg,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())),METHOD_INVOCATION, line no: 273, 0.875, 0.875, 0.0
agg,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes),METHOD_INVOCATION, line no: 273, 0.875, 0.875, 0.0
agg,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes),METHOD_INVOCATION, line no: 273, 0.875, 0.875, 0.0
agg,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY),METHOD_INVOCATION, line no: 273, 0.875, 0.875, 0.0
agg,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length),METHOD_INVOCATION, line no: 273, 0.875, 0.875, 0.0
agg,SIMPLE_NAME, line no: 213,allocate,SIMPLE_NAME, line no: 274, 0.875, 0.875, 0.0
agg,SIMPLE_NAME, line no: 213,1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length,INFIX_EXPRESSION, line no: 275, 0.875, 0.875, 0.0
agg,SIMPLE_NAME, line no: 213,dimensionSpecBytes.length,QUALIFIED_NAME, line no: 275, 0.875, 0.875, 0.0
agg,SIMPLE_NAME, line no: 213,length,SIMPLE_NAME, line no: 275, 0.875, 0.875, 0.0
agg,SIMPLE_NAME, line no: 213,metricSpecBytes.length,QUALIFIED_NAME, line no: 275, 0.875, 0.875, 0.0
agg,SIMPLE_NAME, line no: 213,4,NUMBER_LITERAL, line no: 275, 0.875, 0.875, 0.0
agg,SIMPLE_NAME, line no: 213,granularityBytes.length,QUALIFIED_NAME, line no: 276, 0.875, 0.875, 0.0
agg,SIMPLE_NAME, line no: 213,filterBytes.length,QUALIFIED_NAME, line no: 276, 0.875, 0.875, 0.0
agg,SIMPLE_NAME, line no: 213,aggregatorBytes.length,QUALIFIED_NAME, line no: 276, 0.875, 0.875, 0.0
agg,SIMPLE_NAME, line no: 213,Ints.toByteArray(query.getThreshold()),METHOD_INVOCATION, line no: 281, 0.875, 0.875, 0.0
agg,SIMPLE_NAME, line no: 213,toByteArray,SIMPLE_NAME, line no: 281, 0.875, 0.875, 0.0
agg,SIMPLE_NAME, line no: 213,array,SIMPLE_NAME, line no: 285, 0.875, 0.875, 0.0
agg,SIMPLE_NAME, line no: 213,factory.getName(),METHOD_INVOCATION, line no: 347, 0.875, 0.875, 0.0
agg,SIMPLE_NAME, line no: 213,factory.deserialize(resultIter.next()),METHOD_INVOCATION, line no: 347, 0.875, 0.875, 0.0
agg,SIMPLE_NAME, line no: 213,deserialize,SIMPLE_NAME, line no: 347, 0.875, 0.875, 0.0
agg,SIMPLE_NAME, line no: 213,minTopNThreshold,SIMPLE_NAME, line no: 390, 0.875, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,run,SIMPLE_NAME, line no: 402, 0.875, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,!(input instanceof TopNQuery),PREFIX_EXPRESSION, line no: 404, 0.875, 0.875, 0.0
agg,SIMPLE_NAME, line no: 213,(input instanceof TopNQuery),PARENTHESIZED_EXPRESSION, line no: 404, 0.875, 0.875, 0.0
agg,SIMPLE_NAME, line no: 213,input instanceof TopNQuery,INSTANCEOF_EXPRESSION, line no: 404, 0.875, 0.875, 0.0
agg,SIMPLE_NAME, line no: 213,query.getThreshold() > minTopNThreshold,INFIX_EXPRESSION, line no: 409, 0.875, 0.875, 0.0
agg,SIMPLE_NAME, line no: 213,isBySegment,SIMPLE_NAME, line no: 413, 0.875, 0.875, 0.0
agg,SIMPLE_NAME, line no: 213,query.getContextBySegment(false),METHOD_INVOCATION, line no: 413, 0.875, 0.875, 0.0
agg,SIMPLE_NAME, line no: 213,getContextBySegment,SIMPLE_NAME, line no: 413, 0.875, 0.875, 0.0
agg,SIMPLE_NAME, line no: 213,false,BOOLEAN_LITERAL, line no: 413, 0.875, 0.875, 0.0
agg,SIMPLE_NAME, line no: 213,Sequences.map(runner.run(query.withThreshold(minTopNThreshold)) new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     if (isBySegment) {       BySegmentTopNResultValue value=(BySegmentTopNResultValue)input.getValue();       return new Result<TopNResultValue>(input.getTimestamp() new BySegmentTopNResultValue(Lists.transform(value.getResults() new Function<Result<TopNResultValue> Result<TopNResultValue>>(){         @Override public Result<TopNResultValue> apply(        Result<TopNResultValue> input){           return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));         }       } ) value.getSegmentId() value.getIntervalString()));     }     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ),METHOD_INVOCATION, line no: 415, 0.875, 0.875, 0.0
agg,SIMPLE_NAME, line no: 213,map,SIMPLE_NAME, line no: 415, 0.875, 0.875, 0.0
agg,SIMPLE_NAME, line no: 213,runner.run(query.withThreshold(minTopNThreshold)),METHOD_INVOCATION, line no: 416, 0.875, 0.875, 0.0
agg,SIMPLE_NAME, line no: 213,query.withThreshold(minTopNThreshold),METHOD_INVOCATION, line no: 416, 0.875, 0.875, 0.0
agg,SIMPLE_NAME, line no: 213,withThreshold,SIMPLE_NAME, line no: 416, 0.875, 0.875, 0.0
agg,SIMPLE_NAME, line no: 213,new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     if (isBySegment) {       BySegmentTopNResultValue value=(BySegmentTopNResultValue)input.getValue();       return new Result<TopNResultValue>(input.getTimestamp() new BySegmentTopNResultValue(Lists.transform(value.getResults() new Function<Result<TopNResultValue> Result<TopNResultValue>>(){         @Override public Result<TopNResultValue> apply(        Result<TopNResultValue> input){           return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));         }       } ) value.getSegmentId() value.getIntervalString()));     }     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ,CLASS_INSTANCE_CREATION, line no: 417, 0.875, 0.875, 0.0
agg,SIMPLE_NAME, line no: 213,BySegmentTopNResultValue,SIMPLE_NAME, line no: 423, 0.875, 0.875, 0.0
agg,SIMPLE_NAME, line no: 213,value,SIMPLE_NAME, line no: 423, 0.875, 0.875, 0.0
agg,SIMPLE_NAME, line no: 213,(BySegmentTopNResultValue)input.getValue(),CAST_EXPRESSION, line no: 423, 0.875, 0.875, 0.0
agg,SIMPLE_NAME, line no: 213,new Result<TopNResultValue>(input.getTimestamp() new BySegmentTopNResultValue(Lists.transform(value.getResults() new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ) value.getSegmentId() value.getIntervalString())),CLASS_INSTANCE_CREATION, line no: 425, 0.875, 0.875, 0.0
agg,SIMPLE_NAME, line no: 213,new BySegmentTopNResultValue(Lists.transform(value.getResults() new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ) value.getSegmentId() value.getIntervalString()),CLASS_INSTANCE_CREATION, line no: 427, 0.875, 0.875, 0.0
agg,SIMPLE_NAME, line no: 213,Lists.transform(value.getResults() new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ),METHOD_INVOCATION, line no: 428, 0.875, 0.875, 0.0
agg,SIMPLE_NAME, line no: 213,value.getResults(),METHOD_INVOCATION, line no: 429, 0.875, 0.875, 0.0
agg,SIMPLE_NAME, line no: 213,getResults,SIMPLE_NAME, line no: 429, 0.875, 0.875, 0.0
agg,SIMPLE_NAME, line no: 213,new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ,CLASS_INSTANCE_CREATION, line no: 430, 0.875, 0.875, 0.0
agg,SIMPLE_NAME, line no: 213,new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold())))),CLASS_INSTANCE_CREATION, line no: 435, 0.875, 0.7083333333333334, 0.0
agg,SIMPLE_NAME, line no: 213,new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))),CLASS_INSTANCE_CREATION, line no: 437, 0.875, 0.7083333333333334, 0.0
agg,SIMPLE_NAME, line no: 213,Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold())),METHOD_INVOCATION, line no: 438, 0.875, 0.75, 0.0
agg,SIMPLE_NAME, line no: 213,Iterables.limit(input.getValue() query.getThreshold()),METHOD_INVOCATION, line no: 439, 0.875, 0.7916666666666666, 0.0
agg,SIMPLE_NAME, line no: 213,limit,SIMPLE_NAME, line no: 439, 0.875, 0.7916666666666666, 0.0
agg,SIMPLE_NAME, line no: 213,value.getSegmentId(),METHOD_INVOCATION, line no: 449, 0.875, 0.875, 0.0
agg,SIMPLE_NAME, line no: 213,getSegmentId,SIMPLE_NAME, line no: 449, 0.875, 0.875, 0.0
agg,SIMPLE_NAME, line no: 213,value.getIntervalString(),METHOD_INVOCATION, line no: 450, 0.875, 0.875, 0.0
agg,SIMPLE_NAME, line no: 213,getIntervalString,SIMPLE_NAME, line no: 450, 0.875, 0.875, 0.0
getName,SIMPLE_NAME, line no: 213,Ints,SIMPLE_NAME, line no: 29, 0.875, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,Sequences,SIMPLE_NAME, line no: 34, 0.875, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,QueryCacheHelper,SIMPLE_NAME, line no: 42, 0.875, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,DimFilter,SIMPLE_NAME, line no: 52, 0.875, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,ByteBuffer,SIMPLE_NAME, line no: 58, 0.875, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,TOPN_QUERY,SIMPLE_NAME, line no: 67, 0.875, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,runner,SIMPLE_NAME, line no: 86, 0.875, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,(TopNQuery)input,CAST_EXPRESSION, line no: 105, 0.875, 0.75, 0.0
getName,SIMPLE_NAME, line no: 213,fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 164, 0.875, 0.875, 0.0
getName,SIMPLE_NAME, line no: 213,dimensionSpecBytes,SIMPLE_NAME, line no: 265, 0.875, 0.875, 0.0
getName,SIMPLE_NAME, line no: 213,query.getDimensionSpec().getCacheKey(),METHOD_INVOCATION, line no: 265, 0.875, 0.875, 0.0
getName,SIMPLE_NAME, line no: 213,getCacheKey,SIMPLE_NAME, line no: 265, 0.875, 0.875, 0.0
getName,SIMPLE_NAME, line no: 213,metricSpecBytes,SIMPLE_NAME, line no: 266, 0.875, 0.875, 0.0
getName,SIMPLE_NAME, line no: 213,query.getTopNMetricSpec().getCacheKey(),METHOD_INVOCATION, line no: 266, 0.875, 0.875, 0.0
getName,SIMPLE_NAME, line no: 213,dimFilter,SIMPLE_NAME, line no: 268, 0.875, 0.875, 0.0
getName,SIMPLE_NAME, line no: 213,query.getDimensionsFilter(),METHOD_INVOCATION, line no: 268, 0.875, 0.875, 0.0
getName,SIMPLE_NAME, line no: 213,getDimensionsFilter,SIMPLE_NAME, line no: 268, 0.875, 0.875, 0.0
getName,SIMPLE_NAME, line no: 213,filterBytes,SIMPLE_NAME, line no: 269, 0.875, 0.875, 0.0
getName,SIMPLE_NAME, line no: 213,dimFilter == null ? new byte[]{} : dimFilter.getCacheKey(),CONDITIONAL_EXPRESSION, line no: 269, 0.875, 0.875, 0.0
getName,SIMPLE_NAME, line no: 213,dimFilter == null,INFIX_EXPRESSION, line no: 269, 0.875, 0.875, 0.0
getName,SIMPLE_NAME, line no: 213,new byte[]{},ARRAY_CREATION, line no: 269, 0.875, 0.875, 0.0
getName,SIMPLE_NAME, line no: 213,{},ARRAY_INITIALIZER, line no: 269, 0.875, 0.875, 0.0
getName,SIMPLE_NAME, line no: 213,dimFilter.getCacheKey(),METHOD_INVOCATION, line no: 269, 0.875, 0.875, 0.0
getName,SIMPLE_NAME, line no: 213,aggregatorBytes,SIMPLE_NAME, line no: 270, 0.875, 0.875, 0.0
getName,SIMPLE_NAME, line no: 213,QueryCacheHelper.computeAggregatorBytes(query.getAggregatorSpecs()),METHOD_INVOCATION, line no: 270, 0.875, 0.875, 0.0
getName,SIMPLE_NAME, line no: 213,computeAggregatorBytes,SIMPLE_NAME, line no: 270, 0.875, 0.875, 0.0
getName,SIMPLE_NAME, line no: 213,granularityBytes,SIMPLE_NAME, line no: 271, 0.875, 0.875, 0.0
getName,SIMPLE_NAME, line no: 213,query.getGranularity().cacheKey(),METHOD_INVOCATION, line no: 271, 0.875, 0.875, 0.0
getName,SIMPLE_NAME, line no: 213,cacheKey,SIMPLE_NAME, line no: 271, 0.875, 0.875, 0.0
getName,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())).put(granularityBytes).put(filterBytes).put(aggregatorBytes).array(),METHOD_INVOCATION, line no: 273, 0.875, 0.875, 0.0
getName,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())).put(granularityBytes).put(filterBytes).put(aggregatorBytes),METHOD_INVOCATION, line no: 273, 0.875, 0.875, 0.0
getName,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())).put(granularityBytes).put(filterBytes),METHOD_INVOCATION, line no: 273, 0.875, 0.875, 0.0
getName,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())).put(granularityBytes),METHOD_INVOCATION, line no: 273, 0.875, 0.875, 0.0
getName,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())),METHOD_INVOCATION, line no: 273, 0.875, 0.875, 0.0
getName,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes),METHOD_INVOCATION, line no: 273, 0.875, 0.875, 0.0
getName,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes),METHOD_INVOCATION, line no: 273, 0.875, 0.875, 0.0
getName,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY),METHOD_INVOCATION, line no: 273, 0.875, 0.875, 0.0
getName,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length),METHOD_INVOCATION, line no: 273, 0.875, 0.875, 0.0
getName,SIMPLE_NAME, line no: 213,allocate,SIMPLE_NAME, line no: 274, 0.875, 0.875, 0.0
getName,SIMPLE_NAME, line no: 213,1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length,INFIX_EXPRESSION, line no: 275, 0.875, 0.875, 0.0
getName,SIMPLE_NAME, line no: 213,dimensionSpecBytes.length,QUALIFIED_NAME, line no: 275, 0.875, 0.875, 0.0
getName,SIMPLE_NAME, line no: 213,length,SIMPLE_NAME, line no: 275, 0.875, 0.875, 0.0
getName,SIMPLE_NAME, line no: 213,metricSpecBytes.length,QUALIFIED_NAME, line no: 275, 0.875, 0.875, 0.0
getName,SIMPLE_NAME, line no: 213,4,NUMBER_LITERAL, line no: 275, 0.875, 0.875, 0.0
getName,SIMPLE_NAME, line no: 213,granularityBytes.length,QUALIFIED_NAME, line no: 276, 0.875, 0.875, 0.0
getName,SIMPLE_NAME, line no: 213,filterBytes.length,QUALIFIED_NAME, line no: 276, 0.875, 0.875, 0.0
getName,SIMPLE_NAME, line no: 213,aggregatorBytes.length,QUALIFIED_NAME, line no: 276, 0.875, 0.875, 0.0
getName,SIMPLE_NAME, line no: 213,Ints.toByteArray(query.getThreshold()),METHOD_INVOCATION, line no: 281, 0.875, 0.875, 0.0
getName,SIMPLE_NAME, line no: 213,toByteArray,SIMPLE_NAME, line no: 281, 0.875, 0.875, 0.0
getName,SIMPLE_NAME, line no: 213,array,SIMPLE_NAME, line no: 285, 0.875, 0.875, 0.0
getName,SIMPLE_NAME, line no: 213,factory,SIMPLE_NAME, line no: 346, 0.875, 0.75, 0.0
getName,SIMPLE_NAME, line no: 213,factory.deserialize(resultIter.next()),METHOD_INVOCATION, line no: 347, 0.875, 0.875, 0.0
getName,SIMPLE_NAME, line no: 213,deserialize,SIMPLE_NAME, line no: 347, 0.875, 0.875, 0.0
getName,SIMPLE_NAME, line no: 213,minTopNThreshold,SIMPLE_NAME, line no: 390, 0.875, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,run,SIMPLE_NAME, line no: 402, 0.875, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,!(input instanceof TopNQuery),PREFIX_EXPRESSION, line no: 404, 0.875, 0.875, 0.0
getName,SIMPLE_NAME, line no: 213,(input instanceof TopNQuery),PARENTHESIZED_EXPRESSION, line no: 404, 0.875, 0.875, 0.0
getName,SIMPLE_NAME, line no: 213,input instanceof TopNQuery,INSTANCEOF_EXPRESSION, line no: 404, 0.875, 0.875, 0.0
getName,SIMPLE_NAME, line no: 213,query.getThreshold() > minTopNThreshold,INFIX_EXPRESSION, line no: 409, 0.875, 0.875, 0.0
getName,SIMPLE_NAME, line no: 213,isBySegment,SIMPLE_NAME, line no: 413, 0.875, 0.875, 0.0
getName,SIMPLE_NAME, line no: 213,query.getContextBySegment(false),METHOD_INVOCATION, line no: 413, 0.875, 0.875, 0.0
getName,SIMPLE_NAME, line no: 213,getContextBySegment,SIMPLE_NAME, line no: 413, 0.875, 0.875, 0.0
getName,SIMPLE_NAME, line no: 213,false,BOOLEAN_LITERAL, line no: 413, 0.875, 0.875, 0.0
getName,SIMPLE_NAME, line no: 213,Sequences.map(runner.run(query.withThreshold(minTopNThreshold)) new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     if (isBySegment) {       BySegmentTopNResultValue value=(BySegmentTopNResultValue)input.getValue();       return new Result<TopNResultValue>(input.getTimestamp() new BySegmentTopNResultValue(Lists.transform(value.getResults() new Function<Result<TopNResultValue> Result<TopNResultValue>>(){         @Override public Result<TopNResultValue> apply(        Result<TopNResultValue> input){           return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));         }       } ) value.getSegmentId() value.getIntervalString()));     }     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ),METHOD_INVOCATION, line no: 415, 0.875, 0.875, 0.0
getName,SIMPLE_NAME, line no: 213,map,SIMPLE_NAME, line no: 415, 0.875, 0.875, 0.0
getName,SIMPLE_NAME, line no: 213,runner.run(query.withThreshold(minTopNThreshold)),METHOD_INVOCATION, line no: 416, 0.875, 0.875, 0.0
getName,SIMPLE_NAME, line no: 213,query.withThreshold(minTopNThreshold),METHOD_INVOCATION, line no: 416, 0.875, 0.875, 0.0
getName,SIMPLE_NAME, line no: 213,withThreshold,SIMPLE_NAME, line no: 416, 0.875, 0.875, 0.0
getName,SIMPLE_NAME, line no: 213,new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     if (isBySegment) {       BySegmentTopNResultValue value=(BySegmentTopNResultValue)input.getValue();       return new Result<TopNResultValue>(input.getTimestamp() new BySegmentTopNResultValue(Lists.transform(value.getResults() new Function<Result<TopNResultValue> Result<TopNResultValue>>(){         @Override public Result<TopNResultValue> apply(        Result<TopNResultValue> input){           return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));         }       } ) value.getSegmentId() value.getIntervalString()));     }     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ,CLASS_INSTANCE_CREATION, line no: 417, 0.875, 0.875, 0.0
getName,SIMPLE_NAME, line no: 213,BySegmentTopNResultValue,SIMPLE_NAME, line no: 423, 0.875, 0.875, 0.0
getName,SIMPLE_NAME, line no: 213,value,SIMPLE_NAME, line no: 423, 0.875, 0.875, 0.0
getName,SIMPLE_NAME, line no: 213,(BySegmentTopNResultValue)input.getValue(),CAST_EXPRESSION, line no: 423, 0.875, 0.875, 0.0
getName,SIMPLE_NAME, line no: 213,new Result<TopNResultValue>(input.getTimestamp() new BySegmentTopNResultValue(Lists.transform(value.getResults() new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ) value.getSegmentId() value.getIntervalString())),CLASS_INSTANCE_CREATION, line no: 425, 0.875, 0.875, 0.0
getName,SIMPLE_NAME, line no: 213,new BySegmentTopNResultValue(Lists.transform(value.getResults() new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ) value.getSegmentId() value.getIntervalString()),CLASS_INSTANCE_CREATION, line no: 427, 0.875, 0.875, 0.0
getName,SIMPLE_NAME, line no: 213,Lists.transform(value.getResults() new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ),METHOD_INVOCATION, line no: 428, 0.875, 0.875, 0.0
getName,SIMPLE_NAME, line no: 213,value.getResults(),METHOD_INVOCATION, line no: 429, 0.875, 0.875, 0.0
getName,SIMPLE_NAME, line no: 213,getResults,SIMPLE_NAME, line no: 429, 0.875, 0.875, 0.0
getName,SIMPLE_NAME, line no: 213,new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ,CLASS_INSTANCE_CREATION, line no: 430, 0.875, 0.875, 0.0
getName,SIMPLE_NAME, line no: 213,new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold())))),CLASS_INSTANCE_CREATION, line no: 435, 0.875, 0.7083333333333334, 0.0
getName,SIMPLE_NAME, line no: 213,new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))),CLASS_INSTANCE_CREATION, line no: 437, 0.875, 0.7083333333333334, 0.0
getName,SIMPLE_NAME, line no: 213,Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold())),METHOD_INVOCATION, line no: 438, 0.875, 0.75, 0.0
getName,SIMPLE_NAME, line no: 213,Iterables.limit(input.getValue() query.getThreshold()),METHOD_INVOCATION, line no: 439, 0.875, 0.7916666666666666, 0.0
getName,SIMPLE_NAME, line no: 213,limit,SIMPLE_NAME, line no: 439, 0.875, 0.7916666666666666, 0.0
input,SIMPLE_NAME, line no: 213,Ordering,SIMPLE_NAME, line no: 28, 0.8695652173913043, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,Ints,SIMPLE_NAME, line no: 29, 0.8695652173913043, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,Sequences,SIMPLE_NAME, line no: 34, 0.8695652173913043, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,BinaryFn,SIMPLE_NAME, line no: 35, 0.8695652173913043, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,Query,SIMPLE_NAME, line no: 41, 0.8695652173913043, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,QueryCacheHelper,SIMPLE_NAME, line no: 42, 0.8695652173913043, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,ResultMergeQueryRunner,SIMPLE_NAME, line no: 47, 0.8695652173913043, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,DimFilter,SIMPLE_NAME, line no: 52, 0.8695652173913043, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,ByteBuffer,SIMPLE_NAME, line no: 58, 0.8695652173913043, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,TOPN_QUERY,SIMPLE_NAME, line no: 67, 0.8695652173913043, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,runner,SIMPLE_NAME, line no: 86, 0.8695652173913043, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,new ResultMergeQueryRunner<Result<TopNResultValue>>(runner){   @Override protected Ordering<Result<TopNResultValue>> makeOrdering(  Query<Result<TopNResultValue>> query){     return Ordering.from(new ResultGranularTimestampComparator<TopNResultValue>(((TopNQuery)query).getGranularity()));   }   @Override protected BinaryFn<Result<TopNResultValue> Result<TopNResultValue> Result<TopNResultValue>> createMergeFn(  Query<Result<TopNResultValue>> input){     TopNQuery query=(TopNQuery)input;     return new TopNBinaryFn(TopNResultMerger.identity query.getGranularity() query.getDimensionSpec() query.getTopNMetricSpec() query.getThreshold() query.getAggregatorSpecs() query.getPostAggregatorSpecs());   } } ,CLASS_INSTANCE_CREATION, line no: 88, 0.8695652173913043, 0.8695652173913043, 0.0
input,SIMPLE_NAME, line no: 213,makeOrdering,SIMPLE_NAME, line no: 91, 0.8695652173913043, 0.8695652173913043, 0.0
input,SIMPLE_NAME, line no: 213,createMergeFn,SIMPLE_NAME, line no: 101, 0.8695652173913043, 0.8695652173913043, 0.0
input,SIMPLE_NAME, line no: 213,(TopNQuery)input,CAST_EXPRESSION, line no: 105, 0.8695652173913043, 0.782608695652174, 0.0
input,SIMPLE_NAME, line no: 213,values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 164, 0.8695652173913043, 0.8695652173913043, 0.0
input,SIMPLE_NAME, line no: 213,dimensionSpecBytes,SIMPLE_NAME, line no: 265, 0.8695652173913043, 0.8695652173913043, 0.0
input,SIMPLE_NAME, line no: 213,query.getDimensionSpec().getCacheKey(),METHOD_INVOCATION, line no: 265, 0.8695652173913043, 0.8695652173913043, 0.0
input,SIMPLE_NAME, line no: 213,getCacheKey,SIMPLE_NAME, line no: 265, 0.8695652173913043, 0.8695652173913043, 0.0
input,SIMPLE_NAME, line no: 213,metricSpecBytes,SIMPLE_NAME, line no: 266, 0.8695652173913043, 0.8695652173913043, 0.0
input,SIMPLE_NAME, line no: 213,query.getTopNMetricSpec().getCacheKey(),METHOD_INVOCATION, line no: 266, 0.8695652173913043, 0.8695652173913043, 0.0
input,SIMPLE_NAME, line no: 213,dimFilter,SIMPLE_NAME, line no: 268, 0.8695652173913043, 0.8695652173913043, 0.0
input,SIMPLE_NAME, line no: 213,query.getDimensionsFilter(),METHOD_INVOCATION, line no: 268, 0.8695652173913043, 0.8695652173913043, 0.0
input,SIMPLE_NAME, line no: 213,getDimensionsFilter,SIMPLE_NAME, line no: 268, 0.8695652173913043, 0.8695652173913043, 0.0
input,SIMPLE_NAME, line no: 213,filterBytes,SIMPLE_NAME, line no: 269, 0.8695652173913043, 0.8695652173913043, 0.0
input,SIMPLE_NAME, line no: 213,dimFilter == null ? new byte[]{} : dimFilter.getCacheKey(),CONDITIONAL_EXPRESSION, line no: 269, 0.8695652173913043, 0.8695652173913043, 0.0
input,SIMPLE_NAME, line no: 213,dimFilter == null,INFIX_EXPRESSION, line no: 269, 0.8695652173913043, 0.8695652173913043, 0.0
input,SIMPLE_NAME, line no: 213,new byte[]{},ARRAY_CREATION, line no: 269, 0.8695652173913043, 0.8695652173913043, 0.0
input,SIMPLE_NAME, line no: 213,{},ARRAY_INITIALIZER, line no: 269, 0.8695652173913043, 0.8695652173913043, 0.0
input,SIMPLE_NAME, line no: 213,dimFilter.getCacheKey(),METHOD_INVOCATION, line no: 269, 0.8695652173913043, 0.8695652173913043, 0.0
input,SIMPLE_NAME, line no: 213,aggregatorBytes,SIMPLE_NAME, line no: 270, 0.8695652173913043, 0.8695652173913043, 0.0
input,SIMPLE_NAME, line no: 213,QueryCacheHelper.computeAggregatorBytes(query.getAggregatorSpecs()),METHOD_INVOCATION, line no: 270, 0.8695652173913043, 0.8695652173913043, 0.0
input,SIMPLE_NAME, line no: 213,computeAggregatorBytes,SIMPLE_NAME, line no: 270, 0.8695652173913043, 0.8695652173913043, 0.0
input,SIMPLE_NAME, line no: 213,granularityBytes,SIMPLE_NAME, line no: 271, 0.8695652173913043, 0.8695652173913043, 0.0
input,SIMPLE_NAME, line no: 213,query.getGranularity().cacheKey(),METHOD_INVOCATION, line no: 271, 0.8695652173913043, 0.8695652173913043, 0.0
input,SIMPLE_NAME, line no: 213,cacheKey,SIMPLE_NAME, line no: 271, 0.8695652173913043, 0.8695652173913043, 0.0
input,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())).put(granularityBytes).put(filterBytes).put(aggregatorBytes).array(),METHOD_INVOCATION, line no: 273, 0.8695652173913043, 0.8695652173913043, 0.0
input,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())).put(granularityBytes).put(filterBytes).put(aggregatorBytes),METHOD_INVOCATION, line no: 273, 0.8695652173913043, 0.8695652173913043, 0.0
input,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())).put(granularityBytes).put(filterBytes),METHOD_INVOCATION, line no: 273, 0.8695652173913043, 0.8695652173913043, 0.0
input,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())).put(granularityBytes),METHOD_INVOCATION, line no: 273, 0.8695652173913043, 0.8695652173913043, 0.0
input,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())),METHOD_INVOCATION, line no: 273, 0.8695652173913043, 0.8695652173913043, 0.0
input,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes),METHOD_INVOCATION, line no: 273, 0.8695652173913043, 0.8695652173913043, 0.0
input,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes),METHOD_INVOCATION, line no: 273, 0.8695652173913043, 0.8695652173913043, 0.0
input,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY),METHOD_INVOCATION, line no: 273, 0.8695652173913043, 0.8695652173913043, 0.0
input,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length),METHOD_INVOCATION, line no: 273, 0.8695652173913043, 0.8695652173913043, 0.0
input,SIMPLE_NAME, line no: 213,allocate,SIMPLE_NAME, line no: 274, 0.8695652173913043, 0.8695652173913043, 0.0
input,SIMPLE_NAME, line no: 213,1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length,INFIX_EXPRESSION, line no: 275, 0.8695652173913043, 0.8695652173913043, 0.0
input,SIMPLE_NAME, line no: 213,dimensionSpecBytes.length,QUALIFIED_NAME, line no: 275, 0.8695652173913043, 0.8695652173913043, 0.0
input,SIMPLE_NAME, line no: 213,length,SIMPLE_NAME, line no: 275, 0.8695652173913043, 0.8695652173913043, 0.0
input,SIMPLE_NAME, line no: 213,metricSpecBytes.length,QUALIFIED_NAME, line no: 275, 0.8695652173913043, 0.8695652173913043, 0.0
input,SIMPLE_NAME, line no: 213,4,NUMBER_LITERAL, line no: 275, 0.8695652173913043, 0.8695652173913043, 0.0
input,SIMPLE_NAME, line no: 213,granularityBytes.length,QUALIFIED_NAME, line no: 276, 0.8695652173913043, 0.8695652173913043, 0.0
input,SIMPLE_NAME, line no: 213,filterBytes.length,QUALIFIED_NAME, line no: 276, 0.8695652173913043, 0.8695652173913043, 0.0
input,SIMPLE_NAME, line no: 213,aggregatorBytes.length,QUALIFIED_NAME, line no: 276, 0.8695652173913043, 0.8695652173913043, 0.0
input,SIMPLE_NAME, line no: 213,Ints.toByteArray(query.getThreshold()),METHOD_INVOCATION, line no: 281, 0.8695652173913043, 0.8695652173913043, 0.0
input,SIMPLE_NAME, line no: 213,toByteArray,SIMPLE_NAME, line no: 281, 0.8695652173913043, 0.8695652173913043, 0.0
input,SIMPLE_NAME, line no: 213,array,SIMPLE_NAME, line no: 285, 0.8695652173913043, 0.8695652173913043, 0.0
input,SIMPLE_NAME, line no: 213,vals.put(factory.getName() factory.deserialize(resultIter.next())),METHOD_INVOCATION, line no: 347, 0.8695652173913043, 0.8695652173913043, 0.0
input,SIMPLE_NAME, line no: 213,minTopNThreshold,SIMPLE_NAME, line no: 390, 0.8695652173913043, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,run,SIMPLE_NAME, line no: 402, 0.8695652173913043, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,!(input instanceof TopNQuery),PREFIX_EXPRESSION, line no: 404, 0.8695652173913043, 0.8695652173913043, 0.0
input,SIMPLE_NAME, line no: 213,(input instanceof TopNQuery),PARENTHESIZED_EXPRESSION, line no: 404, 0.8695652173913043, 0.8695652173913043, 0.0
input,SIMPLE_NAME, line no: 213,input instanceof TopNQuery,INSTANCEOF_EXPRESSION, line no: 404, 0.8695652173913043, 0.8695652173913043, 0.0
input,SIMPLE_NAME, line no: 213,query.getThreshold() > minTopNThreshold,INFIX_EXPRESSION, line no: 409, 0.8695652173913043, 0.8695652173913043, 0.0
input,SIMPLE_NAME, line no: 213,isBySegment,SIMPLE_NAME, line no: 413, 0.8695652173913043, 0.8695652173913043, 0.0
input,SIMPLE_NAME, line no: 213,query.getContextBySegment(false),METHOD_INVOCATION, line no: 413, 0.8695652173913043, 0.8695652173913043, 0.0
input,SIMPLE_NAME, line no: 213,getContextBySegment,SIMPLE_NAME, line no: 413, 0.8695652173913043, 0.8695652173913043, 0.0
input,SIMPLE_NAME, line no: 213,false,BOOLEAN_LITERAL, line no: 413, 0.8695652173913043, 0.8695652173913043, 0.0
input,SIMPLE_NAME, line no: 213,Sequences.map(runner.run(query.withThreshold(minTopNThreshold)) new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     if (isBySegment) {       BySegmentTopNResultValue value=(BySegmentTopNResultValue)input.getValue();       return new Result<TopNResultValue>(input.getTimestamp() new BySegmentTopNResultValue(Lists.transform(value.getResults() new Function<Result<TopNResultValue> Result<TopNResultValue>>(){         @Override public Result<TopNResultValue> apply(        Result<TopNResultValue> input){           return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));         }       } ) value.getSegmentId() value.getIntervalString()));     }     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ),METHOD_INVOCATION, line no: 415, 0.8695652173913043, 0.8695652173913043, 0.0
input,SIMPLE_NAME, line no: 213,map,SIMPLE_NAME, line no: 415, 0.8695652173913043, 0.8695652173913043, 0.0
input,SIMPLE_NAME, line no: 213,runner.run(query.withThreshold(minTopNThreshold)),METHOD_INVOCATION, line no: 416, 0.8695652173913043, 0.8695652173913043, 0.0
input,SIMPLE_NAME, line no: 213,query.withThreshold(minTopNThreshold),METHOD_INVOCATION, line no: 416, 0.8695652173913043, 0.8695652173913043, 0.0
input,SIMPLE_NAME, line no: 213,withThreshold,SIMPLE_NAME, line no: 416, 0.8695652173913043, 0.8695652173913043, 0.0
input,SIMPLE_NAME, line no: 213,new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     if (isBySegment) {       BySegmentTopNResultValue value=(BySegmentTopNResultValue)input.getValue();       return new Result<TopNResultValue>(input.getTimestamp() new BySegmentTopNResultValue(Lists.transform(value.getResults() new Function<Result<TopNResultValue> Result<TopNResultValue>>(){         @Override public Result<TopNResultValue> apply(        Result<TopNResultValue> input){           return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));         }       } ) value.getSegmentId() value.getIntervalString()));     }     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ,CLASS_INSTANCE_CREATION, line no: 417, 0.8695652173913043, 0.8695652173913043, 0.0
input,SIMPLE_NAME, line no: 213,BySegmentTopNResultValue,SIMPLE_NAME, line no: 423, 0.8695652173913043, 0.8695652173913043, 0.0
input,SIMPLE_NAME, line no: 213,value,SIMPLE_NAME, line no: 423, 0.8695652173913043, 0.8695652173913043, 0.0
input,SIMPLE_NAME, line no: 213,(BySegmentTopNResultValue)input.getValue(),CAST_EXPRESSION, line no: 423, 0.8695652173913043, 0.8695652173913043, 0.0
input,SIMPLE_NAME, line no: 213,new Result<TopNResultValue>(input.getTimestamp() new BySegmentTopNResultValue(Lists.transform(value.getResults() new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ) value.getSegmentId() value.getIntervalString())),CLASS_INSTANCE_CREATION, line no: 425, 0.8695652173913043, 0.8695652173913043, 0.0
input,SIMPLE_NAME, line no: 213,new BySegmentTopNResultValue(Lists.transform(value.getResults() new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ) value.getSegmentId() value.getIntervalString()),CLASS_INSTANCE_CREATION, line no: 427, 0.8695652173913043, 0.8695652173913043, 0.0
input,SIMPLE_NAME, line no: 213,Lists.transform(value.getResults() new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ),METHOD_INVOCATION, line no: 428, 0.8695652173913043, 0.8695652173913043, 0.0
input,SIMPLE_NAME, line no: 213,value.getResults(),METHOD_INVOCATION, line no: 429, 0.8695652173913043, 0.8695652173913043, 0.0
input,SIMPLE_NAME, line no: 213,getResults,SIMPLE_NAME, line no: 429, 0.8695652173913043, 0.8695652173913043, 0.0
input,SIMPLE_NAME, line no: 213,new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ,CLASS_INSTANCE_CREATION, line no: 430, 0.8695652173913043, 0.8695652173913043, 0.0
input,SIMPLE_NAME, line no: 213,new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold())))),CLASS_INSTANCE_CREATION, line no: 435, 0.8695652173913043, 0.7391304347826086, 0.0
input,SIMPLE_NAME, line no: 213,new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))),CLASS_INSTANCE_CREATION, line no: 437, 0.8695652173913043, 0.7391304347826086, 0.0
input,SIMPLE_NAME, line no: 213,Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold())),METHOD_INVOCATION, line no: 438, 0.8695652173913043, 0.782608695652174, 0.0
input,SIMPLE_NAME, line no: 213,Iterables.limit(input.getValue() query.getThreshold()),METHOD_INVOCATION, line no: 439, 0.8695652173913043, 0.8260869565217391, 0.0
input,SIMPLE_NAME, line no: 213,limit,SIMPLE_NAME, line no: 439, 0.8695652173913043, 0.8260869565217391, 0.0
input,SIMPLE_NAME, line no: 213,value.getSegmentId(),METHOD_INVOCATION, line no: 449, 0.8695652173913043, 0.8695652173913043, 0.0
input,SIMPLE_NAME, line no: 213,getSegmentId,SIMPLE_NAME, line no: 449, 0.8695652173913043, 0.8695652173913043, 0.0
input,SIMPLE_NAME, line no: 213,value.getIntervalString(),METHOD_INVOCATION, line no: 450, 0.8695652173913043, 0.8695652173913043, 0.0
input,SIMPLE_NAME, line no: 213,getIntervalString,SIMPLE_NAME, line no: 450, 0.8695652173913043, 0.8695652173913043, 0.0
getMetric,SIMPLE_NAME, line no: 213,Ordering,SIMPLE_NAME, line no: 28, 0.8695652173913043, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,Ints,SIMPLE_NAME, line no: 29, 0.8695652173913043, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,Sequences,SIMPLE_NAME, line no: 34, 0.8695652173913043, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,BinaryFn,SIMPLE_NAME, line no: 35, 0.8695652173913043, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,Query,SIMPLE_NAME, line no: 41, 0.8695652173913043, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,QueryCacheHelper,SIMPLE_NAME, line no: 42, 0.8695652173913043, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,ResultMergeQueryRunner,SIMPLE_NAME, line no: 47, 0.8695652173913043, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,DimFilter,SIMPLE_NAME, line no: 52, 0.8695652173913043, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,ByteBuffer,SIMPLE_NAME, line no: 58, 0.8695652173913043, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,TOPN_QUERY,SIMPLE_NAME, line no: 67, 0.8695652173913043, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,runner,SIMPLE_NAME, line no: 86, 0.8695652173913043, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,new ResultMergeQueryRunner<Result<TopNResultValue>>(runner){   @Override protected Ordering<Result<TopNResultValue>> makeOrdering(  Query<Result<TopNResultValue>> query){     return Ordering.from(new ResultGranularTimestampComparator<TopNResultValue>(((TopNQuery)query).getGranularity()));   }   @Override protected BinaryFn<Result<TopNResultValue> Result<TopNResultValue> Result<TopNResultValue>> createMergeFn(  Query<Result<TopNResultValue>> input){     TopNQuery query=(TopNQuery)input;     return new TopNBinaryFn(TopNResultMerger.identity query.getGranularity() query.getDimensionSpec() query.getTopNMetricSpec() query.getThreshold() query.getAggregatorSpecs() query.getPostAggregatorSpecs());   } } ,CLASS_INSTANCE_CREATION, line no: 88, 0.8695652173913043, 0.8695652173913043, 0.0
getMetric,SIMPLE_NAME, line no: 213,makeOrdering,SIMPLE_NAME, line no: 91, 0.8695652173913043, 0.8695652173913043, 0.0
getMetric,SIMPLE_NAME, line no: 213,createMergeFn,SIMPLE_NAME, line no: 101, 0.8695652173913043, 0.8695652173913043, 0.0
getMetric,SIMPLE_NAME, line no: 213,(TopNQuery)input,CAST_EXPRESSION, line no: 105, 0.8695652173913043, 0.782608695652174, 0.0
getMetric,SIMPLE_NAME, line no: 213,dimensionSpecBytes,SIMPLE_NAME, line no: 265, 0.8695652173913043, 0.8695652173913043, 0.0
getMetric,SIMPLE_NAME, line no: 213,query.getDimensionSpec().getCacheKey(),METHOD_INVOCATION, line no: 265, 0.8695652173913043, 0.8695652173913043, 0.0
getMetric,SIMPLE_NAME, line no: 213,getCacheKey,SIMPLE_NAME, line no: 265, 0.8695652173913043, 0.8695652173913043, 0.0
getMetric,SIMPLE_NAME, line no: 213,metricSpecBytes,SIMPLE_NAME, line no: 266, 0.8695652173913043, 0.8695652173913043, 0.0
getMetric,SIMPLE_NAME, line no: 213,query.getTopNMetricSpec().getCacheKey(),METHOD_INVOCATION, line no: 266, 0.8695652173913043, 0.8695652173913043, 0.0
getMetric,SIMPLE_NAME, line no: 213,dimFilter,SIMPLE_NAME, line no: 268, 0.8695652173913043, 0.8695652173913043, 0.0
getMetric,SIMPLE_NAME, line no: 213,query.getDimensionsFilter(),METHOD_INVOCATION, line no: 268, 0.8695652173913043, 0.8695652173913043, 0.0
getMetric,SIMPLE_NAME, line no: 213,getDimensionsFilter,SIMPLE_NAME, line no: 268, 0.8695652173913043, 0.8695652173913043, 0.0
getMetric,SIMPLE_NAME, line no: 213,filterBytes,SIMPLE_NAME, line no: 269, 0.8695652173913043, 0.8695652173913043, 0.0
getMetric,SIMPLE_NAME, line no: 213,dimFilter == null ? new byte[]{} : dimFilter.getCacheKey(),CONDITIONAL_EXPRESSION, line no: 269, 0.8695652173913043, 0.8695652173913043, 0.0
getMetric,SIMPLE_NAME, line no: 213,dimFilter == null,INFIX_EXPRESSION, line no: 269, 0.8695652173913043, 0.8695652173913043, 0.0
getMetric,SIMPLE_NAME, line no: 213,new byte[]{},ARRAY_CREATION, line no: 269, 0.8695652173913043, 0.8695652173913043, 0.0
getMetric,SIMPLE_NAME, line no: 213,{},ARRAY_INITIALIZER, line no: 269, 0.8695652173913043, 0.8695652173913043, 0.0
getMetric,SIMPLE_NAME, line no: 213,dimFilter.getCacheKey(),METHOD_INVOCATION, line no: 269, 0.8695652173913043, 0.8695652173913043, 0.0
getMetric,SIMPLE_NAME, line no: 213,aggregatorBytes,SIMPLE_NAME, line no: 270, 0.8695652173913043, 0.8695652173913043, 0.0
getMetric,SIMPLE_NAME, line no: 213,QueryCacheHelper.computeAggregatorBytes(query.getAggregatorSpecs()),METHOD_INVOCATION, line no: 270, 0.8695652173913043, 0.8695652173913043, 0.0
getMetric,SIMPLE_NAME, line no: 213,computeAggregatorBytes,SIMPLE_NAME, line no: 270, 0.8695652173913043, 0.8695652173913043, 0.0
getMetric,SIMPLE_NAME, line no: 213,granularityBytes,SIMPLE_NAME, line no: 271, 0.8695652173913043, 0.8695652173913043, 0.0
getMetric,SIMPLE_NAME, line no: 213,query.getGranularity().cacheKey(),METHOD_INVOCATION, line no: 271, 0.8695652173913043, 0.8695652173913043, 0.0
getMetric,SIMPLE_NAME, line no: 213,cacheKey,SIMPLE_NAME, line no: 271, 0.8695652173913043, 0.8695652173913043, 0.0
getMetric,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())).put(granularityBytes).put(filterBytes).put(aggregatorBytes).array(),METHOD_INVOCATION, line no: 273, 0.8695652173913043, 0.8695652173913043, 0.0
getMetric,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())).put(granularityBytes).put(filterBytes).put(aggregatorBytes),METHOD_INVOCATION, line no: 273, 0.8695652173913043, 0.8695652173913043, 0.0
getMetric,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())).put(granularityBytes).put(filterBytes),METHOD_INVOCATION, line no: 273, 0.8695652173913043, 0.8695652173913043, 0.0
getMetric,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())).put(granularityBytes),METHOD_INVOCATION, line no: 273, 0.8695652173913043, 0.8695652173913043, 0.0
getMetric,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())),METHOD_INVOCATION, line no: 273, 0.8695652173913043, 0.8695652173913043, 0.0
getMetric,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes),METHOD_INVOCATION, line no: 273, 0.8695652173913043, 0.8695652173913043, 0.0
getMetric,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes),METHOD_INVOCATION, line no: 273, 0.8695652173913043, 0.8695652173913043, 0.0
getMetric,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY),METHOD_INVOCATION, line no: 273, 0.8695652173913043, 0.8695652173913043, 0.0
getMetric,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length),METHOD_INVOCATION, line no: 273, 0.8695652173913043, 0.8695652173913043, 0.0
getMetric,SIMPLE_NAME, line no: 213,allocate,SIMPLE_NAME, line no: 274, 0.8695652173913043, 0.8695652173913043, 0.0
getMetric,SIMPLE_NAME, line no: 213,1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length,INFIX_EXPRESSION, line no: 275, 0.8695652173913043, 0.8695652173913043, 0.0
getMetric,SIMPLE_NAME, line no: 213,dimensionSpecBytes.length,QUALIFIED_NAME, line no: 275, 0.8695652173913043, 0.8695652173913043, 0.0
getMetric,SIMPLE_NAME, line no: 213,length,SIMPLE_NAME, line no: 275, 0.8695652173913043, 0.8695652173913043, 0.0
getMetric,SIMPLE_NAME, line no: 213,metricSpecBytes.length,QUALIFIED_NAME, line no: 275, 0.8695652173913043, 0.8695652173913043, 0.0
getMetric,SIMPLE_NAME, line no: 213,4,NUMBER_LITERAL, line no: 275, 0.8695652173913043, 0.8695652173913043, 0.0
getMetric,SIMPLE_NAME, line no: 213,granularityBytes.length,QUALIFIED_NAME, line no: 276, 0.8695652173913043, 0.8695652173913043, 0.0
getMetric,SIMPLE_NAME, line no: 213,filterBytes.length,QUALIFIED_NAME, line no: 276, 0.8695652173913043, 0.8695652173913043, 0.0
getMetric,SIMPLE_NAME, line no: 213,aggregatorBytes.length,QUALIFIED_NAME, line no: 276, 0.8695652173913043, 0.8695652173913043, 0.0
getMetric,SIMPLE_NAME, line no: 213,Ints.toByteArray(query.getThreshold()),METHOD_INVOCATION, line no: 281, 0.8695652173913043, 0.8695652173913043, 0.0
getMetric,SIMPLE_NAME, line no: 213,toByteArray,SIMPLE_NAME, line no: 281, 0.8695652173913043, 0.8695652173913043, 0.0
getMetric,SIMPLE_NAME, line no: 213,array,SIMPLE_NAME, line no: 285, 0.8695652173913043, 0.8695652173913043, 0.0
getMetric,SIMPLE_NAME, line no: 213,minTopNThreshold,SIMPLE_NAME, line no: 390, 0.8695652173913043, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,run,SIMPLE_NAME, line no: 402, 0.8695652173913043, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,!(input instanceof TopNQuery),PREFIX_EXPRESSION, line no: 404, 0.8695652173913043, 0.8695652173913043, 0.0
getMetric,SIMPLE_NAME, line no: 213,(input instanceof TopNQuery),PARENTHESIZED_EXPRESSION, line no: 404, 0.8695652173913043, 0.8695652173913043, 0.0
getMetric,SIMPLE_NAME, line no: 213,input instanceof TopNQuery,INSTANCEOF_EXPRESSION, line no: 404, 0.8695652173913043, 0.8695652173913043, 0.0
getMetric,SIMPLE_NAME, line no: 213,query.getThreshold() > minTopNThreshold,INFIX_EXPRESSION, line no: 409, 0.8695652173913043, 0.8695652173913043, 0.0
getMetric,SIMPLE_NAME, line no: 213,isBySegment,SIMPLE_NAME, line no: 413, 0.8695652173913043, 0.8695652173913043, 0.0
getMetric,SIMPLE_NAME, line no: 213,query.getContextBySegment(false),METHOD_INVOCATION, line no: 413, 0.8695652173913043, 0.8695652173913043, 0.0
getMetric,SIMPLE_NAME, line no: 213,getContextBySegment,SIMPLE_NAME, line no: 413, 0.8695652173913043, 0.8695652173913043, 0.0
getMetric,SIMPLE_NAME, line no: 213,false,BOOLEAN_LITERAL, line no: 413, 0.8695652173913043, 0.8695652173913043, 0.0
getMetric,SIMPLE_NAME, line no: 213,Sequences.map(runner.run(query.withThreshold(minTopNThreshold)) new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     if (isBySegment) {       BySegmentTopNResultValue value=(BySegmentTopNResultValue)input.getValue();       return new Result<TopNResultValue>(input.getTimestamp() new BySegmentTopNResultValue(Lists.transform(value.getResults() new Function<Result<TopNResultValue> Result<TopNResultValue>>(){         @Override public Result<TopNResultValue> apply(        Result<TopNResultValue> input){           return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));         }       } ) value.getSegmentId() value.getIntervalString()));     }     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ),METHOD_INVOCATION, line no: 415, 0.8695652173913043, 0.8695652173913043, 0.0
getMetric,SIMPLE_NAME, line no: 213,map,SIMPLE_NAME, line no: 415, 0.8695652173913043, 0.8695652173913043, 0.0
getMetric,SIMPLE_NAME, line no: 213,runner.run(query.withThreshold(minTopNThreshold)),METHOD_INVOCATION, line no: 416, 0.8695652173913043, 0.8695652173913043, 0.0
getMetric,SIMPLE_NAME, line no: 213,query.withThreshold(minTopNThreshold),METHOD_INVOCATION, line no: 416, 0.8695652173913043, 0.8695652173913043, 0.0
getMetric,SIMPLE_NAME, line no: 213,withThreshold,SIMPLE_NAME, line no: 416, 0.8695652173913043, 0.8695652173913043, 0.0
getMetric,SIMPLE_NAME, line no: 213,new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     if (isBySegment) {       BySegmentTopNResultValue value=(BySegmentTopNResultValue)input.getValue();       return new Result<TopNResultValue>(input.getTimestamp() new BySegmentTopNResultValue(Lists.transform(value.getResults() new Function<Result<TopNResultValue> Result<TopNResultValue>>(){         @Override public Result<TopNResultValue> apply(        Result<TopNResultValue> input){           return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));         }       } ) value.getSegmentId() value.getIntervalString()));     }     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ,CLASS_INSTANCE_CREATION, line no: 417, 0.8695652173913043, 0.8695652173913043, 0.0
getMetric,SIMPLE_NAME, line no: 213,BySegmentTopNResultValue,SIMPLE_NAME, line no: 423, 0.8695652173913043, 0.8695652173913043, 0.0
getMetric,SIMPLE_NAME, line no: 213,value,SIMPLE_NAME, line no: 423, 0.8695652173913043, 0.8695652173913043, 0.0
getMetric,SIMPLE_NAME, line no: 213,(BySegmentTopNResultValue)input.getValue(),CAST_EXPRESSION, line no: 423, 0.8695652173913043, 0.8695652173913043, 0.0
getMetric,SIMPLE_NAME, line no: 213,new Result<TopNResultValue>(input.getTimestamp() new BySegmentTopNResultValue(Lists.transform(value.getResults() new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ) value.getSegmentId() value.getIntervalString())),CLASS_INSTANCE_CREATION, line no: 425, 0.8695652173913043, 0.8695652173913043, 0.0
getMetric,SIMPLE_NAME, line no: 213,new BySegmentTopNResultValue(Lists.transform(value.getResults() new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ) value.getSegmentId() value.getIntervalString()),CLASS_INSTANCE_CREATION, line no: 427, 0.8695652173913043, 0.8695652173913043, 0.0
getMetric,SIMPLE_NAME, line no: 213,Lists.transform(value.getResults() new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ),METHOD_INVOCATION, line no: 428, 0.8695652173913043, 0.8695652173913043, 0.0
getMetric,SIMPLE_NAME, line no: 213,value.getResults(),METHOD_INVOCATION, line no: 429, 0.8695652173913043, 0.8695652173913043, 0.0
getMetric,SIMPLE_NAME, line no: 213,getResults,SIMPLE_NAME, line no: 429, 0.8695652173913043, 0.8695652173913043, 0.0
getMetric,SIMPLE_NAME, line no: 213,new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ,CLASS_INSTANCE_CREATION, line no: 430, 0.8695652173913043, 0.8695652173913043, 0.0
getMetric,SIMPLE_NAME, line no: 213,new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold())))),CLASS_INSTANCE_CREATION, line no: 435, 0.8695652173913043, 0.7391304347826086, 0.0
getMetric,SIMPLE_NAME, line no: 213,new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))),CLASS_INSTANCE_CREATION, line no: 437, 0.8695652173913043, 0.7391304347826086, 0.0
getMetric,SIMPLE_NAME, line no: 213,Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold())),METHOD_INVOCATION, line no: 438, 0.8695652173913043, 0.782608695652174, 0.0
getMetric,SIMPLE_NAME, line no: 213,Iterables.limit(input.getValue() query.getThreshold()),METHOD_INVOCATION, line no: 439, 0.8695652173913043, 0.8260869565217391, 0.0
getMetric,SIMPLE_NAME, line no: 213,limit,SIMPLE_NAME, line no: 439, 0.8695652173913043, 0.8260869565217391, 0.0
getMetric,SIMPLE_NAME, line no: 213,value.getSegmentId(),METHOD_INVOCATION, line no: 449, 0.8695652173913043, 0.8695652173913043, 0.0
getMetric,SIMPLE_NAME, line no: 213,getSegmentId,SIMPLE_NAME, line no: 449, 0.8695652173913043, 0.8695652173913043, 0.0
getMetric,SIMPLE_NAME, line no: 213,value.getIntervalString(),METHOD_INVOCATION, line no: 450, 0.8695652173913043, 0.8695652173913043, 0.0
getMetric,SIMPLE_NAME, line no: 213,getIntervalString,SIMPLE_NAME, line no: 450, 0.8695652173913043, 0.8695652173913043, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,Ints,SIMPLE_NAME, line no: 29, 0.8695652173913043, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,Sequences,SIMPLE_NAME, line no: 34, 0.8695652173913043, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,QueryCacheHelper,SIMPLE_NAME, line no: 42, 0.8695652173913043, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,DimFilter,SIMPLE_NAME, line no: 52, 0.8695652173913043, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,ByteBuffer,SIMPLE_NAME, line no: 58, 0.8695652173913043, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,TOPN_QUERY,SIMPLE_NAME, line no: 67, 0.8695652173913043, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,runner,SIMPLE_NAME, line no: 86, 0.8695652173913043, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,(TopNQuery)input,CAST_EXPRESSION, line no: 105, 0.8695652173913043, 0.7391304347826086, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 164, 0.8695652173913043, 0.8695652173913043, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,dimensionSpecBytes,SIMPLE_NAME, line no: 265, 0.8695652173913043, 0.8695652173913043, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,query.getDimensionSpec().getCacheKey(),METHOD_INVOCATION, line no: 265, 0.8695652173913043, 0.8695652173913043, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,getCacheKey,SIMPLE_NAME, line no: 265, 0.8695652173913043, 0.8695652173913043, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,metricSpecBytes,SIMPLE_NAME, line no: 266, 0.8695652173913043, 0.8695652173913043, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,query.getTopNMetricSpec().getCacheKey(),METHOD_INVOCATION, line no: 266, 0.8695652173913043, 0.8695652173913043, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,dimFilter,SIMPLE_NAME, line no: 268, 0.8695652173913043, 0.8695652173913043, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,query.getDimensionsFilter(),METHOD_INVOCATION, line no: 268, 0.8695652173913043, 0.8695652173913043, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,getDimensionsFilter,SIMPLE_NAME, line no: 268, 0.8695652173913043, 0.8695652173913043, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,filterBytes,SIMPLE_NAME, line no: 269, 0.8695652173913043, 0.8695652173913043, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,dimFilter == null ? new byte[]{} : dimFilter.getCacheKey(),CONDITIONAL_EXPRESSION, line no: 269, 0.8695652173913043, 0.8695652173913043, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,dimFilter == null,INFIX_EXPRESSION, line no: 269, 0.8695652173913043, 0.8695652173913043, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,new byte[]{},ARRAY_CREATION, line no: 269, 0.8695652173913043, 0.8695652173913043, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,{},ARRAY_INITIALIZER, line no: 269, 0.8695652173913043, 0.8695652173913043, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,dimFilter.getCacheKey(),METHOD_INVOCATION, line no: 269, 0.8695652173913043, 0.8695652173913043, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,aggregatorBytes,SIMPLE_NAME, line no: 270, 0.8695652173913043, 0.8695652173913043, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,QueryCacheHelper.computeAggregatorBytes(query.getAggregatorSpecs()),METHOD_INVOCATION, line no: 270, 0.8695652173913043, 0.8695652173913043, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,computeAggregatorBytes,SIMPLE_NAME, line no: 270, 0.8695652173913043, 0.8695652173913043, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,granularityBytes,SIMPLE_NAME, line no: 271, 0.8695652173913043, 0.8695652173913043, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,query.getGranularity().cacheKey(),METHOD_INVOCATION, line no: 271, 0.8695652173913043, 0.8695652173913043, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,cacheKey,SIMPLE_NAME, line no: 271, 0.8695652173913043, 0.8695652173913043, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())).put(granularityBytes).put(filterBytes).put(aggregatorBytes).array(),METHOD_INVOCATION, line no: 273, 0.8695652173913043, 0.8695652173913043, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())).put(granularityBytes).put(filterBytes).put(aggregatorBytes),METHOD_INVOCATION, line no: 273, 0.8695652173913043, 0.8695652173913043, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())).put(granularityBytes).put(filterBytes),METHOD_INVOCATION, line no: 273, 0.8695652173913043, 0.8695652173913043, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())).put(granularityBytes),METHOD_INVOCATION, line no: 273, 0.8695652173913043, 0.8695652173913043, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())),METHOD_INVOCATION, line no: 273, 0.8695652173913043, 0.8695652173913043, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes),METHOD_INVOCATION, line no: 273, 0.8695652173913043, 0.8695652173913043, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes),METHOD_INVOCATION, line no: 273, 0.8695652173913043, 0.8695652173913043, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY),METHOD_INVOCATION, line no: 273, 0.8695652173913043, 0.8695652173913043, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length),METHOD_INVOCATION, line no: 273, 0.8695652173913043, 0.8695652173913043, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,allocate,SIMPLE_NAME, line no: 274, 0.8695652173913043, 0.8695652173913043, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length,INFIX_EXPRESSION, line no: 275, 0.8695652173913043, 0.8695652173913043, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,dimensionSpecBytes.length,QUALIFIED_NAME, line no: 275, 0.8695652173913043, 0.8695652173913043, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,length,SIMPLE_NAME, line no: 275, 0.8695652173913043, 0.8695652173913043, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,metricSpecBytes.length,QUALIFIED_NAME, line no: 275, 0.8695652173913043, 0.8695652173913043, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,4,NUMBER_LITERAL, line no: 275, 0.8695652173913043, 0.8695652173913043, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,granularityBytes.length,QUALIFIED_NAME, line no: 276, 0.8695652173913043, 0.8695652173913043, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,filterBytes.length,QUALIFIED_NAME, line no: 276, 0.8695652173913043, 0.8695652173913043, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,aggregatorBytes.length,QUALIFIED_NAME, line no: 276, 0.8695652173913043, 0.8695652173913043, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,Ints.toByteArray(query.getThreshold()),METHOD_INVOCATION, line no: 281, 0.8695652173913043, 0.8695652173913043, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,toByteArray,SIMPLE_NAME, line no: 281, 0.8695652173913043, 0.8695652173913043, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,array,SIMPLE_NAME, line no: 285, 0.8695652173913043, 0.8695652173913043, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,factory,SIMPLE_NAME, line no: 346, 0.8695652173913043, 0.7391304347826086, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,factory.getName(),METHOD_INVOCATION, line no: 347, 0.8695652173913043, 0.8695652173913043, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,factory.deserialize(resultIter.next()),METHOD_INVOCATION, line no: 347, 0.8695652173913043, 0.8695652173913043, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,deserialize,SIMPLE_NAME, line no: 347, 0.8695652173913043, 0.8695652173913043, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,minTopNThreshold,SIMPLE_NAME, line no: 390, 0.8695652173913043, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,run,SIMPLE_NAME, line no: 402, 0.8695652173913043, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,!(input instanceof TopNQuery),PREFIX_EXPRESSION, line no: 404, 0.8695652173913043, 0.8695652173913043, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,(input instanceof TopNQuery),PARENTHESIZED_EXPRESSION, line no: 404, 0.8695652173913043, 0.8695652173913043, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,input instanceof TopNQuery,INSTANCEOF_EXPRESSION, line no: 404, 0.8695652173913043, 0.8695652173913043, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,query.getThreshold() > minTopNThreshold,INFIX_EXPRESSION, line no: 409, 0.8695652173913043, 0.8695652173913043, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,isBySegment,SIMPLE_NAME, line no: 413, 0.8695652173913043, 0.8695652173913043, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,query.getContextBySegment(false),METHOD_INVOCATION, line no: 413, 0.8695652173913043, 0.8695652173913043, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,getContextBySegment,SIMPLE_NAME, line no: 413, 0.8695652173913043, 0.8695652173913043, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,false,BOOLEAN_LITERAL, line no: 413, 0.8695652173913043, 0.8695652173913043, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,Sequences.map(runner.run(query.withThreshold(minTopNThreshold)) new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     if (isBySegment) {       BySegmentTopNResultValue value=(BySegmentTopNResultValue)input.getValue();       return new Result<TopNResultValue>(input.getTimestamp() new BySegmentTopNResultValue(Lists.transform(value.getResults() new Function<Result<TopNResultValue> Result<TopNResultValue>>(){         @Override public Result<TopNResultValue> apply(        Result<TopNResultValue> input){           return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));         }       } ) value.getSegmentId() value.getIntervalString()));     }     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ),METHOD_INVOCATION, line no: 415, 0.8695652173913043, 0.8695652173913043, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,map,SIMPLE_NAME, line no: 415, 0.8695652173913043, 0.8695652173913043, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,runner.run(query.withThreshold(minTopNThreshold)),METHOD_INVOCATION, line no: 416, 0.8695652173913043, 0.8695652173913043, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,query.withThreshold(minTopNThreshold),METHOD_INVOCATION, line no: 416, 0.8695652173913043, 0.8695652173913043, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,withThreshold,SIMPLE_NAME, line no: 416, 0.8695652173913043, 0.8695652173913043, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     if (isBySegment) {       BySegmentTopNResultValue value=(BySegmentTopNResultValue)input.getValue();       return new Result<TopNResultValue>(input.getTimestamp() new BySegmentTopNResultValue(Lists.transform(value.getResults() new Function<Result<TopNResultValue> Result<TopNResultValue>>(){         @Override public Result<TopNResultValue> apply(        Result<TopNResultValue> input){           return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));         }       } ) value.getSegmentId() value.getIntervalString()));     }     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ,CLASS_INSTANCE_CREATION, line no: 417, 0.8695652173913043, 0.8695652173913043, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,BySegmentTopNResultValue,SIMPLE_NAME, line no: 423, 0.8695652173913043, 0.8695652173913043, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,value,SIMPLE_NAME, line no: 423, 0.8695652173913043, 0.8695652173913043, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,(BySegmentTopNResultValue)input.getValue(),CAST_EXPRESSION, line no: 423, 0.8695652173913043, 0.8695652173913043, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,new Result<TopNResultValue>(input.getTimestamp() new BySegmentTopNResultValue(Lists.transform(value.getResults() new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ) value.getSegmentId() value.getIntervalString())),CLASS_INSTANCE_CREATION, line no: 425, 0.8695652173913043, 0.8695652173913043, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,new BySegmentTopNResultValue(Lists.transform(value.getResults() new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ) value.getSegmentId() value.getIntervalString()),CLASS_INSTANCE_CREATION, line no: 427, 0.8695652173913043, 0.8695652173913043, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,Lists.transform(value.getResults() new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ),METHOD_INVOCATION, line no: 428, 0.8695652173913043, 0.8695652173913043, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,value.getResults(),METHOD_INVOCATION, line no: 429, 0.8695652173913043, 0.8695652173913043, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,getResults,SIMPLE_NAME, line no: 429, 0.8695652173913043, 0.8695652173913043, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ,CLASS_INSTANCE_CREATION, line no: 430, 0.8695652173913043, 0.8695652173913043, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold())))),CLASS_INSTANCE_CREATION, line no: 435, 0.8695652173913043, 0.6956521739130435, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))),CLASS_INSTANCE_CREATION, line no: 437, 0.8695652173913043, 0.6956521739130435, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold())),METHOD_INVOCATION, line no: 438, 0.8695652173913043, 0.7391304347826086, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,Iterables.limit(input.getValue() query.getThreshold()),METHOD_INVOCATION, line no: 439, 0.8695652173913043, 0.782608695652174, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,limit,SIMPLE_NAME, line no: 439, 0.8695652173913043, 0.782608695652174, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,value.getSegmentId(),METHOD_INVOCATION, line no: 449, 0.8695652173913043, 0.8695652173913043, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,value.getIntervalString(),METHOD_INVOCATION, line no: 450, 0.8695652173913043, 0.8695652173913043, 0.0
agg,SIMPLE_NAME, line no: 213,Ordering,SIMPLE_NAME, line no: 28, 0.8636363636363636, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,Ints,SIMPLE_NAME, line no: 29, 0.8636363636363636, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,Sequences,SIMPLE_NAME, line no: 34, 0.8636363636363636, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,BinaryFn,SIMPLE_NAME, line no: 35, 0.8636363636363636, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,Query,SIMPLE_NAME, line no: 41, 0.8636363636363636, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,QueryCacheHelper,SIMPLE_NAME, line no: 42, 0.8636363636363636, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,ResultMergeQueryRunner,SIMPLE_NAME, line no: 47, 0.8636363636363636, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,DimFilter,SIMPLE_NAME, line no: 52, 0.8636363636363636, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,ByteBuffer,SIMPLE_NAME, line no: 58, 0.8636363636363636, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,TOPN_QUERY,SIMPLE_NAME, line no: 67, 0.8636363636363636, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,runner,SIMPLE_NAME, line no: 86, 0.8636363636363636, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,new ResultMergeQueryRunner<Result<TopNResultValue>>(runner){   @Override protected Ordering<Result<TopNResultValue>> makeOrdering(  Query<Result<TopNResultValue>> query){     return Ordering.from(new ResultGranularTimestampComparator<TopNResultValue>(((TopNQuery)query).getGranularity()));   }   @Override protected BinaryFn<Result<TopNResultValue> Result<TopNResultValue> Result<TopNResultValue>> createMergeFn(  Query<Result<TopNResultValue>> input){     TopNQuery query=(TopNQuery)input;     return new TopNBinaryFn(TopNResultMerger.identity query.getGranularity() query.getDimensionSpec() query.getTopNMetricSpec() query.getThreshold() query.getAggregatorSpecs() query.getPostAggregatorSpecs());   } } ,CLASS_INSTANCE_CREATION, line no: 88, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,makeOrdering,SIMPLE_NAME, line no: 91, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,createMergeFn,SIMPLE_NAME, line no: 101, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,(TopNQuery)input,CAST_EXPRESSION, line no: 105, 0.8636363636363636, 0.8181818181818182, 0.0
agg,SIMPLE_NAME, line no: 213,dimensionSpecBytes,SIMPLE_NAME, line no: 265, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,query.getDimensionSpec().getCacheKey(),METHOD_INVOCATION, line no: 265, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,getCacheKey,SIMPLE_NAME, line no: 265, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,metricSpecBytes,SIMPLE_NAME, line no: 266, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,query.getTopNMetricSpec().getCacheKey(),METHOD_INVOCATION, line no: 266, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,dimFilter,SIMPLE_NAME, line no: 268, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,query.getDimensionsFilter(),METHOD_INVOCATION, line no: 268, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,getDimensionsFilter,SIMPLE_NAME, line no: 268, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,filterBytes,SIMPLE_NAME, line no: 269, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,dimFilter == null ? new byte[]{} : dimFilter.getCacheKey(),CONDITIONAL_EXPRESSION, line no: 269, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,dimFilter == null,INFIX_EXPRESSION, line no: 269, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,new byte[]{},ARRAY_CREATION, line no: 269, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,{},ARRAY_INITIALIZER, line no: 269, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,dimFilter.getCacheKey(),METHOD_INVOCATION, line no: 269, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,aggregatorBytes,SIMPLE_NAME, line no: 270, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,QueryCacheHelper.computeAggregatorBytes(query.getAggregatorSpecs()),METHOD_INVOCATION, line no: 270, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,computeAggregatorBytes,SIMPLE_NAME, line no: 270, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,granularityBytes,SIMPLE_NAME, line no: 271, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,query.getGranularity().cacheKey(),METHOD_INVOCATION, line no: 271, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,cacheKey,SIMPLE_NAME, line no: 271, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())).put(granularityBytes).put(filterBytes).put(aggregatorBytes).array(),METHOD_INVOCATION, line no: 273, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())).put(granularityBytes).put(filterBytes).put(aggregatorBytes),METHOD_INVOCATION, line no: 273, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())).put(granularityBytes).put(filterBytes),METHOD_INVOCATION, line no: 273, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())).put(granularityBytes),METHOD_INVOCATION, line no: 273, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())),METHOD_INVOCATION, line no: 273, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes),METHOD_INVOCATION, line no: 273, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes),METHOD_INVOCATION, line no: 273, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY),METHOD_INVOCATION, line no: 273, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length),METHOD_INVOCATION, line no: 273, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,allocate,SIMPLE_NAME, line no: 274, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length,INFIX_EXPRESSION, line no: 275, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,dimensionSpecBytes.length,QUALIFIED_NAME, line no: 275, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,length,SIMPLE_NAME, line no: 275, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,metricSpecBytes.length,QUALIFIED_NAME, line no: 275, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,4,NUMBER_LITERAL, line no: 275, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,granularityBytes.length,QUALIFIED_NAME, line no: 276, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,filterBytes.length,QUALIFIED_NAME, line no: 276, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,aggregatorBytes.length,QUALIFIED_NAME, line no: 276, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,Ints.toByteArray(query.getThreshold()),METHOD_INVOCATION, line no: 281, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,toByteArray,SIMPLE_NAME, line no: 281, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,array,SIMPLE_NAME, line no: 285, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,minTopNThreshold,SIMPLE_NAME, line no: 390, 0.8636363636363636, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,run,SIMPLE_NAME, line no: 402, 0.8636363636363636, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,!(input instanceof TopNQuery),PREFIX_EXPRESSION, line no: 404, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,(input instanceof TopNQuery),PARENTHESIZED_EXPRESSION, line no: 404, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,input instanceof TopNQuery,INSTANCEOF_EXPRESSION, line no: 404, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,query.getThreshold() > minTopNThreshold,INFIX_EXPRESSION, line no: 409, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,isBySegment,SIMPLE_NAME, line no: 413, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,query.getContextBySegment(false),METHOD_INVOCATION, line no: 413, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,getContextBySegment,SIMPLE_NAME, line no: 413, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,false,BOOLEAN_LITERAL, line no: 413, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,Sequences.map(runner.run(query.withThreshold(minTopNThreshold)) new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     if (isBySegment) {       BySegmentTopNResultValue value=(BySegmentTopNResultValue)input.getValue();       return new Result<TopNResultValue>(input.getTimestamp() new BySegmentTopNResultValue(Lists.transform(value.getResults() new Function<Result<TopNResultValue> Result<TopNResultValue>>(){         @Override public Result<TopNResultValue> apply(        Result<TopNResultValue> input){           return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));         }       } ) value.getSegmentId() value.getIntervalString()));     }     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ),METHOD_INVOCATION, line no: 415, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,map,SIMPLE_NAME, line no: 415, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,runner.run(query.withThreshold(minTopNThreshold)),METHOD_INVOCATION, line no: 416, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,query.withThreshold(minTopNThreshold),METHOD_INVOCATION, line no: 416, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,withThreshold,SIMPLE_NAME, line no: 416, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     if (isBySegment) {       BySegmentTopNResultValue value=(BySegmentTopNResultValue)input.getValue();       return new Result<TopNResultValue>(input.getTimestamp() new BySegmentTopNResultValue(Lists.transform(value.getResults() new Function<Result<TopNResultValue> Result<TopNResultValue>>(){         @Override public Result<TopNResultValue> apply(        Result<TopNResultValue> input){           return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));         }       } ) value.getSegmentId() value.getIntervalString()));     }     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ,CLASS_INSTANCE_CREATION, line no: 417, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,BySegmentTopNResultValue,SIMPLE_NAME, line no: 423, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,value,SIMPLE_NAME, line no: 423, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,(BySegmentTopNResultValue)input.getValue(),CAST_EXPRESSION, line no: 423, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,new Result<TopNResultValue>(input.getTimestamp() new BySegmentTopNResultValue(Lists.transform(value.getResults() new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ) value.getSegmentId() value.getIntervalString())),CLASS_INSTANCE_CREATION, line no: 425, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,new BySegmentTopNResultValue(Lists.transform(value.getResults() new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ) value.getSegmentId() value.getIntervalString()),CLASS_INSTANCE_CREATION, line no: 427, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,Lists.transform(value.getResults() new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ),METHOD_INVOCATION, line no: 428, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,value.getResults(),METHOD_INVOCATION, line no: 429, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,getResults,SIMPLE_NAME, line no: 429, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ,CLASS_INSTANCE_CREATION, line no: 430, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold())))),CLASS_INSTANCE_CREATION, line no: 435, 0.8636363636363636, 0.7727272727272727, 0.0
agg,SIMPLE_NAME, line no: 213,new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))),CLASS_INSTANCE_CREATION, line no: 437, 0.8636363636363636, 0.7727272727272727, 0.0
agg,SIMPLE_NAME, line no: 213,Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold())),METHOD_INVOCATION, line no: 438, 0.8636363636363636, 0.8181818181818182, 0.0
agg,SIMPLE_NAME, line no: 213,Iterables.limit(input.getValue() query.getThreshold()),METHOD_INVOCATION, line no: 439, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,limit,SIMPLE_NAME, line no: 439, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,value.getSegmentId(),METHOD_INVOCATION, line no: 449, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,getSegmentId,SIMPLE_NAME, line no: 449, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,value.getIntervalString(),METHOD_INVOCATION, line no: 450, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,getIntervalString,SIMPLE_NAME, line no: 450, 0.8636363636363636, 0.8636363636363636, 0.0
getName,SIMPLE_NAME, line no: 213,Ordering,SIMPLE_NAME, line no: 28, 0.8636363636363636, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,Ints,SIMPLE_NAME, line no: 29, 0.8636363636363636, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,Sequences,SIMPLE_NAME, line no: 34, 0.8636363636363636, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,BinaryFn,SIMPLE_NAME, line no: 35, 0.8636363636363636, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,Query,SIMPLE_NAME, line no: 41, 0.8636363636363636, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,QueryCacheHelper,SIMPLE_NAME, line no: 42, 0.8636363636363636, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,ResultMergeQueryRunner,SIMPLE_NAME, line no: 47, 0.8636363636363636, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,DimFilter,SIMPLE_NAME, line no: 52, 0.8636363636363636, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,ByteBuffer,SIMPLE_NAME, line no: 58, 0.8636363636363636, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,TOPN_QUERY,SIMPLE_NAME, line no: 67, 0.8636363636363636, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,runner,SIMPLE_NAME, line no: 86, 0.8636363636363636, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,new ResultMergeQueryRunner<Result<TopNResultValue>>(runner){   @Override protected Ordering<Result<TopNResultValue>> makeOrdering(  Query<Result<TopNResultValue>> query){     return Ordering.from(new ResultGranularTimestampComparator<TopNResultValue>(((TopNQuery)query).getGranularity()));   }   @Override protected BinaryFn<Result<TopNResultValue> Result<TopNResultValue> Result<TopNResultValue>> createMergeFn(  Query<Result<TopNResultValue>> input){     TopNQuery query=(TopNQuery)input;     return new TopNBinaryFn(TopNResultMerger.identity query.getGranularity() query.getDimensionSpec() query.getTopNMetricSpec() query.getThreshold() query.getAggregatorSpecs() query.getPostAggregatorSpecs());   } } ,CLASS_INSTANCE_CREATION, line no: 88, 0.8636363636363636, 0.8636363636363636, 0.0
getName,SIMPLE_NAME, line no: 213,makeOrdering,SIMPLE_NAME, line no: 91, 0.8636363636363636, 0.8636363636363636, 0.0
getName,SIMPLE_NAME, line no: 213,createMergeFn,SIMPLE_NAME, line no: 101, 0.8636363636363636, 0.8636363636363636, 0.0
getName,SIMPLE_NAME, line no: 213,(TopNQuery)input,CAST_EXPRESSION, line no: 105, 0.8636363636363636, 0.8181818181818182, 0.0
getName,SIMPLE_NAME, line no: 213,dimensionSpecBytes,SIMPLE_NAME, line no: 265, 0.8636363636363636, 0.8636363636363636, 0.0
getName,SIMPLE_NAME, line no: 213,query.getDimensionSpec().getCacheKey(),METHOD_INVOCATION, line no: 265, 0.8636363636363636, 0.8636363636363636, 0.0
getName,SIMPLE_NAME, line no: 213,getCacheKey,SIMPLE_NAME, line no: 265, 0.8636363636363636, 0.8636363636363636, 0.0
getName,SIMPLE_NAME, line no: 213,metricSpecBytes,SIMPLE_NAME, line no: 266, 0.8636363636363636, 0.8636363636363636, 0.0
getName,SIMPLE_NAME, line no: 213,query.getTopNMetricSpec().getCacheKey(),METHOD_INVOCATION, line no: 266, 0.8636363636363636, 0.8636363636363636, 0.0
getName,SIMPLE_NAME, line no: 213,dimFilter,SIMPLE_NAME, line no: 268, 0.8636363636363636, 0.8636363636363636, 0.0
getName,SIMPLE_NAME, line no: 213,query.getDimensionsFilter(),METHOD_INVOCATION, line no: 268, 0.8636363636363636, 0.8636363636363636, 0.0
getName,SIMPLE_NAME, line no: 213,getDimensionsFilter,SIMPLE_NAME, line no: 268, 0.8636363636363636, 0.8636363636363636, 0.0
getName,SIMPLE_NAME, line no: 213,filterBytes,SIMPLE_NAME, line no: 269, 0.8636363636363636, 0.8636363636363636, 0.0
getName,SIMPLE_NAME, line no: 213,dimFilter == null ? new byte[]{} : dimFilter.getCacheKey(),CONDITIONAL_EXPRESSION, line no: 269, 0.8636363636363636, 0.8636363636363636, 0.0
getName,SIMPLE_NAME, line no: 213,dimFilter == null,INFIX_EXPRESSION, line no: 269, 0.8636363636363636, 0.8636363636363636, 0.0
getName,SIMPLE_NAME, line no: 213,new byte[]{},ARRAY_CREATION, line no: 269, 0.8636363636363636, 0.8636363636363636, 0.0
getName,SIMPLE_NAME, line no: 213,{},ARRAY_INITIALIZER, line no: 269, 0.8636363636363636, 0.8636363636363636, 0.0
getName,SIMPLE_NAME, line no: 213,dimFilter.getCacheKey(),METHOD_INVOCATION, line no: 269, 0.8636363636363636, 0.8636363636363636, 0.0
getName,SIMPLE_NAME, line no: 213,aggregatorBytes,SIMPLE_NAME, line no: 270, 0.8636363636363636, 0.8636363636363636, 0.0
getName,SIMPLE_NAME, line no: 213,QueryCacheHelper.computeAggregatorBytes(query.getAggregatorSpecs()),METHOD_INVOCATION, line no: 270, 0.8636363636363636, 0.8636363636363636, 0.0
getName,SIMPLE_NAME, line no: 213,computeAggregatorBytes,SIMPLE_NAME, line no: 270, 0.8636363636363636, 0.8636363636363636, 0.0
getName,SIMPLE_NAME, line no: 213,granularityBytes,SIMPLE_NAME, line no: 271, 0.8636363636363636, 0.8636363636363636, 0.0
getName,SIMPLE_NAME, line no: 213,query.getGranularity().cacheKey(),METHOD_INVOCATION, line no: 271, 0.8636363636363636, 0.8636363636363636, 0.0
getName,SIMPLE_NAME, line no: 213,cacheKey,SIMPLE_NAME, line no: 271, 0.8636363636363636, 0.8636363636363636, 0.0
getName,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())).put(granularityBytes).put(filterBytes).put(aggregatorBytes).array(),METHOD_INVOCATION, line no: 273, 0.8636363636363636, 0.8636363636363636, 0.0
getName,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())).put(granularityBytes).put(filterBytes).put(aggregatorBytes),METHOD_INVOCATION, line no: 273, 0.8636363636363636, 0.8636363636363636, 0.0
getName,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())).put(granularityBytes).put(filterBytes),METHOD_INVOCATION, line no: 273, 0.8636363636363636, 0.8636363636363636, 0.0
getName,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())).put(granularityBytes),METHOD_INVOCATION, line no: 273, 0.8636363636363636, 0.8636363636363636, 0.0
getName,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())),METHOD_INVOCATION, line no: 273, 0.8636363636363636, 0.8636363636363636, 0.0
getName,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes),METHOD_INVOCATION, line no: 273, 0.8636363636363636, 0.8636363636363636, 0.0
getName,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes),METHOD_INVOCATION, line no: 273, 0.8636363636363636, 0.8636363636363636, 0.0
getName,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY),METHOD_INVOCATION, line no: 273, 0.8636363636363636, 0.8636363636363636, 0.0
getName,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length),METHOD_INVOCATION, line no: 273, 0.8636363636363636, 0.8636363636363636, 0.0
getName,SIMPLE_NAME, line no: 213,allocate,SIMPLE_NAME, line no: 274, 0.8636363636363636, 0.8636363636363636, 0.0
getName,SIMPLE_NAME, line no: 213,1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length,INFIX_EXPRESSION, line no: 275, 0.8636363636363636, 0.8636363636363636, 0.0
getName,SIMPLE_NAME, line no: 213,dimensionSpecBytes.length,QUALIFIED_NAME, line no: 275, 0.8636363636363636, 0.8636363636363636, 0.0
getName,SIMPLE_NAME, line no: 213,length,SIMPLE_NAME, line no: 275, 0.8636363636363636, 0.8636363636363636, 0.0
getName,SIMPLE_NAME, line no: 213,metricSpecBytes.length,QUALIFIED_NAME, line no: 275, 0.8636363636363636, 0.8636363636363636, 0.0
getName,SIMPLE_NAME, line no: 213,4,NUMBER_LITERAL, line no: 275, 0.8636363636363636, 0.8636363636363636, 0.0
getName,SIMPLE_NAME, line no: 213,granularityBytes.length,QUALIFIED_NAME, line no: 276, 0.8636363636363636, 0.8636363636363636, 0.0
getName,SIMPLE_NAME, line no: 213,filterBytes.length,QUALIFIED_NAME, line no: 276, 0.8636363636363636, 0.8636363636363636, 0.0
getName,SIMPLE_NAME, line no: 213,aggregatorBytes.length,QUALIFIED_NAME, line no: 276, 0.8636363636363636, 0.8636363636363636, 0.0
getName,SIMPLE_NAME, line no: 213,Ints.toByteArray(query.getThreshold()),METHOD_INVOCATION, line no: 281, 0.8636363636363636, 0.8636363636363636, 0.0
getName,SIMPLE_NAME, line no: 213,toByteArray,SIMPLE_NAME, line no: 281, 0.8636363636363636, 0.8636363636363636, 0.0
getName,SIMPLE_NAME, line no: 213,array,SIMPLE_NAME, line no: 285, 0.8636363636363636, 0.8636363636363636, 0.0
getName,SIMPLE_NAME, line no: 213,aggIter.next(),METHOD_INVOCATION, line no: 346, 0.8636363636363636, 0.8636363636363636, 0.0
getName,SIMPLE_NAME, line no: 213,minTopNThreshold,SIMPLE_NAME, line no: 390, 0.8636363636363636, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,run,SIMPLE_NAME, line no: 402, 0.8636363636363636, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,!(input instanceof TopNQuery),PREFIX_EXPRESSION, line no: 404, 0.8636363636363636, 0.8636363636363636, 0.0
getName,SIMPLE_NAME, line no: 213,(input instanceof TopNQuery),PARENTHESIZED_EXPRESSION, line no: 404, 0.8636363636363636, 0.8636363636363636, 0.0
getName,SIMPLE_NAME, line no: 213,input instanceof TopNQuery,INSTANCEOF_EXPRESSION, line no: 404, 0.8636363636363636, 0.8636363636363636, 0.0
getName,SIMPLE_NAME, line no: 213,query.getThreshold() > minTopNThreshold,INFIX_EXPRESSION, line no: 409, 0.8636363636363636, 0.8636363636363636, 0.0
getName,SIMPLE_NAME, line no: 213,isBySegment,SIMPLE_NAME, line no: 413, 0.8636363636363636, 0.8636363636363636, 0.0
getName,SIMPLE_NAME, line no: 213,query.getContextBySegment(false),METHOD_INVOCATION, line no: 413, 0.8636363636363636, 0.8636363636363636, 0.0
getName,SIMPLE_NAME, line no: 213,getContextBySegment,SIMPLE_NAME, line no: 413, 0.8636363636363636, 0.8636363636363636, 0.0
getName,SIMPLE_NAME, line no: 213,false,BOOLEAN_LITERAL, line no: 413, 0.8636363636363636, 0.8636363636363636, 0.0
getName,SIMPLE_NAME, line no: 213,Sequences.map(runner.run(query.withThreshold(minTopNThreshold)) new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     if (isBySegment) {       BySegmentTopNResultValue value=(BySegmentTopNResultValue)input.getValue();       return new Result<TopNResultValue>(input.getTimestamp() new BySegmentTopNResultValue(Lists.transform(value.getResults() new Function<Result<TopNResultValue> Result<TopNResultValue>>(){         @Override public Result<TopNResultValue> apply(        Result<TopNResultValue> input){           return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));         }       } ) value.getSegmentId() value.getIntervalString()));     }     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ),METHOD_INVOCATION, line no: 415, 0.8636363636363636, 0.8636363636363636, 0.0
getName,SIMPLE_NAME, line no: 213,map,SIMPLE_NAME, line no: 415, 0.8636363636363636, 0.8636363636363636, 0.0
getName,SIMPLE_NAME, line no: 213,runner.run(query.withThreshold(minTopNThreshold)),METHOD_INVOCATION, line no: 416, 0.8636363636363636, 0.8636363636363636, 0.0
getName,SIMPLE_NAME, line no: 213,query.withThreshold(minTopNThreshold),METHOD_INVOCATION, line no: 416, 0.8636363636363636, 0.8636363636363636, 0.0
getName,SIMPLE_NAME, line no: 213,withThreshold,SIMPLE_NAME, line no: 416, 0.8636363636363636, 0.8636363636363636, 0.0
getName,SIMPLE_NAME, line no: 213,new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     if (isBySegment) {       BySegmentTopNResultValue value=(BySegmentTopNResultValue)input.getValue();       return new Result<TopNResultValue>(input.getTimestamp() new BySegmentTopNResultValue(Lists.transform(value.getResults() new Function<Result<TopNResultValue> Result<TopNResultValue>>(){         @Override public Result<TopNResultValue> apply(        Result<TopNResultValue> input){           return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));         }       } ) value.getSegmentId() value.getIntervalString()));     }     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ,CLASS_INSTANCE_CREATION, line no: 417, 0.8636363636363636, 0.8636363636363636, 0.0
getName,SIMPLE_NAME, line no: 213,BySegmentTopNResultValue,SIMPLE_NAME, line no: 423, 0.8636363636363636, 0.8636363636363636, 0.0
getName,SIMPLE_NAME, line no: 213,value,SIMPLE_NAME, line no: 423, 0.8636363636363636, 0.8636363636363636, 0.0
getName,SIMPLE_NAME, line no: 213,(BySegmentTopNResultValue)input.getValue(),CAST_EXPRESSION, line no: 423, 0.8636363636363636, 0.8636363636363636, 0.0
getName,SIMPLE_NAME, line no: 213,new Result<TopNResultValue>(input.getTimestamp() new BySegmentTopNResultValue(Lists.transform(value.getResults() new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ) value.getSegmentId() value.getIntervalString())),CLASS_INSTANCE_CREATION, line no: 425, 0.8636363636363636, 0.8636363636363636, 0.0
getName,SIMPLE_NAME, line no: 213,new BySegmentTopNResultValue(Lists.transform(value.getResults() new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ) value.getSegmentId() value.getIntervalString()),CLASS_INSTANCE_CREATION, line no: 427, 0.8636363636363636, 0.8636363636363636, 0.0
getName,SIMPLE_NAME, line no: 213,Lists.transform(value.getResults() new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ),METHOD_INVOCATION, line no: 428, 0.8636363636363636, 0.8636363636363636, 0.0
getName,SIMPLE_NAME, line no: 213,value.getResults(),METHOD_INVOCATION, line no: 429, 0.8636363636363636, 0.8636363636363636, 0.0
getName,SIMPLE_NAME, line no: 213,getResults,SIMPLE_NAME, line no: 429, 0.8636363636363636, 0.8636363636363636, 0.0
getName,SIMPLE_NAME, line no: 213,new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ,CLASS_INSTANCE_CREATION, line no: 430, 0.8636363636363636, 0.8636363636363636, 0.0
getName,SIMPLE_NAME, line no: 213,new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold())))),CLASS_INSTANCE_CREATION, line no: 435, 0.8636363636363636, 0.7727272727272727, 0.0
getName,SIMPLE_NAME, line no: 213,new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))),CLASS_INSTANCE_CREATION, line no: 437, 0.8636363636363636, 0.7727272727272727, 0.0
getName,SIMPLE_NAME, line no: 213,Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold())),METHOD_INVOCATION, line no: 438, 0.8636363636363636, 0.8181818181818182, 0.0
getName,SIMPLE_NAME, line no: 213,Iterables.limit(input.getValue() query.getThreshold()),METHOD_INVOCATION, line no: 439, 0.8636363636363636, 0.8636363636363636, 0.0
getName,SIMPLE_NAME, line no: 213,limit,SIMPLE_NAME, line no: 439, 0.8636363636363636, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,Ordering,SIMPLE_NAME, line no: 28, 0.8636363636363636, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,Ints,SIMPLE_NAME, line no: 29, 0.8636363636363636, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,Sequences,SIMPLE_NAME, line no: 34, 0.8636363636363636, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,BinaryFn,SIMPLE_NAME, line no: 35, 0.8636363636363636, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,Query,SIMPLE_NAME, line no: 41, 0.8636363636363636, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,QueryCacheHelper,SIMPLE_NAME, line no: 42, 0.8636363636363636, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,ResultMergeQueryRunner,SIMPLE_NAME, line no: 47, 0.8636363636363636, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,DimFilter,SIMPLE_NAME, line no: 52, 0.8636363636363636, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,ByteBuffer,SIMPLE_NAME, line no: 58, 0.8636363636363636, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,TOPN_QUERY,SIMPLE_NAME, line no: 67, 0.8636363636363636, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,runner,SIMPLE_NAME, line no: 86, 0.8636363636363636, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,new ResultMergeQueryRunner<Result<TopNResultValue>>(runner){   @Override protected Ordering<Result<TopNResultValue>> makeOrdering(  Query<Result<TopNResultValue>> query){     return Ordering.from(new ResultGranularTimestampComparator<TopNResultValue>(((TopNQuery)query).getGranularity()));   }   @Override protected BinaryFn<Result<TopNResultValue> Result<TopNResultValue> Result<TopNResultValue>> createMergeFn(  Query<Result<TopNResultValue>> input){     TopNQuery query=(TopNQuery)input;     return new TopNBinaryFn(TopNResultMerger.identity query.getGranularity() query.getDimensionSpec() query.getTopNMetricSpec() query.getThreshold() query.getAggregatorSpecs() query.getPostAggregatorSpecs());   } } ,CLASS_INSTANCE_CREATION, line no: 88, 0.8636363636363636, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,makeOrdering,SIMPLE_NAME, line no: 91, 0.8636363636363636, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,createMergeFn,SIMPLE_NAME, line no: 101, 0.8636363636363636, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,(TopNQuery)input,CAST_EXPRESSION, line no: 105, 0.8636363636363636, 0.8181818181818182, 0.0
fn,SIMPLE_NAME, line no: 213,dimensionSpecBytes,SIMPLE_NAME, line no: 265, 0.8636363636363636, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,query.getDimensionSpec().getCacheKey(),METHOD_INVOCATION, line no: 265, 0.8636363636363636, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,getCacheKey,SIMPLE_NAME, line no: 265, 0.8636363636363636, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,metricSpecBytes,SIMPLE_NAME, line no: 266, 0.8636363636363636, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,query.getTopNMetricSpec().getCacheKey(),METHOD_INVOCATION, line no: 266, 0.8636363636363636, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,dimFilter,SIMPLE_NAME, line no: 268, 0.8636363636363636, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,query.getDimensionsFilter(),METHOD_INVOCATION, line no: 268, 0.8636363636363636, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,getDimensionsFilter,SIMPLE_NAME, line no: 268, 0.8636363636363636, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,filterBytes,SIMPLE_NAME, line no: 269, 0.8636363636363636, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,dimFilter == null ? new byte[]{} : dimFilter.getCacheKey(),CONDITIONAL_EXPRESSION, line no: 269, 0.8636363636363636, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,dimFilter == null,INFIX_EXPRESSION, line no: 269, 0.8636363636363636, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,new byte[]{},ARRAY_CREATION, line no: 269, 0.8636363636363636, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,{},ARRAY_INITIALIZER, line no: 269, 0.8636363636363636, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,dimFilter.getCacheKey(),METHOD_INVOCATION, line no: 269, 0.8636363636363636, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,aggregatorBytes,SIMPLE_NAME, line no: 270, 0.8636363636363636, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,QueryCacheHelper.computeAggregatorBytes(query.getAggregatorSpecs()),METHOD_INVOCATION, line no: 270, 0.8636363636363636, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,computeAggregatorBytes,SIMPLE_NAME, line no: 270, 0.8636363636363636, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,granularityBytes,SIMPLE_NAME, line no: 271, 0.8636363636363636, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,query.getGranularity().cacheKey(),METHOD_INVOCATION, line no: 271, 0.8636363636363636, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,cacheKey,SIMPLE_NAME, line no: 271, 0.8636363636363636, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())).put(granularityBytes).put(filterBytes).put(aggregatorBytes).array(),METHOD_INVOCATION, line no: 273, 0.8636363636363636, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())).put(granularityBytes).put(filterBytes).put(aggregatorBytes),METHOD_INVOCATION, line no: 273, 0.8636363636363636, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())).put(granularityBytes).put(filterBytes),METHOD_INVOCATION, line no: 273, 0.8636363636363636, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())).put(granularityBytes),METHOD_INVOCATION, line no: 273, 0.8636363636363636, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())),METHOD_INVOCATION, line no: 273, 0.8636363636363636, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes),METHOD_INVOCATION, line no: 273, 0.8636363636363636, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes),METHOD_INVOCATION, line no: 273, 0.8636363636363636, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY),METHOD_INVOCATION, line no: 273, 0.8636363636363636, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length),METHOD_INVOCATION, line no: 273, 0.8636363636363636, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,allocate,SIMPLE_NAME, line no: 274, 0.8636363636363636, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length,INFIX_EXPRESSION, line no: 275, 0.8636363636363636, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,dimensionSpecBytes.length,QUALIFIED_NAME, line no: 275, 0.8636363636363636, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,length,SIMPLE_NAME, line no: 275, 0.8636363636363636, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,metricSpecBytes.length,QUALIFIED_NAME, line no: 275, 0.8636363636363636, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,4,NUMBER_LITERAL, line no: 275, 0.8636363636363636, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,granularityBytes.length,QUALIFIED_NAME, line no: 276, 0.8636363636363636, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,filterBytes.length,QUALIFIED_NAME, line no: 276, 0.8636363636363636, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,aggregatorBytes.length,QUALIFIED_NAME, line no: 276, 0.8636363636363636, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,Ints.toByteArray(query.getThreshold()),METHOD_INVOCATION, line no: 281, 0.8636363636363636, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,toByteArray,SIMPLE_NAME, line no: 281, 0.8636363636363636, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,array,SIMPLE_NAME, line no: 285, 0.8636363636363636, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,aggIter.next(),METHOD_INVOCATION, line no: 346, 0.8636363636363636, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,minTopNThreshold,SIMPLE_NAME, line no: 390, 0.8636363636363636, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,run,SIMPLE_NAME, line no: 402, 0.8636363636363636, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,!(input instanceof TopNQuery),PREFIX_EXPRESSION, line no: 404, 0.8636363636363636, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,(input instanceof TopNQuery),PARENTHESIZED_EXPRESSION, line no: 404, 0.8636363636363636, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,input instanceof TopNQuery,INSTANCEOF_EXPRESSION, line no: 404, 0.8636363636363636, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,query.getThreshold() > minTopNThreshold,INFIX_EXPRESSION, line no: 409, 0.8636363636363636, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,isBySegment,SIMPLE_NAME, line no: 413, 0.8636363636363636, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,query.getContextBySegment(false),METHOD_INVOCATION, line no: 413, 0.8636363636363636, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,getContextBySegment,SIMPLE_NAME, line no: 413, 0.8636363636363636, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,false,BOOLEAN_LITERAL, line no: 413, 0.8636363636363636, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,Sequences.map(runner.run(query.withThreshold(minTopNThreshold)) new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     if (isBySegment) {       BySegmentTopNResultValue value=(BySegmentTopNResultValue)input.getValue();       return new Result<TopNResultValue>(input.getTimestamp() new BySegmentTopNResultValue(Lists.transform(value.getResults() new Function<Result<TopNResultValue> Result<TopNResultValue>>(){         @Override public Result<TopNResultValue> apply(        Result<TopNResultValue> input){           return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));         }       } ) value.getSegmentId() value.getIntervalString()));     }     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ),METHOD_INVOCATION, line no: 415, 0.8636363636363636, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,map,SIMPLE_NAME, line no: 415, 0.8636363636363636, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,runner.run(query.withThreshold(minTopNThreshold)),METHOD_INVOCATION, line no: 416, 0.8636363636363636, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,query.withThreshold(minTopNThreshold),METHOD_INVOCATION, line no: 416, 0.8636363636363636, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,withThreshold,SIMPLE_NAME, line no: 416, 0.8636363636363636, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     if (isBySegment) {       BySegmentTopNResultValue value=(BySegmentTopNResultValue)input.getValue();       return new Result<TopNResultValue>(input.getTimestamp() new BySegmentTopNResultValue(Lists.transform(value.getResults() new Function<Result<TopNResultValue> Result<TopNResultValue>>(){         @Override public Result<TopNResultValue> apply(        Result<TopNResultValue> input){           return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));         }       } ) value.getSegmentId() value.getIntervalString()));     }     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ,CLASS_INSTANCE_CREATION, line no: 417, 0.8636363636363636, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,BySegmentTopNResultValue,SIMPLE_NAME, line no: 423, 0.8636363636363636, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,value,SIMPLE_NAME, line no: 423, 0.8636363636363636, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,(BySegmentTopNResultValue)input.getValue(),CAST_EXPRESSION, line no: 423, 0.8636363636363636, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,new Result<TopNResultValue>(input.getTimestamp() new BySegmentTopNResultValue(Lists.transform(value.getResults() new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ) value.getSegmentId() value.getIntervalString())),CLASS_INSTANCE_CREATION, line no: 425, 0.8636363636363636, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,new BySegmentTopNResultValue(Lists.transform(value.getResults() new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ) value.getSegmentId() value.getIntervalString()),CLASS_INSTANCE_CREATION, line no: 427, 0.8636363636363636, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,Lists.transform(value.getResults() new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ),METHOD_INVOCATION, line no: 428, 0.8636363636363636, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,value.getResults(),METHOD_INVOCATION, line no: 429, 0.8636363636363636, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,getResults,SIMPLE_NAME, line no: 429, 0.8636363636363636, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ,CLASS_INSTANCE_CREATION, line no: 430, 0.8636363636363636, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold())))),CLASS_INSTANCE_CREATION, line no: 435, 0.8636363636363636, 0.7727272727272727, 0.0
fn,SIMPLE_NAME, line no: 213,new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))),CLASS_INSTANCE_CREATION, line no: 437, 0.8636363636363636, 0.7727272727272727, 0.0
fn,SIMPLE_NAME, line no: 213,Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold())),METHOD_INVOCATION, line no: 438, 0.8636363636363636, 0.8181818181818182, 0.0
fn,SIMPLE_NAME, line no: 213,Iterables.limit(input.getValue() query.getThreshold()),METHOD_INVOCATION, line no: 439, 0.8636363636363636, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,limit,SIMPLE_NAME, line no: 439, 0.8636363636363636, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,value.getSegmentId(),METHOD_INVOCATION, line no: 449, 0.8636363636363636, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,getSegmentId,SIMPLE_NAME, line no: 449, 0.8636363636363636, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,value.getIntervalString(),METHOD_INVOCATION, line no: 450, 0.8636363636363636, 0.8636363636363636, 0.0
fn,SIMPLE_NAME, line no: 213,getIntervalString,SIMPLE_NAME, line no: 450, 0.8636363636363636, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,Ordering,SIMPLE_NAME, line no: 28, 0.8636363636363636, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,Ints,SIMPLE_NAME, line no: 29, 0.8636363636363636, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,Sequences,SIMPLE_NAME, line no: 34, 0.8636363636363636, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,BinaryFn,SIMPLE_NAME, line no: 35, 0.8636363636363636, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,Query,SIMPLE_NAME, line no: 41, 0.8636363636363636, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,QueryCacheHelper,SIMPLE_NAME, line no: 42, 0.8636363636363636, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,ResultMergeQueryRunner,SIMPLE_NAME, line no: 47, 0.8636363636363636, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,DimFilter,SIMPLE_NAME, line no: 52, 0.8636363636363636, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,ByteBuffer,SIMPLE_NAME, line no: 58, 0.8636363636363636, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,TOPN_QUERY,SIMPLE_NAME, line no: 67, 0.8636363636363636, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,runner,SIMPLE_NAME, line no: 86, 0.8636363636363636, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,new ResultMergeQueryRunner<Result<TopNResultValue>>(runner){   @Override protected Ordering<Result<TopNResultValue>> makeOrdering(  Query<Result<TopNResultValue>> query){     return Ordering.from(new ResultGranularTimestampComparator<TopNResultValue>(((TopNQuery)query).getGranularity()));   }   @Override protected BinaryFn<Result<TopNResultValue> Result<TopNResultValue> Result<TopNResultValue>> createMergeFn(  Query<Result<TopNResultValue>> input){     TopNQuery query=(TopNQuery)input;     return new TopNBinaryFn(TopNResultMerger.identity query.getGranularity() query.getDimensionSpec() query.getTopNMetricSpec() query.getThreshold() query.getAggregatorSpecs() query.getPostAggregatorSpecs());   } } ,CLASS_INSTANCE_CREATION, line no: 88, 0.8636363636363636, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,makeOrdering,SIMPLE_NAME, line no: 91, 0.8636363636363636, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,createMergeFn,SIMPLE_NAME, line no: 101, 0.8636363636363636, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,(TopNQuery)input,CAST_EXPRESSION, line no: 105, 0.8636363636363636, 0.8181818181818182, 0.0
manipulate,SIMPLE_NAME, line no: 213,dimensionSpecBytes,SIMPLE_NAME, line no: 265, 0.8636363636363636, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,query.getDimensionSpec().getCacheKey(),METHOD_INVOCATION, line no: 265, 0.8636363636363636, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,getCacheKey,SIMPLE_NAME, line no: 265, 0.8636363636363636, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,metricSpecBytes,SIMPLE_NAME, line no: 266, 0.8636363636363636, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,query.getTopNMetricSpec().getCacheKey(),METHOD_INVOCATION, line no: 266, 0.8636363636363636, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,dimFilter,SIMPLE_NAME, line no: 268, 0.8636363636363636, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,query.getDimensionsFilter(),METHOD_INVOCATION, line no: 268, 0.8636363636363636, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,getDimensionsFilter,SIMPLE_NAME, line no: 268, 0.8636363636363636, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,filterBytes,SIMPLE_NAME, line no: 269, 0.8636363636363636, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,dimFilter == null ? new byte[]{} : dimFilter.getCacheKey(),CONDITIONAL_EXPRESSION, line no: 269, 0.8636363636363636, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,dimFilter == null,INFIX_EXPRESSION, line no: 269, 0.8636363636363636, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,new byte[]{},ARRAY_CREATION, line no: 269, 0.8636363636363636, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,{},ARRAY_INITIALIZER, line no: 269, 0.8636363636363636, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,dimFilter.getCacheKey(),METHOD_INVOCATION, line no: 269, 0.8636363636363636, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,aggregatorBytes,SIMPLE_NAME, line no: 270, 0.8636363636363636, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,QueryCacheHelper.computeAggregatorBytes(query.getAggregatorSpecs()),METHOD_INVOCATION, line no: 270, 0.8636363636363636, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,computeAggregatorBytes,SIMPLE_NAME, line no: 270, 0.8636363636363636, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,granularityBytes,SIMPLE_NAME, line no: 271, 0.8636363636363636, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,query.getGranularity().cacheKey(),METHOD_INVOCATION, line no: 271, 0.8636363636363636, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,cacheKey,SIMPLE_NAME, line no: 271, 0.8636363636363636, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())).put(granularityBytes).put(filterBytes).put(aggregatorBytes).array(),METHOD_INVOCATION, line no: 273, 0.8636363636363636, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())).put(granularityBytes).put(filterBytes).put(aggregatorBytes),METHOD_INVOCATION, line no: 273, 0.8636363636363636, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())).put(granularityBytes).put(filterBytes),METHOD_INVOCATION, line no: 273, 0.8636363636363636, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())).put(granularityBytes),METHOD_INVOCATION, line no: 273, 0.8636363636363636, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())),METHOD_INVOCATION, line no: 273, 0.8636363636363636, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes),METHOD_INVOCATION, line no: 273, 0.8636363636363636, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes),METHOD_INVOCATION, line no: 273, 0.8636363636363636, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY),METHOD_INVOCATION, line no: 273, 0.8636363636363636, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length),METHOD_INVOCATION, line no: 273, 0.8636363636363636, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,allocate,SIMPLE_NAME, line no: 274, 0.8636363636363636, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length,INFIX_EXPRESSION, line no: 275, 0.8636363636363636, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,dimensionSpecBytes.length,QUALIFIED_NAME, line no: 275, 0.8636363636363636, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,length,SIMPLE_NAME, line no: 275, 0.8636363636363636, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,metricSpecBytes.length,QUALIFIED_NAME, line no: 275, 0.8636363636363636, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,4,NUMBER_LITERAL, line no: 275, 0.8636363636363636, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,granularityBytes.length,QUALIFIED_NAME, line no: 276, 0.8636363636363636, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,filterBytes.length,QUALIFIED_NAME, line no: 276, 0.8636363636363636, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,aggregatorBytes.length,QUALIFIED_NAME, line no: 276, 0.8636363636363636, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,Ints.toByteArray(query.getThreshold()),METHOD_INVOCATION, line no: 281, 0.8636363636363636, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,toByteArray,SIMPLE_NAME, line no: 281, 0.8636363636363636, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,array,SIMPLE_NAME, line no: 285, 0.8636363636363636, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,aggIter.next(),METHOD_INVOCATION, line no: 346, 0.8636363636363636, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,minTopNThreshold,SIMPLE_NAME, line no: 390, 0.8636363636363636, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,run,SIMPLE_NAME, line no: 402, 0.8636363636363636, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,!(input instanceof TopNQuery),PREFIX_EXPRESSION, line no: 404, 0.8636363636363636, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,(input instanceof TopNQuery),PARENTHESIZED_EXPRESSION, line no: 404, 0.8636363636363636, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,input instanceof TopNQuery,INSTANCEOF_EXPRESSION, line no: 404, 0.8636363636363636, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,query.getThreshold() > minTopNThreshold,INFIX_EXPRESSION, line no: 409, 0.8636363636363636, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,isBySegment,SIMPLE_NAME, line no: 413, 0.8636363636363636, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,query.getContextBySegment(false),METHOD_INVOCATION, line no: 413, 0.8636363636363636, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,getContextBySegment,SIMPLE_NAME, line no: 413, 0.8636363636363636, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,false,BOOLEAN_LITERAL, line no: 413, 0.8636363636363636, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,Sequences.map(runner.run(query.withThreshold(minTopNThreshold)) new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     if (isBySegment) {       BySegmentTopNResultValue value=(BySegmentTopNResultValue)input.getValue();       return new Result<TopNResultValue>(input.getTimestamp() new BySegmentTopNResultValue(Lists.transform(value.getResults() new Function<Result<TopNResultValue> Result<TopNResultValue>>(){         @Override public Result<TopNResultValue> apply(        Result<TopNResultValue> input){           return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));         }       } ) value.getSegmentId() value.getIntervalString()));     }     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ),METHOD_INVOCATION, line no: 415, 0.8636363636363636, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,map,SIMPLE_NAME, line no: 415, 0.8636363636363636, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,runner.run(query.withThreshold(minTopNThreshold)),METHOD_INVOCATION, line no: 416, 0.8636363636363636, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,query.withThreshold(minTopNThreshold),METHOD_INVOCATION, line no: 416, 0.8636363636363636, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,withThreshold,SIMPLE_NAME, line no: 416, 0.8636363636363636, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     if (isBySegment) {       BySegmentTopNResultValue value=(BySegmentTopNResultValue)input.getValue();       return new Result<TopNResultValue>(input.getTimestamp() new BySegmentTopNResultValue(Lists.transform(value.getResults() new Function<Result<TopNResultValue> Result<TopNResultValue>>(){         @Override public Result<TopNResultValue> apply(        Result<TopNResultValue> input){           return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));         }       } ) value.getSegmentId() value.getIntervalString()));     }     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ,CLASS_INSTANCE_CREATION, line no: 417, 0.8636363636363636, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,BySegmentTopNResultValue,SIMPLE_NAME, line no: 423, 0.8636363636363636, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,value,SIMPLE_NAME, line no: 423, 0.8636363636363636, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,(BySegmentTopNResultValue)input.getValue(),CAST_EXPRESSION, line no: 423, 0.8636363636363636, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,new Result<TopNResultValue>(input.getTimestamp() new BySegmentTopNResultValue(Lists.transform(value.getResults() new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ) value.getSegmentId() value.getIntervalString())),CLASS_INSTANCE_CREATION, line no: 425, 0.8636363636363636, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,new BySegmentTopNResultValue(Lists.transform(value.getResults() new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ) value.getSegmentId() value.getIntervalString()),CLASS_INSTANCE_CREATION, line no: 427, 0.8636363636363636, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,Lists.transform(value.getResults() new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ),METHOD_INVOCATION, line no: 428, 0.8636363636363636, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,value.getResults(),METHOD_INVOCATION, line no: 429, 0.8636363636363636, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,getResults,SIMPLE_NAME, line no: 429, 0.8636363636363636, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ,CLASS_INSTANCE_CREATION, line no: 430, 0.8636363636363636, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold())))),CLASS_INSTANCE_CREATION, line no: 435, 0.8636363636363636, 0.7727272727272727, 0.0
manipulate,SIMPLE_NAME, line no: 213,new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))),CLASS_INSTANCE_CREATION, line no: 437, 0.8636363636363636, 0.7727272727272727, 0.0
manipulate,SIMPLE_NAME, line no: 213,Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold())),METHOD_INVOCATION, line no: 438, 0.8636363636363636, 0.8181818181818182, 0.0
manipulate,SIMPLE_NAME, line no: 213,Iterables.limit(input.getValue() query.getThreshold()),METHOD_INVOCATION, line no: 439, 0.8636363636363636, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,limit,SIMPLE_NAME, line no: 439, 0.8636363636363636, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,value.getSegmentId(),METHOD_INVOCATION, line no: 449, 0.8636363636363636, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,getSegmentId,SIMPLE_NAME, line no: 449, 0.8636363636363636, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,value.getIntervalString(),METHOD_INVOCATION, line no: 450, 0.8636363636363636, 0.8636363636363636, 0.0
manipulate,SIMPLE_NAME, line no: 213,getIntervalString,SIMPLE_NAME, line no: 450, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,Ordering,SIMPLE_NAME, line no: 28, 0.8636363636363636, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,Ints,SIMPLE_NAME, line no: 29, 0.8636363636363636, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,Sequences,SIMPLE_NAME, line no: 34, 0.8636363636363636, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,BinaryFn,SIMPLE_NAME, line no: 35, 0.8636363636363636, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,Query,SIMPLE_NAME, line no: 41, 0.8636363636363636, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,QueryCacheHelper,SIMPLE_NAME, line no: 42, 0.8636363636363636, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,ResultMergeQueryRunner,SIMPLE_NAME, line no: 47, 0.8636363636363636, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,DimFilter,SIMPLE_NAME, line no: 52, 0.8636363636363636, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,ByteBuffer,SIMPLE_NAME, line no: 58, 0.8636363636363636, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,TOPN_QUERY,SIMPLE_NAME, line no: 67, 0.8636363636363636, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,runner,SIMPLE_NAME, line no: 86, 0.8636363636363636, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,new ResultMergeQueryRunner<Result<TopNResultValue>>(runner){   @Override protected Ordering<Result<TopNResultValue>> makeOrdering(  Query<Result<TopNResultValue>> query){     return Ordering.from(new ResultGranularTimestampComparator<TopNResultValue>(((TopNQuery)query).getGranularity()));   }   @Override protected BinaryFn<Result<TopNResultValue> Result<TopNResultValue> Result<TopNResultValue>> createMergeFn(  Query<Result<TopNResultValue>> input){     TopNQuery query=(TopNQuery)input;     return new TopNBinaryFn(TopNResultMerger.identity query.getGranularity() query.getDimensionSpec() query.getTopNMetricSpec() query.getThreshold() query.getAggregatorSpecs() query.getPostAggregatorSpecs());   } } ,CLASS_INSTANCE_CREATION, line no: 88, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,makeOrdering,SIMPLE_NAME, line no: 91, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,createMergeFn,SIMPLE_NAME, line no: 101, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,(TopNQuery)input,CAST_EXPRESSION, line no: 105, 0.8636363636363636, 0.8181818181818182, 0.0
agg,SIMPLE_NAME, line no: 213,dimensionSpecBytes,SIMPLE_NAME, line no: 265, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,query.getDimensionSpec().getCacheKey(),METHOD_INVOCATION, line no: 265, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,getCacheKey,SIMPLE_NAME, line no: 265, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,metricSpecBytes,SIMPLE_NAME, line no: 266, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,query.getTopNMetricSpec().getCacheKey(),METHOD_INVOCATION, line no: 266, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,dimFilter,SIMPLE_NAME, line no: 268, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,query.getDimensionsFilter(),METHOD_INVOCATION, line no: 268, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,getDimensionsFilter,SIMPLE_NAME, line no: 268, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,filterBytes,SIMPLE_NAME, line no: 269, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,dimFilter == null ? new byte[]{} : dimFilter.getCacheKey(),CONDITIONAL_EXPRESSION, line no: 269, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,dimFilter == null,INFIX_EXPRESSION, line no: 269, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,new byte[]{},ARRAY_CREATION, line no: 269, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,{},ARRAY_INITIALIZER, line no: 269, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,dimFilter.getCacheKey(),METHOD_INVOCATION, line no: 269, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,aggregatorBytes,SIMPLE_NAME, line no: 270, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,QueryCacheHelper.computeAggregatorBytes(query.getAggregatorSpecs()),METHOD_INVOCATION, line no: 270, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,computeAggregatorBytes,SIMPLE_NAME, line no: 270, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,granularityBytes,SIMPLE_NAME, line no: 271, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,query.getGranularity().cacheKey(),METHOD_INVOCATION, line no: 271, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,cacheKey,SIMPLE_NAME, line no: 271, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())).put(granularityBytes).put(filterBytes).put(aggregatorBytes).array(),METHOD_INVOCATION, line no: 273, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())).put(granularityBytes).put(filterBytes).put(aggregatorBytes),METHOD_INVOCATION, line no: 273, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())).put(granularityBytes).put(filterBytes),METHOD_INVOCATION, line no: 273, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())).put(granularityBytes),METHOD_INVOCATION, line no: 273, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())),METHOD_INVOCATION, line no: 273, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes),METHOD_INVOCATION, line no: 273, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes),METHOD_INVOCATION, line no: 273, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY),METHOD_INVOCATION, line no: 273, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length),METHOD_INVOCATION, line no: 273, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,allocate,SIMPLE_NAME, line no: 274, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length,INFIX_EXPRESSION, line no: 275, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,dimensionSpecBytes.length,QUALIFIED_NAME, line no: 275, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,length,SIMPLE_NAME, line no: 275, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,metricSpecBytes.length,QUALIFIED_NAME, line no: 275, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,4,NUMBER_LITERAL, line no: 275, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,granularityBytes.length,QUALIFIED_NAME, line no: 276, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,filterBytes.length,QUALIFIED_NAME, line no: 276, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,aggregatorBytes.length,QUALIFIED_NAME, line no: 276, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,Ints.toByteArray(query.getThreshold()),METHOD_INVOCATION, line no: 281, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,toByteArray,SIMPLE_NAME, line no: 281, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,array,SIMPLE_NAME, line no: 285, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,minTopNThreshold,SIMPLE_NAME, line no: 390, 0.8636363636363636, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,run,SIMPLE_NAME, line no: 402, 0.8636363636363636, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,!(input instanceof TopNQuery),PREFIX_EXPRESSION, line no: 404, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,(input instanceof TopNQuery),PARENTHESIZED_EXPRESSION, line no: 404, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,input instanceof TopNQuery,INSTANCEOF_EXPRESSION, line no: 404, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,query.getThreshold() > minTopNThreshold,INFIX_EXPRESSION, line no: 409, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,isBySegment,SIMPLE_NAME, line no: 413, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,query.getContextBySegment(false),METHOD_INVOCATION, line no: 413, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,getContextBySegment,SIMPLE_NAME, line no: 413, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,false,BOOLEAN_LITERAL, line no: 413, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,Sequences.map(runner.run(query.withThreshold(minTopNThreshold)) new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     if (isBySegment) {       BySegmentTopNResultValue value=(BySegmentTopNResultValue)input.getValue();       return new Result<TopNResultValue>(input.getTimestamp() new BySegmentTopNResultValue(Lists.transform(value.getResults() new Function<Result<TopNResultValue> Result<TopNResultValue>>(){         @Override public Result<TopNResultValue> apply(        Result<TopNResultValue> input){           return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));         }       } ) value.getSegmentId() value.getIntervalString()));     }     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ),METHOD_INVOCATION, line no: 415, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,map,SIMPLE_NAME, line no: 415, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,runner.run(query.withThreshold(minTopNThreshold)),METHOD_INVOCATION, line no: 416, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,query.withThreshold(minTopNThreshold),METHOD_INVOCATION, line no: 416, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,withThreshold,SIMPLE_NAME, line no: 416, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     if (isBySegment) {       BySegmentTopNResultValue value=(BySegmentTopNResultValue)input.getValue();       return new Result<TopNResultValue>(input.getTimestamp() new BySegmentTopNResultValue(Lists.transform(value.getResults() new Function<Result<TopNResultValue> Result<TopNResultValue>>(){         @Override public Result<TopNResultValue> apply(        Result<TopNResultValue> input){           return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));         }       } ) value.getSegmentId() value.getIntervalString()));     }     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ,CLASS_INSTANCE_CREATION, line no: 417, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,BySegmentTopNResultValue,SIMPLE_NAME, line no: 423, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,value,SIMPLE_NAME, line no: 423, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,(BySegmentTopNResultValue)input.getValue(),CAST_EXPRESSION, line no: 423, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,new Result<TopNResultValue>(input.getTimestamp() new BySegmentTopNResultValue(Lists.transform(value.getResults() new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ) value.getSegmentId() value.getIntervalString())),CLASS_INSTANCE_CREATION, line no: 425, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,new BySegmentTopNResultValue(Lists.transform(value.getResults() new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ) value.getSegmentId() value.getIntervalString()),CLASS_INSTANCE_CREATION, line no: 427, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,Lists.transform(value.getResults() new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ),METHOD_INVOCATION, line no: 428, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,value.getResults(),METHOD_INVOCATION, line no: 429, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,getResults,SIMPLE_NAME, line no: 429, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ,CLASS_INSTANCE_CREATION, line no: 430, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold())))),CLASS_INSTANCE_CREATION, line no: 435, 0.8636363636363636, 0.7727272727272727, 0.0
agg,SIMPLE_NAME, line no: 213,new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))),CLASS_INSTANCE_CREATION, line no: 437, 0.8636363636363636, 0.7727272727272727, 0.0
agg,SIMPLE_NAME, line no: 213,Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold())),METHOD_INVOCATION, line no: 438, 0.8636363636363636, 0.8181818181818182, 0.0
agg,SIMPLE_NAME, line no: 213,Iterables.limit(input.getValue() query.getThreshold()),METHOD_INVOCATION, line no: 439, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,limit,SIMPLE_NAME, line no: 439, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,value.getSegmentId(),METHOD_INVOCATION, line no: 449, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,getSegmentId,SIMPLE_NAME, line no: 449, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,value.getIntervalString(),METHOD_INVOCATION, line no: 450, 0.8636363636363636, 0.8636363636363636, 0.0
agg,SIMPLE_NAME, line no: 213,getIntervalString,SIMPLE_NAME, line no: 450, 0.8636363636363636, 0.8636363636363636, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,Ordering,SIMPLE_NAME, line no: 28, 0.8636363636363636, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,Ints,SIMPLE_NAME, line no: 29, 0.8636363636363636, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,Sequences,SIMPLE_NAME, line no: 34, 0.8636363636363636, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,BinaryFn,SIMPLE_NAME, line no: 35, 0.8636363636363636, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,Query,SIMPLE_NAME, line no: 41, 0.8636363636363636, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,QueryCacheHelper,SIMPLE_NAME, line no: 42, 0.8636363636363636, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,ResultMergeQueryRunner,SIMPLE_NAME, line no: 47, 0.8636363636363636, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,DimFilter,SIMPLE_NAME, line no: 52, 0.8636363636363636, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,ByteBuffer,SIMPLE_NAME, line no: 58, 0.8636363636363636, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,TOPN_QUERY,SIMPLE_NAME, line no: 67, 0.8636363636363636, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,runner,SIMPLE_NAME, line no: 86, 0.8636363636363636, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,new ResultMergeQueryRunner<Result<TopNResultValue>>(runner){   @Override protected Ordering<Result<TopNResultValue>> makeOrdering(  Query<Result<TopNResultValue>> query){     return Ordering.from(new ResultGranularTimestampComparator<TopNResultValue>(((TopNQuery)query).getGranularity()));   }   @Override protected BinaryFn<Result<TopNResultValue> Result<TopNResultValue> Result<TopNResultValue>> createMergeFn(  Query<Result<TopNResultValue>> input){     TopNQuery query=(TopNQuery)input;     return new TopNBinaryFn(TopNResultMerger.identity query.getGranularity() query.getDimensionSpec() query.getTopNMetricSpec() query.getThreshold() query.getAggregatorSpecs() query.getPostAggregatorSpecs());   } } ,CLASS_INSTANCE_CREATION, line no: 88, 0.8636363636363636, 0.8636363636363636, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,makeOrdering,SIMPLE_NAME, line no: 91, 0.8636363636363636, 0.8636363636363636, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,createMergeFn,SIMPLE_NAME, line no: 101, 0.8636363636363636, 0.8636363636363636, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,(TopNQuery)input,CAST_EXPRESSION, line no: 105, 0.8636363636363636, 0.7727272727272727, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,dimensionSpecBytes,SIMPLE_NAME, line no: 265, 0.8636363636363636, 0.8636363636363636, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,query.getDimensionSpec().getCacheKey(),METHOD_INVOCATION, line no: 265, 0.8636363636363636, 0.8636363636363636, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,getCacheKey,SIMPLE_NAME, line no: 265, 0.8636363636363636, 0.8636363636363636, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,metricSpecBytes,SIMPLE_NAME, line no: 266, 0.8636363636363636, 0.8636363636363636, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,query.getTopNMetricSpec().getCacheKey(),METHOD_INVOCATION, line no: 266, 0.8636363636363636, 0.8636363636363636, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,dimFilter,SIMPLE_NAME, line no: 268, 0.8636363636363636, 0.8636363636363636, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,query.getDimensionsFilter(),METHOD_INVOCATION, line no: 268, 0.8636363636363636, 0.8636363636363636, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,getDimensionsFilter,SIMPLE_NAME, line no: 268, 0.8636363636363636, 0.8636363636363636, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,filterBytes,SIMPLE_NAME, line no: 269, 0.8636363636363636, 0.8636363636363636, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,dimFilter == null ? new byte[]{} : dimFilter.getCacheKey(),CONDITIONAL_EXPRESSION, line no: 269, 0.8636363636363636, 0.8636363636363636, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,dimFilter == null,INFIX_EXPRESSION, line no: 269, 0.8636363636363636, 0.8636363636363636, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,new byte[]{},ARRAY_CREATION, line no: 269, 0.8636363636363636, 0.8636363636363636, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,{},ARRAY_INITIALIZER, line no: 269, 0.8636363636363636, 0.8636363636363636, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,dimFilter.getCacheKey(),METHOD_INVOCATION, line no: 269, 0.8636363636363636, 0.8636363636363636, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,aggregatorBytes,SIMPLE_NAME, line no: 270, 0.8636363636363636, 0.8636363636363636, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,QueryCacheHelper.computeAggregatorBytes(query.getAggregatorSpecs()),METHOD_INVOCATION, line no: 270, 0.8636363636363636, 0.8636363636363636, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,computeAggregatorBytes,SIMPLE_NAME, line no: 270, 0.8636363636363636, 0.8636363636363636, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,granularityBytes,SIMPLE_NAME, line no: 271, 0.8636363636363636, 0.8636363636363636, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,query.getGranularity().cacheKey(),METHOD_INVOCATION, line no: 271, 0.8636363636363636, 0.8636363636363636, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,cacheKey,SIMPLE_NAME, line no: 271, 0.8636363636363636, 0.8636363636363636, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())).put(granularityBytes).put(filterBytes).put(aggregatorBytes).array(),METHOD_INVOCATION, line no: 273, 0.8636363636363636, 0.8636363636363636, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())).put(granularityBytes).put(filterBytes).put(aggregatorBytes),METHOD_INVOCATION, line no: 273, 0.8636363636363636, 0.8636363636363636, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())).put(granularityBytes).put(filterBytes),METHOD_INVOCATION, line no: 273, 0.8636363636363636, 0.8636363636363636, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())).put(granularityBytes),METHOD_INVOCATION, line no: 273, 0.8636363636363636, 0.8636363636363636, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())),METHOD_INVOCATION, line no: 273, 0.8636363636363636, 0.8636363636363636, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes),METHOD_INVOCATION, line no: 273, 0.8636363636363636, 0.8636363636363636, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes),METHOD_INVOCATION, line no: 273, 0.8636363636363636, 0.8636363636363636, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY),METHOD_INVOCATION, line no: 273, 0.8636363636363636, 0.8636363636363636, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length),METHOD_INVOCATION, line no: 273, 0.8636363636363636, 0.8636363636363636, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,allocate,SIMPLE_NAME, line no: 274, 0.8636363636363636, 0.8636363636363636, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length,INFIX_EXPRESSION, line no: 275, 0.8636363636363636, 0.8636363636363636, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,dimensionSpecBytes.length,QUALIFIED_NAME, line no: 275, 0.8636363636363636, 0.8636363636363636, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,length,SIMPLE_NAME, line no: 275, 0.8636363636363636, 0.8636363636363636, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,metricSpecBytes.length,QUALIFIED_NAME, line no: 275, 0.8636363636363636, 0.8636363636363636, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,4,NUMBER_LITERAL, line no: 275, 0.8636363636363636, 0.8636363636363636, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,granularityBytes.length,QUALIFIED_NAME, line no: 276, 0.8636363636363636, 0.8636363636363636, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,filterBytes.length,QUALIFIED_NAME, line no: 276, 0.8636363636363636, 0.8636363636363636, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,aggregatorBytes.length,QUALIFIED_NAME, line no: 276, 0.8636363636363636, 0.8636363636363636, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,Ints.toByteArray(query.getThreshold()),METHOD_INVOCATION, line no: 281, 0.8636363636363636, 0.8636363636363636, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,toByteArray,SIMPLE_NAME, line no: 281, 0.8636363636363636, 0.8636363636363636, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,array,SIMPLE_NAME, line no: 285, 0.8636363636363636, 0.8636363636363636, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,vals.put(factory.getName() factory.deserialize(resultIter.next())),METHOD_INVOCATION, line no: 347, 0.8636363636363636, 0.8636363636363636, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,minTopNThreshold,SIMPLE_NAME, line no: 390, 0.8636363636363636, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,run,SIMPLE_NAME, line no: 402, 0.8636363636363636, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,!(input instanceof TopNQuery),PREFIX_EXPRESSION, line no: 404, 0.8636363636363636, 0.8636363636363636, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,(input instanceof TopNQuery),PARENTHESIZED_EXPRESSION, line no: 404, 0.8636363636363636, 0.8636363636363636, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,input instanceof TopNQuery,INSTANCEOF_EXPRESSION, line no: 404, 0.8636363636363636, 0.8636363636363636, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,query.getThreshold() > minTopNThreshold,INFIX_EXPRESSION, line no: 409, 0.8636363636363636, 0.8636363636363636, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,isBySegment,SIMPLE_NAME, line no: 413, 0.8636363636363636, 0.8636363636363636, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,query.getContextBySegment(false),METHOD_INVOCATION, line no: 413, 0.8636363636363636, 0.8636363636363636, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,getContextBySegment,SIMPLE_NAME, line no: 413, 0.8636363636363636, 0.8636363636363636, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,false,BOOLEAN_LITERAL, line no: 413, 0.8636363636363636, 0.8636363636363636, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,Sequences.map(runner.run(query.withThreshold(minTopNThreshold)) new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     if (isBySegment) {       BySegmentTopNResultValue value=(BySegmentTopNResultValue)input.getValue();       return new Result<TopNResultValue>(input.getTimestamp() new BySegmentTopNResultValue(Lists.transform(value.getResults() new Function<Result<TopNResultValue> Result<TopNResultValue>>(){         @Override public Result<TopNResultValue> apply(        Result<TopNResultValue> input){           return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));         }       } ) value.getSegmentId() value.getIntervalString()));     }     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ),METHOD_INVOCATION, line no: 415, 0.8636363636363636, 0.8636363636363636, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,map,SIMPLE_NAME, line no: 415, 0.8636363636363636, 0.8636363636363636, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,runner.run(query.withThreshold(minTopNThreshold)),METHOD_INVOCATION, line no: 416, 0.8636363636363636, 0.8636363636363636, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,query.withThreshold(minTopNThreshold),METHOD_INVOCATION, line no: 416, 0.8636363636363636, 0.8636363636363636, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,withThreshold,SIMPLE_NAME, line no: 416, 0.8636363636363636, 0.8636363636363636, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     if (isBySegment) {       BySegmentTopNResultValue value=(BySegmentTopNResultValue)input.getValue();       return new Result<TopNResultValue>(input.getTimestamp() new BySegmentTopNResultValue(Lists.transform(value.getResults() new Function<Result<TopNResultValue> Result<TopNResultValue>>(){         @Override public Result<TopNResultValue> apply(        Result<TopNResultValue> input){           return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));         }       } ) value.getSegmentId() value.getIntervalString()));     }     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ,CLASS_INSTANCE_CREATION, line no: 417, 0.8636363636363636, 0.8636363636363636, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,BySegmentTopNResultValue,SIMPLE_NAME, line no: 423, 0.8636363636363636, 0.8636363636363636, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,value,SIMPLE_NAME, line no: 423, 0.8636363636363636, 0.8636363636363636, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,(BySegmentTopNResultValue)input.getValue(),CAST_EXPRESSION, line no: 423, 0.8636363636363636, 0.8636363636363636, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,new Result<TopNResultValue>(input.getTimestamp() new BySegmentTopNResultValue(Lists.transform(value.getResults() new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ) value.getSegmentId() value.getIntervalString())),CLASS_INSTANCE_CREATION, line no: 425, 0.8636363636363636, 0.8636363636363636, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,new BySegmentTopNResultValue(Lists.transform(value.getResults() new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ) value.getSegmentId() value.getIntervalString()),CLASS_INSTANCE_CREATION, line no: 427, 0.8636363636363636, 0.8636363636363636, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,Lists.transform(value.getResults() new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ),METHOD_INVOCATION, line no: 428, 0.8636363636363636, 0.8636363636363636, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,value.getResults(),METHOD_INVOCATION, line no: 429, 0.8636363636363636, 0.8636363636363636, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,getResults,SIMPLE_NAME, line no: 429, 0.8636363636363636, 0.8636363636363636, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ,CLASS_INSTANCE_CREATION, line no: 430, 0.8636363636363636, 0.8636363636363636, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold())))),CLASS_INSTANCE_CREATION, line no: 435, 0.8636363636363636, 0.7272727272727273, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))),CLASS_INSTANCE_CREATION, line no: 437, 0.8636363636363636, 0.7272727272727273, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold())),METHOD_INVOCATION, line no: 438, 0.8636363636363636, 0.7727272727272727, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,Iterables.limit(input.getValue() query.getThreshold()),METHOD_INVOCATION, line no: 439, 0.8636363636363636, 0.8181818181818182, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,limit,SIMPLE_NAME, line no: 439, 0.8636363636363636, 0.8181818181818182, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,value.getSegmentId(),METHOD_INVOCATION, line no: 449, 0.8636363636363636, 0.8636363636363636, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,getSegmentId,SIMPLE_NAME, line no: 449, 0.8636363636363636, 0.8636363636363636, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,value.getIntervalString(),METHOD_INVOCATION, line no: 450, 0.8636363636363636, 0.8636363636363636, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,getIntervalString,SIMPLE_NAME, line no: 450, 0.8636363636363636, 0.8636363636363636, 0.0
values,SIMPLE_NAME, line no: 213,Ordering,SIMPLE_NAME, line no: 28, 0.8571428571428571, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,Ints,SIMPLE_NAME, line no: 29, 0.8571428571428571, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,Sequences,SIMPLE_NAME, line no: 34, 0.8571428571428571, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,BinaryFn,SIMPLE_NAME, line no: 35, 0.8571428571428571, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,Query,SIMPLE_NAME, line no: 41, 0.8571428571428571, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,QueryCacheHelper,SIMPLE_NAME, line no: 42, 0.8571428571428571, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,ResultMergeQueryRunner,SIMPLE_NAME, line no: 47, 0.8571428571428571, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,DimFilter,SIMPLE_NAME, line no: 52, 0.8571428571428571, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,ByteBuffer,SIMPLE_NAME, line no: 58, 0.8571428571428571, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,TOPN_QUERY,SIMPLE_NAME, line no: 67, 0.8571428571428571, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,runner,SIMPLE_NAME, line no: 86, 0.8571428571428571, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,new ResultMergeQueryRunner<Result<TopNResultValue>>(runner){   @Override protected Ordering<Result<TopNResultValue>> makeOrdering(  Query<Result<TopNResultValue>> query){     return Ordering.from(new ResultGranularTimestampComparator<TopNResultValue>(((TopNQuery)query).getGranularity()));   }   @Override protected BinaryFn<Result<TopNResultValue> Result<TopNResultValue> Result<TopNResultValue>> createMergeFn(  Query<Result<TopNResultValue>> input){     TopNQuery query=(TopNQuery)input;     return new TopNBinaryFn(TopNResultMerger.identity query.getGranularity() query.getDimensionSpec() query.getTopNMetricSpec() query.getThreshold() query.getAggregatorSpecs() query.getPostAggregatorSpecs());   } } ,CLASS_INSTANCE_CREATION, line no: 88, 0.8571428571428571, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,makeOrdering,SIMPLE_NAME, line no: 91, 0.8571428571428571, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,createMergeFn,SIMPLE_NAME, line no: 101, 0.8571428571428571, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,(TopNQuery)input,CAST_EXPRESSION, line no: 105, 0.8571428571428571, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,new TopNBinaryFn(TopNResultMerger.identity query.getGranularity() query.getDimensionSpec() query.getTopNMetricSpec() query.getThreshold() query.getAggregatorSpecs() query.getPostAggregatorSpecs()),CLASS_INSTANCE_CREATION, line no: 106, 0.8571428571428571, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,TopNBinaryFn,SIMPLE_NAME, line no: 106, 0.8571428571428571, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,TopNResultMerger.identity,QUALIFIED_NAME, line no: 107, 0.8571428571428571, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,TopNResultMerger,SIMPLE_NAME, line no: 107, 0.8571428571428571, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,identity,SIMPLE_NAME, line no: 107, 0.8571428571428571, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,dimensionSpecBytes,SIMPLE_NAME, line no: 265, 0.8571428571428571, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,query.getDimensionSpec().getCacheKey(),METHOD_INVOCATION, line no: 265, 0.8571428571428571, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,getCacheKey,SIMPLE_NAME, line no: 265, 0.8571428571428571, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,metricSpecBytes,SIMPLE_NAME, line no: 266, 0.8571428571428571, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,query.getTopNMetricSpec().getCacheKey(),METHOD_INVOCATION, line no: 266, 0.8571428571428571, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,dimFilter,SIMPLE_NAME, line no: 268, 0.8571428571428571, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,query.getDimensionsFilter(),METHOD_INVOCATION, line no: 268, 0.8571428571428571, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,getDimensionsFilter,SIMPLE_NAME, line no: 268, 0.8571428571428571, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,filterBytes,SIMPLE_NAME, line no: 269, 0.8571428571428571, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,dimFilter == null ? new byte[]{} : dimFilter.getCacheKey(),CONDITIONAL_EXPRESSION, line no: 269, 0.8571428571428571, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,dimFilter == null,INFIX_EXPRESSION, line no: 269, 0.8571428571428571, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,new byte[]{},ARRAY_CREATION, line no: 269, 0.8571428571428571, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,{},ARRAY_INITIALIZER, line no: 269, 0.8571428571428571, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,dimFilter.getCacheKey(),METHOD_INVOCATION, line no: 269, 0.8571428571428571, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,aggregatorBytes,SIMPLE_NAME, line no: 270, 0.8571428571428571, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,QueryCacheHelper.computeAggregatorBytes(query.getAggregatorSpecs()),METHOD_INVOCATION, line no: 270, 0.8571428571428571, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,computeAggregatorBytes,SIMPLE_NAME, line no: 270, 0.8571428571428571, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,granularityBytes,SIMPLE_NAME, line no: 271, 0.8571428571428571, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,query.getGranularity().cacheKey(),METHOD_INVOCATION, line no: 271, 0.8571428571428571, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,cacheKey,SIMPLE_NAME, line no: 271, 0.8571428571428571, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())).put(granularityBytes).put(filterBytes).put(aggregatorBytes).array(),METHOD_INVOCATION, line no: 273, 0.8571428571428571, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())).put(granularityBytes).put(filterBytes).put(aggregatorBytes),METHOD_INVOCATION, line no: 273, 0.8571428571428571, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())).put(granularityBytes).put(filterBytes),METHOD_INVOCATION, line no: 273, 0.8571428571428571, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())).put(granularityBytes),METHOD_INVOCATION, line no: 273, 0.8571428571428571, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())),METHOD_INVOCATION, line no: 273, 0.8571428571428571, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes),METHOD_INVOCATION, line no: 273, 0.8571428571428571, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes),METHOD_INVOCATION, line no: 273, 0.8571428571428571, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY),METHOD_INVOCATION, line no: 273, 0.8571428571428571, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length),METHOD_INVOCATION, line no: 273, 0.8571428571428571, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,allocate,SIMPLE_NAME, line no: 274, 0.8571428571428571, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length,INFIX_EXPRESSION, line no: 275, 0.8571428571428571, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,dimensionSpecBytes.length,QUALIFIED_NAME, line no: 275, 0.8571428571428571, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,length,SIMPLE_NAME, line no: 275, 0.8571428571428571, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,metricSpecBytes.length,QUALIFIED_NAME, line no: 275, 0.8571428571428571, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,4,NUMBER_LITERAL, line no: 275, 0.8571428571428571, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,granularityBytes.length,QUALIFIED_NAME, line no: 276, 0.8571428571428571, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,filterBytes.length,QUALIFIED_NAME, line no: 276, 0.8571428571428571, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,aggregatorBytes.length,QUALIFIED_NAME, line no: 276, 0.8571428571428571, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,Ints.toByteArray(query.getThreshold()),METHOD_INVOCATION, line no: 281, 0.8571428571428571, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,toByteArray,SIMPLE_NAME, line no: 281, 0.8571428571428571, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,array,SIMPLE_NAME, line no: 285, 0.8571428571428571, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,minTopNThreshold,SIMPLE_NAME, line no: 390, 0.8571428571428571, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,run,SIMPLE_NAME, line no: 402, 0.8571428571428571, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,!(input instanceof TopNQuery),PREFIX_EXPRESSION, line no: 404, 0.8571428571428571, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,(input instanceof TopNQuery),PARENTHESIZED_EXPRESSION, line no: 404, 0.8571428571428571, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,input instanceof TopNQuery,INSTANCEOF_EXPRESSION, line no: 404, 0.8571428571428571, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,query.getThreshold() > minTopNThreshold,INFIX_EXPRESSION, line no: 409, 0.8571428571428571, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,isBySegment,SIMPLE_NAME, line no: 413, 0.8571428571428571, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,query.getContextBySegment(false),METHOD_INVOCATION, line no: 413, 0.8571428571428571, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,getContextBySegment,SIMPLE_NAME, line no: 413, 0.8571428571428571, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,false,BOOLEAN_LITERAL, line no: 413, 0.8571428571428571, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,Sequences.map(runner.run(query.withThreshold(minTopNThreshold)) new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     if (isBySegment) {       BySegmentTopNResultValue value=(BySegmentTopNResultValue)input.getValue();       return new Result<TopNResultValue>(input.getTimestamp() new BySegmentTopNResultValue(Lists.transform(value.getResults() new Function<Result<TopNResultValue> Result<TopNResultValue>>(){         @Override public Result<TopNResultValue> apply(        Result<TopNResultValue> input){           return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));         }       } ) value.getSegmentId() value.getIntervalString()));     }     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ),METHOD_INVOCATION, line no: 415, 0.8571428571428571, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,map,SIMPLE_NAME, line no: 415, 0.8571428571428571, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,runner.run(query.withThreshold(minTopNThreshold)),METHOD_INVOCATION, line no: 416, 0.8571428571428571, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,query.withThreshold(minTopNThreshold),METHOD_INVOCATION, line no: 416, 0.8571428571428571, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,withThreshold,SIMPLE_NAME, line no: 416, 0.8571428571428571, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     if (isBySegment) {       BySegmentTopNResultValue value=(BySegmentTopNResultValue)input.getValue();       return new Result<TopNResultValue>(input.getTimestamp() new BySegmentTopNResultValue(Lists.transform(value.getResults() new Function<Result<TopNResultValue> Result<TopNResultValue>>(){         @Override public Result<TopNResultValue> apply(        Result<TopNResultValue> input){           return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));         }       } ) value.getSegmentId() value.getIntervalString()));     }     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ,CLASS_INSTANCE_CREATION, line no: 417, 0.8571428571428571, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,BySegmentTopNResultValue,SIMPLE_NAME, line no: 423, 0.8571428571428571, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,value,SIMPLE_NAME, line no: 423, 0.8571428571428571, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,(BySegmentTopNResultValue)input.getValue(),CAST_EXPRESSION, line no: 423, 0.8571428571428571, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,new Result<TopNResultValue>(input.getTimestamp() new BySegmentTopNResultValue(Lists.transform(value.getResults() new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ) value.getSegmentId() value.getIntervalString())),CLASS_INSTANCE_CREATION, line no: 425, 0.8571428571428571, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,new BySegmentTopNResultValue(Lists.transform(value.getResults() new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ) value.getSegmentId() value.getIntervalString()),CLASS_INSTANCE_CREATION, line no: 427, 0.8571428571428571, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,Lists.transform(value.getResults() new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ),METHOD_INVOCATION, line no: 428, 0.8571428571428571, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,value.getResults(),METHOD_INVOCATION, line no: 429, 0.8571428571428571, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,getResults,SIMPLE_NAME, line no: 429, 0.8571428571428571, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ,CLASS_INSTANCE_CREATION, line no: 430, 0.8571428571428571, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold())))),CLASS_INSTANCE_CREATION, line no: 435, 0.8571428571428571, 0.8095238095238095, 0.0
values,SIMPLE_NAME, line no: 213,new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))),CLASS_INSTANCE_CREATION, line no: 437, 0.8571428571428571, 0.8095238095238095, 0.0
values,SIMPLE_NAME, line no: 213,Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold())),METHOD_INVOCATION, line no: 438, 0.8571428571428571, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,Iterables.limit(input.getValue() query.getThreshold()),METHOD_INVOCATION, line no: 439, 0.8571428571428571, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,limit,SIMPLE_NAME, line no: 439, 0.8571428571428571, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,value.getSegmentId(),METHOD_INVOCATION, line no: 449, 0.8571428571428571, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,getSegmentId,SIMPLE_NAME, line no: 449, 0.8571428571428571, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,value.getIntervalString(),METHOD_INVOCATION, line no: 450, 0.8571428571428571, 0.8571428571428571, 0.0
values,SIMPLE_NAME, line no: 213,getIntervalString,SIMPLE_NAME, line no: 450, 0.8571428571428571, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,Ordering,SIMPLE_NAME, line no: 28, 0.8571428571428571, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,Ints,SIMPLE_NAME, line no: 29, 0.8571428571428571, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,Sequences,SIMPLE_NAME, line no: 34, 0.8571428571428571, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,BinaryFn,SIMPLE_NAME, line no: 35, 0.8571428571428571, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,Query,SIMPLE_NAME, line no: 41, 0.8571428571428571, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,QueryCacheHelper,SIMPLE_NAME, line no: 42, 0.8571428571428571, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,ResultMergeQueryRunner,SIMPLE_NAME, line no: 47, 0.8571428571428571, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,DimFilter,SIMPLE_NAME, line no: 52, 0.8571428571428571, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,ByteBuffer,SIMPLE_NAME, line no: 58, 0.8571428571428571, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,TOPN_QUERY,SIMPLE_NAME, line no: 67, 0.8571428571428571, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,runner,SIMPLE_NAME, line no: 86, 0.8571428571428571, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,new ResultMergeQueryRunner<Result<TopNResultValue>>(runner){   @Override protected Ordering<Result<TopNResultValue>> makeOrdering(  Query<Result<TopNResultValue>> query){     return Ordering.from(new ResultGranularTimestampComparator<TopNResultValue>(((TopNQuery)query).getGranularity()));   }   @Override protected BinaryFn<Result<TopNResultValue> Result<TopNResultValue> Result<TopNResultValue>> createMergeFn(  Query<Result<TopNResultValue>> input){     TopNQuery query=(TopNQuery)input;     return new TopNBinaryFn(TopNResultMerger.identity query.getGranularity() query.getDimensionSpec() query.getTopNMetricSpec() query.getThreshold() query.getAggregatorSpecs() query.getPostAggregatorSpecs());   } } ,CLASS_INSTANCE_CREATION, line no: 88, 0.8571428571428571, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,makeOrdering,SIMPLE_NAME, line no: 91, 0.8571428571428571, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,createMergeFn,SIMPLE_NAME, line no: 101, 0.8571428571428571, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,(TopNQuery)input,CAST_EXPRESSION, line no: 105, 0.8571428571428571, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,new TopNBinaryFn(TopNResultMerger.identity query.getGranularity() query.getDimensionSpec() query.getTopNMetricSpec() query.getThreshold() query.getAggregatorSpecs() query.getPostAggregatorSpecs()),CLASS_INSTANCE_CREATION, line no: 106, 0.8571428571428571, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,TopNBinaryFn,SIMPLE_NAME, line no: 106, 0.8571428571428571, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,TopNResultMerger.identity,QUALIFIED_NAME, line no: 107, 0.8571428571428571, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,TopNResultMerger,SIMPLE_NAME, line no: 107, 0.8571428571428571, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,identity,SIMPLE_NAME, line no: 107, 0.8571428571428571, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,dimensionSpecBytes,SIMPLE_NAME, line no: 265, 0.8571428571428571, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,query.getDimensionSpec().getCacheKey(),METHOD_INVOCATION, line no: 265, 0.8571428571428571, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,getCacheKey,SIMPLE_NAME, line no: 265, 0.8571428571428571, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,metricSpecBytes,SIMPLE_NAME, line no: 266, 0.8571428571428571, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,query.getTopNMetricSpec().getCacheKey(),METHOD_INVOCATION, line no: 266, 0.8571428571428571, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,dimFilter,SIMPLE_NAME, line no: 268, 0.8571428571428571, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,query.getDimensionsFilter(),METHOD_INVOCATION, line no: 268, 0.8571428571428571, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,getDimensionsFilter,SIMPLE_NAME, line no: 268, 0.8571428571428571, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,filterBytes,SIMPLE_NAME, line no: 269, 0.8571428571428571, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,dimFilter == null ? new byte[]{} : dimFilter.getCacheKey(),CONDITIONAL_EXPRESSION, line no: 269, 0.8571428571428571, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,dimFilter == null,INFIX_EXPRESSION, line no: 269, 0.8571428571428571, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,new byte[]{},ARRAY_CREATION, line no: 269, 0.8571428571428571, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,{},ARRAY_INITIALIZER, line no: 269, 0.8571428571428571, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,dimFilter.getCacheKey(),METHOD_INVOCATION, line no: 269, 0.8571428571428571, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,aggregatorBytes,SIMPLE_NAME, line no: 270, 0.8571428571428571, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,QueryCacheHelper.computeAggregatorBytes(query.getAggregatorSpecs()),METHOD_INVOCATION, line no: 270, 0.8571428571428571, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,computeAggregatorBytes,SIMPLE_NAME, line no: 270, 0.8571428571428571, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,granularityBytes,SIMPLE_NAME, line no: 271, 0.8571428571428571, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,query.getGranularity().cacheKey(),METHOD_INVOCATION, line no: 271, 0.8571428571428571, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,cacheKey,SIMPLE_NAME, line no: 271, 0.8571428571428571, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())).put(granularityBytes).put(filterBytes).put(aggregatorBytes).array(),METHOD_INVOCATION, line no: 273, 0.8571428571428571, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())).put(granularityBytes).put(filterBytes).put(aggregatorBytes),METHOD_INVOCATION, line no: 273, 0.8571428571428571, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())).put(granularityBytes).put(filterBytes),METHOD_INVOCATION, line no: 273, 0.8571428571428571, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())).put(granularityBytes),METHOD_INVOCATION, line no: 273, 0.8571428571428571, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())),METHOD_INVOCATION, line no: 273, 0.8571428571428571, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes),METHOD_INVOCATION, line no: 273, 0.8571428571428571, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes),METHOD_INVOCATION, line no: 273, 0.8571428571428571, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY),METHOD_INVOCATION, line no: 273, 0.8571428571428571, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length),METHOD_INVOCATION, line no: 273, 0.8571428571428571, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,allocate,SIMPLE_NAME, line no: 274, 0.8571428571428571, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length,INFIX_EXPRESSION, line no: 275, 0.8571428571428571, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,dimensionSpecBytes.length,QUALIFIED_NAME, line no: 275, 0.8571428571428571, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,length,SIMPLE_NAME, line no: 275, 0.8571428571428571, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,metricSpecBytes.length,QUALIFIED_NAME, line no: 275, 0.8571428571428571, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,4,NUMBER_LITERAL, line no: 275, 0.8571428571428571, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,granularityBytes.length,QUALIFIED_NAME, line no: 276, 0.8571428571428571, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,filterBytes.length,QUALIFIED_NAME, line no: 276, 0.8571428571428571, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,aggregatorBytes.length,QUALIFIED_NAME, line no: 276, 0.8571428571428571, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,Ints.toByteArray(query.getThreshold()),METHOD_INVOCATION, line no: 281, 0.8571428571428571, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,toByteArray,SIMPLE_NAME, line no: 281, 0.8571428571428571, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,array,SIMPLE_NAME, line no: 285, 0.8571428571428571, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,minTopNThreshold,SIMPLE_NAME, line no: 390, 0.8571428571428571, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,run,SIMPLE_NAME, line no: 402, 0.8571428571428571, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,!(input instanceof TopNQuery),PREFIX_EXPRESSION, line no: 404, 0.8571428571428571, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,(input instanceof TopNQuery),PARENTHESIZED_EXPRESSION, line no: 404, 0.8571428571428571, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,input instanceof TopNQuery,INSTANCEOF_EXPRESSION, line no: 404, 0.8571428571428571, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,query.getThreshold() > minTopNThreshold,INFIX_EXPRESSION, line no: 409, 0.8571428571428571, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,isBySegment,SIMPLE_NAME, line no: 413, 0.8571428571428571, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,query.getContextBySegment(false),METHOD_INVOCATION, line no: 413, 0.8571428571428571, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,getContextBySegment,SIMPLE_NAME, line no: 413, 0.8571428571428571, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,false,BOOLEAN_LITERAL, line no: 413, 0.8571428571428571, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,Sequences.map(runner.run(query.withThreshold(minTopNThreshold)) new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     if (isBySegment) {       BySegmentTopNResultValue value=(BySegmentTopNResultValue)input.getValue();       return new Result<TopNResultValue>(input.getTimestamp() new BySegmentTopNResultValue(Lists.transform(value.getResults() new Function<Result<TopNResultValue> Result<TopNResultValue>>(){         @Override public Result<TopNResultValue> apply(        Result<TopNResultValue> input){           return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));         }       } ) value.getSegmentId() value.getIntervalString()));     }     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ),METHOD_INVOCATION, line no: 415, 0.8571428571428571, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,map,SIMPLE_NAME, line no: 415, 0.8571428571428571, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,runner.run(query.withThreshold(minTopNThreshold)),METHOD_INVOCATION, line no: 416, 0.8571428571428571, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,query.withThreshold(minTopNThreshold),METHOD_INVOCATION, line no: 416, 0.8571428571428571, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,withThreshold,SIMPLE_NAME, line no: 416, 0.8571428571428571, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     if (isBySegment) {       BySegmentTopNResultValue value=(BySegmentTopNResultValue)input.getValue();       return new Result<TopNResultValue>(input.getTimestamp() new BySegmentTopNResultValue(Lists.transform(value.getResults() new Function<Result<TopNResultValue> Result<TopNResultValue>>(){         @Override public Result<TopNResultValue> apply(        Result<TopNResultValue> input){           return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));         }       } ) value.getSegmentId() value.getIntervalString()));     }     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ,CLASS_INSTANCE_CREATION, line no: 417, 0.8571428571428571, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,BySegmentTopNResultValue,SIMPLE_NAME, line no: 423, 0.8571428571428571, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,value,SIMPLE_NAME, line no: 423, 0.8571428571428571, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,(BySegmentTopNResultValue)input.getValue(),CAST_EXPRESSION, line no: 423, 0.8571428571428571, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,new Result<TopNResultValue>(input.getTimestamp() new BySegmentTopNResultValue(Lists.transform(value.getResults() new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ) value.getSegmentId() value.getIntervalString())),CLASS_INSTANCE_CREATION, line no: 425, 0.8571428571428571, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,new BySegmentTopNResultValue(Lists.transform(value.getResults() new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ) value.getSegmentId() value.getIntervalString()),CLASS_INSTANCE_CREATION, line no: 427, 0.8571428571428571, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,Lists.transform(value.getResults() new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ),METHOD_INVOCATION, line no: 428, 0.8571428571428571, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,value.getResults(),METHOD_INVOCATION, line no: 429, 0.8571428571428571, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,getResults,SIMPLE_NAME, line no: 429, 0.8571428571428571, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ,CLASS_INSTANCE_CREATION, line no: 430, 0.8571428571428571, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold())))),CLASS_INSTANCE_CREATION, line no: 435, 0.8571428571428571, 0.8095238095238095, 0.0
put,SIMPLE_NAME, line no: 213,new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))),CLASS_INSTANCE_CREATION, line no: 437, 0.8571428571428571, 0.8095238095238095, 0.0
put,SIMPLE_NAME, line no: 213,Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold())),METHOD_INVOCATION, line no: 438, 0.8571428571428571, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,Iterables.limit(input.getValue() query.getThreshold()),METHOD_INVOCATION, line no: 439, 0.8571428571428571, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,limit,SIMPLE_NAME, line no: 439, 0.8571428571428571, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,value.getSegmentId(),METHOD_INVOCATION, line no: 449, 0.8571428571428571, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,getSegmentId,SIMPLE_NAME, line no: 449, 0.8571428571428571, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,value.getIntervalString(),METHOD_INVOCATION, line no: 450, 0.8571428571428571, 0.8571428571428571, 0.0
put,SIMPLE_NAME, line no: 213,getIntervalString,SIMPLE_NAME, line no: 450, 0.8571428571428571, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,Ordering,SIMPLE_NAME, line no: 28, 0.8571428571428571, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,Ints,SIMPLE_NAME, line no: 29, 0.8571428571428571, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,Sequences,SIMPLE_NAME, line no: 34, 0.8571428571428571, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,BinaryFn,SIMPLE_NAME, line no: 35, 0.8571428571428571, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,Query,SIMPLE_NAME, line no: 41, 0.8571428571428571, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,QueryCacheHelper,SIMPLE_NAME, line no: 42, 0.8571428571428571, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,ResultMergeQueryRunner,SIMPLE_NAME, line no: 47, 0.8571428571428571, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,DimFilter,SIMPLE_NAME, line no: 52, 0.8571428571428571, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,ByteBuffer,SIMPLE_NAME, line no: 58, 0.8571428571428571, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,TOPN_QUERY,SIMPLE_NAME, line no: 67, 0.8571428571428571, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,runner,SIMPLE_NAME, line no: 86, 0.8571428571428571, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,new ResultMergeQueryRunner<Result<TopNResultValue>>(runner){   @Override protected Ordering<Result<TopNResultValue>> makeOrdering(  Query<Result<TopNResultValue>> query){     return Ordering.from(new ResultGranularTimestampComparator<TopNResultValue>(((TopNQuery)query).getGranularity()));   }   @Override protected BinaryFn<Result<TopNResultValue> Result<TopNResultValue> Result<TopNResultValue>> createMergeFn(  Query<Result<TopNResultValue>> input){     TopNQuery query=(TopNQuery)input;     return new TopNBinaryFn(TopNResultMerger.identity query.getGranularity() query.getDimensionSpec() query.getTopNMetricSpec() query.getThreshold() query.getAggregatorSpecs() query.getPostAggregatorSpecs());   } } ,CLASS_INSTANCE_CREATION, line no: 88, 0.8571428571428571, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,makeOrdering,SIMPLE_NAME, line no: 91, 0.8571428571428571, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,createMergeFn,SIMPLE_NAME, line no: 101, 0.8571428571428571, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,(TopNQuery)input,CAST_EXPRESSION, line no: 105, 0.8571428571428571, 0.8095238095238095, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,dimensionSpecBytes,SIMPLE_NAME, line no: 265, 0.8571428571428571, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,query.getDimensionSpec().getCacheKey(),METHOD_INVOCATION, line no: 265, 0.8571428571428571, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,getCacheKey,SIMPLE_NAME, line no: 265, 0.8571428571428571, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,metricSpecBytes,SIMPLE_NAME, line no: 266, 0.8571428571428571, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,query.getTopNMetricSpec().getCacheKey(),METHOD_INVOCATION, line no: 266, 0.8571428571428571, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,dimFilter,SIMPLE_NAME, line no: 268, 0.8571428571428571, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,query.getDimensionsFilter(),METHOD_INVOCATION, line no: 268, 0.8571428571428571, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,getDimensionsFilter,SIMPLE_NAME, line no: 268, 0.8571428571428571, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,filterBytes,SIMPLE_NAME, line no: 269, 0.8571428571428571, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,dimFilter == null ? new byte[]{} : dimFilter.getCacheKey(),CONDITIONAL_EXPRESSION, line no: 269, 0.8571428571428571, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,dimFilter == null,INFIX_EXPRESSION, line no: 269, 0.8571428571428571, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,new byte[]{},ARRAY_CREATION, line no: 269, 0.8571428571428571, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,{},ARRAY_INITIALIZER, line no: 269, 0.8571428571428571, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,dimFilter.getCacheKey(),METHOD_INVOCATION, line no: 269, 0.8571428571428571, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,aggregatorBytes,SIMPLE_NAME, line no: 270, 0.8571428571428571, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,QueryCacheHelper.computeAggregatorBytes(query.getAggregatorSpecs()),METHOD_INVOCATION, line no: 270, 0.8571428571428571, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,computeAggregatorBytes,SIMPLE_NAME, line no: 270, 0.8571428571428571, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,granularityBytes,SIMPLE_NAME, line no: 271, 0.8571428571428571, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,query.getGranularity().cacheKey(),METHOD_INVOCATION, line no: 271, 0.8571428571428571, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,cacheKey,SIMPLE_NAME, line no: 271, 0.8571428571428571, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())).put(granularityBytes).put(filterBytes).put(aggregatorBytes).array(),METHOD_INVOCATION, line no: 273, 0.8571428571428571, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())).put(granularityBytes).put(filterBytes).put(aggregatorBytes),METHOD_INVOCATION, line no: 273, 0.8571428571428571, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())).put(granularityBytes).put(filterBytes),METHOD_INVOCATION, line no: 273, 0.8571428571428571, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())).put(granularityBytes),METHOD_INVOCATION, line no: 273, 0.8571428571428571, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())),METHOD_INVOCATION, line no: 273, 0.8571428571428571, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes),METHOD_INVOCATION, line no: 273, 0.8571428571428571, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes),METHOD_INVOCATION, line no: 273, 0.8571428571428571, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY),METHOD_INVOCATION, line no: 273, 0.8571428571428571, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length),METHOD_INVOCATION, line no: 273, 0.8571428571428571, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,allocate,SIMPLE_NAME, line no: 274, 0.8571428571428571, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length,INFIX_EXPRESSION, line no: 275, 0.8571428571428571, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,dimensionSpecBytes.length,QUALIFIED_NAME, line no: 275, 0.8571428571428571, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,length,SIMPLE_NAME, line no: 275, 0.8571428571428571, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,metricSpecBytes.length,QUALIFIED_NAME, line no: 275, 0.8571428571428571, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,4,NUMBER_LITERAL, line no: 275, 0.8571428571428571, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,granularityBytes.length,QUALIFIED_NAME, line no: 276, 0.8571428571428571, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,filterBytes.length,QUALIFIED_NAME, line no: 276, 0.8571428571428571, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,aggregatorBytes.length,QUALIFIED_NAME, line no: 276, 0.8571428571428571, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,Ints.toByteArray(query.getThreshold()),METHOD_INVOCATION, line no: 281, 0.8571428571428571, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,toByteArray,SIMPLE_NAME, line no: 281, 0.8571428571428571, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,array,SIMPLE_NAME, line no: 285, 0.8571428571428571, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,aggIter.next(),METHOD_INVOCATION, line no: 346, 0.8571428571428571, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,minTopNThreshold,SIMPLE_NAME, line no: 390, 0.8571428571428571, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,run,SIMPLE_NAME, line no: 402, 0.8571428571428571, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,!(input instanceof TopNQuery),PREFIX_EXPRESSION, line no: 404, 0.8571428571428571, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,(input instanceof TopNQuery),PARENTHESIZED_EXPRESSION, line no: 404, 0.8571428571428571, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,input instanceof TopNQuery,INSTANCEOF_EXPRESSION, line no: 404, 0.8571428571428571, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,query.getThreshold() > minTopNThreshold,INFIX_EXPRESSION, line no: 409, 0.8571428571428571, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,isBySegment,SIMPLE_NAME, line no: 413, 0.8571428571428571, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,query.getContextBySegment(false),METHOD_INVOCATION, line no: 413, 0.8571428571428571, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,getContextBySegment,SIMPLE_NAME, line no: 413, 0.8571428571428571, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,false,BOOLEAN_LITERAL, line no: 413, 0.8571428571428571, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,Sequences.map(runner.run(query.withThreshold(minTopNThreshold)) new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     if (isBySegment) {       BySegmentTopNResultValue value=(BySegmentTopNResultValue)input.getValue();       return new Result<TopNResultValue>(input.getTimestamp() new BySegmentTopNResultValue(Lists.transform(value.getResults() new Function<Result<TopNResultValue> Result<TopNResultValue>>(){         @Override public Result<TopNResultValue> apply(        Result<TopNResultValue> input){           return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));         }       } ) value.getSegmentId() value.getIntervalString()));     }     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ),METHOD_INVOCATION, line no: 415, 0.8571428571428571, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,map,SIMPLE_NAME, line no: 415, 0.8571428571428571, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,runner.run(query.withThreshold(minTopNThreshold)),METHOD_INVOCATION, line no: 416, 0.8571428571428571, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,query.withThreshold(minTopNThreshold),METHOD_INVOCATION, line no: 416, 0.8571428571428571, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,withThreshold,SIMPLE_NAME, line no: 416, 0.8571428571428571, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     if (isBySegment) {       BySegmentTopNResultValue value=(BySegmentTopNResultValue)input.getValue();       return new Result<TopNResultValue>(input.getTimestamp() new BySegmentTopNResultValue(Lists.transform(value.getResults() new Function<Result<TopNResultValue> Result<TopNResultValue>>(){         @Override public Result<TopNResultValue> apply(        Result<TopNResultValue> input){           return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));         }       } ) value.getSegmentId() value.getIntervalString()));     }     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ,CLASS_INSTANCE_CREATION, line no: 417, 0.8571428571428571, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,BySegmentTopNResultValue,SIMPLE_NAME, line no: 423, 0.8571428571428571, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,value,SIMPLE_NAME, line no: 423, 0.8571428571428571, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,(BySegmentTopNResultValue)input.getValue(),CAST_EXPRESSION, line no: 423, 0.8571428571428571, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,new Result<TopNResultValue>(input.getTimestamp() new BySegmentTopNResultValue(Lists.transform(value.getResults() new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ) value.getSegmentId() value.getIntervalString())),CLASS_INSTANCE_CREATION, line no: 425, 0.8571428571428571, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,new BySegmentTopNResultValue(Lists.transform(value.getResults() new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ) value.getSegmentId() value.getIntervalString()),CLASS_INSTANCE_CREATION, line no: 427, 0.8571428571428571, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,Lists.transform(value.getResults() new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ),METHOD_INVOCATION, line no: 428, 0.8571428571428571, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,value.getResults(),METHOD_INVOCATION, line no: 429, 0.8571428571428571, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,getResults,SIMPLE_NAME, line no: 429, 0.8571428571428571, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ,CLASS_INSTANCE_CREATION, line no: 430, 0.8571428571428571, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold())))),CLASS_INSTANCE_CREATION, line no: 435, 0.8571428571428571, 0.7619047619047619, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))),CLASS_INSTANCE_CREATION, line no: 437, 0.8571428571428571, 0.7619047619047619, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold())),METHOD_INVOCATION, line no: 438, 0.8571428571428571, 0.8095238095238095, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,Iterables.limit(input.getValue() query.getThreshold()),METHOD_INVOCATION, line no: 439, 0.8571428571428571, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,limit,SIMPLE_NAME, line no: 439, 0.8571428571428571, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,value.getSegmentId(),METHOD_INVOCATION, line no: 449, 0.8571428571428571, 0.8571428571428571, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,value.getIntervalString(),METHOD_INVOCATION, line no: 450, 0.8571428571428571, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,Ordering,SIMPLE_NAME, line no: 28, 0.8571428571428571, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,Ints,SIMPLE_NAME, line no: 29, 0.8571428571428571, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,Sequences,SIMPLE_NAME, line no: 34, 0.8571428571428571, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,BinaryFn,SIMPLE_NAME, line no: 35, 0.8571428571428571, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,Query,SIMPLE_NAME, line no: 41, 0.8571428571428571, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,QueryCacheHelper,SIMPLE_NAME, line no: 42, 0.8571428571428571, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,ResultMergeQueryRunner,SIMPLE_NAME, line no: 47, 0.8571428571428571, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,DimFilter,SIMPLE_NAME, line no: 52, 0.8571428571428571, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,ByteBuffer,SIMPLE_NAME, line no: 58, 0.8571428571428571, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,TOPN_QUERY,SIMPLE_NAME, line no: 67, 0.8571428571428571, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,runner,SIMPLE_NAME, line no: 86, 0.8571428571428571, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,new ResultMergeQueryRunner<Result<TopNResultValue>>(runner){   @Override protected Ordering<Result<TopNResultValue>> makeOrdering(  Query<Result<TopNResultValue>> query){     return Ordering.from(new ResultGranularTimestampComparator<TopNResultValue>(((TopNQuery)query).getGranularity()));   }   @Override protected BinaryFn<Result<TopNResultValue> Result<TopNResultValue> Result<TopNResultValue>> createMergeFn(  Query<Result<TopNResultValue>> input){     TopNQuery query=(TopNQuery)input;     return new TopNBinaryFn(TopNResultMerger.identity query.getGranularity() query.getDimensionSpec() query.getTopNMetricSpec() query.getThreshold() query.getAggregatorSpecs() query.getPostAggregatorSpecs());   } } ,CLASS_INSTANCE_CREATION, line no: 88, 0.8571428571428571, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,makeOrdering,SIMPLE_NAME, line no: 91, 0.8571428571428571, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,createMergeFn,SIMPLE_NAME, line no: 101, 0.8571428571428571, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,(TopNQuery)input,CAST_EXPRESSION, line no: 105, 0.8571428571428571, 0.8095238095238095, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,dimensionSpecBytes,SIMPLE_NAME, line no: 265, 0.8571428571428571, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,query.getDimensionSpec().getCacheKey(),METHOD_INVOCATION, line no: 265, 0.8571428571428571, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,getCacheKey,SIMPLE_NAME, line no: 265, 0.8571428571428571, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,metricSpecBytes,SIMPLE_NAME, line no: 266, 0.8571428571428571, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,query.getTopNMetricSpec().getCacheKey(),METHOD_INVOCATION, line no: 266, 0.8571428571428571, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,dimFilter,SIMPLE_NAME, line no: 268, 0.8571428571428571, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,query.getDimensionsFilter(),METHOD_INVOCATION, line no: 268, 0.8571428571428571, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,getDimensionsFilter,SIMPLE_NAME, line no: 268, 0.8571428571428571, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,filterBytes,SIMPLE_NAME, line no: 269, 0.8571428571428571, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,dimFilter == null ? new byte[]{} : dimFilter.getCacheKey(),CONDITIONAL_EXPRESSION, line no: 269, 0.8571428571428571, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,dimFilter == null,INFIX_EXPRESSION, line no: 269, 0.8571428571428571, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,new byte[]{},ARRAY_CREATION, line no: 269, 0.8571428571428571, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,{},ARRAY_INITIALIZER, line no: 269, 0.8571428571428571, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,dimFilter.getCacheKey(),METHOD_INVOCATION, line no: 269, 0.8571428571428571, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,aggregatorBytes,SIMPLE_NAME, line no: 270, 0.8571428571428571, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,QueryCacheHelper.computeAggregatorBytes(query.getAggregatorSpecs()),METHOD_INVOCATION, line no: 270, 0.8571428571428571, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,computeAggregatorBytes,SIMPLE_NAME, line no: 270, 0.8571428571428571, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,granularityBytes,SIMPLE_NAME, line no: 271, 0.8571428571428571, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,query.getGranularity().cacheKey(),METHOD_INVOCATION, line no: 271, 0.8571428571428571, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,cacheKey,SIMPLE_NAME, line no: 271, 0.8571428571428571, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())).put(granularityBytes).put(filterBytes).put(aggregatorBytes).array(),METHOD_INVOCATION, line no: 273, 0.8571428571428571, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())).put(granularityBytes).put(filterBytes).put(aggregatorBytes),METHOD_INVOCATION, line no: 273, 0.8571428571428571, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())).put(granularityBytes).put(filterBytes),METHOD_INVOCATION, line no: 273, 0.8571428571428571, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())).put(granularityBytes),METHOD_INVOCATION, line no: 273, 0.8571428571428571, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())),METHOD_INVOCATION, line no: 273, 0.8571428571428571, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes),METHOD_INVOCATION, line no: 273, 0.8571428571428571, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes),METHOD_INVOCATION, line no: 273, 0.8571428571428571, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY),METHOD_INVOCATION, line no: 273, 0.8571428571428571, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length),METHOD_INVOCATION, line no: 273, 0.8571428571428571, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,allocate,SIMPLE_NAME, line no: 274, 0.8571428571428571, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length,INFIX_EXPRESSION, line no: 275, 0.8571428571428571, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,dimensionSpecBytes.length,QUALIFIED_NAME, line no: 275, 0.8571428571428571, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,length,SIMPLE_NAME, line no: 275, 0.8571428571428571, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,metricSpecBytes.length,QUALIFIED_NAME, line no: 275, 0.8571428571428571, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,4,NUMBER_LITERAL, line no: 275, 0.8571428571428571, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,granularityBytes.length,QUALIFIED_NAME, line no: 276, 0.8571428571428571, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,filterBytes.length,QUALIFIED_NAME, line no: 276, 0.8571428571428571, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,aggregatorBytes.length,QUALIFIED_NAME, line no: 276, 0.8571428571428571, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,Ints.toByteArray(query.getThreshold()),METHOD_INVOCATION, line no: 281, 0.8571428571428571, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,toByteArray,SIMPLE_NAME, line no: 281, 0.8571428571428571, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,array,SIMPLE_NAME, line no: 285, 0.8571428571428571, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,aggIter.next(),METHOD_INVOCATION, line no: 346, 0.8571428571428571, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,minTopNThreshold,SIMPLE_NAME, line no: 390, 0.8571428571428571, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,run,SIMPLE_NAME, line no: 402, 0.8571428571428571, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,!(input instanceof TopNQuery),PREFIX_EXPRESSION, line no: 404, 0.8571428571428571, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,(input instanceof TopNQuery),PARENTHESIZED_EXPRESSION, line no: 404, 0.8571428571428571, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,input instanceof TopNQuery,INSTANCEOF_EXPRESSION, line no: 404, 0.8571428571428571, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,query.getThreshold() > minTopNThreshold,INFIX_EXPRESSION, line no: 409, 0.8571428571428571, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,isBySegment,SIMPLE_NAME, line no: 413, 0.8571428571428571, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,query.getContextBySegment(false),METHOD_INVOCATION, line no: 413, 0.8571428571428571, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,getContextBySegment,SIMPLE_NAME, line no: 413, 0.8571428571428571, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,false,BOOLEAN_LITERAL, line no: 413, 0.8571428571428571, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,Sequences.map(runner.run(query.withThreshold(minTopNThreshold)) new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     if (isBySegment) {       BySegmentTopNResultValue value=(BySegmentTopNResultValue)input.getValue();       return new Result<TopNResultValue>(input.getTimestamp() new BySegmentTopNResultValue(Lists.transform(value.getResults() new Function<Result<TopNResultValue> Result<TopNResultValue>>(){         @Override public Result<TopNResultValue> apply(        Result<TopNResultValue> input){           return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));         }       } ) value.getSegmentId() value.getIntervalString()));     }     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ),METHOD_INVOCATION, line no: 415, 0.8571428571428571, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,map,SIMPLE_NAME, line no: 415, 0.8571428571428571, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,runner.run(query.withThreshold(minTopNThreshold)),METHOD_INVOCATION, line no: 416, 0.8571428571428571, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,query.withThreshold(minTopNThreshold),METHOD_INVOCATION, line no: 416, 0.8571428571428571, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,withThreshold,SIMPLE_NAME, line no: 416, 0.8571428571428571, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     if (isBySegment) {       BySegmentTopNResultValue value=(BySegmentTopNResultValue)input.getValue();       return new Result<TopNResultValue>(input.getTimestamp() new BySegmentTopNResultValue(Lists.transform(value.getResults() new Function<Result<TopNResultValue> Result<TopNResultValue>>(){         @Override public Result<TopNResultValue> apply(        Result<TopNResultValue> input){           return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));         }       } ) value.getSegmentId() value.getIntervalString()));     }     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ,CLASS_INSTANCE_CREATION, line no: 417, 0.8571428571428571, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,BySegmentTopNResultValue,SIMPLE_NAME, line no: 423, 0.8571428571428571, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,value,SIMPLE_NAME, line no: 423, 0.8571428571428571, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,(BySegmentTopNResultValue)input.getValue(),CAST_EXPRESSION, line no: 423, 0.8571428571428571, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,new Result<TopNResultValue>(input.getTimestamp() new BySegmentTopNResultValue(Lists.transform(value.getResults() new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ) value.getSegmentId() value.getIntervalString())),CLASS_INSTANCE_CREATION, line no: 425, 0.8571428571428571, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,new BySegmentTopNResultValue(Lists.transform(value.getResults() new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ) value.getSegmentId() value.getIntervalString()),CLASS_INSTANCE_CREATION, line no: 427, 0.8571428571428571, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,Lists.transform(value.getResults() new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ),METHOD_INVOCATION, line no: 428, 0.8571428571428571, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,value.getResults(),METHOD_INVOCATION, line no: 429, 0.8571428571428571, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,getResults,SIMPLE_NAME, line no: 429, 0.8571428571428571, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ,CLASS_INSTANCE_CREATION, line no: 430, 0.8571428571428571, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold())))),CLASS_INSTANCE_CREATION, line no: 435, 0.8571428571428571, 0.7619047619047619, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))),CLASS_INSTANCE_CREATION, line no: 437, 0.8571428571428571, 0.7619047619047619, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold())),METHOD_INVOCATION, line no: 438, 0.8571428571428571, 0.8095238095238095, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,Iterables.limit(input.getValue() query.getThreshold()),METHOD_INVOCATION, line no: 439, 0.8571428571428571, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,limit,SIMPLE_NAME, line no: 439, 0.8571428571428571, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,value.getSegmentId(),METHOD_INVOCATION, line no: 449, 0.8571428571428571, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,getSegmentId,SIMPLE_NAME, line no: 449, 0.8571428571428571, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,value.getIntervalString(),METHOD_INVOCATION, line no: 450, 0.8571428571428571, 0.8571428571428571, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,getIntervalString,SIMPLE_NAME, line no: 450, 0.8571428571428571, 0.8571428571428571, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,Ordering,SIMPLE_NAME, line no: 28, 0.85, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,Ints,SIMPLE_NAME, line no: 29, 0.85, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,Sequences,SIMPLE_NAME, line no: 34, 0.85, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,BinaryFn,SIMPLE_NAME, line no: 35, 0.85, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,Query,SIMPLE_NAME, line no: 41, 0.85, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,QueryCacheHelper,SIMPLE_NAME, line no: 42, 0.85, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,ResultMergeQueryRunner,SIMPLE_NAME, line no: 47, 0.85, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,DimFilter,SIMPLE_NAME, line no: 52, 0.85, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,ByteBuffer,SIMPLE_NAME, line no: 58, 0.85, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,TOPN_QUERY,SIMPLE_NAME, line no: 67, 0.85, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,runner,SIMPLE_NAME, line no: 86, 0.85, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,new ResultMergeQueryRunner<Result<TopNResultValue>>(runner){   @Override protected Ordering<Result<TopNResultValue>> makeOrdering(  Query<Result<TopNResultValue>> query){     return Ordering.from(new ResultGranularTimestampComparator<TopNResultValue>(((TopNQuery)query).getGranularity()));   }   @Override protected BinaryFn<Result<TopNResultValue> Result<TopNResultValue> Result<TopNResultValue>> createMergeFn(  Query<Result<TopNResultValue>> input){     TopNQuery query=(TopNQuery)input;     return new TopNBinaryFn(TopNResultMerger.identity query.getGranularity() query.getDimensionSpec() query.getTopNMetricSpec() query.getThreshold() query.getAggregatorSpecs() query.getPostAggregatorSpecs());   } } ,CLASS_INSTANCE_CREATION, line no: 88, 0.85, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,makeOrdering,SIMPLE_NAME, line no: 91, 0.85, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,createMergeFn,SIMPLE_NAME, line no: 101, 0.85, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,(TopNQuery)input,CAST_EXPRESSION, line no: 105, 0.85, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,new TopNBinaryFn(TopNResultMerger.identity query.getGranularity() query.getDimensionSpec() query.getTopNMetricSpec() query.getThreshold() query.getAggregatorSpecs() query.getPostAggregatorSpecs()),CLASS_INSTANCE_CREATION, line no: 106, 0.85, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,TopNBinaryFn,SIMPLE_NAME, line no: 106, 0.85, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,TopNResultMerger.identity,QUALIFIED_NAME, line no: 107, 0.85, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,TopNResultMerger,SIMPLE_NAME, line no: 107, 0.85, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,identity,SIMPLE_NAME, line no: 107, 0.85, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,dimensionSpecBytes,SIMPLE_NAME, line no: 265, 0.85, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,query.getDimensionSpec().getCacheKey(),METHOD_INVOCATION, line no: 265, 0.85, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,getCacheKey,SIMPLE_NAME, line no: 265, 0.85, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,metricSpecBytes,SIMPLE_NAME, line no: 266, 0.85, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,query.getTopNMetricSpec().getCacheKey(),METHOD_INVOCATION, line no: 266, 0.85, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,dimFilter,SIMPLE_NAME, line no: 268, 0.85, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,query.getDimensionsFilter(),METHOD_INVOCATION, line no: 268, 0.85, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,getDimensionsFilter,SIMPLE_NAME, line no: 268, 0.85, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,filterBytes,SIMPLE_NAME, line no: 269, 0.85, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,dimFilter == null ? new byte[]{} : dimFilter.getCacheKey(),CONDITIONAL_EXPRESSION, line no: 269, 0.85, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,dimFilter == null,INFIX_EXPRESSION, line no: 269, 0.85, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,new byte[]{},ARRAY_CREATION, line no: 269, 0.85, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,{},ARRAY_INITIALIZER, line no: 269, 0.85, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,dimFilter.getCacheKey(),METHOD_INVOCATION, line no: 269, 0.85, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,aggregatorBytes,SIMPLE_NAME, line no: 270, 0.85, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,QueryCacheHelper.computeAggregatorBytes(query.getAggregatorSpecs()),METHOD_INVOCATION, line no: 270, 0.85, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,computeAggregatorBytes,SIMPLE_NAME, line no: 270, 0.85, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,granularityBytes,SIMPLE_NAME, line no: 271, 0.85, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,query.getGranularity().cacheKey(),METHOD_INVOCATION, line no: 271, 0.85, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,cacheKey,SIMPLE_NAME, line no: 271, 0.85, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())).put(granularityBytes).put(filterBytes).put(aggregatorBytes).array(),METHOD_INVOCATION, line no: 273, 0.85, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())).put(granularityBytes).put(filterBytes).put(aggregatorBytes),METHOD_INVOCATION, line no: 273, 0.85, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())).put(granularityBytes).put(filterBytes),METHOD_INVOCATION, line no: 273, 0.85, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())).put(granularityBytes),METHOD_INVOCATION, line no: 273, 0.85, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes).put(Ints.toByteArray(query.getThreshold())),METHOD_INVOCATION, line no: 273, 0.85, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes).put(metricSpecBytes),METHOD_INVOCATION, line no: 273, 0.85, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY).put(dimensionSpecBytes),METHOD_INVOCATION, line no: 273, 0.85, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length).put(TOPN_QUERY),METHOD_INVOCATION, line no: 273, 0.85, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,ByteBuffer.allocate(1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length),METHOD_INVOCATION, line no: 273, 0.85, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,allocate,SIMPLE_NAME, line no: 274, 0.85, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,1 + dimensionSpecBytes.length + metricSpecBytes.length+ 4+ granularityBytes.length+ filterBytes.length+ aggregatorBytes.length,INFIX_EXPRESSION, line no: 275, 0.85, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,dimensionSpecBytes.length,QUALIFIED_NAME, line no: 275, 0.85, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,length,SIMPLE_NAME, line no: 275, 0.85, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,metricSpecBytes.length,QUALIFIED_NAME, line no: 275, 0.85, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,4,NUMBER_LITERAL, line no: 275, 0.85, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,granularityBytes.length,QUALIFIED_NAME, line no: 276, 0.85, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,filterBytes.length,QUALIFIED_NAME, line no: 276, 0.85, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,aggregatorBytes.length,QUALIFIED_NAME, line no: 276, 0.85, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,Ints.toByteArray(query.getThreshold()),METHOD_INVOCATION, line no: 281, 0.85, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,toByteArray,SIMPLE_NAME, line no: 281, 0.85, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,array,SIMPLE_NAME, line no: 285, 0.85, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,minTopNThreshold,SIMPLE_NAME, line no: 390, 0.85, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,run,SIMPLE_NAME, line no: 402, 0.85, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,!(input instanceof TopNQuery),PREFIX_EXPRESSION, line no: 404, 0.85, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,(input instanceof TopNQuery),PARENTHESIZED_EXPRESSION, line no: 404, 0.85, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,input instanceof TopNQuery,INSTANCEOF_EXPRESSION, line no: 404, 0.85, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,query.getThreshold() > minTopNThreshold,INFIX_EXPRESSION, line no: 409, 0.85, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,isBySegment,SIMPLE_NAME, line no: 413, 0.85, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,query.getContextBySegment(false),METHOD_INVOCATION, line no: 413, 0.85, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,getContextBySegment,SIMPLE_NAME, line no: 413, 0.85, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,false,BOOLEAN_LITERAL, line no: 413, 0.85, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,Sequences.map(runner.run(query.withThreshold(minTopNThreshold)) new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     if (isBySegment) {       BySegmentTopNResultValue value=(BySegmentTopNResultValue)input.getValue();       return new Result<TopNResultValue>(input.getTimestamp() new BySegmentTopNResultValue(Lists.transform(value.getResults() new Function<Result<TopNResultValue> Result<TopNResultValue>>(){         @Override public Result<TopNResultValue> apply(        Result<TopNResultValue> input){           return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));         }       } ) value.getSegmentId() value.getIntervalString()));     }     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ),METHOD_INVOCATION, line no: 415, 0.85, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,map,SIMPLE_NAME, line no: 415, 0.85, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,runner.run(query.withThreshold(minTopNThreshold)),METHOD_INVOCATION, line no: 416, 0.85, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,query.withThreshold(minTopNThreshold),METHOD_INVOCATION, line no: 416, 0.85, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,withThreshold,SIMPLE_NAME, line no: 416, 0.85, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     if (isBySegment) {       BySegmentTopNResultValue value=(BySegmentTopNResultValue)input.getValue();       return new Result<TopNResultValue>(input.getTimestamp() new BySegmentTopNResultValue(Lists.transform(value.getResults() new Function<Result<TopNResultValue> Result<TopNResultValue>>(){         @Override public Result<TopNResultValue> apply(        Result<TopNResultValue> input){           return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));         }       } ) value.getSegmentId() value.getIntervalString()));     }     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ,CLASS_INSTANCE_CREATION, line no: 417, 0.85, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,BySegmentTopNResultValue,SIMPLE_NAME, line no: 423, 0.85, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,value,SIMPLE_NAME, line no: 423, 0.85, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,(BySegmentTopNResultValue)input.getValue(),CAST_EXPRESSION, line no: 423, 0.85, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,new Result<TopNResultValue>(input.getTimestamp() new BySegmentTopNResultValue(Lists.transform(value.getResults() new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ) value.getSegmentId() value.getIntervalString())),CLASS_INSTANCE_CREATION, line no: 425, 0.85, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,new BySegmentTopNResultValue(Lists.transform(value.getResults() new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ) value.getSegmentId() value.getIntervalString()),CLASS_INSTANCE_CREATION, line no: 427, 0.85, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,Lists.transform(value.getResults() new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ),METHOD_INVOCATION, line no: 428, 0.85, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,value.getResults(),METHOD_INVOCATION, line no: 429, 0.85, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,getResults,SIMPLE_NAME, line no: 429, 0.85, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,new Function<Result<TopNResultValue> Result<TopNResultValue>>(){   @Override public Result<TopNResultValue> apply(  Result<TopNResultValue> input){     return new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))));   } } ,CLASS_INSTANCE_CREATION, line no: 430, 0.85, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,new Result<TopNResultValue>(input.getTimestamp() new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold())))),CLASS_INSTANCE_CREATION, line no: 435, 0.85, 0.8, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,new TopNResultValue(Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold()))),CLASS_INSTANCE_CREATION, line no: 437, 0.85, 0.8, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,Lists.<Object>newArrayList(Iterables.limit(input.getValue() query.getThreshold())),METHOD_INVOCATION, line no: 438, 0.85, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,Iterables.limit(input.getValue() query.getThreshold()),METHOD_INVOCATION, line no: 439, 0.85, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,limit,SIMPLE_NAME, line no: 439, 0.85, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,value.getSegmentId(),METHOD_INVOCATION, line no: 449, 0.85, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,getSegmentId,SIMPLE_NAME, line no: 449, 0.85, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,value.getIntervalString(),METHOD_INVOCATION, line no: 450, 0.85, 0.85, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,getIntervalString,SIMPLE_NAME, line no: 450, 0.85, 0.85, 0.0
agg,SIMPLE_NAME, line no: 213,Ordering,SIMPLE_NAME, line no: 28, 0.8333333333333334, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,BinaryFn,SIMPLE_NAME, line no: 35, 0.8333333333333334, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,Query,SIMPLE_NAME, line no: 41, 0.8333333333333334, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,ResultMergeQueryRunner,SIMPLE_NAME, line no: 47, 0.8333333333333334, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,new ResultMergeQueryRunner<Result<TopNResultValue>>(runner){   @Override protected Ordering<Result<TopNResultValue>> makeOrdering(  Query<Result<TopNResultValue>> query){     return Ordering.from(new ResultGranularTimestampComparator<TopNResultValue>(((TopNQuery)query).getGranularity()));   }   @Override protected BinaryFn<Result<TopNResultValue> Result<TopNResultValue> Result<TopNResultValue>> createMergeFn(  Query<Result<TopNResultValue>> input){     TopNQuery query=(TopNQuery)input;     return new TopNBinaryFn(TopNResultMerger.identity query.getGranularity() query.getDimensionSpec() query.getTopNMetricSpec() query.getThreshold() query.getAggregatorSpecs() query.getPostAggregatorSpecs());   } } ,CLASS_INSTANCE_CREATION, line no: 88, 0.8333333333333334, 0.8333333333333334, 0.0
agg,SIMPLE_NAME, line no: 213,makeOrdering,SIMPLE_NAME, line no: 91, 0.8333333333333334, 0.8333333333333334, 0.0
agg,SIMPLE_NAME, line no: 213,createMergeFn,SIMPLE_NAME, line no: 101, 0.8333333333333334, 0.8333333333333334, 0.0
agg,SIMPLE_NAME, line no: 213,values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 164, 0.8333333333333334, 0.8333333333333334, 0.0
agg,SIMPLE_NAME, line no: 213,vals.put(factory.getName() factory.deserialize(resultIter.next())),METHOD_INVOCATION, line no: 347, 0.8333333333333334, 0.8333333333333334, 0.0
getName,SIMPLE_NAME, line no: 213,Ordering,SIMPLE_NAME, line no: 28, 0.8333333333333334, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,BinaryFn,SIMPLE_NAME, line no: 35, 0.8333333333333334, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,Query,SIMPLE_NAME, line no: 41, 0.8333333333333334, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,ResultMergeQueryRunner,SIMPLE_NAME, line no: 47, 0.8333333333333334, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,new ResultMergeQueryRunner<Result<TopNResultValue>>(runner){   @Override protected Ordering<Result<TopNResultValue>> makeOrdering(  Query<Result<TopNResultValue>> query){     return Ordering.from(new ResultGranularTimestampComparator<TopNResultValue>(((TopNQuery)query).getGranularity()));   }   @Override protected BinaryFn<Result<TopNResultValue> Result<TopNResultValue> Result<TopNResultValue>> createMergeFn(  Query<Result<TopNResultValue>> input){     TopNQuery query=(TopNQuery)input;     return new TopNBinaryFn(TopNResultMerger.identity query.getGranularity() query.getDimensionSpec() query.getTopNMetricSpec() query.getThreshold() query.getAggregatorSpecs() query.getPostAggregatorSpecs());   } } ,CLASS_INSTANCE_CREATION, line no: 88, 0.8333333333333334, 0.8333333333333334, 0.0
getName,SIMPLE_NAME, line no: 213,makeOrdering,SIMPLE_NAME, line no: 91, 0.8333333333333334, 0.8333333333333334, 0.0
getName,SIMPLE_NAME, line no: 213,createMergeFn,SIMPLE_NAME, line no: 101, 0.8333333333333334, 0.8333333333333334, 0.0
getName,SIMPLE_NAME, line no: 213,values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 164, 0.8333333333333334, 0.8333333333333334, 0.0
getName,SIMPLE_NAME, line no: 213,vals.put(factory.getName() factory.deserialize(resultIter.next())),METHOD_INVOCATION, line no: 347, 0.8333333333333334, 0.8333333333333334, 0.0
input,SIMPLE_NAME, line no: 213,aggIter.next(),METHOD_INVOCATION, line no: 346, 0.8260869565217391, 0.8260869565217391, 0.0
getMetric,SIMPLE_NAME, line no: 213,aggIter.next(),METHOD_INVOCATION, line no: 346, 0.8260869565217391, 0.8260869565217391, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,Ordering,SIMPLE_NAME, line no: 28, 0.8260869565217391, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,BinaryFn,SIMPLE_NAME, line no: 35, 0.8260869565217391, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,Query,SIMPLE_NAME, line no: 41, 0.8260869565217391, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,ResultMergeQueryRunner,SIMPLE_NAME, line no: 47, 0.8260869565217391, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,new ResultMergeQueryRunner<Result<TopNResultValue>>(runner){   @Override protected Ordering<Result<TopNResultValue>> makeOrdering(  Query<Result<TopNResultValue>> query){     return Ordering.from(new ResultGranularTimestampComparator<TopNResultValue>(((TopNQuery)query).getGranularity()));   }   @Override protected BinaryFn<Result<TopNResultValue> Result<TopNResultValue> Result<TopNResultValue>> createMergeFn(  Query<Result<TopNResultValue>> input){     TopNQuery query=(TopNQuery)input;     return new TopNBinaryFn(TopNResultMerger.identity query.getGranularity() query.getDimensionSpec() query.getTopNMetricSpec() query.getThreshold() query.getAggregatorSpecs() query.getPostAggregatorSpecs());   } } ,CLASS_INSTANCE_CREATION, line no: 88, 0.8260869565217391, 0.8260869565217391, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,makeOrdering,SIMPLE_NAME, line no: 91, 0.8260869565217391, 0.8260869565217391, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,createMergeFn,SIMPLE_NAME, line no: 101, 0.8260869565217391, 0.8260869565217391, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,vals.put(factory.getName() factory.deserialize(resultIter.next())),METHOD_INVOCATION, line no: 347, 0.8260869565217391, 0.8260869565217391, 0.0
agg,SIMPLE_NAME, line no: 213,new TopNBinaryFn(TopNResultMerger.identity query.getGranularity() query.getDimensionSpec() query.getTopNMetricSpec() query.getThreshold() query.getAggregatorSpecs() query.getPostAggregatorSpecs()),CLASS_INSTANCE_CREATION, line no: 106, 0.8181818181818182, 0.8181818181818182, 0.0
agg,SIMPLE_NAME, line no: 213,TopNBinaryFn,SIMPLE_NAME, line no: 106, 0.8181818181818182, 0.8181818181818182, 0.0
agg,SIMPLE_NAME, line no: 213,TopNResultMerger.identity,QUALIFIED_NAME, line no: 107, 0.8181818181818182, 0.8181818181818182, 0.0
agg,SIMPLE_NAME, line no: 213,TopNResultMerger,SIMPLE_NAME, line no: 107, 0.8181818181818182, 0.8181818181818182, 0.0
agg,SIMPLE_NAME, line no: 213,identity,SIMPLE_NAME, line no: 107, 0.8181818181818182, 0.8181818181818182, 0.0
getName,SIMPLE_NAME, line no: 213,new TopNBinaryFn(TopNResultMerger.identity query.getGranularity() query.getDimensionSpec() query.getTopNMetricSpec() query.getThreshold() query.getAggregatorSpecs() query.getPostAggregatorSpecs()),CLASS_INSTANCE_CREATION, line no: 106, 0.8181818181818182, 0.8181818181818182, 0.0
getName,SIMPLE_NAME, line no: 213,TopNBinaryFn,SIMPLE_NAME, line no: 106, 0.8181818181818182, 0.8181818181818182, 0.0
getName,SIMPLE_NAME, line no: 213,TopNResultMerger.identity,QUALIFIED_NAME, line no: 107, 0.8181818181818182, 0.8181818181818182, 0.0
getName,SIMPLE_NAME, line no: 213,TopNResultMerger,SIMPLE_NAME, line no: 107, 0.8181818181818182, 0.8181818181818182, 0.0
getName,SIMPLE_NAME, line no: 213,identity,SIMPLE_NAME, line no: 107, 0.8181818181818182, 0.8181818181818182, 0.0
fn,SIMPLE_NAME, line no: 213,new TopNBinaryFn(TopNResultMerger.identity query.getGranularity() query.getDimensionSpec() query.getTopNMetricSpec() query.getThreshold() query.getAggregatorSpecs() query.getPostAggregatorSpecs()),CLASS_INSTANCE_CREATION, line no: 106, 0.8181818181818182, 0.8181818181818182, 0.0
fn,SIMPLE_NAME, line no: 213,TopNBinaryFn,SIMPLE_NAME, line no: 106, 0.8181818181818182, 0.8181818181818182, 0.0
fn,SIMPLE_NAME, line no: 213,TopNResultMerger.identity,QUALIFIED_NAME, line no: 107, 0.8181818181818182, 0.8181818181818182, 0.0
fn,SIMPLE_NAME, line no: 213,TopNResultMerger,SIMPLE_NAME, line no: 107, 0.8181818181818182, 0.8181818181818182, 0.0
fn,SIMPLE_NAME, line no: 213,identity,SIMPLE_NAME, line no: 107, 0.8181818181818182, 0.8181818181818182, 0.0
manipulate,SIMPLE_NAME, line no: 213,new TopNBinaryFn(TopNResultMerger.identity query.getGranularity() query.getDimensionSpec() query.getTopNMetricSpec() query.getThreshold() query.getAggregatorSpecs() query.getPostAggregatorSpecs()),CLASS_INSTANCE_CREATION, line no: 106, 0.8181818181818182, 0.8181818181818182, 0.0
manipulate,SIMPLE_NAME, line no: 213,TopNBinaryFn,SIMPLE_NAME, line no: 106, 0.8181818181818182, 0.8181818181818182, 0.0
manipulate,SIMPLE_NAME, line no: 213,TopNResultMerger.identity,QUALIFIED_NAME, line no: 107, 0.8181818181818182, 0.8181818181818182, 0.0
manipulate,SIMPLE_NAME, line no: 213,TopNResultMerger,SIMPLE_NAME, line no: 107, 0.8181818181818182, 0.8181818181818182, 0.0
manipulate,SIMPLE_NAME, line no: 213,identity,SIMPLE_NAME, line no: 107, 0.8181818181818182, 0.8181818181818182, 0.0
agg,SIMPLE_NAME, line no: 213,new TopNBinaryFn(TopNResultMerger.identity query.getGranularity() query.getDimensionSpec() query.getTopNMetricSpec() query.getThreshold() query.getAggregatorSpecs() query.getPostAggregatorSpecs()),CLASS_INSTANCE_CREATION, line no: 106, 0.8181818181818182, 0.8181818181818182, 0.0
agg,SIMPLE_NAME, line no: 213,TopNBinaryFn,SIMPLE_NAME, line no: 106, 0.8181818181818182, 0.8181818181818182, 0.0
agg,SIMPLE_NAME, line no: 213,TopNResultMerger.identity,QUALIFIED_NAME, line no: 107, 0.8181818181818182, 0.8181818181818182, 0.0
agg,SIMPLE_NAME, line no: 213,TopNResultMerger,SIMPLE_NAME, line no: 107, 0.8181818181818182, 0.8181818181818182, 0.0
agg,SIMPLE_NAME, line no: 213,identity,SIMPLE_NAME, line no: 107, 0.8181818181818182, 0.8181818181818182, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,aggIter.next(),METHOD_INVOCATION, line no: 346, 0.8181818181818182, 0.8181818181818182, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,new TopNBinaryFn(TopNResultMerger.identity query.getGranularity() query.getDimensionSpec() query.getTopNMetricSpec() query.getThreshold() query.getAggregatorSpecs() query.getPostAggregatorSpecs()),CLASS_INSTANCE_CREATION, line no: 106, 0.8095238095238095, 0.8095238095238095, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,TopNBinaryFn,SIMPLE_NAME, line no: 106, 0.8095238095238095, 0.8095238095238095, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,TopNResultMerger.identity,QUALIFIED_NAME, line no: 107, 0.8095238095238095, 0.8095238095238095, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,TopNResultMerger,SIMPLE_NAME, line no: 107, 0.8095238095238095, 0.8095238095238095, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,identity,SIMPLE_NAME, line no: 107, 0.8095238095238095, 0.8095238095238095, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,new TopNBinaryFn(TopNResultMerger.identity query.getGranularity() query.getDimensionSpec() query.getTopNMetricSpec() query.getThreshold() query.getAggregatorSpecs() query.getPostAggregatorSpecs()),CLASS_INSTANCE_CREATION, line no: 106, 0.8095238095238095, 0.8095238095238095, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,TopNBinaryFn,SIMPLE_NAME, line no: 106, 0.8095238095238095, 0.8095238095238095, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,TopNResultMerger.identity,QUALIFIED_NAME, line no: 107, 0.8095238095238095, 0.8095238095238095, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,TopNResultMerger,SIMPLE_NAME, line no: 107, 0.8095238095238095, 0.8095238095238095, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,identity,SIMPLE_NAME, line no: 107, 0.8095238095238095, 0.8095238095238095, 0.0
getName,SIMPLE_NAME, line no: 213,aggIter.next(),METHOD_INVOCATION, line no: 346, 0.7916666666666666, 0.7916666666666666, 0.0
input,SIMPLE_NAME, line no: 213,new TopNBinaryFn(TopNResultMerger.identity query.getGranularity() query.getDimensionSpec() query.getTopNMetricSpec() query.getThreshold() query.getAggregatorSpecs() query.getPostAggregatorSpecs()),CLASS_INSTANCE_CREATION, line no: 106, 0.782608695652174, 0.782608695652174, 0.0
input,SIMPLE_NAME, line no: 213,TopNBinaryFn,SIMPLE_NAME, line no: 106, 0.782608695652174, 0.782608695652174, 0.0
input,SIMPLE_NAME, line no: 213,TopNResultMerger.identity,QUALIFIED_NAME, line no: 107, 0.782608695652174, 0.782608695652174, 0.0
input,SIMPLE_NAME, line no: 213,TopNResultMerger,SIMPLE_NAME, line no: 107, 0.782608695652174, 0.782608695652174, 0.0
input,SIMPLE_NAME, line no: 213,identity,SIMPLE_NAME, line no: 107, 0.782608695652174, 0.782608695652174, 0.0
getMetric,SIMPLE_NAME, line no: 213,new TopNBinaryFn(TopNResultMerger.identity query.getGranularity() query.getDimensionSpec() query.getTopNMetricSpec() query.getThreshold() query.getAggregatorSpecs() query.getPostAggregatorSpecs()),CLASS_INSTANCE_CREATION, line no: 106, 0.782608695652174, 0.782608695652174, 0.0
getMetric,SIMPLE_NAME, line no: 213,TopNBinaryFn,SIMPLE_NAME, line no: 106, 0.782608695652174, 0.782608695652174, 0.0
getMetric,SIMPLE_NAME, line no: 213,TopNResultMerger.identity,QUALIFIED_NAME, line no: 107, 0.782608695652174, 0.782608695652174, 0.0
getMetric,SIMPLE_NAME, line no: 213,TopNResultMerger,SIMPLE_NAME, line no: 107, 0.782608695652174, 0.782608695652174, 0.0
getMetric,SIMPLE_NAME, line no: 213,identity,SIMPLE_NAME, line no: 107, 0.782608695652174, 0.782608695652174, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,aggIter.next(),METHOD_INVOCATION, line no: 346, 0.782608695652174, 0.782608695652174, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,new TopNBinaryFn(TopNResultMerger.identity query.getGranularity() query.getDimensionSpec() query.getTopNMetricSpec() query.getThreshold() query.getAggregatorSpecs() query.getPostAggregatorSpecs()),CLASS_INSTANCE_CREATION, line no: 106, 0.7727272727272727, 0.7727272727272727, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,TopNBinaryFn,SIMPLE_NAME, line no: 106, 0.7727272727272727, 0.7727272727272727, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,TopNResultMerger.identity,QUALIFIED_NAME, line no: 107, 0.7727272727272727, 0.7727272727272727, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,TopNResultMerger,SIMPLE_NAME, line no: 107, 0.7727272727272727, 0.7727272727272727, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,identity,SIMPLE_NAME, line no: 107, 0.7727272727272727, 0.7727272727272727, 0.0
values,SIMPLE_NAME, line no: 213,compute,SIMPLE_NAME, line no: 171, 0.7619047619047619, 0.7619047619047619, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,compute,SIMPLE_NAME, line no: 171, 0.7619047619047619, 0.7619047619047619, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,postAgg.compute(values),METHOD_INVOCATION, line no: 171, 0.75, 0.75, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,postAgg.compute(vals),METHOD_INVOCATION, line no: 351, 0.75, 0.75, 0.0
agg,SIMPLE_NAME, line no: 213,new TopNBinaryFn(TopNResultMerger.identity query.getGranularity() query.getDimensionSpec() query.getTopNMetricSpec() query.getThreshold() query.getAggregatorSpecs() query.getPostAggregatorSpecs()),CLASS_INSTANCE_CREATION, line no: 106, 0.75, 0.75, 0.0
agg,SIMPLE_NAME, line no: 213,TopNBinaryFn,SIMPLE_NAME, line no: 106, 0.75, 0.75, 0.0
agg,SIMPLE_NAME, line no: 213,TopNResultMerger.identity,QUALIFIED_NAME, line no: 107, 0.75, 0.75, 0.0
agg,SIMPLE_NAME, line no: 213,TopNResultMerger,SIMPLE_NAME, line no: 107, 0.75, 0.75, 0.0
agg,SIMPLE_NAME, line no: 213,identity,SIMPLE_NAME, line no: 107, 0.75, 0.75, 0.0
getName,SIMPLE_NAME, line no: 213,new TopNBinaryFn(TopNResultMerger.identity query.getGranularity() query.getDimensionSpec() query.getTopNMetricSpec() query.getThreshold() query.getAggregatorSpecs() query.getPostAggregatorSpecs()),CLASS_INSTANCE_CREATION, line no: 106, 0.75, 0.75, 0.0
getName,SIMPLE_NAME, line no: 213,TopNBinaryFn,SIMPLE_NAME, line no: 106, 0.75, 0.75, 0.0
getName,SIMPLE_NAME, line no: 213,TopNResultMerger.identity,QUALIFIED_NAME, line no: 107, 0.75, 0.75, 0.0
getName,SIMPLE_NAME, line no: 213,TopNResultMerger,SIMPLE_NAME, line no: 107, 0.75, 0.75, 0.0
getName,SIMPLE_NAME, line no: 213,identity,SIMPLE_NAME, line no: 107, 0.75, 0.75, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,new TopNBinaryFn(TopNResultMerger.identity query.getGranularity() query.getDimensionSpec() query.getTopNMetricSpec() query.getThreshold() query.getAggregatorSpecs() query.getPostAggregatorSpecs()),CLASS_INSTANCE_CREATION, line no: 106, 0.7391304347826086, 0.7391304347826086, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,TopNBinaryFn,SIMPLE_NAME, line no: 106, 0.7391304347826086, 0.7391304347826086, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,TopNResultMerger.identity,QUALIFIED_NAME, line no: 107, 0.7391304347826086, 0.7391304347826086, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,TopNResultMerger,SIMPLE_NAME, line no: 107, 0.7391304347826086, 0.7391304347826086, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,identity,SIMPLE_NAME, line no: 107, 0.7391304347826086, 0.7391304347826086, 0.0
agg,SIMPLE_NAME, line no: 213,compute,SIMPLE_NAME, line no: 171, 0.7272727272727273, 0.7272727272727273, 0.0
getName,SIMPLE_NAME, line no: 213,compute,SIMPLE_NAME, line no: 171, 0.7272727272727273, 0.7272727272727273, 0.0
fn,SIMPLE_NAME, line no: 213,compute,SIMPLE_NAME, line no: 171, 0.7272727272727273, 0.7272727272727273, 0.0
agg,SIMPLE_NAME, line no: 213,compute,SIMPLE_NAME, line no: 171, 0.7272727272727273, 0.7272727272727273, 0.0
values,SIMPLE_NAME, line no: 213,postAgg.compute(values),METHOD_INVOCATION, line no: 171, 0.7142857142857143, 0.7142857142857143, 0.0
values,SIMPLE_NAME, line no: 213,postAgg.compute(vals),METHOD_INVOCATION, line no: 351, 0.7142857142857143, 0.7142857142857143, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,postAgg.compute(values),METHOD_INVOCATION, line no: 171, 0.7142857142857143, 0.7142857142857143, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,postAgg.compute(vals),METHOD_INVOCATION, line no: 351, 0.7142857142857143, 0.7142857142857143, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,postAgg.compute(values),METHOD_INVOCATION, line no: 171, 0.7142857142857143, 0.7142857142857143, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,postAgg.compute(vals),METHOD_INVOCATION, line no: 351, 0.7142857142857143, 0.7142857142857143, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,values.put(postAgg.getName() postAgg.compute(values)),METHOD_INVOCATION, line no: 171, 0.7, 0.7, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,result.getMetric(agg.getName()),METHOD_INVOCATION, line no: 311, 0.7, 0.7, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,vals.put(postAgg.getName() postAgg.compute(vals)),METHOD_INVOCATION, line no: 351, 0.7, 0.7, 0.0
input,SIMPLE_NAME, line no: 213,compute,SIMPLE_NAME, line no: 171, 0.6956521739130435, 0.6956521739130435, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,compute,SIMPLE_NAME, line no: 171, 0.6956521739130435, 0.6956521739130435, 0.0
agg,SIMPLE_NAME, line no: 213,postAgg.compute(values),METHOD_INVOCATION, line no: 171, 0.6818181818181818, 0.6818181818181818, 0.0
agg,SIMPLE_NAME, line no: 213,postAgg.compute(vals),METHOD_INVOCATION, line no: 351, 0.6818181818181818, 0.6818181818181818, 0.0
getName,SIMPLE_NAME, line no: 213,postAgg.compute(values),METHOD_INVOCATION, line no: 171, 0.6818181818181818, 0.6818181818181818, 0.0
getName,SIMPLE_NAME, line no: 213,postAgg.compute(vals),METHOD_INVOCATION, line no: 351, 0.6818181818181818, 0.6818181818181818, 0.0
fn,SIMPLE_NAME, line no: 213,postAgg.compute(values),METHOD_INVOCATION, line no: 171, 0.6818181818181818, 0.6818181818181818, 0.0
fn,SIMPLE_NAME, line no: 213,postAgg.compute(vals),METHOD_INVOCATION, line no: 351, 0.6818181818181818, 0.6818181818181818, 0.0
agg,SIMPLE_NAME, line no: 213,postAgg.compute(values),METHOD_INVOCATION, line no: 171, 0.6818181818181818, 0.6818181818181818, 0.0
agg,SIMPLE_NAME, line no: 213,postAgg.compute(vals),METHOD_INVOCATION, line no: 351, 0.6818181818181818, 0.6818181818181818, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,postAgg.compute(values),METHOD_INVOCATION, line no: 171, 0.6818181818181818, 0.6818181818181818, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,postAgg.compute(vals),METHOD_INVOCATION, line no: 351, 0.6818181818181818, 0.6818181818181818, 0.0
values,SIMPLE_NAME, line no: 213,values.put(postAgg.getName() postAgg.compute(values)),METHOD_INVOCATION, line no: 171, 0.6666666666666666, 0.6666666666666666, 0.0
values,SIMPLE_NAME, line no: 213,result.getMetric(agg.getName()),METHOD_INVOCATION, line no: 311, 0.6666666666666666, 0.6666666666666666, 0.0
values,SIMPLE_NAME, line no: 213,vals.put(postAgg.getName() postAgg.compute(vals)),METHOD_INVOCATION, line no: 351, 0.6666666666666666, 0.6666666666666666, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,values.put(postAgg.getName() postAgg.compute(values)),METHOD_INVOCATION, line no: 171, 0.6666666666666666, 0.6666666666666666, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,result.getMetric(agg.getName()),METHOD_INVOCATION, line no: 311, 0.6666666666666666, 0.6666666666666666, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,vals.put(postAgg.getName() postAgg.compute(vals)),METHOD_INVOCATION, line no: 351, 0.6666666666666666, 0.6666666666666666, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,values.put(postAgg.getName() postAgg.compute(values)),METHOD_INVOCATION, line no: 171, 0.6666666666666666, 0.6666666666666666, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,result.getMetric(agg.getName()),METHOD_INVOCATION, line no: 311, 0.6666666666666666, 0.6666666666666666, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,vals.put(postAgg.getName() postAgg.compute(vals)),METHOD_INVOCATION, line no: 351, 0.6666666666666666, 0.6666666666666666, 0.0
agg,SIMPLE_NAME, line no: 213,compute,SIMPLE_NAME, line no: 171, 0.6666666666666666, 0.6666666666666666, 0.0
getName,SIMPLE_NAME, line no: 213,compute,SIMPLE_NAME, line no: 171, 0.6666666666666666, 0.6666666666666666, 0.0
input,SIMPLE_NAME, line no: 213,postAgg.compute(values),METHOD_INVOCATION, line no: 171, 0.6521739130434783, 0.6521739130434783, 0.0
input,SIMPLE_NAME, line no: 213,postAgg.compute(vals),METHOD_INVOCATION, line no: 351, 0.6521739130434783, 0.6521739130434783, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,postAgg.compute(values),METHOD_INVOCATION, line no: 171, 0.6521739130434783, 0.6521739130434783, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,postAgg.compute(vals),METHOD_INVOCATION, line no: 351, 0.6521739130434783, 0.6521739130434783, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,minutesIn,SIMPLE_NAME, line no: 130, 0.65, 0.65, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,vals.add(result.getMetric(agg.getName())),METHOD_INVOCATION, line no: 311, 0.65, 0.65, 0.0
agg,SIMPLE_NAME, line no: 213,values.put(postAgg.getName() postAgg.compute(values)),METHOD_INVOCATION, line no: 171, 0.6363636363636364, 0.6363636363636364, 0.0
agg,SIMPLE_NAME, line no: 213,result.getMetric(agg.getName()),METHOD_INVOCATION, line no: 311, 0.6363636363636364, 0.6363636363636364, 0.0
agg,SIMPLE_NAME, line no: 213,vals.put(postAgg.getName() postAgg.compute(vals)),METHOD_INVOCATION, line no: 351, 0.6363636363636364, 0.6363636363636364, 0.0
getName,SIMPLE_NAME, line no: 213,values.put(postAgg.getName() postAgg.compute(values)),METHOD_INVOCATION, line no: 171, 0.6363636363636364, 0.6363636363636364, 0.0
getName,SIMPLE_NAME, line no: 213,result.getMetric(agg.getName()),METHOD_INVOCATION, line no: 311, 0.6363636363636364, 0.6363636363636364, 0.0
getName,SIMPLE_NAME, line no: 213,vals.put(postAgg.getName() postAgg.compute(vals)),METHOD_INVOCATION, line no: 351, 0.6363636363636364, 0.6363636363636364, 0.0
fn,SIMPLE_NAME, line no: 213,values.put(postAgg.getName() postAgg.compute(values)),METHOD_INVOCATION, line no: 171, 0.6363636363636364, 0.6363636363636364, 0.0
fn,SIMPLE_NAME, line no: 213,result.getMetric(agg.getName()),METHOD_INVOCATION, line no: 311, 0.6363636363636364, 0.6363636363636364, 0.0
fn,SIMPLE_NAME, line no: 213,vals.put(postAgg.getName() postAgg.compute(vals)),METHOD_INVOCATION, line no: 351, 0.6363636363636364, 0.6363636363636364, 0.0
agg,SIMPLE_NAME, line no: 213,values.put(postAgg.getName() postAgg.compute(values)),METHOD_INVOCATION, line no: 171, 0.6363636363636364, 0.6363636363636364, 0.0
agg,SIMPLE_NAME, line no: 213,result.getMetric(agg.getName()),METHOD_INVOCATION, line no: 311, 0.6363636363636364, 0.6363636363636364, 0.0
agg,SIMPLE_NAME, line no: 213,vals.put(postAgg.getName() postAgg.compute(vals)),METHOD_INVOCATION, line no: 351, 0.6363636363636364, 0.6363636363636364, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,values.put(postAgg.getName() postAgg.compute(values)),METHOD_INVOCATION, line no: 171, 0.6363636363636364, 0.6363636363636364, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,result.getMetric(agg.getName()),METHOD_INVOCATION, line no: 311, 0.6363636363636364, 0.6363636363636364, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,vals.put(postAgg.getName() postAgg.compute(vals)),METHOD_INVOCATION, line no: 351, 0.6363636363636364, 0.6363636363636364, 0.0
agg,SIMPLE_NAME, line no: 213,postAgg.compute(values),METHOD_INVOCATION, line no: 171, 0.625, 0.625, 0.0
agg,SIMPLE_NAME, line no: 213,postAgg.compute(vals),METHOD_INVOCATION, line no: 351, 0.625, 0.625, 0.0
getName,SIMPLE_NAME, line no: 213,postAgg.compute(values),METHOD_INVOCATION, line no: 171, 0.625, 0.625, 0.0
getName,SIMPLE_NAME, line no: 213,postAgg.compute(vals),METHOD_INVOCATION, line no: 351, 0.625, 0.625, 0.0
values,SIMPLE_NAME, line no: 213,minutesIn,SIMPLE_NAME, line no: 130, 0.6190476190476191, 0.6190476190476191, 0.0
values,SIMPLE_NAME, line no: 213,vals.add(result.getMetric(agg.getName())),METHOD_INVOCATION, line no: 311, 0.6190476190476191, 0.6190476190476191, 0.0
put,SIMPLE_NAME, line no: 213,minutesIn,SIMPLE_NAME, line no: 130, 0.6190476190476191, 0.6190476190476191, 0.0
put,SIMPLE_NAME, line no: 213,vals.add(result.getMetric(agg.getName())),METHOD_INVOCATION, line no: 311, 0.6190476190476191, 0.6190476190476191, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,minutesIn,SIMPLE_NAME, line no: 130, 0.6190476190476191, 0.6190476190476191, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,vals.add(result.getMetric(agg.getName())),METHOD_INVOCATION, line no: 311, 0.6190476190476191, 0.6190476190476191, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,minutesIn,SIMPLE_NAME, line no: 130, 0.6190476190476191, 0.6190476190476191, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,vals.add(result.getMetric(agg.getName())),METHOD_INVOCATION, line no: 311, 0.6190476190476191, 0.6190476190476191, 0.0
input,SIMPLE_NAME, line no: 213,values.put(postAgg.getName() postAgg.compute(values)),METHOD_INVOCATION, line no: 171, 0.6086956521739131, 0.6086956521739131, 0.0
input,SIMPLE_NAME, line no: 213,result.getMetric(agg.getName()),METHOD_INVOCATION, line no: 311, 0.6086956521739131, 0.6086956521739131, 0.0
input,SIMPLE_NAME, line no: 213,vals.put(postAgg.getName() postAgg.compute(vals)),METHOD_INVOCATION, line no: 351, 0.6086956521739131, 0.6086956521739131, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,values.put(postAgg.getName() postAgg.compute(values)),METHOD_INVOCATION, line no: 171, 0.6086956521739131, 0.6086956521739131, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,result.getMetric(agg.getName()),METHOD_INVOCATION, line no: 311, 0.6086956521739131, 0.6086956521739131, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,vals.put(postAgg.getName() postAgg.compute(vals)),METHOD_INVOCATION, line no: 351, 0.6086956521739131, 0.6086956521739131, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,Minutes.minutesIn(interval),METHOD_INVOCATION, line no: 130, 0.6, 0.6, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,getMinutes,SIMPLE_NAME, line no: 130, 0.6, 0.6, 0.0
agg,SIMPLE_NAME, line no: 213,minutesIn,SIMPLE_NAME, line no: 130, 0.5909090909090909, 0.5909090909090909, 0.0
agg,SIMPLE_NAME, line no: 213,vals.add(result.getMetric(agg.getName())),METHOD_INVOCATION, line no: 311, 0.5909090909090909, 0.5909090909090909, 0.0
getName,SIMPLE_NAME, line no: 213,minutesIn,SIMPLE_NAME, line no: 130, 0.5909090909090909, 0.5909090909090909, 0.0
getName,SIMPLE_NAME, line no: 213,vals.add(result.getMetric(agg.getName())),METHOD_INVOCATION, line no: 311, 0.5909090909090909, 0.5909090909090909, 0.0
fn,SIMPLE_NAME, line no: 213,minutesIn,SIMPLE_NAME, line no: 130, 0.5909090909090909, 0.5909090909090909, 0.0
fn,SIMPLE_NAME, line no: 213,vals.add(result.getMetric(agg.getName())),METHOD_INVOCATION, line no: 311, 0.5909090909090909, 0.5909090909090909, 0.0
manipulate,SIMPLE_NAME, line no: 213,minutesIn,SIMPLE_NAME, line no: 130, 0.5909090909090909, 0.5909090909090909, 0.0
manipulate,SIMPLE_NAME, line no: 213,vals.add(result.getMetric(agg.getName())),METHOD_INVOCATION, line no: 311, 0.5909090909090909, 0.5909090909090909, 0.0
agg,SIMPLE_NAME, line no: 213,minutesIn,SIMPLE_NAME, line no: 130, 0.5909090909090909, 0.5909090909090909, 0.0
agg,SIMPLE_NAME, line no: 213,vals.add(result.getMetric(agg.getName())),METHOD_INVOCATION, line no: 311, 0.5909090909090909, 0.5909090909090909, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,minutesIn,SIMPLE_NAME, line no: 130, 0.5909090909090909, 0.5909090909090909, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,vals.add(result.getMetric(agg.getName())),METHOD_INVOCATION, line no: 311, 0.5909090909090909, 0.5909090909090909, 0.0
agg,SIMPLE_NAME, line no: 213,values.put(postAgg.getName() postAgg.compute(values)),METHOD_INVOCATION, line no: 171, 0.5833333333333334, 0.5833333333333334, 0.0
agg,SIMPLE_NAME, line no: 213,result.getMetric(agg.getName()),METHOD_INVOCATION, line no: 311, 0.5833333333333334, 0.5833333333333334, 0.0
agg,SIMPLE_NAME, line no: 213,vals.put(postAgg.getName() postAgg.compute(vals)),METHOD_INVOCATION, line no: 351, 0.5833333333333334, 0.5833333333333334, 0.0
getName,SIMPLE_NAME, line no: 213,values.put(postAgg.getName() postAgg.compute(values)),METHOD_INVOCATION, line no: 171, 0.5833333333333334, 0.5833333333333334, 0.0
getName,SIMPLE_NAME, line no: 213,result.getMetric(agg.getName()),METHOD_INVOCATION, line no: 311, 0.5833333333333334, 0.5833333333333334, 0.0
getName,SIMPLE_NAME, line no: 213,vals.put(postAgg.getName() postAgg.compute(vals)),METHOD_INVOCATION, line no: 351, 0.5833333333333334, 0.5833333333333334, 0.0
values,SIMPLE_NAME, line no: 213,Minutes.minutesIn(interval),METHOD_INVOCATION, line no: 130, 0.5714285714285714, 0.5714285714285714, 0.0
values,SIMPLE_NAME, line no: 213,getMinutes,SIMPLE_NAME, line no: 130, 0.5714285714285714, 0.5714285714285714, 0.0
put,SIMPLE_NAME, line no: 213,Minutes.minutesIn(interval),METHOD_INVOCATION, line no: 130, 0.5714285714285714, 0.5714285714285714, 0.0
put,SIMPLE_NAME, line no: 213,getMinutes,SIMPLE_NAME, line no: 130, 0.5714285714285714, 0.5714285714285714, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,Minutes.minutesIn(interval),METHOD_INVOCATION, line no: 130, 0.5714285714285714, 0.5714285714285714, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,getMinutes,SIMPLE_NAME, line no: 130, 0.5714285714285714, 0.5714285714285714, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,Minutes.minutesIn(interval),METHOD_INVOCATION, line no: 130, 0.5714285714285714, 0.5714285714285714, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,getMinutes,SIMPLE_NAME, line no: 130, 0.5714285714285714, 0.5714285714285714, 0.0
input,SIMPLE_NAME, line no: 213,minutesIn,SIMPLE_NAME, line no: 130, 0.5652173913043478, 0.5652173913043478, 0.0
input,SIMPLE_NAME, line no: 213,vals.add(result.getMetric(agg.getName())),METHOD_INVOCATION, line no: 311, 0.5652173913043478, 0.5652173913043478, 0.0
getMetric,SIMPLE_NAME, line no: 213,minutesIn,SIMPLE_NAME, line no: 130, 0.5652173913043478, 0.5652173913043478, 0.0
getMetric,SIMPLE_NAME, line no: 213,vals.add(result.getMetric(agg.getName())),METHOD_INVOCATION, line no: 311, 0.5652173913043478, 0.5652173913043478, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,minutesIn,SIMPLE_NAME, line no: 130, 0.5652173913043478, 0.5652173913043478, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,vals.add(result.getMetric(agg.getName())),METHOD_INVOCATION, line no: 311, 0.5652173913043478, 0.5652173913043478, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,ResultGranularTimestampComparator,SIMPLE_NAME, line no: 46, 0.55, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,from,SIMPLE_NAME, line no: 93, 0.55, 0.55, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,((TopNQuery)query).getGranularity(),METHOD_INVOCATION, line no: 95, 0.55, 0.55, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,((TopNQuery)query),PARENTHESIZED_EXPRESSION, line no: 95, 0.55, 0.55, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,(TopNQuery)query,CAST_EXPRESSION, line no: 95, 0.55, 0.55, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,Minutes.minutesIn(interval).getMinutes(),METHOD_INVOCATION, line no: 130, 0.55, 0.55, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,values.put(postAgg.getName() calculatedPostAgg),METHOD_INVOCATION, line no: 169, 0.55, 0.55, 0.0
agg,SIMPLE_NAME, line no: 213,Minutes.minutesIn(interval),METHOD_INVOCATION, line no: 130, 0.5454545454545454, 0.5454545454545454, 0.0
agg,SIMPLE_NAME, line no: 213,getMinutes,SIMPLE_NAME, line no: 130, 0.5454545454545454, 0.5454545454545454, 0.0
getName,SIMPLE_NAME, line no: 213,Minutes.minutesIn(interval),METHOD_INVOCATION, line no: 130, 0.5454545454545454, 0.5454545454545454, 0.0
getName,SIMPLE_NAME, line no: 213,getMinutes,SIMPLE_NAME, line no: 130, 0.5454545454545454, 0.5454545454545454, 0.0
fn,SIMPLE_NAME, line no: 213,Minutes.minutesIn(interval),METHOD_INVOCATION, line no: 130, 0.5454545454545454, 0.5454545454545454, 0.0
fn,SIMPLE_NAME, line no: 213,getMinutes,SIMPLE_NAME, line no: 130, 0.5454545454545454, 0.5454545454545454, 0.0
manipulate,SIMPLE_NAME, line no: 213,Minutes.minutesIn(interval),METHOD_INVOCATION, line no: 130, 0.5454545454545454, 0.5454545454545454, 0.0
manipulate,SIMPLE_NAME, line no: 213,getMinutes,SIMPLE_NAME, line no: 130, 0.5454545454545454, 0.5454545454545454, 0.0
agg,SIMPLE_NAME, line no: 213,Minutes.minutesIn(interval),METHOD_INVOCATION, line no: 130, 0.5454545454545454, 0.5454545454545454, 0.0
agg,SIMPLE_NAME, line no: 213,getMinutes,SIMPLE_NAME, line no: 130, 0.5454545454545454, 0.5454545454545454, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,Minutes.minutesIn(interval),METHOD_INVOCATION, line no: 130, 0.5454545454545454, 0.5454545454545454, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,getMinutes,SIMPLE_NAME, line no: 130, 0.5454545454545454, 0.5454545454545454, 0.0
agg,SIMPLE_NAME, line no: 213,minutesIn,SIMPLE_NAME, line no: 130, 0.5416666666666666, 0.5416666666666666, 0.0
agg,SIMPLE_NAME, line no: 213,vals.add(result.getMetric(agg.getName())),METHOD_INVOCATION, line no: 311, 0.5416666666666666, 0.5416666666666666, 0.0
getName,SIMPLE_NAME, line no: 213,minutesIn,SIMPLE_NAME, line no: 130, 0.5416666666666666, 0.5416666666666666, 0.0
getName,SIMPLE_NAME, line no: 213,vals.add(result.getMetric(agg.getName())),METHOD_INVOCATION, line no: 311, 0.5416666666666666, 0.5416666666666666, 0.0
values,SIMPLE_NAME, line no: 213,ResultGranularTimestampComparator,SIMPLE_NAME, line no: 46, 0.5238095238095238, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,from,SIMPLE_NAME, line no: 93, 0.5238095238095238, 0.5238095238095238, 0.0
values,SIMPLE_NAME, line no: 213,((TopNQuery)query).getGranularity(),METHOD_INVOCATION, line no: 95, 0.5238095238095238, 0.5238095238095238, 0.0
values,SIMPLE_NAME, line no: 213,((TopNQuery)query),PARENTHESIZED_EXPRESSION, line no: 95, 0.5238095238095238, 0.5238095238095238, 0.0
values,SIMPLE_NAME, line no: 213,(TopNQuery)query,CAST_EXPRESSION, line no: 95, 0.5238095238095238, 0.5238095238095238, 0.0
values,SIMPLE_NAME, line no: 213,Minutes.minutesIn(interval).getMinutes(),METHOD_INVOCATION, line no: 130, 0.5238095238095238, 0.5238095238095238, 0.0
values,SIMPLE_NAME, line no: 213,values.put(postAgg.getName() calculatedPostAgg),METHOD_INVOCATION, line no: 169, 0.5238095238095238, 0.5238095238095238, 0.0
put,SIMPLE_NAME, line no: 213,ResultGranularTimestampComparator,SIMPLE_NAME, line no: 46, 0.5238095238095238, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,from,SIMPLE_NAME, line no: 93, 0.5238095238095238, 0.5238095238095238, 0.0
put,SIMPLE_NAME, line no: 213,((TopNQuery)query).getGranularity(),METHOD_INVOCATION, line no: 95, 0.5238095238095238, 0.5238095238095238, 0.0
put,SIMPLE_NAME, line no: 213,((TopNQuery)query),PARENTHESIZED_EXPRESSION, line no: 95, 0.5238095238095238, 0.5238095238095238, 0.0
put,SIMPLE_NAME, line no: 213,(TopNQuery)query,CAST_EXPRESSION, line no: 95, 0.5238095238095238, 0.5238095238095238, 0.0
put,SIMPLE_NAME, line no: 213,Minutes.minutesIn(interval).getMinutes(),METHOD_INVOCATION, line no: 130, 0.5238095238095238, 0.5238095238095238, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,ResultGranularTimestampComparator,SIMPLE_NAME, line no: 46, 0.5238095238095238, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,from,SIMPLE_NAME, line no: 93, 0.5238095238095238, 0.5238095238095238, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,((TopNQuery)query).getGranularity(),METHOD_INVOCATION, line no: 95, 0.5238095238095238, 0.5238095238095238, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,((TopNQuery)query),PARENTHESIZED_EXPRESSION, line no: 95, 0.5238095238095238, 0.5238095238095238, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,(TopNQuery)query,CAST_EXPRESSION, line no: 95, 0.5238095238095238, 0.5238095238095238, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,Minutes.minutesIn(interval).getMinutes(),METHOD_INVOCATION, line no: 130, 0.5238095238095238, 0.5238095238095238, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,values.put(postAgg.getName() calculatedPostAgg),METHOD_INVOCATION, line no: 169, 0.5238095238095238, 0.5238095238095238, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,ResultGranularTimestampComparator,SIMPLE_NAME, line no: 46, 0.5238095238095238, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,from,SIMPLE_NAME, line no: 93, 0.5238095238095238, 0.5238095238095238, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,((TopNQuery)query).getGranularity(),METHOD_INVOCATION, line no: 95, 0.5238095238095238, 0.5238095238095238, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,((TopNQuery)query),PARENTHESIZED_EXPRESSION, line no: 95, 0.5238095238095238, 0.5238095238095238, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,(TopNQuery)query,CAST_EXPRESSION, line no: 95, 0.5238095238095238, 0.5238095238095238, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,Minutes.minutesIn(interval).getMinutes(),METHOD_INVOCATION, line no: 130, 0.5238095238095238, 0.5238095238095238, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,values.put(postAgg.getName() calculatedPostAgg),METHOD_INVOCATION, line no: 169, 0.5238095238095238, 0.5238095238095238, 0.0
input,SIMPLE_NAME, line no: 213,Minutes.minutesIn(interval),METHOD_INVOCATION, line no: 130, 0.5217391304347826, 0.5217391304347826, 0.0
input,SIMPLE_NAME, line no: 213,getMinutes,SIMPLE_NAME, line no: 130, 0.5217391304347826, 0.5217391304347826, 0.0
getMetric,SIMPLE_NAME, line no: 213,Minutes.minutesIn(interval),METHOD_INVOCATION, line no: 130, 0.5217391304347826, 0.5217391304347826, 0.0
getMetric,SIMPLE_NAME, line no: 213,getMinutes,SIMPLE_NAME, line no: 130, 0.5217391304347826, 0.5217391304347826, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,Minutes.minutesIn(interval),METHOD_INVOCATION, line no: 130, 0.5217391304347826, 0.5217391304347826, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,getMinutes,SIMPLE_NAME, line no: 130, 0.5217391304347826, 0.5217391304347826, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,Ordering.from(new ResultGranularTimestampComparator<TopNResultValue>(((TopNQuery)query).getGranularity())),METHOD_INVOCATION, line no: 93, 0.5, 0.5, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,new ResultGranularTimestampComparator<TopNResultValue>(((TopNQuery)query).getGranularity()),CLASS_INSTANCE_CREATION, line no: 94, 0.5, 0.5, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,numMinutes+=Minutes.minutesIn(interval).getMinutes(),ASSIGNMENT, line no: 130, 0.5, 0.5, 0.0
agg,SIMPLE_NAME, line no: 213,ResultGranularTimestampComparator,SIMPLE_NAME, line no: 46, 0.5, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,from,SIMPLE_NAME, line no: 93, 0.5, 0.5, 0.0
agg,SIMPLE_NAME, line no: 213,((TopNQuery)query).getGranularity(),METHOD_INVOCATION, line no: 95, 0.5, 0.5, 0.0
agg,SIMPLE_NAME, line no: 213,((TopNQuery)query),PARENTHESIZED_EXPRESSION, line no: 95, 0.5, 0.5, 0.0
agg,SIMPLE_NAME, line no: 213,(TopNQuery)query,CAST_EXPRESSION, line no: 95, 0.5, 0.5, 0.0
agg,SIMPLE_NAME, line no: 213,Minutes.minutesIn(interval).getMinutes(),METHOD_INVOCATION, line no: 130, 0.5, 0.5, 0.0
agg,SIMPLE_NAME, line no: 213,values.put(postAgg.getName() calculatedPostAgg),METHOD_INVOCATION, line no: 169, 0.5, 0.5, 0.0
getName,SIMPLE_NAME, line no: 213,ResultGranularTimestampComparator,SIMPLE_NAME, line no: 46, 0.5, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,from,SIMPLE_NAME, line no: 93, 0.5, 0.5, 0.0
getName,SIMPLE_NAME, line no: 213,((TopNQuery)query).getGranularity(),METHOD_INVOCATION, line no: 95, 0.5, 0.5, 0.0
getName,SIMPLE_NAME, line no: 213,((TopNQuery)query),PARENTHESIZED_EXPRESSION, line no: 95, 0.5, 0.5, 0.0
getName,SIMPLE_NAME, line no: 213,(TopNQuery)query,CAST_EXPRESSION, line no: 95, 0.5, 0.5, 0.0
getName,SIMPLE_NAME, line no: 213,Minutes.minutesIn(interval).getMinutes(),METHOD_INVOCATION, line no: 130, 0.5, 0.5, 0.0
getName,SIMPLE_NAME, line no: 213,values.put(postAgg.getName() calculatedPostAgg),METHOD_INVOCATION, line no: 169, 0.5, 0.5, 0.0
fn,SIMPLE_NAME, line no: 213,ResultGranularTimestampComparator,SIMPLE_NAME, line no: 46, 0.5, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,from,SIMPLE_NAME, line no: 93, 0.5, 0.5, 0.0
fn,SIMPLE_NAME, line no: 213,((TopNQuery)query).getGranularity(),METHOD_INVOCATION, line no: 95, 0.5, 0.5, 0.0
fn,SIMPLE_NAME, line no: 213,((TopNQuery)query),PARENTHESIZED_EXPRESSION, line no: 95, 0.5, 0.5, 0.0
fn,SIMPLE_NAME, line no: 213,(TopNQuery)query,CAST_EXPRESSION, line no: 95, 0.5, 0.5, 0.0
fn,SIMPLE_NAME, line no: 213,Minutes.minutesIn(interval).getMinutes(),METHOD_INVOCATION, line no: 130, 0.5, 0.5, 0.0
fn,SIMPLE_NAME, line no: 213,values.put(postAgg.getName() calculatedPostAgg),METHOD_INVOCATION, line no: 169, 0.5, 0.5, 0.0
manipulate,SIMPLE_NAME, line no: 213,ResultGranularTimestampComparator,SIMPLE_NAME, line no: 46, 0.5, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,from,SIMPLE_NAME, line no: 93, 0.5, 0.5, 0.0
manipulate,SIMPLE_NAME, line no: 213,((TopNQuery)query).getGranularity(),METHOD_INVOCATION, line no: 95, 0.5, 0.5, 0.0
manipulate,SIMPLE_NAME, line no: 213,((TopNQuery)query),PARENTHESIZED_EXPRESSION, line no: 95, 0.5, 0.5, 0.0
manipulate,SIMPLE_NAME, line no: 213,(TopNQuery)query,CAST_EXPRESSION, line no: 95, 0.5, 0.5, 0.0
manipulate,SIMPLE_NAME, line no: 213,Minutes.minutesIn(interval).getMinutes(),METHOD_INVOCATION, line no: 130, 0.5, 0.5, 0.0
agg,SIMPLE_NAME, line no: 213,ResultGranularTimestampComparator,SIMPLE_NAME, line no: 46, 0.5, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,from,SIMPLE_NAME, line no: 93, 0.5, 0.5, 0.0
agg,SIMPLE_NAME, line no: 213,((TopNQuery)query).getGranularity(),METHOD_INVOCATION, line no: 95, 0.5, 0.5, 0.0
agg,SIMPLE_NAME, line no: 213,((TopNQuery)query),PARENTHESIZED_EXPRESSION, line no: 95, 0.5, 0.5, 0.0
agg,SIMPLE_NAME, line no: 213,(TopNQuery)query,CAST_EXPRESSION, line no: 95, 0.5, 0.5, 0.0
agg,SIMPLE_NAME, line no: 213,Minutes.minutesIn(interval).getMinutes(),METHOD_INVOCATION, line no: 130, 0.5, 0.5, 0.0
agg,SIMPLE_NAME, line no: 213,values.put(postAgg.getName() calculatedPostAgg),METHOD_INVOCATION, line no: 169, 0.5, 0.5, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,ResultGranularTimestampComparator,SIMPLE_NAME, line no: 46, 0.5, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,from,SIMPLE_NAME, line no: 93, 0.5, 0.5, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,((TopNQuery)query).getGranularity(),METHOD_INVOCATION, line no: 95, 0.5, 0.5, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,((TopNQuery)query),PARENTHESIZED_EXPRESSION, line no: 95, 0.5, 0.5, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,(TopNQuery)query,CAST_EXPRESSION, line no: 95, 0.5, 0.5, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,Minutes.minutesIn(interval).getMinutes(),METHOD_INVOCATION, line no: 130, 0.5, 0.5, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,values.put(postAgg.getName() calculatedPostAgg),METHOD_INVOCATION, line no: 169, 0.5, 0.5, 0.0
agg,SIMPLE_NAME, line no: 213,Minutes.minutesIn(interval),METHOD_INVOCATION, line no: 130, 0.5, 0.5, 0.0
agg,SIMPLE_NAME, line no: 213,getMinutes,SIMPLE_NAME, line no: 130, 0.5, 0.5, 0.0
getName,SIMPLE_NAME, line no: 213,Minutes.minutesIn(interval),METHOD_INVOCATION, line no: 130, 0.5, 0.5, 0.0
getName,SIMPLE_NAME, line no: 213,getMinutes,SIMPLE_NAME, line no: 130, 0.5, 0.5, 0.0
input,SIMPLE_NAME, line no: 213,ResultGranularTimestampComparator,SIMPLE_NAME, line no: 46, 0.4782608695652174, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,from,SIMPLE_NAME, line no: 93, 0.4782608695652174, 0.4782608695652174, 0.0
input,SIMPLE_NAME, line no: 213,((TopNQuery)query).getGranularity(),METHOD_INVOCATION, line no: 95, 0.4782608695652174, 0.4782608695652174, 0.0
input,SIMPLE_NAME, line no: 213,((TopNQuery)query),PARENTHESIZED_EXPRESSION, line no: 95, 0.4782608695652174, 0.4782608695652174, 0.0
input,SIMPLE_NAME, line no: 213,(TopNQuery)query,CAST_EXPRESSION, line no: 95, 0.4782608695652174, 0.4782608695652174, 0.0
input,SIMPLE_NAME, line no: 213,Minutes.minutesIn(interval).getMinutes(),METHOD_INVOCATION, line no: 130, 0.4782608695652174, 0.4782608695652174, 0.0
input,SIMPLE_NAME, line no: 213,values.put(postAgg.getName() calculatedPostAgg),METHOD_INVOCATION, line no: 169, 0.4782608695652174, 0.4782608695652174, 0.0
getMetric,SIMPLE_NAME, line no: 213,ResultGranularTimestampComparator,SIMPLE_NAME, line no: 46, 0.4782608695652174, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,from,SIMPLE_NAME, line no: 93, 0.4782608695652174, 0.4782608695652174, 0.0
getMetric,SIMPLE_NAME, line no: 213,((TopNQuery)query).getGranularity(),METHOD_INVOCATION, line no: 95, 0.4782608695652174, 0.4782608695652174, 0.0
getMetric,SIMPLE_NAME, line no: 213,((TopNQuery)query),PARENTHESIZED_EXPRESSION, line no: 95, 0.4782608695652174, 0.4782608695652174, 0.0
getMetric,SIMPLE_NAME, line no: 213,(TopNQuery)query,CAST_EXPRESSION, line no: 95, 0.4782608695652174, 0.4782608695652174, 0.0
getMetric,SIMPLE_NAME, line no: 213,Minutes.minutesIn(interval).getMinutes(),METHOD_INVOCATION, line no: 130, 0.4782608695652174, 0.4782608695652174, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,ResultGranularTimestampComparator,SIMPLE_NAME, line no: 46, 0.4782608695652174, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,from,SIMPLE_NAME, line no: 93, 0.4782608695652174, 0.4782608695652174, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,((TopNQuery)query).getGranularity(),METHOD_INVOCATION, line no: 95, 0.4782608695652174, 0.4782608695652174, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,((TopNQuery)query),PARENTHESIZED_EXPRESSION, line no: 95, 0.4782608695652174, 0.4782608695652174, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,(TopNQuery)query,CAST_EXPRESSION, line no: 95, 0.4782608695652174, 0.4782608695652174, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,Minutes.minutesIn(interval).getMinutes(),METHOD_INVOCATION, line no: 130, 0.4782608695652174, 0.4782608695652174, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,values.put(postAgg.getName() calculatedPostAgg),METHOD_INVOCATION, line no: 169, 0.4782608695652174, 0.4782608695652174, 0.0
values,SIMPLE_NAME, line no: 213,Ordering.from(new ResultGranularTimestampComparator<TopNResultValue>(((TopNQuery)query).getGranularity())),METHOD_INVOCATION, line no: 93, 0.47619047619047616, 0.47619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,new ResultGranularTimestampComparator<TopNResultValue>(((TopNQuery)query).getGranularity()),CLASS_INSTANCE_CREATION, line no: 94, 0.47619047619047616, 0.47619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,numMinutes+=Minutes.minutesIn(interval).getMinutes(),ASSIGNMENT, line no: 130, 0.47619047619047616, 0.47619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,Ordering.from(new ResultGranularTimestampComparator<TopNResultValue>(((TopNQuery)query).getGranularity())),METHOD_INVOCATION, line no: 93, 0.47619047619047616, 0.47619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,new ResultGranularTimestampComparator<TopNResultValue>(((TopNQuery)query).getGranularity()),CLASS_INSTANCE_CREATION, line no: 94, 0.47619047619047616, 0.47619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,numMinutes+=Minutes.minutesIn(interval).getMinutes(),ASSIGNMENT, line no: 130, 0.47619047619047616, 0.47619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,Ordering.from(new ResultGranularTimestampComparator<TopNResultValue>(((TopNQuery)query).getGranularity())),METHOD_INVOCATION, line no: 93, 0.47619047619047616, 0.47619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,new ResultGranularTimestampComparator<TopNResultValue>(((TopNQuery)query).getGranularity()),CLASS_INSTANCE_CREATION, line no: 94, 0.47619047619047616, 0.47619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,numMinutes+=Minutes.minutesIn(interval).getMinutes(),ASSIGNMENT, line no: 130, 0.47619047619047616, 0.47619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,Ordering.from(new ResultGranularTimestampComparator<TopNResultValue>(((TopNQuery)query).getGranularity())),METHOD_INVOCATION, line no: 93, 0.47619047619047616, 0.47619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,new ResultGranularTimestampComparator<TopNResultValue>(((TopNQuery)query).getGranularity()),CLASS_INSTANCE_CREATION, line no: 94, 0.47619047619047616, 0.47619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,numMinutes+=Minutes.minutesIn(interval).getMinutes(),ASSIGNMENT, line no: 130, 0.47619047619047616, 0.47619047619047616, 0.0
agg,SIMPLE_NAME, line no: 213,ResultGranularTimestampComparator,SIMPLE_NAME, line no: 46, 0.4583333333333333, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,from,SIMPLE_NAME, line no: 93, 0.4583333333333333, 0.4583333333333333, 0.0
agg,SIMPLE_NAME, line no: 213,((TopNQuery)query).getGranularity(),METHOD_INVOCATION, line no: 95, 0.4583333333333333, 0.4583333333333333, 0.0
agg,SIMPLE_NAME, line no: 213,((TopNQuery)query),PARENTHESIZED_EXPRESSION, line no: 95, 0.4583333333333333, 0.4583333333333333, 0.0
agg,SIMPLE_NAME, line no: 213,(TopNQuery)query,CAST_EXPRESSION, line no: 95, 0.4583333333333333, 0.4583333333333333, 0.0
agg,SIMPLE_NAME, line no: 213,Minutes.minutesIn(interval).getMinutes(),METHOD_INVOCATION, line no: 130, 0.4583333333333333, 0.4583333333333333, 0.0
agg,SIMPLE_NAME, line no: 213,values.put(postAgg.getName() calculatedPostAgg),METHOD_INVOCATION, line no: 169, 0.4583333333333333, 0.4583333333333333, 0.0
getName,SIMPLE_NAME, line no: 213,ResultGranularTimestampComparator,SIMPLE_NAME, line no: 46, 0.4583333333333333, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,from,SIMPLE_NAME, line no: 93, 0.4583333333333333, 0.4583333333333333, 0.0
getName,SIMPLE_NAME, line no: 213,((TopNQuery)query).getGranularity(),METHOD_INVOCATION, line no: 95, 0.4583333333333333, 0.4583333333333333, 0.0
getName,SIMPLE_NAME, line no: 213,((TopNQuery)query),PARENTHESIZED_EXPRESSION, line no: 95, 0.4583333333333333, 0.4583333333333333, 0.0
getName,SIMPLE_NAME, line no: 213,(TopNQuery)query,CAST_EXPRESSION, line no: 95, 0.4583333333333333, 0.4583333333333333, 0.0
getName,SIMPLE_NAME, line no: 213,Minutes.minutesIn(interval).getMinutes(),METHOD_INVOCATION, line no: 130, 0.4583333333333333, 0.4583333333333333, 0.0
getName,SIMPLE_NAME, line no: 213,values.put(postAgg.getName() calculatedPostAgg),METHOD_INVOCATION, line no: 169, 0.4583333333333333, 0.4583333333333333, 0.0
agg,SIMPLE_NAME, line no: 213,Ordering.from(new ResultGranularTimestampComparator<TopNResultValue>(((TopNQuery)query).getGranularity())),METHOD_INVOCATION, line no: 93, 0.45454545454545453, 0.45454545454545453, 0.0
agg,SIMPLE_NAME, line no: 213,new ResultGranularTimestampComparator<TopNResultValue>(((TopNQuery)query).getGranularity()),CLASS_INSTANCE_CREATION, line no: 94, 0.45454545454545453, 0.45454545454545453, 0.0
agg,SIMPLE_NAME, line no: 213,numMinutes+=Minutes.minutesIn(interval).getMinutes(),ASSIGNMENT, line no: 130, 0.45454545454545453, 0.45454545454545453, 0.0
getName,SIMPLE_NAME, line no: 213,Ordering.from(new ResultGranularTimestampComparator<TopNResultValue>(((TopNQuery)query).getGranularity())),METHOD_INVOCATION, line no: 93, 0.45454545454545453, 0.45454545454545453, 0.0
getName,SIMPLE_NAME, line no: 213,new ResultGranularTimestampComparator<TopNResultValue>(((TopNQuery)query).getGranularity()),CLASS_INSTANCE_CREATION, line no: 94, 0.45454545454545453, 0.45454545454545453, 0.0
getName,SIMPLE_NAME, line no: 213,numMinutes+=Minutes.minutesIn(interval).getMinutes(),ASSIGNMENT, line no: 130, 0.45454545454545453, 0.45454545454545453, 0.0
fn,SIMPLE_NAME, line no: 213,Ordering.from(new ResultGranularTimestampComparator<TopNResultValue>(((TopNQuery)query).getGranularity())),METHOD_INVOCATION, line no: 93, 0.45454545454545453, 0.45454545454545453, 0.0
fn,SIMPLE_NAME, line no: 213,new ResultGranularTimestampComparator<TopNResultValue>(((TopNQuery)query).getGranularity()),CLASS_INSTANCE_CREATION, line no: 94, 0.45454545454545453, 0.45454545454545453, 0.0
fn,SIMPLE_NAME, line no: 213,numMinutes+=Minutes.minutesIn(interval).getMinutes(),ASSIGNMENT, line no: 130, 0.45454545454545453, 0.45454545454545453, 0.0
manipulate,SIMPLE_NAME, line no: 213,Ordering.from(new ResultGranularTimestampComparator<TopNResultValue>(((TopNQuery)query).getGranularity())),METHOD_INVOCATION, line no: 93, 0.45454545454545453, 0.45454545454545453, 0.0
manipulate,SIMPLE_NAME, line no: 213,new ResultGranularTimestampComparator<TopNResultValue>(((TopNQuery)query).getGranularity()),CLASS_INSTANCE_CREATION, line no: 94, 0.45454545454545453, 0.45454545454545453, 0.0
manipulate,SIMPLE_NAME, line no: 213,numMinutes+=Minutes.minutesIn(interval).getMinutes(),ASSIGNMENT, line no: 130, 0.45454545454545453, 0.45454545454545453, 0.0
agg,SIMPLE_NAME, line no: 213,Ordering.from(new ResultGranularTimestampComparator<TopNResultValue>(((TopNQuery)query).getGranularity())),METHOD_INVOCATION, line no: 93, 0.45454545454545453, 0.45454545454545453, 0.0
agg,SIMPLE_NAME, line no: 213,new ResultGranularTimestampComparator<TopNResultValue>(((TopNQuery)query).getGranularity()),CLASS_INSTANCE_CREATION, line no: 94, 0.45454545454545453, 0.45454545454545453, 0.0
agg,SIMPLE_NAME, line no: 213,numMinutes+=Minutes.minutesIn(interval).getMinutes(),ASSIGNMENT, line no: 130, 0.45454545454545453, 0.45454545454545453, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,Ordering.from(new ResultGranularTimestampComparator<TopNResultValue>(((TopNQuery)query).getGranularity())),METHOD_INVOCATION, line no: 93, 0.45454545454545453, 0.45454545454545453, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,new ResultGranularTimestampComparator<TopNResultValue>(((TopNQuery)query).getGranularity()),CLASS_INSTANCE_CREATION, line no: 94, 0.45454545454545453, 0.45454545454545453, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,numMinutes+=Minutes.minutesIn(interval).getMinutes(),ASSIGNMENT, line no: 130, 0.45454545454545453, 0.45454545454545453, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,config,SIMPLE_NAME, line no: 75, 0.45, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,getChunkPeriod,SIMPLE_NAME, line no: 373, 0.45, 0.45, 0.0
input,SIMPLE_NAME, line no: 213,Ordering.from(new ResultGranularTimestampComparator<TopNResultValue>(((TopNQuery)query).getGranularity())),METHOD_INVOCATION, line no: 93, 0.43478260869565216, 0.43478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,new ResultGranularTimestampComparator<TopNResultValue>(((TopNQuery)query).getGranularity()),CLASS_INSTANCE_CREATION, line no: 94, 0.43478260869565216, 0.43478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,numMinutes+=Minutes.minutesIn(interval).getMinutes(),ASSIGNMENT, line no: 130, 0.43478260869565216, 0.43478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,Ordering.from(new ResultGranularTimestampComparator<TopNResultValue>(((TopNQuery)query).getGranularity())),METHOD_INVOCATION, line no: 93, 0.43478260869565216, 0.43478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,new ResultGranularTimestampComparator<TopNResultValue>(((TopNQuery)query).getGranularity()),CLASS_INSTANCE_CREATION, line no: 94, 0.43478260869565216, 0.43478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,numMinutes+=Minutes.minutesIn(interval).getMinutes(),ASSIGNMENT, line no: 130, 0.43478260869565216, 0.43478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,Ordering.from(new ResultGranularTimestampComparator<TopNResultValue>(((TopNQuery)query).getGranularity())),METHOD_INVOCATION, line no: 93, 0.43478260869565216, 0.43478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,new ResultGranularTimestampComparator<TopNResultValue>(((TopNQuery)query).getGranularity()),CLASS_INSTANCE_CREATION, line no: 94, 0.43478260869565216, 0.43478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,numMinutes+=Minutes.minutesIn(interval).getMinutes(),ASSIGNMENT, line no: 130, 0.43478260869565216, 0.43478260869565216, 0.0
values,SIMPLE_NAME, line no: 213,config,SIMPLE_NAME, line no: 75, 0.42857142857142855, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,getChunkPeriod,SIMPLE_NAME, line no: 373, 0.42857142857142855, 0.42857142857142855, 0.0
put,SIMPLE_NAME, line no: 213,config,SIMPLE_NAME, line no: 75, 0.42857142857142855, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,getChunkPeriod,SIMPLE_NAME, line no: 373, 0.42857142857142855, 0.42857142857142855, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,config,SIMPLE_NAME, line no: 75, 0.42857142857142855, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,getChunkPeriod,SIMPLE_NAME, line no: 373, 0.42857142857142855, 0.42857142857142855, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,config,SIMPLE_NAME, line no: 75, 0.42857142857142855, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,getChunkPeriod,SIMPLE_NAME, line no: 373, 0.42857142857142855, 0.42857142857142855, 0.0
agg,SIMPLE_NAME, line no: 213,Ordering.from(new ResultGranularTimestampComparator<TopNResultValue>(((TopNQuery)query).getGranularity())),METHOD_INVOCATION, line no: 93, 0.4166666666666667, 0.4166666666666667, 0.0
agg,SIMPLE_NAME, line no: 213,new ResultGranularTimestampComparator<TopNResultValue>(((TopNQuery)query).getGranularity()),CLASS_INSTANCE_CREATION, line no: 94, 0.4166666666666667, 0.4166666666666667, 0.0
agg,SIMPLE_NAME, line no: 213,numMinutes+=Minutes.minutesIn(interval).getMinutes(),ASSIGNMENT, line no: 130, 0.4166666666666667, 0.4166666666666667, 0.0
getName,SIMPLE_NAME, line no: 213,Ordering.from(new ResultGranularTimestampComparator<TopNResultValue>(((TopNQuery)query).getGranularity())),METHOD_INVOCATION, line no: 93, 0.4166666666666667, 0.4166666666666667, 0.0
getName,SIMPLE_NAME, line no: 213,new ResultGranularTimestampComparator<TopNResultValue>(((TopNQuery)query).getGranularity()),CLASS_INSTANCE_CREATION, line no: 94, 0.4166666666666667, 0.4166666666666667, 0.0
getName,SIMPLE_NAME, line no: 213,numMinutes+=Minutes.minutesIn(interval).getMinutes(),ASSIGNMENT, line no: 130, 0.4166666666666667, 0.4166666666666667, 0.0
agg,SIMPLE_NAME, line no: 213,config,SIMPLE_NAME, line no: 75, 0.4090909090909091, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,getChunkPeriod,SIMPLE_NAME, line no: 373, 0.4090909090909091, 0.4090909090909091, 0.0
getName,SIMPLE_NAME, line no: 213,config,SIMPLE_NAME, line no: 75, 0.4090909090909091, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,getChunkPeriod,SIMPLE_NAME, line no: 373, 0.4090909090909091, 0.4090909090909091, 0.0
fn,SIMPLE_NAME, line no: 213,config,SIMPLE_NAME, line no: 75, 0.4090909090909091, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,getChunkPeriod,SIMPLE_NAME, line no: 373, 0.4090909090909091, 0.4090909090909091, 0.0
manipulate,SIMPLE_NAME, line no: 213,config,SIMPLE_NAME, line no: 75, 0.4090909090909091, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,getChunkPeriod,SIMPLE_NAME, line no: 373, 0.4090909090909091, 0.4090909090909091, 0.0
agg,SIMPLE_NAME, line no: 213,config,SIMPLE_NAME, line no: 75, 0.4090909090909091, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,getChunkPeriod,SIMPLE_NAME, line no: 373, 0.4090909090909091, 0.4090909090909091, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,config,SIMPLE_NAME, line no: 75, 0.4090909090909091, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,getChunkPeriod,SIMPLE_NAME, line no: 373, 0.4090909090909091, 0.4090909090909091, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,IntervalChunkingQueryRunner,SIMPLE_NAME, line no: 40, 0.4, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,getOrdering,SIMPLE_NAME, line no: 122, 0.4, 0.4, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,config.getChunkPeriod(),METHOD_INVOCATION, line no: 373, 0.4, 0.4, 0.0
input,SIMPLE_NAME, line no: 213,config,SIMPLE_NAME, line no: 75, 0.391304347826087, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,getChunkPeriod,SIMPLE_NAME, line no: 373, 0.391304347826087, 0.391304347826087, 0.0
getMetric,SIMPLE_NAME, line no: 213,config,SIMPLE_NAME, line no: 75, 0.391304347826087, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,getChunkPeriod,SIMPLE_NAME, line no: 373, 0.391304347826087, 0.391304347826087, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,config,SIMPLE_NAME, line no: 75, 0.391304347826087, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,getChunkPeriod,SIMPLE_NAME, line no: 373, 0.391304347826087, 0.391304347826087, 0.0
values,SIMPLE_NAME, line no: 213,IntervalChunkingQueryRunner,SIMPLE_NAME, line no: 40, 0.38095238095238093, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,getOrdering,SIMPLE_NAME, line no: 122, 0.38095238095238093, 0.38095238095238093, 0.0
values,SIMPLE_NAME, line no: 213,config.getChunkPeriod(),METHOD_INVOCATION, line no: 373, 0.38095238095238093, 0.38095238095238093, 0.0
put,SIMPLE_NAME, line no: 213,IntervalChunkingQueryRunner,SIMPLE_NAME, line no: 40, 0.38095238095238093, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,getOrdering,SIMPLE_NAME, line no: 122, 0.38095238095238093, 0.38095238095238093, 0.0
put,SIMPLE_NAME, line no: 213,config.getChunkPeriod(),METHOD_INVOCATION, line no: 373, 0.38095238095238093, 0.38095238095238093, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,IntervalChunkingQueryRunner,SIMPLE_NAME, line no: 40, 0.38095238095238093, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,getOrdering,SIMPLE_NAME, line no: 122, 0.38095238095238093, 0.38095238095238093, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,config.getChunkPeriod(),METHOD_INVOCATION, line no: 373, 0.38095238095238093, 0.38095238095238093, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,IntervalChunkingQueryRunner,SIMPLE_NAME, line no: 40, 0.38095238095238093, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,getOrdering,SIMPLE_NAME, line no: 122, 0.38095238095238093, 0.38095238095238093, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,config.getChunkPeriod(),METHOD_INVOCATION, line no: 373, 0.38095238095238093, 0.38095238095238093, 0.0
agg,SIMPLE_NAME, line no: 213,config,SIMPLE_NAME, line no: 75, 0.375, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,getChunkPeriod,SIMPLE_NAME, line no: 373, 0.375, 0.375, 0.0
getName,SIMPLE_NAME, line no: 213,config,SIMPLE_NAME, line no: 75, 0.375, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,getChunkPeriod,SIMPLE_NAME, line no: 373, 0.375, 0.375, 0.0
agg,SIMPLE_NAME, line no: 213,IntervalChunkingQueryRunner,SIMPLE_NAME, line no: 40, 0.36363636363636365, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,getOrdering,SIMPLE_NAME, line no: 122, 0.36363636363636365, 0.36363636363636365, 0.0
agg,SIMPLE_NAME, line no: 213,config.getChunkPeriod(),METHOD_INVOCATION, line no: 373, 0.36363636363636365, 0.36363636363636365, 0.0
getName,SIMPLE_NAME, line no: 213,IntervalChunkingQueryRunner,SIMPLE_NAME, line no: 40, 0.36363636363636365, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,getOrdering,SIMPLE_NAME, line no: 122, 0.36363636363636365, 0.36363636363636365, 0.0
getName,SIMPLE_NAME, line no: 213,config.getChunkPeriod(),METHOD_INVOCATION, line no: 373, 0.36363636363636365, 0.36363636363636365, 0.0
fn,SIMPLE_NAME, line no: 213,IntervalChunkingQueryRunner,SIMPLE_NAME, line no: 40, 0.36363636363636365, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,getOrdering,SIMPLE_NAME, line no: 122, 0.36363636363636365, 0.36363636363636365, 0.0
fn,SIMPLE_NAME, line no: 213,config.getChunkPeriod(),METHOD_INVOCATION, line no: 373, 0.36363636363636365, 0.36363636363636365, 0.0
manipulate,SIMPLE_NAME, line no: 213,IntervalChunkingQueryRunner,SIMPLE_NAME, line no: 40, 0.36363636363636365, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,getOrdering,SIMPLE_NAME, line no: 122, 0.36363636363636365, 0.36363636363636365, 0.0
manipulate,SIMPLE_NAME, line no: 213,config.getChunkPeriod(),METHOD_INVOCATION, line no: 373, 0.36363636363636365, 0.36363636363636365, 0.0
agg,SIMPLE_NAME, line no: 213,IntervalChunkingQueryRunner,SIMPLE_NAME, line no: 40, 0.36363636363636365, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,getOrdering,SIMPLE_NAME, line no: 122, 0.36363636363636365, 0.36363636363636365, 0.0
agg,SIMPLE_NAME, line no: 213,config.getChunkPeriod(),METHOD_INVOCATION, line no: 373, 0.36363636363636365, 0.36363636363636365, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,IntervalChunkingQueryRunner,SIMPLE_NAME, line no: 40, 0.36363636363636365, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,getOrdering,SIMPLE_NAME, line no: 122, 0.36363636363636365, 0.36363636363636365, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,config.getChunkPeriod(),METHOD_INVOCATION, line no: 373, 0.36363636363636365, 0.36363636363636365, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,MergeSequence,SIMPLE_NAME, line no: 32, 0.35, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,OrderedMergeSequence,SIMPLE_NAME, line no: 37, 0.35, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,getOrdering(),METHOD_INVOCATION, line no: 122, 0.35, 0.35, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,new IntervalChunkingQueryRunner<Result<TopNResultValue>>(runner config.getChunkPeriod()),CLASS_INSTANCE_CREATION, line no: 373, 0.35, 0.35, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,getMinTopNThreshold,SIMPLE_NAME, line no: 379, 0.35, 0.35, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,getClass,SIMPLE_NAME, line no: 405, 0.35, 0.35, 0.0
input,SIMPLE_NAME, line no: 213,IntervalChunkingQueryRunner,SIMPLE_NAME, line no: 40, 0.34782608695652173, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,getOrdering,SIMPLE_NAME, line no: 122, 0.34782608695652173, 0.34782608695652173, 0.0
input,SIMPLE_NAME, line no: 213,config.getChunkPeriod(),METHOD_INVOCATION, line no: 373, 0.34782608695652173, 0.34782608695652173, 0.0
getMetric,SIMPLE_NAME, line no: 213,IntervalChunkingQueryRunner,SIMPLE_NAME, line no: 40, 0.34782608695652173, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,getOrdering,SIMPLE_NAME, line no: 122, 0.34782608695652173, 0.34782608695652173, 0.0
getMetric,SIMPLE_NAME, line no: 213,config.getChunkPeriod(),METHOD_INVOCATION, line no: 373, 0.34782608695652173, 0.34782608695652173, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,IntervalChunkingQueryRunner,SIMPLE_NAME, line no: 40, 0.34782608695652173, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,getOrdering,SIMPLE_NAME, line no: 122, 0.34782608695652173, 0.34782608695652173, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,config.getChunkPeriod(),METHOD_INVOCATION, line no: 373, 0.34782608695652173, 0.34782608695652173, 0.0
values,SIMPLE_NAME, line no: 213,MergeSequence,SIMPLE_NAME, line no: 32, 0.3333333333333333, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,OrderedMergeSequence,SIMPLE_NAME, line no: 37, 0.3333333333333333, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,getOrdering(),METHOD_INVOCATION, line no: 122, 0.3333333333333333, 0.3333333333333333, 0.0
values,SIMPLE_NAME, line no: 213,new IntervalChunkingQueryRunner<Result<TopNResultValue>>(runner config.getChunkPeriod()),CLASS_INSTANCE_CREATION, line no: 373, 0.3333333333333333, 0.3333333333333333, 0.0
values,SIMPLE_NAME, line no: 213,getMinTopNThreshold,SIMPLE_NAME, line no: 379, 0.3333333333333333, 0.3333333333333333, 0.0
values,SIMPLE_NAME, line no: 213,getClass,SIMPLE_NAME, line no: 405, 0.3333333333333333, 0.3333333333333333, 0.0
put,SIMPLE_NAME, line no: 213,MergeSequence,SIMPLE_NAME, line no: 32, 0.3333333333333333, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,OrderedMergeSequence,SIMPLE_NAME, line no: 37, 0.3333333333333333, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,getOrdering(),METHOD_INVOCATION, line no: 122, 0.3333333333333333, 0.3333333333333333, 0.0
put,SIMPLE_NAME, line no: 213,new IntervalChunkingQueryRunner<Result<TopNResultValue>>(runner config.getChunkPeriod()),CLASS_INSTANCE_CREATION, line no: 373, 0.3333333333333333, 0.3333333333333333, 0.0
put,SIMPLE_NAME, line no: 213,getMinTopNThreshold,SIMPLE_NAME, line no: 379, 0.3333333333333333, 0.3333333333333333, 0.0
put,SIMPLE_NAME, line no: 213,getClass,SIMPLE_NAME, line no: 405, 0.3333333333333333, 0.3333333333333333, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,MergeSequence,SIMPLE_NAME, line no: 32, 0.3333333333333333, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,OrderedMergeSequence,SIMPLE_NAME, line no: 37, 0.3333333333333333, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,getOrdering(),METHOD_INVOCATION, line no: 122, 0.3333333333333333, 0.3333333333333333, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,new IntervalChunkingQueryRunner<Result<TopNResultValue>>(runner config.getChunkPeriod()),CLASS_INSTANCE_CREATION, line no: 373, 0.3333333333333333, 0.3333333333333333, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,getMinTopNThreshold,SIMPLE_NAME, line no: 379, 0.3333333333333333, 0.3333333333333333, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,getClass,SIMPLE_NAME, line no: 405, 0.3333333333333333, 0.3333333333333333, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,MergeSequence,SIMPLE_NAME, line no: 32, 0.3333333333333333, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,OrderedMergeSequence,SIMPLE_NAME, line no: 37, 0.3333333333333333, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,getOrdering(),METHOD_INVOCATION, line no: 122, 0.3333333333333333, 0.3333333333333333, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,new IntervalChunkingQueryRunner<Result<TopNResultValue>>(runner config.getChunkPeriod()),CLASS_INSTANCE_CREATION, line no: 373, 0.3333333333333333, 0.3333333333333333, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,getMinTopNThreshold,SIMPLE_NAME, line no: 379, 0.3333333333333333, 0.3333333333333333, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,getClass,SIMPLE_NAME, line no: 405, 0.3333333333333333, 0.3333333333333333, 0.0
agg,SIMPLE_NAME, line no: 213,IntervalChunkingQueryRunner,SIMPLE_NAME, line no: 40, 0.3333333333333333, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,getOrdering,SIMPLE_NAME, line no: 122, 0.3333333333333333, 0.3333333333333333, 0.0
agg,SIMPLE_NAME, line no: 213,config.getChunkPeriod(),METHOD_INVOCATION, line no: 373, 0.3333333333333333, 0.3333333333333333, 0.0
getName,SIMPLE_NAME, line no: 213,IntervalChunkingQueryRunner,SIMPLE_NAME, line no: 40, 0.3333333333333333, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,getOrdering,SIMPLE_NAME, line no: 122, 0.3333333333333333, 0.3333333333333333, 0.0
getName,SIMPLE_NAME, line no: 213,config.getChunkPeriod(),METHOD_INVOCATION, line no: 373, 0.3333333333333333, 0.3333333333333333, 0.0
agg,SIMPLE_NAME, line no: 213,MergeSequence,SIMPLE_NAME, line no: 32, 0.3181818181818182, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,OrderedMergeSequence,SIMPLE_NAME, line no: 37, 0.3181818181818182, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,getOrdering(),METHOD_INVOCATION, line no: 122, 0.3181818181818182, 0.3181818181818182, 0.0
agg,SIMPLE_NAME, line no: 213,new IntervalChunkingQueryRunner<Result<TopNResultValue>>(runner config.getChunkPeriod()),CLASS_INSTANCE_CREATION, line no: 373, 0.3181818181818182, 0.3181818181818182, 0.0
agg,SIMPLE_NAME, line no: 213,getMinTopNThreshold,SIMPLE_NAME, line no: 379, 0.3181818181818182, 0.3181818181818182, 0.0
agg,SIMPLE_NAME, line no: 213,getClass,SIMPLE_NAME, line no: 405, 0.3181818181818182, 0.3181818181818182, 0.0
getName,SIMPLE_NAME, line no: 213,MergeSequence,SIMPLE_NAME, line no: 32, 0.3181818181818182, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,OrderedMergeSequence,SIMPLE_NAME, line no: 37, 0.3181818181818182, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,getOrdering(),METHOD_INVOCATION, line no: 122, 0.3181818181818182, 0.3181818181818182, 0.0
getName,SIMPLE_NAME, line no: 213,new IntervalChunkingQueryRunner<Result<TopNResultValue>>(runner config.getChunkPeriod()),CLASS_INSTANCE_CREATION, line no: 373, 0.3181818181818182, 0.3181818181818182, 0.0
getName,SIMPLE_NAME, line no: 213,getMinTopNThreshold,SIMPLE_NAME, line no: 379, 0.3181818181818182, 0.3181818181818182, 0.0
getName,SIMPLE_NAME, line no: 213,getClass,SIMPLE_NAME, line no: 405, 0.3181818181818182, 0.3181818181818182, 0.0
fn,SIMPLE_NAME, line no: 213,MergeSequence,SIMPLE_NAME, line no: 32, 0.3181818181818182, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,OrderedMergeSequence,SIMPLE_NAME, line no: 37, 0.3181818181818182, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,getOrdering(),METHOD_INVOCATION, line no: 122, 0.3181818181818182, 0.3181818181818182, 0.0
fn,SIMPLE_NAME, line no: 213,new IntervalChunkingQueryRunner<Result<TopNResultValue>>(runner config.getChunkPeriod()),CLASS_INSTANCE_CREATION, line no: 373, 0.3181818181818182, 0.3181818181818182, 0.0
fn,SIMPLE_NAME, line no: 213,getMinTopNThreshold,SIMPLE_NAME, line no: 379, 0.3181818181818182, 0.3181818181818182, 0.0
fn,SIMPLE_NAME, line no: 213,getClass,SIMPLE_NAME, line no: 405, 0.3181818181818182, 0.3181818181818182, 0.0
manipulate,SIMPLE_NAME, line no: 213,MergeSequence,SIMPLE_NAME, line no: 32, 0.3181818181818182, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,OrderedMergeSequence,SIMPLE_NAME, line no: 37, 0.3181818181818182, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,getOrdering(),METHOD_INVOCATION, line no: 122, 0.3181818181818182, 0.3181818181818182, 0.0
manipulate,SIMPLE_NAME, line no: 213,new IntervalChunkingQueryRunner<Result<TopNResultValue>>(runner config.getChunkPeriod()),CLASS_INSTANCE_CREATION, line no: 373, 0.3181818181818182, 0.3181818181818182, 0.0
manipulate,SIMPLE_NAME, line no: 213,getMinTopNThreshold,SIMPLE_NAME, line no: 379, 0.3181818181818182, 0.3181818181818182, 0.0
manipulate,SIMPLE_NAME, line no: 213,getClass,SIMPLE_NAME, line no: 405, 0.3181818181818182, 0.3181818181818182, 0.0
agg,SIMPLE_NAME, line no: 213,MergeSequence,SIMPLE_NAME, line no: 32, 0.3181818181818182, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,OrderedMergeSequence,SIMPLE_NAME, line no: 37, 0.3181818181818182, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,getOrdering(),METHOD_INVOCATION, line no: 122, 0.3181818181818182, 0.3181818181818182, 0.0
agg,SIMPLE_NAME, line no: 213,new IntervalChunkingQueryRunner<Result<TopNResultValue>>(runner config.getChunkPeriod()),CLASS_INSTANCE_CREATION, line no: 373, 0.3181818181818182, 0.3181818181818182, 0.0
agg,SIMPLE_NAME, line no: 213,getMinTopNThreshold,SIMPLE_NAME, line no: 379, 0.3181818181818182, 0.3181818181818182, 0.0
agg,SIMPLE_NAME, line no: 213,getClass,SIMPLE_NAME, line no: 405, 0.3181818181818182, 0.3181818181818182, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,MergeSequence,SIMPLE_NAME, line no: 32, 0.3181818181818182, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,OrderedMergeSequence,SIMPLE_NAME, line no: 37, 0.3181818181818182, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,getOrdering(),METHOD_INVOCATION, line no: 122, 0.3181818181818182, 0.3181818181818182, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,new IntervalChunkingQueryRunner<Result<TopNResultValue>>(runner config.getChunkPeriod()),CLASS_INSTANCE_CREATION, line no: 373, 0.3181818181818182, 0.3181818181818182, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,getMinTopNThreshold,SIMPLE_NAME, line no: 379, 0.3181818181818182, 0.3181818181818182, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,getClass,SIMPLE_NAME, line no: 405, 0.3181818181818182, 0.3181818181818182, 0.0
input,SIMPLE_NAME, line no: 213,MergeSequence,SIMPLE_NAME, line no: 32, 0.30434782608695654, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,OrderedMergeSequence,SIMPLE_NAME, line no: 37, 0.30434782608695654, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,getOrdering(),METHOD_INVOCATION, line no: 122, 0.30434782608695654, 0.30434782608695654, 0.0
input,SIMPLE_NAME, line no: 213,new IntervalChunkingQueryRunner<Result<TopNResultValue>>(runner config.getChunkPeriod()),CLASS_INSTANCE_CREATION, line no: 373, 0.30434782608695654, 0.30434782608695654, 0.0
input,SIMPLE_NAME, line no: 213,getMinTopNThreshold,SIMPLE_NAME, line no: 379, 0.30434782608695654, 0.30434782608695654, 0.0
input,SIMPLE_NAME, line no: 213,getClass,SIMPLE_NAME, line no: 405, 0.30434782608695654, 0.30434782608695654, 0.0
getMetric,SIMPLE_NAME, line no: 213,MergeSequence,SIMPLE_NAME, line no: 32, 0.30434782608695654, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,OrderedMergeSequence,SIMPLE_NAME, line no: 37, 0.30434782608695654, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,getOrdering(),METHOD_INVOCATION, line no: 122, 0.30434782608695654, 0.30434782608695654, 0.0
getMetric,SIMPLE_NAME, line no: 213,new IntervalChunkingQueryRunner<Result<TopNResultValue>>(runner config.getChunkPeriod()),CLASS_INSTANCE_CREATION, line no: 373, 0.30434782608695654, 0.30434782608695654, 0.0
getMetric,SIMPLE_NAME, line no: 213,getMinTopNThreshold,SIMPLE_NAME, line no: 379, 0.30434782608695654, 0.30434782608695654, 0.0
getMetric,SIMPLE_NAME, line no: 213,getClass,SIMPLE_NAME, line no: 405, 0.30434782608695654, 0.30434782608695654, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,MergeSequence,SIMPLE_NAME, line no: 32, 0.30434782608695654, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,OrderedMergeSequence,SIMPLE_NAME, line no: 37, 0.30434782608695654, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,getOrdering(),METHOD_INVOCATION, line no: 122, 0.30434782608695654, 0.30434782608695654, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,new IntervalChunkingQueryRunner<Result<TopNResultValue>>(runner config.getChunkPeriod()),CLASS_INSTANCE_CREATION, line no: 373, 0.30434782608695654, 0.30434782608695654, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,getMinTopNThreshold,SIMPLE_NAME, line no: 379, 0.30434782608695654, 0.30434782608695654, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,getClass,SIMPLE_NAME, line no: 405, 0.30434782608695654, 0.30434782608695654, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,ISE,SIMPLE_NAME, line no: 31, 0.3, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,this,THIS_EXPRESSION, line no: 82, 0.3, 0.2, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,new OrderedMergeSequence<Result<TopNResultValue>>(getOrdering() seqOfSequences),CLASS_INSTANCE_CREATION, line no: 122, 0.3, 0.3, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,new MergeSequence<Result<TopNResultValue>>(getOrdering() seqOfSequences),CLASS_INSTANCE_CREATION, line no: 365, 0.3, 0.3, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,ThresholdAdjustingQueryRunner,SIMPLE_NAME, line no: 379, 0.3, 0.3, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,config.getMinTopNThreshold(),METHOD_INVOCATION, line no: 379, 0.3, 0.3, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,this.runner=runner,ASSIGNMENT, line no: 397, 0.3, 0.3, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,this.runner,FIELD_ACCESS, line no: 397, 0.3, 0.3, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,this.minTopNThreshold=minTopNThreshold,ASSIGNMENT, line no: 398, 0.3, 0.3, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,this.minTopNThreshold,FIELD_ACCESS, line no: 398, 0.3, 0.3, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,input.getClass(),METHOD_INVOCATION, line no: 405, 0.3, 0.3, 0.0
agg,SIMPLE_NAME, line no: 213,MergeSequence,SIMPLE_NAME, line no: 32, 0.2916666666666667, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,OrderedMergeSequence,SIMPLE_NAME, line no: 37, 0.2916666666666667, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,getOrdering(),METHOD_INVOCATION, line no: 122, 0.2916666666666667, 0.2916666666666667, 0.0
agg,SIMPLE_NAME, line no: 213,new IntervalChunkingQueryRunner<Result<TopNResultValue>>(runner config.getChunkPeriod()),CLASS_INSTANCE_CREATION, line no: 373, 0.2916666666666667, 0.2916666666666667, 0.0
agg,SIMPLE_NAME, line no: 213,getMinTopNThreshold,SIMPLE_NAME, line no: 379, 0.2916666666666667, 0.2916666666666667, 0.0
agg,SIMPLE_NAME, line no: 213,getClass,SIMPLE_NAME, line no: 405, 0.2916666666666667, 0.2916666666666667, 0.0
getName,SIMPLE_NAME, line no: 213,MergeSequence,SIMPLE_NAME, line no: 32, 0.2916666666666667, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,OrderedMergeSequence,SIMPLE_NAME, line no: 37, 0.2916666666666667, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,getOrdering(),METHOD_INVOCATION, line no: 122, 0.2916666666666667, 0.2916666666666667, 0.0
getName,SIMPLE_NAME, line no: 213,new IntervalChunkingQueryRunner<Result<TopNResultValue>>(runner config.getChunkPeriod()),CLASS_INSTANCE_CREATION, line no: 373, 0.2916666666666667, 0.2916666666666667, 0.0
getName,SIMPLE_NAME, line no: 213,getMinTopNThreshold,SIMPLE_NAME, line no: 379, 0.2916666666666667, 0.2916666666666667, 0.0
getName,SIMPLE_NAME, line no: 213,getClass,SIMPLE_NAME, line no: 405, 0.2916666666666667, 0.2916666666666667, 0.0
values,SIMPLE_NAME, line no: 213,ISE,SIMPLE_NAME, line no: 31, 0.2857142857142857, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,this,THIS_EXPRESSION, line no: 82, 0.2857142857142857, 0.19047619047619047, 0.0
values,SIMPLE_NAME, line no: 213,new OrderedMergeSequence<Result<TopNResultValue>>(getOrdering() seqOfSequences),CLASS_INSTANCE_CREATION, line no: 122, 0.2857142857142857, 0.2857142857142857, 0.0
values,SIMPLE_NAME, line no: 213,new MergeSequence<Result<TopNResultValue>>(getOrdering() seqOfSequences),CLASS_INSTANCE_CREATION, line no: 365, 0.2857142857142857, 0.2857142857142857, 0.0
values,SIMPLE_NAME, line no: 213,ThresholdAdjustingQueryRunner,SIMPLE_NAME, line no: 379, 0.2857142857142857, 0.2857142857142857, 0.0
values,SIMPLE_NAME, line no: 213,config.getMinTopNThreshold(),METHOD_INVOCATION, line no: 379, 0.2857142857142857, 0.2857142857142857, 0.0
values,SIMPLE_NAME, line no: 213,this.runner=runner,ASSIGNMENT, line no: 397, 0.2857142857142857, 0.2857142857142857, 0.0
values,SIMPLE_NAME, line no: 213,this.runner,FIELD_ACCESS, line no: 397, 0.2857142857142857, 0.2857142857142857, 0.0
values,SIMPLE_NAME, line no: 213,this.minTopNThreshold=minTopNThreshold,ASSIGNMENT, line no: 398, 0.2857142857142857, 0.2857142857142857, 0.0
values,SIMPLE_NAME, line no: 213,this.minTopNThreshold,FIELD_ACCESS, line no: 398, 0.2857142857142857, 0.2857142857142857, 0.0
values,SIMPLE_NAME, line no: 213,input.getClass(),METHOD_INVOCATION, line no: 405, 0.2857142857142857, 0.2857142857142857, 0.0
put,SIMPLE_NAME, line no: 213,ISE,SIMPLE_NAME, line no: 31, 0.2857142857142857, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,this,THIS_EXPRESSION, line no: 82, 0.2857142857142857, 0.19047619047619047, 0.0
put,SIMPLE_NAME, line no: 213,new OrderedMergeSequence<Result<TopNResultValue>>(getOrdering() seqOfSequences),CLASS_INSTANCE_CREATION, line no: 122, 0.2857142857142857, 0.2857142857142857, 0.0
put,SIMPLE_NAME, line no: 213,new MergeSequence<Result<TopNResultValue>>(getOrdering() seqOfSequences),CLASS_INSTANCE_CREATION, line no: 365, 0.2857142857142857, 0.2857142857142857, 0.0
put,SIMPLE_NAME, line no: 213,ThresholdAdjustingQueryRunner,SIMPLE_NAME, line no: 379, 0.2857142857142857, 0.2857142857142857, 0.0
put,SIMPLE_NAME, line no: 213,config.getMinTopNThreshold(),METHOD_INVOCATION, line no: 379, 0.2857142857142857, 0.2857142857142857, 0.0
put,SIMPLE_NAME, line no: 213,this.runner=runner,ASSIGNMENT, line no: 397, 0.2857142857142857, 0.2857142857142857, 0.0
put,SIMPLE_NAME, line no: 213,this.runner,FIELD_ACCESS, line no: 397, 0.2857142857142857, 0.2857142857142857, 0.0
put,SIMPLE_NAME, line no: 213,this.minTopNThreshold=minTopNThreshold,ASSIGNMENT, line no: 398, 0.2857142857142857, 0.2857142857142857, 0.0
put,SIMPLE_NAME, line no: 213,this.minTopNThreshold,FIELD_ACCESS, line no: 398, 0.2857142857142857, 0.2857142857142857, 0.0
put,SIMPLE_NAME, line no: 213,input.getClass(),METHOD_INVOCATION, line no: 405, 0.2857142857142857, 0.2857142857142857, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,ISE,SIMPLE_NAME, line no: 31, 0.2857142857142857, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,this,THIS_EXPRESSION, line no: 82, 0.2857142857142857, 0.19047619047619047, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,new OrderedMergeSequence<Result<TopNResultValue>>(getOrdering() seqOfSequences),CLASS_INSTANCE_CREATION, line no: 122, 0.2857142857142857, 0.2857142857142857, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,new MergeSequence<Result<TopNResultValue>>(getOrdering() seqOfSequences),CLASS_INSTANCE_CREATION, line no: 365, 0.2857142857142857, 0.2857142857142857, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,ThresholdAdjustingQueryRunner,SIMPLE_NAME, line no: 379, 0.2857142857142857, 0.2857142857142857, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,config.getMinTopNThreshold(),METHOD_INVOCATION, line no: 379, 0.2857142857142857, 0.2857142857142857, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,this.runner=runner,ASSIGNMENT, line no: 397, 0.2857142857142857, 0.2857142857142857, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,this.runner,FIELD_ACCESS, line no: 397, 0.2857142857142857, 0.2857142857142857, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,this.minTopNThreshold=minTopNThreshold,ASSIGNMENT, line no: 398, 0.2857142857142857, 0.2857142857142857, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,this.minTopNThreshold,FIELD_ACCESS, line no: 398, 0.2857142857142857, 0.2857142857142857, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,input.getClass(),METHOD_INVOCATION, line no: 405, 0.2857142857142857, 0.2857142857142857, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,ISE,SIMPLE_NAME, line no: 31, 0.2857142857142857, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,this,THIS_EXPRESSION, line no: 82, 0.2857142857142857, 0.19047619047619047, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,new OrderedMergeSequence<Result<TopNResultValue>>(getOrdering() seqOfSequences),CLASS_INSTANCE_CREATION, line no: 122, 0.2857142857142857, 0.2857142857142857, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,new MergeSequence<Result<TopNResultValue>>(getOrdering() seqOfSequences),CLASS_INSTANCE_CREATION, line no: 365, 0.2857142857142857, 0.2857142857142857, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,ThresholdAdjustingQueryRunner,SIMPLE_NAME, line no: 379, 0.2857142857142857, 0.2857142857142857, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,config.getMinTopNThreshold(),METHOD_INVOCATION, line no: 379, 0.2857142857142857, 0.2857142857142857, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,this.runner=runner,ASSIGNMENT, line no: 397, 0.2857142857142857, 0.2857142857142857, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,this.runner,FIELD_ACCESS, line no: 397, 0.2857142857142857, 0.2857142857142857, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,this.minTopNThreshold=minTopNThreshold,ASSIGNMENT, line no: 398, 0.2857142857142857, 0.2857142857142857, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,this.minTopNThreshold,FIELD_ACCESS, line no: 398, 0.2857142857142857, 0.2857142857142857, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,input.getClass(),METHOD_INVOCATION, line no: 405, 0.2857142857142857, 0.2857142857142857, 0.0
agg,SIMPLE_NAME, line no: 213,ISE,SIMPLE_NAME, line no: 31, 0.2727272727272727, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,this,THIS_EXPRESSION, line no: 82, 0.2727272727272727, 0.18181818181818182, 0.0
agg,SIMPLE_NAME, line no: 213,new OrderedMergeSequence<Result<TopNResultValue>>(getOrdering() seqOfSequences),CLASS_INSTANCE_CREATION, line no: 122, 0.2727272727272727, 0.2727272727272727, 0.0
agg,SIMPLE_NAME, line no: 213,new MergeSequence<Result<TopNResultValue>>(getOrdering() seqOfSequences),CLASS_INSTANCE_CREATION, line no: 365, 0.2727272727272727, 0.2727272727272727, 0.0
agg,SIMPLE_NAME, line no: 213,ThresholdAdjustingQueryRunner,SIMPLE_NAME, line no: 379, 0.2727272727272727, 0.2727272727272727, 0.0
agg,SIMPLE_NAME, line no: 213,config.getMinTopNThreshold(),METHOD_INVOCATION, line no: 379, 0.2727272727272727, 0.2727272727272727, 0.0
agg,SIMPLE_NAME, line no: 213,this.runner=runner,ASSIGNMENT, line no: 397, 0.2727272727272727, 0.2727272727272727, 0.0
agg,SIMPLE_NAME, line no: 213,this.runner,FIELD_ACCESS, line no: 397, 0.2727272727272727, 0.2727272727272727, 0.0
agg,SIMPLE_NAME, line no: 213,this.minTopNThreshold=minTopNThreshold,ASSIGNMENT, line no: 398, 0.2727272727272727, 0.2727272727272727, 0.0
agg,SIMPLE_NAME, line no: 213,this.minTopNThreshold,FIELD_ACCESS, line no: 398, 0.2727272727272727, 0.2727272727272727, 0.0
agg,SIMPLE_NAME, line no: 213,input.getClass(),METHOD_INVOCATION, line no: 405, 0.2727272727272727, 0.2727272727272727, 0.0
getName,SIMPLE_NAME, line no: 213,ISE,SIMPLE_NAME, line no: 31, 0.2727272727272727, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,this,THIS_EXPRESSION, line no: 82, 0.2727272727272727, 0.18181818181818182, 0.0
getName,SIMPLE_NAME, line no: 213,new OrderedMergeSequence<Result<TopNResultValue>>(getOrdering() seqOfSequences),CLASS_INSTANCE_CREATION, line no: 122, 0.2727272727272727, 0.2727272727272727, 0.0
getName,SIMPLE_NAME, line no: 213,new MergeSequence<Result<TopNResultValue>>(getOrdering() seqOfSequences),CLASS_INSTANCE_CREATION, line no: 365, 0.2727272727272727, 0.2727272727272727, 0.0
getName,SIMPLE_NAME, line no: 213,ThresholdAdjustingQueryRunner,SIMPLE_NAME, line no: 379, 0.2727272727272727, 0.2727272727272727, 0.0
getName,SIMPLE_NAME, line no: 213,config.getMinTopNThreshold(),METHOD_INVOCATION, line no: 379, 0.2727272727272727, 0.2727272727272727, 0.0
getName,SIMPLE_NAME, line no: 213,this.runner=runner,ASSIGNMENT, line no: 397, 0.2727272727272727, 0.2727272727272727, 0.0
getName,SIMPLE_NAME, line no: 213,this.runner,FIELD_ACCESS, line no: 397, 0.2727272727272727, 0.2727272727272727, 0.0
getName,SIMPLE_NAME, line no: 213,this.minTopNThreshold=minTopNThreshold,ASSIGNMENT, line no: 398, 0.2727272727272727, 0.2727272727272727, 0.0
getName,SIMPLE_NAME, line no: 213,this.minTopNThreshold,FIELD_ACCESS, line no: 398, 0.2727272727272727, 0.2727272727272727, 0.0
getName,SIMPLE_NAME, line no: 213,input.getClass(),METHOD_INVOCATION, line no: 405, 0.2727272727272727, 0.2727272727272727, 0.0
fn,SIMPLE_NAME, line no: 213,ISE,SIMPLE_NAME, line no: 31, 0.2727272727272727, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,this,THIS_EXPRESSION, line no: 82, 0.2727272727272727, 0.18181818181818182, 0.0
fn,SIMPLE_NAME, line no: 213,new OrderedMergeSequence<Result<TopNResultValue>>(getOrdering() seqOfSequences),CLASS_INSTANCE_CREATION, line no: 122, 0.2727272727272727, 0.2727272727272727, 0.0
fn,SIMPLE_NAME, line no: 213,new MergeSequence<Result<TopNResultValue>>(getOrdering() seqOfSequences),CLASS_INSTANCE_CREATION, line no: 365, 0.2727272727272727, 0.2727272727272727, 0.0
fn,SIMPLE_NAME, line no: 213,ThresholdAdjustingQueryRunner,SIMPLE_NAME, line no: 379, 0.2727272727272727, 0.2727272727272727, 0.0
fn,SIMPLE_NAME, line no: 213,config.getMinTopNThreshold(),METHOD_INVOCATION, line no: 379, 0.2727272727272727, 0.2727272727272727, 0.0
fn,SIMPLE_NAME, line no: 213,this.runner=runner,ASSIGNMENT, line no: 397, 0.2727272727272727, 0.2727272727272727, 0.0
fn,SIMPLE_NAME, line no: 213,this.runner,FIELD_ACCESS, line no: 397, 0.2727272727272727, 0.2727272727272727, 0.0
fn,SIMPLE_NAME, line no: 213,this.minTopNThreshold=minTopNThreshold,ASSIGNMENT, line no: 398, 0.2727272727272727, 0.2727272727272727, 0.0
fn,SIMPLE_NAME, line no: 213,this.minTopNThreshold,FIELD_ACCESS, line no: 398, 0.2727272727272727, 0.2727272727272727, 0.0
fn,SIMPLE_NAME, line no: 213,input.getClass(),METHOD_INVOCATION, line no: 405, 0.2727272727272727, 0.2727272727272727, 0.0
manipulate,SIMPLE_NAME, line no: 213,ISE,SIMPLE_NAME, line no: 31, 0.2727272727272727, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,this,THIS_EXPRESSION, line no: 82, 0.2727272727272727, 0.18181818181818182, 0.0
manipulate,SIMPLE_NAME, line no: 213,new OrderedMergeSequence<Result<TopNResultValue>>(getOrdering() seqOfSequences),CLASS_INSTANCE_CREATION, line no: 122, 0.2727272727272727, 0.2727272727272727, 0.0
manipulate,SIMPLE_NAME, line no: 213,new MergeSequence<Result<TopNResultValue>>(getOrdering() seqOfSequences),CLASS_INSTANCE_CREATION, line no: 365, 0.2727272727272727, 0.2727272727272727, 0.0
manipulate,SIMPLE_NAME, line no: 213,ThresholdAdjustingQueryRunner,SIMPLE_NAME, line no: 379, 0.2727272727272727, 0.2727272727272727, 0.0
manipulate,SIMPLE_NAME, line no: 213,config.getMinTopNThreshold(),METHOD_INVOCATION, line no: 379, 0.2727272727272727, 0.2727272727272727, 0.0
manipulate,SIMPLE_NAME, line no: 213,this.runner=runner,ASSIGNMENT, line no: 397, 0.2727272727272727, 0.2727272727272727, 0.0
manipulate,SIMPLE_NAME, line no: 213,this.runner,FIELD_ACCESS, line no: 397, 0.2727272727272727, 0.2727272727272727, 0.0
manipulate,SIMPLE_NAME, line no: 213,this.minTopNThreshold=minTopNThreshold,ASSIGNMENT, line no: 398, 0.2727272727272727, 0.2727272727272727, 0.0
manipulate,SIMPLE_NAME, line no: 213,this.minTopNThreshold,FIELD_ACCESS, line no: 398, 0.2727272727272727, 0.2727272727272727, 0.0
manipulate,SIMPLE_NAME, line no: 213,input.getClass(),METHOD_INVOCATION, line no: 405, 0.2727272727272727, 0.2727272727272727, 0.0
agg,SIMPLE_NAME, line no: 213,ISE,SIMPLE_NAME, line no: 31, 0.2727272727272727, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,this,THIS_EXPRESSION, line no: 82, 0.2727272727272727, 0.18181818181818182, 0.0
agg,SIMPLE_NAME, line no: 213,new OrderedMergeSequence<Result<TopNResultValue>>(getOrdering() seqOfSequences),CLASS_INSTANCE_CREATION, line no: 122, 0.2727272727272727, 0.2727272727272727, 0.0
agg,SIMPLE_NAME, line no: 213,new MergeSequence<Result<TopNResultValue>>(getOrdering() seqOfSequences),CLASS_INSTANCE_CREATION, line no: 365, 0.2727272727272727, 0.2727272727272727, 0.0
agg,SIMPLE_NAME, line no: 213,ThresholdAdjustingQueryRunner,SIMPLE_NAME, line no: 379, 0.2727272727272727, 0.2727272727272727, 0.0
agg,SIMPLE_NAME, line no: 213,config.getMinTopNThreshold(),METHOD_INVOCATION, line no: 379, 0.2727272727272727, 0.2727272727272727, 0.0
agg,SIMPLE_NAME, line no: 213,this.runner=runner,ASSIGNMENT, line no: 397, 0.2727272727272727, 0.2727272727272727, 0.0
agg,SIMPLE_NAME, line no: 213,this.runner,FIELD_ACCESS, line no: 397, 0.2727272727272727, 0.2727272727272727, 0.0
agg,SIMPLE_NAME, line no: 213,this.minTopNThreshold=minTopNThreshold,ASSIGNMENT, line no: 398, 0.2727272727272727, 0.2727272727272727, 0.0
agg,SIMPLE_NAME, line no: 213,this.minTopNThreshold,FIELD_ACCESS, line no: 398, 0.2727272727272727, 0.2727272727272727, 0.0
agg,SIMPLE_NAME, line no: 213,input.getClass(),METHOD_INVOCATION, line no: 405, 0.2727272727272727, 0.2727272727272727, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,ISE,SIMPLE_NAME, line no: 31, 0.2727272727272727, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,this,THIS_EXPRESSION, line no: 82, 0.2727272727272727, 0.18181818181818182, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,new OrderedMergeSequence<Result<TopNResultValue>>(getOrdering() seqOfSequences),CLASS_INSTANCE_CREATION, line no: 122, 0.2727272727272727, 0.2727272727272727, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,new MergeSequence<Result<TopNResultValue>>(getOrdering() seqOfSequences),CLASS_INSTANCE_CREATION, line no: 365, 0.2727272727272727, 0.2727272727272727, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,ThresholdAdjustingQueryRunner,SIMPLE_NAME, line no: 379, 0.2727272727272727, 0.2727272727272727, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,config.getMinTopNThreshold(),METHOD_INVOCATION, line no: 379, 0.2727272727272727, 0.2727272727272727, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,this.runner=runner,ASSIGNMENT, line no: 397, 0.2727272727272727, 0.2727272727272727, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,this.runner,FIELD_ACCESS, line no: 397, 0.2727272727272727, 0.2727272727272727, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,this.minTopNThreshold=minTopNThreshold,ASSIGNMENT, line no: 398, 0.2727272727272727, 0.2727272727272727, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,this.minTopNThreshold,FIELD_ACCESS, line no: 398, 0.2727272727272727, 0.2727272727272727, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,input.getClass(),METHOD_INVOCATION, line no: 405, 0.2727272727272727, 0.2727272727272727, 0.0
input,SIMPLE_NAME, line no: 213,ISE,SIMPLE_NAME, line no: 31, 0.2608695652173913, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,this,THIS_EXPRESSION, line no: 82, 0.2608695652173913, 0.17391304347826086, 0.0
input,SIMPLE_NAME, line no: 213,new OrderedMergeSequence<Result<TopNResultValue>>(getOrdering() seqOfSequences),CLASS_INSTANCE_CREATION, line no: 122, 0.2608695652173913, 0.2608695652173913, 0.0
input,SIMPLE_NAME, line no: 213,new MergeSequence<Result<TopNResultValue>>(getOrdering() seqOfSequences),CLASS_INSTANCE_CREATION, line no: 365, 0.2608695652173913, 0.2608695652173913, 0.0
input,SIMPLE_NAME, line no: 213,ThresholdAdjustingQueryRunner,SIMPLE_NAME, line no: 379, 0.2608695652173913, 0.2608695652173913, 0.0
input,SIMPLE_NAME, line no: 213,config.getMinTopNThreshold(),METHOD_INVOCATION, line no: 379, 0.2608695652173913, 0.2608695652173913, 0.0
input,SIMPLE_NAME, line no: 213,this.runner=runner,ASSIGNMENT, line no: 397, 0.2608695652173913, 0.2608695652173913, 0.0
input,SIMPLE_NAME, line no: 213,this.runner,FIELD_ACCESS, line no: 397, 0.2608695652173913, 0.2608695652173913, 0.0
input,SIMPLE_NAME, line no: 213,this.minTopNThreshold=minTopNThreshold,ASSIGNMENT, line no: 398, 0.2608695652173913, 0.2608695652173913, 0.0
input,SIMPLE_NAME, line no: 213,this.minTopNThreshold,FIELD_ACCESS, line no: 398, 0.2608695652173913, 0.2608695652173913, 0.0
input,SIMPLE_NAME, line no: 213,input.getClass(),METHOD_INVOCATION, line no: 405, 0.2608695652173913, 0.2608695652173913, 0.0
getMetric,SIMPLE_NAME, line no: 213,ISE,SIMPLE_NAME, line no: 31, 0.2608695652173913, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,this,THIS_EXPRESSION, line no: 82, 0.2608695652173913, 0.17391304347826086, 0.0
getMetric,SIMPLE_NAME, line no: 213,new OrderedMergeSequence<Result<TopNResultValue>>(getOrdering() seqOfSequences),CLASS_INSTANCE_CREATION, line no: 122, 0.2608695652173913, 0.2608695652173913, 0.0
getMetric,SIMPLE_NAME, line no: 213,new MergeSequence<Result<TopNResultValue>>(getOrdering() seqOfSequences),CLASS_INSTANCE_CREATION, line no: 365, 0.2608695652173913, 0.2608695652173913, 0.0
getMetric,SIMPLE_NAME, line no: 213,ThresholdAdjustingQueryRunner,SIMPLE_NAME, line no: 379, 0.2608695652173913, 0.2608695652173913, 0.0
getMetric,SIMPLE_NAME, line no: 213,config.getMinTopNThreshold(),METHOD_INVOCATION, line no: 379, 0.2608695652173913, 0.2608695652173913, 0.0
getMetric,SIMPLE_NAME, line no: 213,this.runner=runner,ASSIGNMENT, line no: 397, 0.2608695652173913, 0.2608695652173913, 0.0
getMetric,SIMPLE_NAME, line no: 213,this.runner,FIELD_ACCESS, line no: 397, 0.2608695652173913, 0.2608695652173913, 0.0
getMetric,SIMPLE_NAME, line no: 213,this.minTopNThreshold=minTopNThreshold,ASSIGNMENT, line no: 398, 0.2608695652173913, 0.2608695652173913, 0.0
getMetric,SIMPLE_NAME, line no: 213,this.minTopNThreshold,FIELD_ACCESS, line no: 398, 0.2608695652173913, 0.2608695652173913, 0.0
getMetric,SIMPLE_NAME, line no: 213,input.getClass(),METHOD_INVOCATION, line no: 405, 0.2608695652173913, 0.2608695652173913, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,ISE,SIMPLE_NAME, line no: 31, 0.2608695652173913, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,this,THIS_EXPRESSION, line no: 82, 0.2608695652173913, 0.17391304347826086, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,new OrderedMergeSequence<Result<TopNResultValue>>(getOrdering() seqOfSequences),CLASS_INSTANCE_CREATION, line no: 122, 0.2608695652173913, 0.2608695652173913, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,new MergeSequence<Result<TopNResultValue>>(getOrdering() seqOfSequences),CLASS_INSTANCE_CREATION, line no: 365, 0.2608695652173913, 0.2608695652173913, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,ThresholdAdjustingQueryRunner,SIMPLE_NAME, line no: 379, 0.2608695652173913, 0.2608695652173913, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,config.getMinTopNThreshold(),METHOD_INVOCATION, line no: 379, 0.2608695652173913, 0.2608695652173913, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,this.runner=runner,ASSIGNMENT, line no: 397, 0.2608695652173913, 0.2608695652173913, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,this.runner,FIELD_ACCESS, line no: 397, 0.2608695652173913, 0.2608695652173913, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,this.minTopNThreshold=minTopNThreshold,ASSIGNMENT, line no: 398, 0.2608695652173913, 0.2608695652173913, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,this.minTopNThreshold,FIELD_ACCESS, line no: 398, 0.2608695652173913, 0.2608695652173913, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,input.getClass(),METHOD_INVOCATION, line no: 405, 0.2608695652173913, 0.2608695652173913, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,new ThresholdAdjustingQueryRunner(runner config.getMinTopNThreshold()),CLASS_INSTANCE_CREATION, line no: 379, 0.25, 0.25, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,natural,SIMPLE_NAME, line no: 384, 0.25, 0.25, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,new ISE("Can only handle [%s]  got [%s]" TopNQuery.class input.getClass()),CLASS_INSTANCE_CREATION, line no: 405, 0.25, 0.25, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,"Can only handle [%s]  got [%s]",STRING_LITERAL, line no: 405, 0.25, 0.25, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,TopNQuery.class,TYPE_LITERAL, line no: 405, 0.25, 0.25, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,runner.run(query),METHOD_INVOCATION, line no: 410, 0.25, 0.25, 0.0
agg,SIMPLE_NAME, line no: 213,ISE,SIMPLE_NAME, line no: 31, 0.25, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,this,THIS_EXPRESSION, line no: 82, 0.25, 0.16666666666666666, 0.0
agg,SIMPLE_NAME, line no: 213,new OrderedMergeSequence<Result<TopNResultValue>>(getOrdering() seqOfSequences),CLASS_INSTANCE_CREATION, line no: 122, 0.25, 0.25, 0.0
agg,SIMPLE_NAME, line no: 213,new MergeSequence<Result<TopNResultValue>>(getOrdering() seqOfSequences),CLASS_INSTANCE_CREATION, line no: 365, 0.25, 0.25, 0.0
agg,SIMPLE_NAME, line no: 213,ThresholdAdjustingQueryRunner,SIMPLE_NAME, line no: 379, 0.25, 0.25, 0.0
agg,SIMPLE_NAME, line no: 213,config.getMinTopNThreshold(),METHOD_INVOCATION, line no: 379, 0.25, 0.25, 0.0
agg,SIMPLE_NAME, line no: 213,this.runner=runner,ASSIGNMENT, line no: 397, 0.25, 0.25, 0.0
agg,SIMPLE_NAME, line no: 213,this.runner,FIELD_ACCESS, line no: 397, 0.25, 0.25, 0.0
agg,SIMPLE_NAME, line no: 213,this.minTopNThreshold=minTopNThreshold,ASSIGNMENT, line no: 398, 0.25, 0.25, 0.0
agg,SIMPLE_NAME, line no: 213,this.minTopNThreshold,FIELD_ACCESS, line no: 398, 0.25, 0.25, 0.0
agg,SIMPLE_NAME, line no: 213,input.getClass(),METHOD_INVOCATION, line no: 405, 0.25, 0.25, 0.0
getName,SIMPLE_NAME, line no: 213,ISE,SIMPLE_NAME, line no: 31, 0.25, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,this,THIS_EXPRESSION, line no: 82, 0.25, 0.16666666666666666, 0.0
getName,SIMPLE_NAME, line no: 213,new OrderedMergeSequence<Result<TopNResultValue>>(getOrdering() seqOfSequences),CLASS_INSTANCE_CREATION, line no: 122, 0.25, 0.25, 0.0
getName,SIMPLE_NAME, line no: 213,new MergeSequence<Result<TopNResultValue>>(getOrdering() seqOfSequences),CLASS_INSTANCE_CREATION, line no: 365, 0.25, 0.25, 0.0
getName,SIMPLE_NAME, line no: 213,ThresholdAdjustingQueryRunner,SIMPLE_NAME, line no: 379, 0.25, 0.25, 0.0
getName,SIMPLE_NAME, line no: 213,config.getMinTopNThreshold(),METHOD_INVOCATION, line no: 379, 0.25, 0.25, 0.0
getName,SIMPLE_NAME, line no: 213,this.runner=runner,ASSIGNMENT, line no: 397, 0.25, 0.25, 0.0
getName,SIMPLE_NAME, line no: 213,this.runner,FIELD_ACCESS, line no: 397, 0.25, 0.25, 0.0
getName,SIMPLE_NAME, line no: 213,this.minTopNThreshold=minTopNThreshold,ASSIGNMENT, line no: 398, 0.25, 0.25, 0.0
getName,SIMPLE_NAME, line no: 213,this.minTopNThreshold,FIELD_ACCESS, line no: 398, 0.25, 0.25, 0.0
getName,SIMPLE_NAME, line no: 213,input.getClass(),METHOD_INVOCATION, line no: 405, 0.25, 0.25, 0.0
values,SIMPLE_NAME, line no: 213,new ThresholdAdjustingQueryRunner(runner config.getMinTopNThreshold()),CLASS_INSTANCE_CREATION, line no: 379, 0.23809523809523808, 0.23809523809523808, 0.0
values,SIMPLE_NAME, line no: 213,natural,SIMPLE_NAME, line no: 384, 0.23809523809523808, 0.23809523809523808, 0.0
values,SIMPLE_NAME, line no: 213,new ISE("Can only handle [%s]  got [%s]" TopNQuery.class input.getClass()),CLASS_INSTANCE_CREATION, line no: 405, 0.23809523809523808, 0.23809523809523808, 0.0
values,SIMPLE_NAME, line no: 213,"Can only handle [%s]  got [%s]",STRING_LITERAL, line no: 405, 0.23809523809523808, 0.23809523809523808, 0.0
values,SIMPLE_NAME, line no: 213,TopNQuery.class,TYPE_LITERAL, line no: 405, 0.23809523809523808, 0.23809523809523808, 0.0
values,SIMPLE_NAME, line no: 213,runner.run(query),METHOD_INVOCATION, line no: 410, 0.23809523809523808, 0.23809523809523808, 0.0
put,SIMPLE_NAME, line no: 213,new ThresholdAdjustingQueryRunner(runner config.getMinTopNThreshold()),CLASS_INSTANCE_CREATION, line no: 379, 0.23809523809523808, 0.23809523809523808, 0.0
put,SIMPLE_NAME, line no: 213,natural,SIMPLE_NAME, line no: 384, 0.23809523809523808, 0.23809523809523808, 0.0
put,SIMPLE_NAME, line no: 213,new ISE("Can only handle [%s]  got [%s]" TopNQuery.class input.getClass()),CLASS_INSTANCE_CREATION, line no: 405, 0.23809523809523808, 0.23809523809523808, 0.0
put,SIMPLE_NAME, line no: 213,"Can only handle [%s]  got [%s]",STRING_LITERAL, line no: 405, 0.23809523809523808, 0.23809523809523808, 0.0
put,SIMPLE_NAME, line no: 213,TopNQuery.class,TYPE_LITERAL, line no: 405, 0.23809523809523808, 0.23809523809523808, 0.0
put,SIMPLE_NAME, line no: 213,runner.run(query),METHOD_INVOCATION, line no: 410, 0.23809523809523808, 0.23809523809523808, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,new ThresholdAdjustingQueryRunner(runner config.getMinTopNThreshold()),CLASS_INSTANCE_CREATION, line no: 379, 0.23809523809523808, 0.23809523809523808, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,natural,SIMPLE_NAME, line no: 384, 0.23809523809523808, 0.23809523809523808, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,new ISE("Can only handle [%s]  got [%s]" TopNQuery.class input.getClass()),CLASS_INSTANCE_CREATION, line no: 405, 0.23809523809523808, 0.23809523809523808, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,"Can only handle [%s]  got [%s]",STRING_LITERAL, line no: 405, 0.23809523809523808, 0.23809523809523808, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,TopNQuery.class,TYPE_LITERAL, line no: 405, 0.23809523809523808, 0.23809523809523808, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,runner.run(query),METHOD_INVOCATION, line no: 410, 0.23809523809523808, 0.23809523809523808, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,new ThresholdAdjustingQueryRunner(runner config.getMinTopNThreshold()),CLASS_INSTANCE_CREATION, line no: 379, 0.23809523809523808, 0.23809523809523808, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,natural,SIMPLE_NAME, line no: 384, 0.23809523809523808, 0.23809523809523808, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,new ISE("Can only handle [%s]  got [%s]" TopNQuery.class input.getClass()),CLASS_INSTANCE_CREATION, line no: 405, 0.23809523809523808, 0.23809523809523808, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,"Can only handle [%s]  got [%s]",STRING_LITERAL, line no: 405, 0.23809523809523808, 0.23809523809523808, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,TopNQuery.class,TYPE_LITERAL, line no: 405, 0.23809523809523808, 0.23809523809523808, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,runner.run(query),METHOD_INVOCATION, line no: 410, 0.23809523809523808, 0.23809523809523808, 0.0
agg,SIMPLE_NAME, line no: 213,new ThresholdAdjustingQueryRunner(runner config.getMinTopNThreshold()),CLASS_INSTANCE_CREATION, line no: 379, 0.22727272727272727, 0.22727272727272727, 0.0
agg,SIMPLE_NAME, line no: 213,natural,SIMPLE_NAME, line no: 384, 0.22727272727272727, 0.22727272727272727, 0.0
agg,SIMPLE_NAME, line no: 213,new ISE("Can only handle [%s]  got [%s]" TopNQuery.class input.getClass()),CLASS_INSTANCE_CREATION, line no: 405, 0.22727272727272727, 0.22727272727272727, 0.0
agg,SIMPLE_NAME, line no: 213,"Can only handle [%s]  got [%s]",STRING_LITERAL, line no: 405, 0.22727272727272727, 0.22727272727272727, 0.0
agg,SIMPLE_NAME, line no: 213,TopNQuery.class,TYPE_LITERAL, line no: 405, 0.22727272727272727, 0.22727272727272727, 0.0
agg,SIMPLE_NAME, line no: 213,runner.run(query),METHOD_INVOCATION, line no: 410, 0.22727272727272727, 0.22727272727272727, 0.0
getName,SIMPLE_NAME, line no: 213,new ThresholdAdjustingQueryRunner(runner config.getMinTopNThreshold()),CLASS_INSTANCE_CREATION, line no: 379, 0.22727272727272727, 0.22727272727272727, 0.0
getName,SIMPLE_NAME, line no: 213,natural,SIMPLE_NAME, line no: 384, 0.22727272727272727, 0.22727272727272727, 0.0
getName,SIMPLE_NAME, line no: 213,new ISE("Can only handle [%s]  got [%s]" TopNQuery.class input.getClass()),CLASS_INSTANCE_CREATION, line no: 405, 0.22727272727272727, 0.22727272727272727, 0.0
getName,SIMPLE_NAME, line no: 213,TopNQuery.class,TYPE_LITERAL, line no: 405, 0.22727272727272727, 0.22727272727272727, 0.0
getName,SIMPLE_NAME, line no: 213,runner.run(query),METHOD_INVOCATION, line no: 410, 0.22727272727272727, 0.22727272727272727, 0.0
fn,SIMPLE_NAME, line no: 213,new ThresholdAdjustingQueryRunner(runner config.getMinTopNThreshold()),CLASS_INSTANCE_CREATION, line no: 379, 0.22727272727272727, 0.22727272727272727, 0.0
fn,SIMPLE_NAME, line no: 213,natural,SIMPLE_NAME, line no: 384, 0.22727272727272727, 0.22727272727272727, 0.0
fn,SIMPLE_NAME, line no: 213,new ISE("Can only handle [%s]  got [%s]" TopNQuery.class input.getClass()),CLASS_INSTANCE_CREATION, line no: 405, 0.22727272727272727, 0.22727272727272727, 0.0
fn,SIMPLE_NAME, line no: 213,"Can only handle [%s]  got [%s]",STRING_LITERAL, line no: 405, 0.22727272727272727, 0.22727272727272727, 0.0
fn,SIMPLE_NAME, line no: 213,TopNQuery.class,TYPE_LITERAL, line no: 405, 0.22727272727272727, 0.22727272727272727, 0.0
fn,SIMPLE_NAME, line no: 213,runner.run(query),METHOD_INVOCATION, line no: 410, 0.22727272727272727, 0.22727272727272727, 0.0
manipulate,SIMPLE_NAME, line no: 213,new ThresholdAdjustingQueryRunner(runner config.getMinTopNThreshold()),CLASS_INSTANCE_CREATION, line no: 379, 0.22727272727272727, 0.22727272727272727, 0.0
manipulate,SIMPLE_NAME, line no: 213,natural,SIMPLE_NAME, line no: 384, 0.22727272727272727, 0.22727272727272727, 0.0
manipulate,SIMPLE_NAME, line no: 213,new ISE("Can only handle [%s]  got [%s]" TopNQuery.class input.getClass()),CLASS_INSTANCE_CREATION, line no: 405, 0.22727272727272727, 0.22727272727272727, 0.0
manipulate,SIMPLE_NAME, line no: 213,"Can only handle [%s]  got [%s]",STRING_LITERAL, line no: 405, 0.22727272727272727, 0.22727272727272727, 0.0
manipulate,SIMPLE_NAME, line no: 213,TopNQuery.class,TYPE_LITERAL, line no: 405, 0.22727272727272727, 0.22727272727272727, 0.0
manipulate,SIMPLE_NAME, line no: 213,runner.run(query),METHOD_INVOCATION, line no: 410, 0.22727272727272727, 0.22727272727272727, 0.0
agg,SIMPLE_NAME, line no: 213,new ThresholdAdjustingQueryRunner(runner config.getMinTopNThreshold()),CLASS_INSTANCE_CREATION, line no: 379, 0.22727272727272727, 0.22727272727272727, 0.0
agg,SIMPLE_NAME, line no: 213,natural,SIMPLE_NAME, line no: 384, 0.22727272727272727, 0.22727272727272727, 0.0
agg,SIMPLE_NAME, line no: 213,new ISE("Can only handle [%s]  got [%s]" TopNQuery.class input.getClass()),CLASS_INSTANCE_CREATION, line no: 405, 0.22727272727272727, 0.22727272727272727, 0.0
agg,SIMPLE_NAME, line no: 213,"Can only handle [%s]  got [%s]",STRING_LITERAL, line no: 405, 0.22727272727272727, 0.22727272727272727, 0.0
agg,SIMPLE_NAME, line no: 213,TopNQuery.class,TYPE_LITERAL, line no: 405, 0.22727272727272727, 0.22727272727272727, 0.0
agg,SIMPLE_NAME, line no: 213,runner.run(query),METHOD_INVOCATION, line no: 410, 0.22727272727272727, 0.22727272727272727, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,new ThresholdAdjustingQueryRunner(runner config.getMinTopNThreshold()),CLASS_INSTANCE_CREATION, line no: 379, 0.22727272727272727, 0.22727272727272727, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,natural,SIMPLE_NAME, line no: 384, 0.22727272727272727, 0.22727272727272727, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,new ISE("Can only handle [%s]  got [%s]" TopNQuery.class input.getClass()),CLASS_INSTANCE_CREATION, line no: 405, 0.22727272727272727, 0.22727272727272727, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,"Can only handle [%s]  got [%s]",STRING_LITERAL, line no: 405, 0.22727272727272727, 0.22727272727272727, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,TopNQuery.class,TYPE_LITERAL, line no: 405, 0.22727272727272727, 0.22727272727272727, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,runner.run(query),METHOD_INVOCATION, line no: 410, 0.22727272727272727, 0.22727272727272727, 0.0
input,SIMPLE_NAME, line no: 213,new ThresholdAdjustingQueryRunner(runner config.getMinTopNThreshold()),CLASS_INSTANCE_CREATION, line no: 379, 0.21739130434782608, 0.21739130434782608, 0.0
input,SIMPLE_NAME, line no: 213,natural,SIMPLE_NAME, line no: 384, 0.21739130434782608, 0.21739130434782608, 0.0
input,SIMPLE_NAME, line no: 213,new ISE("Can only handle [%s]  got [%s]" TopNQuery.class input.getClass()),CLASS_INSTANCE_CREATION, line no: 405, 0.21739130434782608, 0.21739130434782608, 0.0
input,SIMPLE_NAME, line no: 213,"Can only handle [%s]  got [%s]",STRING_LITERAL, line no: 405, 0.21739130434782608, 0.21739130434782608, 0.0
input,SIMPLE_NAME, line no: 213,TopNQuery.class,TYPE_LITERAL, line no: 405, 0.21739130434782608, 0.21739130434782608, 0.0
input,SIMPLE_NAME, line no: 213,runner.run(query),METHOD_INVOCATION, line no: 410, 0.21739130434782608, 0.21739130434782608, 0.0
getMetric,SIMPLE_NAME, line no: 213,new ThresholdAdjustingQueryRunner(runner config.getMinTopNThreshold()),CLASS_INSTANCE_CREATION, line no: 379, 0.21739130434782608, 0.21739130434782608, 0.0
getMetric,SIMPLE_NAME, line no: 213,natural,SIMPLE_NAME, line no: 384, 0.21739130434782608, 0.21739130434782608, 0.0
getMetric,SIMPLE_NAME, line no: 213,new ISE("Can only handle [%s]  got [%s]" TopNQuery.class input.getClass()),CLASS_INSTANCE_CREATION, line no: 405, 0.21739130434782608, 0.21739130434782608, 0.0
getMetric,SIMPLE_NAME, line no: 213,"Can only handle [%s]  got [%s]",STRING_LITERAL, line no: 405, 0.21739130434782608, 0.21739130434782608, 0.0
getMetric,SIMPLE_NAME, line no: 213,TopNQuery.class,TYPE_LITERAL, line no: 405, 0.21739130434782608, 0.21739130434782608, 0.0
getMetric,SIMPLE_NAME, line no: 213,runner.run(query),METHOD_INVOCATION, line no: 410, 0.21739130434782608, 0.21739130434782608, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,new ThresholdAdjustingQueryRunner(runner config.getMinTopNThreshold()),CLASS_INSTANCE_CREATION, line no: 379, 0.21739130434782608, 0.21739130434782608, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,natural,SIMPLE_NAME, line no: 384, 0.21739130434782608, 0.21739130434782608, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,new ISE("Can only handle [%s]  got [%s]" TopNQuery.class input.getClass()),CLASS_INSTANCE_CREATION, line no: 405, 0.21739130434782608, 0.21739130434782608, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,"Can only handle [%s]  got [%s]",STRING_LITERAL, line no: 405, 0.21739130434782608, 0.21739130434782608, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,TopNQuery.class,TYPE_LITERAL, line no: 405, 0.21739130434782608, 0.21739130434782608, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,runner.run(query),METHOD_INVOCATION, line no: 410, 0.21739130434782608, 0.21739130434782608, 0.0
agg,SIMPLE_NAME, line no: 213,new ThresholdAdjustingQueryRunner(runner config.getMinTopNThreshold()),CLASS_INSTANCE_CREATION, line no: 379, 0.20833333333333334, 0.20833333333333334, 0.0
agg,SIMPLE_NAME, line no: 213,natural,SIMPLE_NAME, line no: 384, 0.20833333333333334, 0.20833333333333334, 0.0
agg,SIMPLE_NAME, line no: 213,new ISE("Can only handle [%s]  got [%s]" TopNQuery.class input.getClass()),CLASS_INSTANCE_CREATION, line no: 405, 0.20833333333333334, 0.20833333333333334, 0.0
agg,SIMPLE_NAME, line no: 213,"Can only handle [%s]  got [%s]",STRING_LITERAL, line no: 405, 0.20833333333333334, 0.20833333333333334, 0.0
agg,SIMPLE_NAME, line no: 213,TopNQuery.class,TYPE_LITERAL, line no: 405, 0.20833333333333334, 0.20833333333333334, 0.0
agg,SIMPLE_NAME, line no: 213,runner.run(query),METHOD_INVOCATION, line no: 410, 0.20833333333333334, 0.20833333333333334, 0.0
getName,SIMPLE_NAME, line no: 213,new ThresholdAdjustingQueryRunner(runner config.getMinTopNThreshold()),CLASS_INSTANCE_CREATION, line no: 379, 0.20833333333333334, 0.20833333333333334, 0.0
getName,SIMPLE_NAME, line no: 213,natural,SIMPLE_NAME, line no: 384, 0.20833333333333334, 0.20833333333333334, 0.0
getName,SIMPLE_NAME, line no: 213,new ISE("Can only handle [%s]  got [%s]" TopNQuery.class input.getClass()),CLASS_INSTANCE_CREATION, line no: 405, 0.20833333333333334, 0.20833333333333334, 0.0
getName,SIMPLE_NAME, line no: 213,TopNQuery.class,TYPE_LITERAL, line no: 405, 0.20833333333333334, 0.20833333333333334, 0.0
getName,SIMPLE_NAME, line no: 213,runner.run(query),METHOD_INVOCATION, line no: 410, 0.20833333333333334, 0.20833333333333334, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,this.config=config,ASSIGNMENT, line no: 82, 0.2, 0.2, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,this.config,FIELD_ACCESS, line no: 82, 0.2, 0.2, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,Ordering.natural(),METHOD_INVOCATION, line no: 384, 0.2, 0.2, 0.0
values,SIMPLE_NAME, line no: 213,this.config=config,ASSIGNMENT, line no: 82, 0.19047619047619047, 0.19047619047619047, 0.0
values,SIMPLE_NAME, line no: 213,this.config,FIELD_ACCESS, line no: 82, 0.19047619047619047, 0.19047619047619047, 0.0
values,SIMPLE_NAME, line no: 213,Ordering.natural(),METHOD_INVOCATION, line no: 384, 0.19047619047619047, 0.19047619047619047, 0.0
put,SIMPLE_NAME, line no: 213,this.config=config,ASSIGNMENT, line no: 82, 0.19047619047619047, 0.19047619047619047, 0.0
put,SIMPLE_NAME, line no: 213,this.config,FIELD_ACCESS, line no: 82, 0.19047619047619047, 0.19047619047619047, 0.0
put,SIMPLE_NAME, line no: 213,Ordering.natural(),METHOD_INVOCATION, line no: 384, 0.19047619047619047, 0.19047619047619047, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,this.config=config,ASSIGNMENT, line no: 82, 0.19047619047619047, 0.19047619047619047, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,this.config,FIELD_ACCESS, line no: 82, 0.19047619047619047, 0.19047619047619047, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,Ordering.natural(),METHOD_INVOCATION, line no: 384, 0.19047619047619047, 0.19047619047619047, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,this.config=config,ASSIGNMENT, line no: 82, 0.19047619047619047, 0.19047619047619047, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,this.config,FIELD_ACCESS, line no: 82, 0.19047619047619047, 0.19047619047619047, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,Ordering.natural(),METHOD_INVOCATION, line no: 384, 0.19047619047619047, 0.19047619047619047, 0.0
agg,SIMPLE_NAME, line no: 213,this.config=config,ASSIGNMENT, line no: 82, 0.18181818181818182, 0.18181818181818182, 0.0
agg,SIMPLE_NAME, line no: 213,this.config,FIELD_ACCESS, line no: 82, 0.18181818181818182, 0.18181818181818182, 0.0
agg,SIMPLE_NAME, line no: 213,Ordering.natural(),METHOD_INVOCATION, line no: 384, 0.18181818181818182, 0.18181818181818182, 0.0
getName,SIMPLE_NAME, line no: 213,this.config=config,ASSIGNMENT, line no: 82, 0.18181818181818182, 0.18181818181818182, 0.0
getName,SIMPLE_NAME, line no: 213,this.config,FIELD_ACCESS, line no: 82, 0.18181818181818182, 0.18181818181818182, 0.0
getName,SIMPLE_NAME, line no: 213,Ordering.natural(),METHOD_INVOCATION, line no: 384, 0.18181818181818182, 0.18181818181818182, 0.0
fn,SIMPLE_NAME, line no: 213,this.config=config,ASSIGNMENT, line no: 82, 0.18181818181818182, 0.18181818181818182, 0.0
fn,SIMPLE_NAME, line no: 213,this.config,FIELD_ACCESS, line no: 82, 0.18181818181818182, 0.18181818181818182, 0.0
fn,SIMPLE_NAME, line no: 213,Ordering.natural(),METHOD_INVOCATION, line no: 384, 0.18181818181818182, 0.18181818181818182, 0.0
manipulate,SIMPLE_NAME, line no: 213,this.config=config,ASSIGNMENT, line no: 82, 0.18181818181818182, 0.18181818181818182, 0.0
manipulate,SIMPLE_NAME, line no: 213,this.config,FIELD_ACCESS, line no: 82, 0.18181818181818182, 0.18181818181818182, 0.0
manipulate,SIMPLE_NAME, line no: 213,Ordering.natural(),METHOD_INVOCATION, line no: 384, 0.18181818181818182, 0.18181818181818182, 0.0
agg,SIMPLE_NAME, line no: 213,this.config=config,ASSIGNMENT, line no: 82, 0.18181818181818182, 0.18181818181818182, 0.0
agg,SIMPLE_NAME, line no: 213,this.config,FIELD_ACCESS, line no: 82, 0.18181818181818182, 0.18181818181818182, 0.0
agg,SIMPLE_NAME, line no: 213,Ordering.natural(),METHOD_INVOCATION, line no: 384, 0.18181818181818182, 0.18181818181818182, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,this.config=config,ASSIGNMENT, line no: 82, 0.18181818181818182, 0.18181818181818182, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,this.config,FIELD_ACCESS, line no: 82, 0.18181818181818182, 0.18181818181818182, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,Ordering.natural(),METHOD_INVOCATION, line no: 384, 0.18181818181818182, 0.18181818181818182, 0.0
input,SIMPLE_NAME, line no: 213,this.config=config,ASSIGNMENT, line no: 82, 0.17391304347826086, 0.17391304347826086, 0.0
input,SIMPLE_NAME, line no: 213,this.config,FIELD_ACCESS, line no: 82, 0.17391304347826086, 0.17391304347826086, 0.0
input,SIMPLE_NAME, line no: 213,Ordering.natural(),METHOD_INVOCATION, line no: 384, 0.17391304347826086, 0.17391304347826086, 0.0
getMetric,SIMPLE_NAME, line no: 213,this.config=config,ASSIGNMENT, line no: 82, 0.17391304347826086, 0.17391304347826086, 0.0
getMetric,SIMPLE_NAME, line no: 213,this.config,FIELD_ACCESS, line no: 82, 0.17391304347826086, 0.17391304347826086, 0.0
getMetric,SIMPLE_NAME, line no: 213,Ordering.natural(),METHOD_INVOCATION, line no: 384, 0.17391304347826086, 0.17391304347826086, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,this.config=config,ASSIGNMENT, line no: 82, 0.17391304347826086, 0.17391304347826086, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,this.config,FIELD_ACCESS, line no: 82, 0.17391304347826086, 0.17391304347826086, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,Ordering.natural(),METHOD_INVOCATION, line no: 384, 0.17391304347826086, 0.17391304347826086, 0.0
agg,SIMPLE_NAME, line no: 213,this.config=config,ASSIGNMENT, line no: 82, 0.16666666666666666, 0.16666666666666666, 0.0
agg,SIMPLE_NAME, line no: 213,this.config,FIELD_ACCESS, line no: 82, 0.16666666666666666, 0.16666666666666666, 0.0
agg,SIMPLE_NAME, line no: 213,Ordering.natural(),METHOD_INVOCATION, line no: 384, 0.16666666666666666, 0.16666666666666666, 0.0
getName,SIMPLE_NAME, line no: 213,this.config=config,ASSIGNMENT, line no: 82, 0.16666666666666666, 0.16666666666666666, 0.0
getName,SIMPLE_NAME, line no: 213,this.config,FIELD_ACCESS, line no: 82, 0.16666666666666666, 0.16666666666666666, 0.0
getName,SIMPLE_NAME, line no: 213,Ordering.natural(),METHOD_INVOCATION, line no: 384, 0.16666666666666666, 0.16666666666666666, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,Joiner,SIMPLE_NAME, line no: 24, 0.1, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,on,SIMPLE_NAME, line no: 68, 0.1, 0.1, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,TYPE_REFERENCE,SIMPLE_NAME, line no: 69, 0.1, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,OBJECT_TYPE_REFERENCE,SIMPLE_NAME, line no: 72, 0.1, 0.05, 0.0
values,SIMPLE_NAME, line no: 213,Joiner,SIMPLE_NAME, line no: 24, 0.09523809523809523, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,on,SIMPLE_NAME, line no: 68, 0.09523809523809523, 0.09523809523809523, 0.0
values,SIMPLE_NAME, line no: 213,TYPE_REFERENCE,SIMPLE_NAME, line no: 69, 0.09523809523809523, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,OBJECT_TYPE_REFERENCE,SIMPLE_NAME, line no: 72, 0.09523809523809523, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,Joiner,SIMPLE_NAME, line no: 24, 0.09523809523809523, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,on,SIMPLE_NAME, line no: 68, 0.09523809523809523, 0.09523809523809523, 0.0
put,SIMPLE_NAME, line no: 213,TYPE_REFERENCE,SIMPLE_NAME, line no: 69, 0.09523809523809523, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,OBJECT_TYPE_REFERENCE,SIMPLE_NAME, line no: 72, 0.09523809523809523, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,Joiner,SIMPLE_NAME, line no: 24, 0.09523809523809523, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,on,SIMPLE_NAME, line no: 68, 0.09523809523809523, 0.09523809523809523, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,TYPE_REFERENCE,SIMPLE_NAME, line no: 69, 0.09523809523809523, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,OBJECT_TYPE_REFERENCE,SIMPLE_NAME, line no: 72, 0.09523809523809523, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,Joiner,SIMPLE_NAME, line no: 24, 0.09523809523809523, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,on,SIMPLE_NAME, line no: 68, 0.09523809523809523, 0.09523809523809523, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,TYPE_REFERENCE,SIMPLE_NAME, line no: 69, 0.09523809523809523, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,OBJECT_TYPE_REFERENCE,SIMPLE_NAME, line no: 72, 0.09523809523809523, 0.047619047619047616, 0.0
agg,SIMPLE_NAME, line no: 213,Joiner,SIMPLE_NAME, line no: 24, 0.09090909090909091, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,on,SIMPLE_NAME, line no: 68, 0.09090909090909091, 0.09090909090909091, 0.0
agg,SIMPLE_NAME, line no: 213,TYPE_REFERENCE,SIMPLE_NAME, line no: 69, 0.09090909090909091, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,OBJECT_TYPE_REFERENCE,SIMPLE_NAME, line no: 72, 0.09090909090909091, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,Joiner,SIMPLE_NAME, line no: 24, 0.09090909090909091, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,on,SIMPLE_NAME, line no: 68, 0.09090909090909091, 0.09090909090909091, 0.0
getName,SIMPLE_NAME, line no: 213,TYPE_REFERENCE,SIMPLE_NAME, line no: 69, 0.09090909090909091, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,OBJECT_TYPE_REFERENCE,SIMPLE_NAME, line no: 72, 0.09090909090909091, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,Joiner,SIMPLE_NAME, line no: 24, 0.09090909090909091, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,on,SIMPLE_NAME, line no: 68, 0.09090909090909091, 0.09090909090909091, 0.0
fn,SIMPLE_NAME, line no: 213,TYPE_REFERENCE,SIMPLE_NAME, line no: 69, 0.09090909090909091, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,OBJECT_TYPE_REFERENCE,SIMPLE_NAME, line no: 72, 0.09090909090909091, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,Joiner,SIMPLE_NAME, line no: 24, 0.09090909090909091, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,on,SIMPLE_NAME, line no: 68, 0.09090909090909091, 0.09090909090909091, 0.0
manipulate,SIMPLE_NAME, line no: 213,TYPE_REFERENCE,SIMPLE_NAME, line no: 69, 0.09090909090909091, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,OBJECT_TYPE_REFERENCE,SIMPLE_NAME, line no: 72, 0.09090909090909091, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,Joiner,SIMPLE_NAME, line no: 24, 0.09090909090909091, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,on,SIMPLE_NAME, line no: 68, 0.09090909090909091, 0.09090909090909091, 0.0
agg,SIMPLE_NAME, line no: 213,TYPE_REFERENCE,SIMPLE_NAME, line no: 69, 0.09090909090909091, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,OBJECT_TYPE_REFERENCE,SIMPLE_NAME, line no: 72, 0.09090909090909091, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,Joiner,SIMPLE_NAME, line no: 24, 0.09090909090909091, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,on,SIMPLE_NAME, line no: 68, 0.09090909090909091, 0.09090909090909091, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,TYPE_REFERENCE,SIMPLE_NAME, line no: 69, 0.09090909090909091, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,OBJECT_TYPE_REFERENCE,SIMPLE_NAME, line no: 72, 0.09090909090909091, 0.045454545454545456, 0.0
input,SIMPLE_NAME, line no: 213,Joiner,SIMPLE_NAME, line no: 24, 0.08695652173913043, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,on,SIMPLE_NAME, line no: 68, 0.08695652173913043, 0.08695652173913043, 0.0
input,SIMPLE_NAME, line no: 213,TYPE_REFERENCE,SIMPLE_NAME, line no: 69, 0.08695652173913043, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,OBJECT_TYPE_REFERENCE,SIMPLE_NAME, line no: 72, 0.08695652173913043, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,Joiner,SIMPLE_NAME, line no: 24, 0.08695652173913043, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,on,SIMPLE_NAME, line no: 68, 0.08695652173913043, 0.08695652173913043, 0.0
getMetric,SIMPLE_NAME, line no: 213,TYPE_REFERENCE,SIMPLE_NAME, line no: 69, 0.08695652173913043, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,OBJECT_TYPE_REFERENCE,SIMPLE_NAME, line no: 72, 0.08695652173913043, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,Joiner,SIMPLE_NAME, line no: 24, 0.08695652173913043, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,on,SIMPLE_NAME, line no: 68, 0.08695652173913043, 0.08695652173913043, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,TYPE_REFERENCE,SIMPLE_NAME, line no: 69, 0.08695652173913043, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,OBJECT_TYPE_REFERENCE,SIMPLE_NAME, line no: 72, 0.08695652173913043, 0.043478260869565216, 0.0
agg,SIMPLE_NAME, line no: 213,Joiner,SIMPLE_NAME, line no: 24, 0.08333333333333333, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,on,SIMPLE_NAME, line no: 68, 0.08333333333333333, 0.08333333333333333, 0.0
agg,SIMPLE_NAME, line no: 213,TYPE_REFERENCE,SIMPLE_NAME, line no: 69, 0.08333333333333333, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,OBJECT_TYPE_REFERENCE,SIMPLE_NAME, line no: 72, 0.08333333333333333, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,Joiner,SIMPLE_NAME, line no: 24, 0.08333333333333333, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,on,SIMPLE_NAME, line no: 68, 0.08333333333333333, 0.08333333333333333, 0.0
getName,SIMPLE_NAME, line no: 213,TYPE_REFERENCE,SIMPLE_NAME, line no: 69, 0.08333333333333333, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,OBJECT_TYPE_REFERENCE,SIMPLE_NAME, line no: 72, 0.08333333333333333, 0.041666666666666664, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,io,SIMPLE_NAME, line no: 20, 0.05, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,druid,SIMPLE_NAME, line no: 20, 0.05, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,topn,SIMPLE_NAME, line no: 20, 0.05, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,com,SIMPLE_NAME, line no: 22, 0.05, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,fasterxml,SIMPLE_NAME, line no: 22, 0.05, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,jackson,SIMPLE_NAME, line no: 22, 0.05, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,core,SIMPLE_NAME, line no: 22, 0.05, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,type,SIMPLE_NAME, line no: 22, 0.05, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,google,SIMPLE_NAME, line no: 23, 0.05, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,common,SIMPLE_NAME, line no: 23, 0.05, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,base,SIMPLE_NAME, line no: 23, 0.05, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,collect,SIMPLE_NAME, line no: 25, 0.05, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,primitives,SIMPLE_NAME, line no: 29, 0.05, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,inject,SIMPLE_NAME, line no: 30, 0.05, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,Inject,SIMPLE_NAME, line no: 30, 0.05, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,metamx,SIMPLE_NAME, line no: 31, 0.05, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,guava,SIMPLE_NAME, line no: 32, 0.05, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,nary,SIMPLE_NAME, line no: 35, 0.05, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,emitter,SIMPLE_NAME, line no: 36, 0.05, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,service,SIMPLE_NAME, line no: 36, 0.05, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,collections,SIMPLE_NAME, line no: 37, 0.05, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,QueryRunner,SIMPLE_NAME, line no: 43, 0.05, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,QueryToolChest,SIMPLE_NAME, line no: 44, 0.05, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,aggregation,SIMPLE_NAME, line no: 48, 0.05, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,MetricManipulationFn,SIMPLE_NAME, line no: 50, 0.05, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,filter,SIMPLE_NAME, line no: 52, 0.05, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,org,SIMPLE_NAME, line no: 53, 0.05, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,joda,SIMPLE_NAME, line no: 53, 0.05, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,time,SIMPLE_NAME, line no: 53, 0.05, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,javax,SIMPLE_NAME, line no: 57, 0.05, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,annotation,SIMPLE_NAME, line no: 57, 0.05, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,Nullable,SIMPLE_NAME, line no: 57, 0.05, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,java,SIMPLE_NAME, line no: 58, 0.05, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,nio,SIMPLE_NAME, line no: 58, 0.05, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,util,SIMPLE_NAME, line no: 59, 0.05, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,TopNQueryQueryToolChest,SIMPLE_NAME, line no: 65, 0.05, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,Joiner.on(" "),METHOD_INVOCATION, line no: 68, 0.05, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213," ",STRING_LITERAL, line no: 68, 0.05, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,TopNQueryConfig,SIMPLE_NAME, line no: 75, 0.05, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,mergeResults,SIMPLE_NAME, line no: 86, 0.05, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,makeMetricBuilder,SIMPLE_NAME, line no: 126, 0.05, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,makePreComputeManipulatorFn,SIMPLE_NAME, line no: 143, 0.05, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,makePostComputeManipulatorFn,SIMPLE_NAME, line no: 191, 0.05, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,getResultTypeReference,SIMPLE_NAME, line no: 245, 0.05, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,getCacheStrategy,SIMPLE_NAME, line no: 251, 0.05, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,preMergeQueryDecoration,SIMPLE_NAME, line no: 371, 0.05, 0.05, 0.0
values.put(agg.getName() fn.manipulate(agg input.getMetric(agg.getName()))),METHOD_INVOCATION, line no: 213,postMergeQueryDecoration,SIMPLE_NAME, line no: 377, 0.05, 0.05, 0.0
values,SIMPLE_NAME, line no: 213,io,SIMPLE_NAME, line no: 20, 0.047619047619047616, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,druid,SIMPLE_NAME, line no: 20, 0.047619047619047616, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,topn,SIMPLE_NAME, line no: 20, 0.047619047619047616, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,com,SIMPLE_NAME, line no: 22, 0.047619047619047616, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,fasterxml,SIMPLE_NAME, line no: 22, 0.047619047619047616, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,jackson,SIMPLE_NAME, line no: 22, 0.047619047619047616, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,core,SIMPLE_NAME, line no: 22, 0.047619047619047616, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,type,SIMPLE_NAME, line no: 22, 0.047619047619047616, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,google,SIMPLE_NAME, line no: 23, 0.047619047619047616, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,common,SIMPLE_NAME, line no: 23, 0.047619047619047616, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,base,SIMPLE_NAME, line no: 23, 0.047619047619047616, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,collect,SIMPLE_NAME, line no: 25, 0.047619047619047616, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,primitives,SIMPLE_NAME, line no: 29, 0.047619047619047616, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,inject,SIMPLE_NAME, line no: 30, 0.047619047619047616, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,Inject,SIMPLE_NAME, line no: 30, 0.047619047619047616, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,metamx,SIMPLE_NAME, line no: 31, 0.047619047619047616, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,guava,SIMPLE_NAME, line no: 32, 0.047619047619047616, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,nary,SIMPLE_NAME, line no: 35, 0.047619047619047616, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,emitter,SIMPLE_NAME, line no: 36, 0.047619047619047616, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,service,SIMPLE_NAME, line no: 36, 0.047619047619047616, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,collections,SIMPLE_NAME, line no: 37, 0.047619047619047616, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,QueryRunner,SIMPLE_NAME, line no: 43, 0.047619047619047616, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,QueryToolChest,SIMPLE_NAME, line no: 44, 0.047619047619047616, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,aggregation,SIMPLE_NAME, line no: 48, 0.047619047619047616, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,MetricManipulationFn,SIMPLE_NAME, line no: 50, 0.047619047619047616, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,filter,SIMPLE_NAME, line no: 52, 0.047619047619047616, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,org,SIMPLE_NAME, line no: 53, 0.047619047619047616, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,joda,SIMPLE_NAME, line no: 53, 0.047619047619047616, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,time,SIMPLE_NAME, line no: 53, 0.047619047619047616, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,javax,SIMPLE_NAME, line no: 57, 0.047619047619047616, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,annotation,SIMPLE_NAME, line no: 57, 0.047619047619047616, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,Nullable,SIMPLE_NAME, line no: 57, 0.047619047619047616, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,java,SIMPLE_NAME, line no: 58, 0.047619047619047616, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,nio,SIMPLE_NAME, line no: 58, 0.047619047619047616, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,util,SIMPLE_NAME, line no: 59, 0.047619047619047616, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,TopNQueryQueryToolChest,SIMPLE_NAME, line no: 65, 0.047619047619047616, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,Joiner.on(" "),METHOD_INVOCATION, line no: 68, 0.047619047619047616, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213," ",STRING_LITERAL, line no: 68, 0.047619047619047616, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,TopNQueryConfig,SIMPLE_NAME, line no: 75, 0.047619047619047616, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,mergeResults,SIMPLE_NAME, line no: 86, 0.047619047619047616, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,makeMetricBuilder,SIMPLE_NAME, line no: 126, 0.047619047619047616, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,makePreComputeManipulatorFn,SIMPLE_NAME, line no: 143, 0.047619047619047616, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,makePostComputeManipulatorFn,SIMPLE_NAME, line no: 191, 0.047619047619047616, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,getResultTypeReference,SIMPLE_NAME, line no: 245, 0.047619047619047616, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,getCacheStrategy,SIMPLE_NAME, line no: 251, 0.047619047619047616, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,preMergeQueryDecoration,SIMPLE_NAME, line no: 371, 0.047619047619047616, 0.047619047619047616, 0.0
values,SIMPLE_NAME, line no: 213,postMergeQueryDecoration,SIMPLE_NAME, line no: 377, 0.047619047619047616, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,io,SIMPLE_NAME, line no: 20, 0.047619047619047616, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,druid,SIMPLE_NAME, line no: 20, 0.047619047619047616, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,topn,SIMPLE_NAME, line no: 20, 0.047619047619047616, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,com,SIMPLE_NAME, line no: 22, 0.047619047619047616, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,fasterxml,SIMPLE_NAME, line no: 22, 0.047619047619047616, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,jackson,SIMPLE_NAME, line no: 22, 0.047619047619047616, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,core,SIMPLE_NAME, line no: 22, 0.047619047619047616, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,type,SIMPLE_NAME, line no: 22, 0.047619047619047616, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,google,SIMPLE_NAME, line no: 23, 0.047619047619047616, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,common,SIMPLE_NAME, line no: 23, 0.047619047619047616, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,base,SIMPLE_NAME, line no: 23, 0.047619047619047616, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,collect,SIMPLE_NAME, line no: 25, 0.047619047619047616, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,primitives,SIMPLE_NAME, line no: 29, 0.047619047619047616, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,inject,SIMPLE_NAME, line no: 30, 0.047619047619047616, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,Inject,SIMPLE_NAME, line no: 30, 0.047619047619047616, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,metamx,SIMPLE_NAME, line no: 31, 0.047619047619047616, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,guava,SIMPLE_NAME, line no: 32, 0.047619047619047616, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,nary,SIMPLE_NAME, line no: 35, 0.047619047619047616, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,emitter,SIMPLE_NAME, line no: 36, 0.047619047619047616, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,service,SIMPLE_NAME, line no: 36, 0.047619047619047616, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,collections,SIMPLE_NAME, line no: 37, 0.047619047619047616, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,QueryRunner,SIMPLE_NAME, line no: 43, 0.047619047619047616, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,QueryToolChest,SIMPLE_NAME, line no: 44, 0.047619047619047616, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,aggregation,SIMPLE_NAME, line no: 48, 0.047619047619047616, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,MetricManipulationFn,SIMPLE_NAME, line no: 50, 0.047619047619047616, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,filter,SIMPLE_NAME, line no: 52, 0.047619047619047616, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,org,SIMPLE_NAME, line no: 53, 0.047619047619047616, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,joda,SIMPLE_NAME, line no: 53, 0.047619047619047616, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,time,SIMPLE_NAME, line no: 53, 0.047619047619047616, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,javax,SIMPLE_NAME, line no: 57, 0.047619047619047616, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,annotation,SIMPLE_NAME, line no: 57, 0.047619047619047616, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,Nullable,SIMPLE_NAME, line no: 57, 0.047619047619047616, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,java,SIMPLE_NAME, line no: 58, 0.047619047619047616, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,nio,SIMPLE_NAME, line no: 58, 0.047619047619047616, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,util,SIMPLE_NAME, line no: 59, 0.047619047619047616, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,TopNQueryQueryToolChest,SIMPLE_NAME, line no: 65, 0.047619047619047616, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,Joiner.on(" "),METHOD_INVOCATION, line no: 68, 0.047619047619047616, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213," ",STRING_LITERAL, line no: 68, 0.047619047619047616, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,TopNQueryConfig,SIMPLE_NAME, line no: 75, 0.047619047619047616, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,mergeResults,SIMPLE_NAME, line no: 86, 0.047619047619047616, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,makeMetricBuilder,SIMPLE_NAME, line no: 126, 0.047619047619047616, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,makePreComputeManipulatorFn,SIMPLE_NAME, line no: 143, 0.047619047619047616, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,makePostComputeManipulatorFn,SIMPLE_NAME, line no: 191, 0.047619047619047616, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,getResultTypeReference,SIMPLE_NAME, line no: 245, 0.047619047619047616, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,getCacheStrategy,SIMPLE_NAME, line no: 251, 0.047619047619047616, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,preMergeQueryDecoration,SIMPLE_NAME, line no: 371, 0.047619047619047616, 0.047619047619047616, 0.0
put,SIMPLE_NAME, line no: 213,postMergeQueryDecoration,SIMPLE_NAME, line no: 377, 0.047619047619047616, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,io,SIMPLE_NAME, line no: 20, 0.047619047619047616, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,druid,SIMPLE_NAME, line no: 20, 0.047619047619047616, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,topn,SIMPLE_NAME, line no: 20, 0.047619047619047616, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,com,SIMPLE_NAME, line no: 22, 0.047619047619047616, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,fasterxml,SIMPLE_NAME, line no: 22, 0.047619047619047616, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,jackson,SIMPLE_NAME, line no: 22, 0.047619047619047616, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,core,SIMPLE_NAME, line no: 22, 0.047619047619047616, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,type,SIMPLE_NAME, line no: 22, 0.047619047619047616, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,google,SIMPLE_NAME, line no: 23, 0.047619047619047616, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,common,SIMPLE_NAME, line no: 23, 0.047619047619047616, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,base,SIMPLE_NAME, line no: 23, 0.047619047619047616, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,collect,SIMPLE_NAME, line no: 25, 0.047619047619047616, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,primitives,SIMPLE_NAME, line no: 29, 0.047619047619047616, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,inject,SIMPLE_NAME, line no: 30, 0.047619047619047616, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,Inject,SIMPLE_NAME, line no: 30, 0.047619047619047616, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,metamx,SIMPLE_NAME, line no: 31, 0.047619047619047616, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,guava,SIMPLE_NAME, line no: 32, 0.047619047619047616, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,nary,SIMPLE_NAME, line no: 35, 0.047619047619047616, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,emitter,SIMPLE_NAME, line no: 36, 0.047619047619047616, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,service,SIMPLE_NAME, line no: 36, 0.047619047619047616, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,collections,SIMPLE_NAME, line no: 37, 0.047619047619047616, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,QueryRunner,SIMPLE_NAME, line no: 43, 0.047619047619047616, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,QueryToolChest,SIMPLE_NAME, line no: 44, 0.047619047619047616, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,aggregation,SIMPLE_NAME, line no: 48, 0.047619047619047616, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,MetricManipulationFn,SIMPLE_NAME, line no: 50, 0.047619047619047616, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,filter,SIMPLE_NAME, line no: 52, 0.047619047619047616, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,org,SIMPLE_NAME, line no: 53, 0.047619047619047616, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,joda,SIMPLE_NAME, line no: 53, 0.047619047619047616, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,time,SIMPLE_NAME, line no: 53, 0.047619047619047616, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,javax,SIMPLE_NAME, line no: 57, 0.047619047619047616, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,annotation,SIMPLE_NAME, line no: 57, 0.047619047619047616, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,Nullable,SIMPLE_NAME, line no: 57, 0.047619047619047616, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,java,SIMPLE_NAME, line no: 58, 0.047619047619047616, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,nio,SIMPLE_NAME, line no: 58, 0.047619047619047616, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,util,SIMPLE_NAME, line no: 59, 0.047619047619047616, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,TopNQueryQueryToolChest,SIMPLE_NAME, line no: 65, 0.047619047619047616, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,Joiner.on(" "),METHOD_INVOCATION, line no: 68, 0.047619047619047616, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213," ",STRING_LITERAL, line no: 68, 0.047619047619047616, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,TopNQueryConfig,SIMPLE_NAME, line no: 75, 0.047619047619047616, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,mergeResults,SIMPLE_NAME, line no: 86, 0.047619047619047616, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,makeMetricBuilder,SIMPLE_NAME, line no: 126, 0.047619047619047616, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,makePreComputeManipulatorFn,SIMPLE_NAME, line no: 143, 0.047619047619047616, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,makePostComputeManipulatorFn,SIMPLE_NAME, line no: 191, 0.047619047619047616, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,getResultTypeReference,SIMPLE_NAME, line no: 245, 0.047619047619047616, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,getCacheStrategy,SIMPLE_NAME, line no: 251, 0.047619047619047616, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,preMergeQueryDecoration,SIMPLE_NAME, line no: 371, 0.047619047619047616, 0.047619047619047616, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,postMergeQueryDecoration,SIMPLE_NAME, line no: 377, 0.047619047619047616, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,io,SIMPLE_NAME, line no: 20, 0.047619047619047616, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,druid,SIMPLE_NAME, line no: 20, 0.047619047619047616, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,topn,SIMPLE_NAME, line no: 20, 0.047619047619047616, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,com,SIMPLE_NAME, line no: 22, 0.047619047619047616, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,fasterxml,SIMPLE_NAME, line no: 22, 0.047619047619047616, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,jackson,SIMPLE_NAME, line no: 22, 0.047619047619047616, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,core,SIMPLE_NAME, line no: 22, 0.047619047619047616, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,type,SIMPLE_NAME, line no: 22, 0.047619047619047616, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,google,SIMPLE_NAME, line no: 23, 0.047619047619047616, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,common,SIMPLE_NAME, line no: 23, 0.047619047619047616, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,base,SIMPLE_NAME, line no: 23, 0.047619047619047616, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,collect,SIMPLE_NAME, line no: 25, 0.047619047619047616, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,primitives,SIMPLE_NAME, line no: 29, 0.047619047619047616, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,inject,SIMPLE_NAME, line no: 30, 0.047619047619047616, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,Inject,SIMPLE_NAME, line no: 30, 0.047619047619047616, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,metamx,SIMPLE_NAME, line no: 31, 0.047619047619047616, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,guava,SIMPLE_NAME, line no: 32, 0.047619047619047616, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,nary,SIMPLE_NAME, line no: 35, 0.047619047619047616, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,emitter,SIMPLE_NAME, line no: 36, 0.047619047619047616, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,service,SIMPLE_NAME, line no: 36, 0.047619047619047616, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,collections,SIMPLE_NAME, line no: 37, 0.047619047619047616, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,QueryRunner,SIMPLE_NAME, line no: 43, 0.047619047619047616, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,QueryToolChest,SIMPLE_NAME, line no: 44, 0.047619047619047616, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,aggregation,SIMPLE_NAME, line no: 48, 0.047619047619047616, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,MetricManipulationFn,SIMPLE_NAME, line no: 50, 0.047619047619047616, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,filter,SIMPLE_NAME, line no: 52, 0.047619047619047616, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,org,SIMPLE_NAME, line no: 53, 0.047619047619047616, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,joda,SIMPLE_NAME, line no: 53, 0.047619047619047616, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,time,SIMPLE_NAME, line no: 53, 0.047619047619047616, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,javax,SIMPLE_NAME, line no: 57, 0.047619047619047616, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,annotation,SIMPLE_NAME, line no: 57, 0.047619047619047616, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,Nullable,SIMPLE_NAME, line no: 57, 0.047619047619047616, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,java,SIMPLE_NAME, line no: 58, 0.047619047619047616, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,nio,SIMPLE_NAME, line no: 58, 0.047619047619047616, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,util,SIMPLE_NAME, line no: 59, 0.047619047619047616, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,TopNQueryQueryToolChest,SIMPLE_NAME, line no: 65, 0.047619047619047616, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,Joiner.on(" "),METHOD_INVOCATION, line no: 68, 0.047619047619047616, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213," ",STRING_LITERAL, line no: 68, 0.047619047619047616, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,TopNQueryConfig,SIMPLE_NAME, line no: 75, 0.047619047619047616, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,mergeResults,SIMPLE_NAME, line no: 86, 0.047619047619047616, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,makeMetricBuilder,SIMPLE_NAME, line no: 126, 0.047619047619047616, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,makePreComputeManipulatorFn,SIMPLE_NAME, line no: 143, 0.047619047619047616, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,makePostComputeManipulatorFn,SIMPLE_NAME, line no: 191, 0.047619047619047616, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,getResultTypeReference,SIMPLE_NAME, line no: 245, 0.047619047619047616, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,getCacheStrategy,SIMPLE_NAME, line no: 251, 0.047619047619047616, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,preMergeQueryDecoration,SIMPLE_NAME, line no: 371, 0.047619047619047616, 0.047619047619047616, 0.0
fn.manipulate(agg input.getMetric(agg.getName())),METHOD_INVOCATION, line no: 213,postMergeQueryDecoration,SIMPLE_NAME, line no: 377, 0.047619047619047616, 0.047619047619047616, 0.0
agg,SIMPLE_NAME, line no: 213,io,SIMPLE_NAME, line no: 20, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,druid,SIMPLE_NAME, line no: 20, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,topn,SIMPLE_NAME, line no: 20, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,com,SIMPLE_NAME, line no: 22, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,fasterxml,SIMPLE_NAME, line no: 22, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,jackson,SIMPLE_NAME, line no: 22, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,core,SIMPLE_NAME, line no: 22, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,type,SIMPLE_NAME, line no: 22, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,google,SIMPLE_NAME, line no: 23, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,common,SIMPLE_NAME, line no: 23, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,base,SIMPLE_NAME, line no: 23, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,collect,SIMPLE_NAME, line no: 25, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,primitives,SIMPLE_NAME, line no: 29, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,inject,SIMPLE_NAME, line no: 30, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,Inject,SIMPLE_NAME, line no: 30, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,metamx,SIMPLE_NAME, line no: 31, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,guava,SIMPLE_NAME, line no: 32, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,nary,SIMPLE_NAME, line no: 35, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,emitter,SIMPLE_NAME, line no: 36, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,service,SIMPLE_NAME, line no: 36, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,collections,SIMPLE_NAME, line no: 37, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,QueryRunner,SIMPLE_NAME, line no: 43, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,QueryToolChest,SIMPLE_NAME, line no: 44, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,aggregation,SIMPLE_NAME, line no: 48, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,MetricManipulationFn,SIMPLE_NAME, line no: 50, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,filter,SIMPLE_NAME, line no: 52, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,org,SIMPLE_NAME, line no: 53, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,joda,SIMPLE_NAME, line no: 53, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,time,SIMPLE_NAME, line no: 53, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,javax,SIMPLE_NAME, line no: 57, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,annotation,SIMPLE_NAME, line no: 57, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,Nullable,SIMPLE_NAME, line no: 57, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,java,SIMPLE_NAME, line no: 58, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,nio,SIMPLE_NAME, line no: 58, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,util,SIMPLE_NAME, line no: 59, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,TopNQueryQueryToolChest,SIMPLE_NAME, line no: 65, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,Joiner.on(" "),METHOD_INVOCATION, line no: 68, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213," ",STRING_LITERAL, line no: 68, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,TopNQueryConfig,SIMPLE_NAME, line no: 75, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,mergeResults,SIMPLE_NAME, line no: 86, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,makeMetricBuilder,SIMPLE_NAME, line no: 126, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,makePreComputeManipulatorFn,SIMPLE_NAME, line no: 143, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,makePostComputeManipulatorFn,SIMPLE_NAME, line no: 191, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,getResultTypeReference,SIMPLE_NAME, line no: 245, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,getCacheStrategy,SIMPLE_NAME, line no: 251, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,preMergeQueryDecoration,SIMPLE_NAME, line no: 371, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,postMergeQueryDecoration,SIMPLE_NAME, line no: 377, 0.045454545454545456, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,io,SIMPLE_NAME, line no: 20, 0.045454545454545456, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,druid,SIMPLE_NAME, line no: 20, 0.045454545454545456, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,topn,SIMPLE_NAME, line no: 20, 0.045454545454545456, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,com,SIMPLE_NAME, line no: 22, 0.045454545454545456, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,fasterxml,SIMPLE_NAME, line no: 22, 0.045454545454545456, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,jackson,SIMPLE_NAME, line no: 22, 0.045454545454545456, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,core,SIMPLE_NAME, line no: 22, 0.045454545454545456, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,type,SIMPLE_NAME, line no: 22, 0.045454545454545456, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,google,SIMPLE_NAME, line no: 23, 0.045454545454545456, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,common,SIMPLE_NAME, line no: 23, 0.045454545454545456, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,base,SIMPLE_NAME, line no: 23, 0.045454545454545456, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,collect,SIMPLE_NAME, line no: 25, 0.045454545454545456, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,primitives,SIMPLE_NAME, line no: 29, 0.045454545454545456, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,inject,SIMPLE_NAME, line no: 30, 0.045454545454545456, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,Inject,SIMPLE_NAME, line no: 30, 0.045454545454545456, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,metamx,SIMPLE_NAME, line no: 31, 0.045454545454545456, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,guava,SIMPLE_NAME, line no: 32, 0.045454545454545456, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,nary,SIMPLE_NAME, line no: 35, 0.045454545454545456, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,emitter,SIMPLE_NAME, line no: 36, 0.045454545454545456, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,service,SIMPLE_NAME, line no: 36, 0.045454545454545456, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,collections,SIMPLE_NAME, line no: 37, 0.045454545454545456, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,QueryRunner,SIMPLE_NAME, line no: 43, 0.045454545454545456, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,QueryToolChest,SIMPLE_NAME, line no: 44, 0.045454545454545456, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,aggregation,SIMPLE_NAME, line no: 48, 0.045454545454545456, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,MetricManipulationFn,SIMPLE_NAME, line no: 50, 0.045454545454545456, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,filter,SIMPLE_NAME, line no: 52, 0.045454545454545456, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,org,SIMPLE_NAME, line no: 53, 0.045454545454545456, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,joda,SIMPLE_NAME, line no: 53, 0.045454545454545456, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,time,SIMPLE_NAME, line no: 53, 0.045454545454545456, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,javax,SIMPLE_NAME, line no: 57, 0.045454545454545456, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,annotation,SIMPLE_NAME, line no: 57, 0.045454545454545456, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,Nullable,SIMPLE_NAME, line no: 57, 0.045454545454545456, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,java,SIMPLE_NAME, line no: 58, 0.045454545454545456, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,nio,SIMPLE_NAME, line no: 58, 0.045454545454545456, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,util,SIMPLE_NAME, line no: 59, 0.045454545454545456, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,TopNQueryQueryToolChest,SIMPLE_NAME, line no: 65, 0.045454545454545456, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,Joiner.on(" "),METHOD_INVOCATION, line no: 68, 0.045454545454545456, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,TopNQueryConfig,SIMPLE_NAME, line no: 75, 0.045454545454545456, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,mergeResults,SIMPLE_NAME, line no: 86, 0.045454545454545456, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,makeMetricBuilder,SIMPLE_NAME, line no: 126, 0.045454545454545456, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,makePreComputeManipulatorFn,SIMPLE_NAME, line no: 143, 0.045454545454545456, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,makePostComputeManipulatorFn,SIMPLE_NAME, line no: 191, 0.045454545454545456, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,getResultTypeReference,SIMPLE_NAME, line no: 245, 0.045454545454545456, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,getCacheStrategy,SIMPLE_NAME, line no: 251, 0.045454545454545456, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,preMergeQueryDecoration,SIMPLE_NAME, line no: 371, 0.045454545454545456, 0.045454545454545456, 0.0
getName,SIMPLE_NAME, line no: 213,postMergeQueryDecoration,SIMPLE_NAME, line no: 377, 0.045454545454545456, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,io,SIMPLE_NAME, line no: 20, 0.045454545454545456, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,druid,SIMPLE_NAME, line no: 20, 0.045454545454545456, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,topn,SIMPLE_NAME, line no: 20, 0.045454545454545456, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,com,SIMPLE_NAME, line no: 22, 0.045454545454545456, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,fasterxml,SIMPLE_NAME, line no: 22, 0.045454545454545456, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,jackson,SIMPLE_NAME, line no: 22, 0.045454545454545456, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,core,SIMPLE_NAME, line no: 22, 0.045454545454545456, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,type,SIMPLE_NAME, line no: 22, 0.045454545454545456, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,google,SIMPLE_NAME, line no: 23, 0.045454545454545456, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,common,SIMPLE_NAME, line no: 23, 0.045454545454545456, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,base,SIMPLE_NAME, line no: 23, 0.045454545454545456, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,collect,SIMPLE_NAME, line no: 25, 0.045454545454545456, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,primitives,SIMPLE_NAME, line no: 29, 0.045454545454545456, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,inject,SIMPLE_NAME, line no: 30, 0.045454545454545456, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,Inject,SIMPLE_NAME, line no: 30, 0.045454545454545456, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,metamx,SIMPLE_NAME, line no: 31, 0.045454545454545456, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,guava,SIMPLE_NAME, line no: 32, 0.045454545454545456, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,nary,SIMPLE_NAME, line no: 35, 0.045454545454545456, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,emitter,SIMPLE_NAME, line no: 36, 0.045454545454545456, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,service,SIMPLE_NAME, line no: 36, 0.045454545454545456, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,collections,SIMPLE_NAME, line no: 37, 0.045454545454545456, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,QueryRunner,SIMPLE_NAME, line no: 43, 0.045454545454545456, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,QueryToolChest,SIMPLE_NAME, line no: 44, 0.045454545454545456, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,aggregation,SIMPLE_NAME, line no: 48, 0.045454545454545456, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,filter,SIMPLE_NAME, line no: 52, 0.045454545454545456, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,org,SIMPLE_NAME, line no: 53, 0.045454545454545456, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,joda,SIMPLE_NAME, line no: 53, 0.045454545454545456, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,time,SIMPLE_NAME, line no: 53, 0.045454545454545456, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,javax,SIMPLE_NAME, line no: 57, 0.045454545454545456, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,annotation,SIMPLE_NAME, line no: 57, 0.045454545454545456, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,Nullable,SIMPLE_NAME, line no: 57, 0.045454545454545456, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,java,SIMPLE_NAME, line no: 58, 0.045454545454545456, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,nio,SIMPLE_NAME, line no: 58, 0.045454545454545456, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,util,SIMPLE_NAME, line no: 59, 0.045454545454545456, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,TopNQueryQueryToolChest,SIMPLE_NAME, line no: 65, 0.045454545454545456, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,Joiner.on(" "),METHOD_INVOCATION, line no: 68, 0.045454545454545456, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213," ",STRING_LITERAL, line no: 68, 0.045454545454545456, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,TopNQueryConfig,SIMPLE_NAME, line no: 75, 0.045454545454545456, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,mergeResults,SIMPLE_NAME, line no: 86, 0.045454545454545456, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,makeMetricBuilder,SIMPLE_NAME, line no: 126, 0.045454545454545456, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,makePreComputeManipulatorFn,SIMPLE_NAME, line no: 143, 0.045454545454545456, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,makePostComputeManipulatorFn,SIMPLE_NAME, line no: 191, 0.045454545454545456, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,getResultTypeReference,SIMPLE_NAME, line no: 245, 0.045454545454545456, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,getCacheStrategy,SIMPLE_NAME, line no: 251, 0.045454545454545456, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,preMergeQueryDecoration,SIMPLE_NAME, line no: 371, 0.045454545454545456, 0.045454545454545456, 0.0
fn,SIMPLE_NAME, line no: 213,postMergeQueryDecoration,SIMPLE_NAME, line no: 377, 0.045454545454545456, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,io,SIMPLE_NAME, line no: 20, 0.045454545454545456, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,druid,SIMPLE_NAME, line no: 20, 0.045454545454545456, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,topn,SIMPLE_NAME, line no: 20, 0.045454545454545456, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,com,SIMPLE_NAME, line no: 22, 0.045454545454545456, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,fasterxml,SIMPLE_NAME, line no: 22, 0.045454545454545456, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,jackson,SIMPLE_NAME, line no: 22, 0.045454545454545456, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,core,SIMPLE_NAME, line no: 22, 0.045454545454545456, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,type,SIMPLE_NAME, line no: 22, 0.045454545454545456, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,google,SIMPLE_NAME, line no: 23, 0.045454545454545456, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,common,SIMPLE_NAME, line no: 23, 0.045454545454545456, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,base,SIMPLE_NAME, line no: 23, 0.045454545454545456, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,collect,SIMPLE_NAME, line no: 25, 0.045454545454545456, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,primitives,SIMPLE_NAME, line no: 29, 0.045454545454545456, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,inject,SIMPLE_NAME, line no: 30, 0.045454545454545456, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,Inject,SIMPLE_NAME, line no: 30, 0.045454545454545456, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,metamx,SIMPLE_NAME, line no: 31, 0.045454545454545456, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,guava,SIMPLE_NAME, line no: 32, 0.045454545454545456, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,nary,SIMPLE_NAME, line no: 35, 0.045454545454545456, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,emitter,SIMPLE_NAME, line no: 36, 0.045454545454545456, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,service,SIMPLE_NAME, line no: 36, 0.045454545454545456, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,collections,SIMPLE_NAME, line no: 37, 0.045454545454545456, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,QueryRunner,SIMPLE_NAME, line no: 43, 0.045454545454545456, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,QueryToolChest,SIMPLE_NAME, line no: 44, 0.045454545454545456, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,aggregation,SIMPLE_NAME, line no: 48, 0.045454545454545456, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,MetricManipulationFn,SIMPLE_NAME, line no: 50, 0.045454545454545456, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,filter,SIMPLE_NAME, line no: 52, 0.045454545454545456, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,org,SIMPLE_NAME, line no: 53, 0.045454545454545456, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,joda,SIMPLE_NAME, line no: 53, 0.045454545454545456, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,time,SIMPLE_NAME, line no: 53, 0.045454545454545456, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,javax,SIMPLE_NAME, line no: 57, 0.045454545454545456, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,annotation,SIMPLE_NAME, line no: 57, 0.045454545454545456, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,Nullable,SIMPLE_NAME, line no: 57, 0.045454545454545456, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,java,SIMPLE_NAME, line no: 58, 0.045454545454545456, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,nio,SIMPLE_NAME, line no: 58, 0.045454545454545456, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,util,SIMPLE_NAME, line no: 59, 0.045454545454545456, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,TopNQueryQueryToolChest,SIMPLE_NAME, line no: 65, 0.045454545454545456, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,Joiner.on(" "),METHOD_INVOCATION, line no: 68, 0.045454545454545456, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213," ",STRING_LITERAL, line no: 68, 0.045454545454545456, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,TopNQueryConfig,SIMPLE_NAME, line no: 75, 0.045454545454545456, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,mergeResults,SIMPLE_NAME, line no: 86, 0.045454545454545456, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,makeMetricBuilder,SIMPLE_NAME, line no: 126, 0.045454545454545456, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,makePreComputeManipulatorFn,SIMPLE_NAME, line no: 143, 0.045454545454545456, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,makePostComputeManipulatorFn,SIMPLE_NAME, line no: 191, 0.045454545454545456, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,getResultTypeReference,SIMPLE_NAME, line no: 245, 0.045454545454545456, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,getCacheStrategy,SIMPLE_NAME, line no: 251, 0.045454545454545456, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,preMergeQueryDecoration,SIMPLE_NAME, line no: 371, 0.045454545454545456, 0.045454545454545456, 0.0
manipulate,SIMPLE_NAME, line no: 213,postMergeQueryDecoration,SIMPLE_NAME, line no: 377, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,io,SIMPLE_NAME, line no: 20, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,druid,SIMPLE_NAME, line no: 20, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,topn,SIMPLE_NAME, line no: 20, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,com,SIMPLE_NAME, line no: 22, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,fasterxml,SIMPLE_NAME, line no: 22, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,jackson,SIMPLE_NAME, line no: 22, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,core,SIMPLE_NAME, line no: 22, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,type,SIMPLE_NAME, line no: 22, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,google,SIMPLE_NAME, line no: 23, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,common,SIMPLE_NAME, line no: 23, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,base,SIMPLE_NAME, line no: 23, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,collect,SIMPLE_NAME, line no: 25, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,primitives,SIMPLE_NAME, line no: 29, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,inject,SIMPLE_NAME, line no: 30, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,Inject,SIMPLE_NAME, line no: 30, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,metamx,SIMPLE_NAME, line no: 31, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,guava,SIMPLE_NAME, line no: 32, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,nary,SIMPLE_NAME, line no: 35, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,emitter,SIMPLE_NAME, line no: 36, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,service,SIMPLE_NAME, line no: 36, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,collections,SIMPLE_NAME, line no: 37, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,QueryRunner,SIMPLE_NAME, line no: 43, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,QueryToolChest,SIMPLE_NAME, line no: 44, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,aggregation,SIMPLE_NAME, line no: 48, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,MetricManipulationFn,SIMPLE_NAME, line no: 50, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,filter,SIMPLE_NAME, line no: 52, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,org,SIMPLE_NAME, line no: 53, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,joda,SIMPLE_NAME, line no: 53, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,time,SIMPLE_NAME, line no: 53, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,javax,SIMPLE_NAME, line no: 57, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,annotation,SIMPLE_NAME, line no: 57, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,Nullable,SIMPLE_NAME, line no: 57, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,java,SIMPLE_NAME, line no: 58, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,nio,SIMPLE_NAME, line no: 58, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,util,SIMPLE_NAME, line no: 59, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,TopNQueryQueryToolChest,SIMPLE_NAME, line no: 65, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,Joiner.on(" "),METHOD_INVOCATION, line no: 68, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213," ",STRING_LITERAL, line no: 68, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,TopNQueryConfig,SIMPLE_NAME, line no: 75, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,mergeResults,SIMPLE_NAME, line no: 86, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,makeMetricBuilder,SIMPLE_NAME, line no: 126, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,makePreComputeManipulatorFn,SIMPLE_NAME, line no: 143, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,makePostComputeManipulatorFn,SIMPLE_NAME, line no: 191, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,getResultTypeReference,SIMPLE_NAME, line no: 245, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,getCacheStrategy,SIMPLE_NAME, line no: 251, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,preMergeQueryDecoration,SIMPLE_NAME, line no: 371, 0.045454545454545456, 0.045454545454545456, 0.0
agg,SIMPLE_NAME, line no: 213,postMergeQueryDecoration,SIMPLE_NAME, line no: 377, 0.045454545454545456, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,io,SIMPLE_NAME, line no: 20, 0.045454545454545456, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,druid,SIMPLE_NAME, line no: 20, 0.045454545454545456, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,topn,SIMPLE_NAME, line no: 20, 0.045454545454545456, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,com,SIMPLE_NAME, line no: 22, 0.045454545454545456, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,fasterxml,SIMPLE_NAME, line no: 22, 0.045454545454545456, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,jackson,SIMPLE_NAME, line no: 22, 0.045454545454545456, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,core,SIMPLE_NAME, line no: 22, 0.045454545454545456, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,type,SIMPLE_NAME, line no: 22, 0.045454545454545456, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,google,SIMPLE_NAME, line no: 23, 0.045454545454545456, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,common,SIMPLE_NAME, line no: 23, 0.045454545454545456, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,base,SIMPLE_NAME, line no: 23, 0.045454545454545456, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,collect,SIMPLE_NAME, line no: 25, 0.045454545454545456, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,primitives,SIMPLE_NAME, line no: 29, 0.045454545454545456, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,inject,SIMPLE_NAME, line no: 30, 0.045454545454545456, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,Inject,SIMPLE_NAME, line no: 30, 0.045454545454545456, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,metamx,SIMPLE_NAME, line no: 31, 0.045454545454545456, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,guava,SIMPLE_NAME, line no: 32, 0.045454545454545456, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,nary,SIMPLE_NAME, line no: 35, 0.045454545454545456, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,emitter,SIMPLE_NAME, line no: 36, 0.045454545454545456, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,service,SIMPLE_NAME, line no: 36, 0.045454545454545456, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,collections,SIMPLE_NAME, line no: 37, 0.045454545454545456, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,QueryRunner,SIMPLE_NAME, line no: 43, 0.045454545454545456, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,QueryToolChest,SIMPLE_NAME, line no: 44, 0.045454545454545456, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,aggregation,SIMPLE_NAME, line no: 48, 0.045454545454545456, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,MetricManipulationFn,SIMPLE_NAME, line no: 50, 0.045454545454545456, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,filter,SIMPLE_NAME, line no: 52, 0.045454545454545456, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,org,SIMPLE_NAME, line no: 53, 0.045454545454545456, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,joda,SIMPLE_NAME, line no: 53, 0.045454545454545456, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,time,SIMPLE_NAME, line no: 53, 0.045454545454545456, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,javax,SIMPLE_NAME, line no: 57, 0.045454545454545456, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,annotation,SIMPLE_NAME, line no: 57, 0.045454545454545456, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,Nullable,SIMPLE_NAME, line no: 57, 0.045454545454545456, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,java,SIMPLE_NAME, line no: 58, 0.045454545454545456, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,nio,SIMPLE_NAME, line no: 58, 0.045454545454545456, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,util,SIMPLE_NAME, line no: 59, 0.045454545454545456, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,TopNQueryQueryToolChest,SIMPLE_NAME, line no: 65, 0.045454545454545456, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,Joiner.on(" "),METHOD_INVOCATION, line no: 68, 0.045454545454545456, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213," ",STRING_LITERAL, line no: 68, 0.045454545454545456, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,TopNQueryConfig,SIMPLE_NAME, line no: 75, 0.045454545454545456, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,mergeResults,SIMPLE_NAME, line no: 86, 0.045454545454545456, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,makeMetricBuilder,SIMPLE_NAME, line no: 126, 0.045454545454545456, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,makePreComputeManipulatorFn,SIMPLE_NAME, line no: 143, 0.045454545454545456, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,makePostComputeManipulatorFn,SIMPLE_NAME, line no: 191, 0.045454545454545456, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,getResultTypeReference,SIMPLE_NAME, line no: 245, 0.045454545454545456, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,getCacheStrategy,SIMPLE_NAME, line no: 251, 0.045454545454545456, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,preMergeQueryDecoration,SIMPLE_NAME, line no: 371, 0.045454545454545456, 0.045454545454545456, 0.0
input.getMetric(agg.getName()),METHOD_INVOCATION, line no: 213,postMergeQueryDecoration,SIMPLE_NAME, line no: 377, 0.045454545454545456, 0.045454545454545456, 0.0
input,SIMPLE_NAME, line no: 213,io,SIMPLE_NAME, line no: 20, 0.043478260869565216, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,druid,SIMPLE_NAME, line no: 20, 0.043478260869565216, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,topn,SIMPLE_NAME, line no: 20, 0.043478260869565216, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,com,SIMPLE_NAME, line no: 22, 0.043478260869565216, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,fasterxml,SIMPLE_NAME, line no: 22, 0.043478260869565216, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,jackson,SIMPLE_NAME, line no: 22, 0.043478260869565216, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,core,SIMPLE_NAME, line no: 22, 0.043478260869565216, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,type,SIMPLE_NAME, line no: 22, 0.043478260869565216, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,google,SIMPLE_NAME, line no: 23, 0.043478260869565216, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,common,SIMPLE_NAME, line no: 23, 0.043478260869565216, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,base,SIMPLE_NAME, line no: 23, 0.043478260869565216, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,collect,SIMPLE_NAME, line no: 25, 0.043478260869565216, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,primitives,SIMPLE_NAME, line no: 29, 0.043478260869565216, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,inject,SIMPLE_NAME, line no: 30, 0.043478260869565216, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,Inject,SIMPLE_NAME, line no: 30, 0.043478260869565216, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,metamx,SIMPLE_NAME, line no: 31, 0.043478260869565216, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,guava,SIMPLE_NAME, line no: 32, 0.043478260869565216, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,nary,SIMPLE_NAME, line no: 35, 0.043478260869565216, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,emitter,SIMPLE_NAME, line no: 36, 0.043478260869565216, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,service,SIMPLE_NAME, line no: 36, 0.043478260869565216, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,collections,SIMPLE_NAME, line no: 37, 0.043478260869565216, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,QueryRunner,SIMPLE_NAME, line no: 43, 0.043478260869565216, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,QueryToolChest,SIMPLE_NAME, line no: 44, 0.043478260869565216, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,aggregation,SIMPLE_NAME, line no: 48, 0.043478260869565216, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,MetricManipulationFn,SIMPLE_NAME, line no: 50, 0.043478260869565216, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,filter,SIMPLE_NAME, line no: 52, 0.043478260869565216, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,org,SIMPLE_NAME, line no: 53, 0.043478260869565216, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,joda,SIMPLE_NAME, line no: 53, 0.043478260869565216, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,time,SIMPLE_NAME, line no: 53, 0.043478260869565216, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,javax,SIMPLE_NAME, line no: 57, 0.043478260869565216, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,annotation,SIMPLE_NAME, line no: 57, 0.043478260869565216, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,Nullable,SIMPLE_NAME, line no: 57, 0.043478260869565216, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,java,SIMPLE_NAME, line no: 58, 0.043478260869565216, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,nio,SIMPLE_NAME, line no: 58, 0.043478260869565216, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,util,SIMPLE_NAME, line no: 59, 0.043478260869565216, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,TopNQueryQueryToolChest,SIMPLE_NAME, line no: 65, 0.043478260869565216, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,Joiner.on(" "),METHOD_INVOCATION, line no: 68, 0.043478260869565216, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213," ",STRING_LITERAL, line no: 68, 0.043478260869565216, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,TopNQueryConfig,SIMPLE_NAME, line no: 75, 0.043478260869565216, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,mergeResults,SIMPLE_NAME, line no: 86, 0.043478260869565216, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,makeMetricBuilder,SIMPLE_NAME, line no: 126, 0.043478260869565216, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,makePreComputeManipulatorFn,SIMPLE_NAME, line no: 143, 0.043478260869565216, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,makePostComputeManipulatorFn,SIMPLE_NAME, line no: 191, 0.043478260869565216, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,getResultTypeReference,SIMPLE_NAME, line no: 245, 0.043478260869565216, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,getCacheStrategy,SIMPLE_NAME, line no: 251, 0.043478260869565216, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,preMergeQueryDecoration,SIMPLE_NAME, line no: 371, 0.043478260869565216, 0.043478260869565216, 0.0
input,SIMPLE_NAME, line no: 213,postMergeQueryDecoration,SIMPLE_NAME, line no: 377, 0.043478260869565216, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,io,SIMPLE_NAME, line no: 20, 0.043478260869565216, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,druid,SIMPLE_NAME, line no: 20, 0.043478260869565216, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,topn,SIMPLE_NAME, line no: 20, 0.043478260869565216, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,com,SIMPLE_NAME, line no: 22, 0.043478260869565216, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,fasterxml,SIMPLE_NAME, line no: 22, 0.043478260869565216, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,jackson,SIMPLE_NAME, line no: 22, 0.043478260869565216, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,core,SIMPLE_NAME, line no: 22, 0.043478260869565216, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,type,SIMPLE_NAME, line no: 22, 0.043478260869565216, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,google,SIMPLE_NAME, line no: 23, 0.043478260869565216, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,common,SIMPLE_NAME, line no: 23, 0.043478260869565216, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,base,SIMPLE_NAME, line no: 23, 0.043478260869565216, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,collect,SIMPLE_NAME, line no: 25, 0.043478260869565216, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,primitives,SIMPLE_NAME, line no: 29, 0.043478260869565216, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,inject,SIMPLE_NAME, line no: 30, 0.043478260869565216, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,Inject,SIMPLE_NAME, line no: 30, 0.043478260869565216, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,metamx,SIMPLE_NAME, line no: 31, 0.043478260869565216, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,guava,SIMPLE_NAME, line no: 32, 0.043478260869565216, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,nary,SIMPLE_NAME, line no: 35, 0.043478260869565216, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,emitter,SIMPLE_NAME, line no: 36, 0.043478260869565216, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,service,SIMPLE_NAME, line no: 36, 0.043478260869565216, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,collections,SIMPLE_NAME, line no: 37, 0.043478260869565216, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,QueryRunner,SIMPLE_NAME, line no: 43, 0.043478260869565216, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,QueryToolChest,SIMPLE_NAME, line no: 44, 0.043478260869565216, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,aggregation,SIMPLE_NAME, line no: 48, 0.043478260869565216, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,MetricManipulationFn,SIMPLE_NAME, line no: 50, 0.043478260869565216, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,filter,SIMPLE_NAME, line no: 52, 0.043478260869565216, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,org,SIMPLE_NAME, line no: 53, 0.043478260869565216, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,joda,SIMPLE_NAME, line no: 53, 0.043478260869565216, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,time,SIMPLE_NAME, line no: 53, 0.043478260869565216, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,javax,SIMPLE_NAME, line no: 57, 0.043478260869565216, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,annotation,SIMPLE_NAME, line no: 57, 0.043478260869565216, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,Nullable,SIMPLE_NAME, line no: 57, 0.043478260869565216, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,java,SIMPLE_NAME, line no: 58, 0.043478260869565216, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,nio,SIMPLE_NAME, line no: 58, 0.043478260869565216, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,util,SIMPLE_NAME, line no: 59, 0.043478260869565216, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,TopNQueryQueryToolChest,SIMPLE_NAME, line no: 65, 0.043478260869565216, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,Joiner.on(" "),METHOD_INVOCATION, line no: 68, 0.043478260869565216, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213," ",STRING_LITERAL, line no: 68, 0.043478260869565216, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,TopNQueryConfig,SIMPLE_NAME, line no: 75, 0.043478260869565216, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,mergeResults,SIMPLE_NAME, line no: 86, 0.043478260869565216, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,makeMetricBuilder,SIMPLE_NAME, line no: 126, 0.043478260869565216, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,makePreComputeManipulatorFn,SIMPLE_NAME, line no: 143, 0.043478260869565216, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,makePostComputeManipulatorFn,SIMPLE_NAME, line no: 191, 0.043478260869565216, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,getResultTypeReference,SIMPLE_NAME, line no: 245, 0.043478260869565216, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,getCacheStrategy,SIMPLE_NAME, line no: 251, 0.043478260869565216, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,preMergeQueryDecoration,SIMPLE_NAME, line no: 371, 0.043478260869565216, 0.043478260869565216, 0.0
getMetric,SIMPLE_NAME, line no: 213,postMergeQueryDecoration,SIMPLE_NAME, line no: 377, 0.043478260869565216, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,io,SIMPLE_NAME, line no: 20, 0.043478260869565216, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,druid,SIMPLE_NAME, line no: 20, 0.043478260869565216, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,topn,SIMPLE_NAME, line no: 20, 0.043478260869565216, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,com,SIMPLE_NAME, line no: 22, 0.043478260869565216, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,fasterxml,SIMPLE_NAME, line no: 22, 0.043478260869565216, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,jackson,SIMPLE_NAME, line no: 22, 0.043478260869565216, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,core,SIMPLE_NAME, line no: 22, 0.043478260869565216, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,type,SIMPLE_NAME, line no: 22, 0.043478260869565216, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,google,SIMPLE_NAME, line no: 23, 0.043478260869565216, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,common,SIMPLE_NAME, line no: 23, 0.043478260869565216, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,base,SIMPLE_NAME, line no: 23, 0.043478260869565216, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,collect,SIMPLE_NAME, line no: 25, 0.043478260869565216, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,primitives,SIMPLE_NAME, line no: 29, 0.043478260869565216, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,inject,SIMPLE_NAME, line no: 30, 0.043478260869565216, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,Inject,SIMPLE_NAME, line no: 30, 0.043478260869565216, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,metamx,SIMPLE_NAME, line no: 31, 0.043478260869565216, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,guava,SIMPLE_NAME, line no: 32, 0.043478260869565216, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,nary,SIMPLE_NAME, line no: 35, 0.043478260869565216, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,emitter,SIMPLE_NAME, line no: 36, 0.043478260869565216, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,service,SIMPLE_NAME, line no: 36, 0.043478260869565216, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,collections,SIMPLE_NAME, line no: 37, 0.043478260869565216, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,QueryRunner,SIMPLE_NAME, line no: 43, 0.043478260869565216, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,QueryToolChest,SIMPLE_NAME, line no: 44, 0.043478260869565216, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,aggregation,SIMPLE_NAME, line no: 48, 0.043478260869565216, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,MetricManipulationFn,SIMPLE_NAME, line no: 50, 0.043478260869565216, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,filter,SIMPLE_NAME, line no: 52, 0.043478260869565216, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,org,SIMPLE_NAME, line no: 53, 0.043478260869565216, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,joda,SIMPLE_NAME, line no: 53, 0.043478260869565216, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,time,SIMPLE_NAME, line no: 53, 0.043478260869565216, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,javax,SIMPLE_NAME, line no: 57, 0.043478260869565216, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,annotation,SIMPLE_NAME, line no: 57, 0.043478260869565216, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,Nullable,SIMPLE_NAME, line no: 57, 0.043478260869565216, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,java,SIMPLE_NAME, line no: 58, 0.043478260869565216, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,nio,SIMPLE_NAME, line no: 58, 0.043478260869565216, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,util,SIMPLE_NAME, line no: 59, 0.043478260869565216, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,TopNQueryQueryToolChest,SIMPLE_NAME, line no: 65, 0.043478260869565216, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,Joiner.on(" "),METHOD_INVOCATION, line no: 68, 0.043478260869565216, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213," ",STRING_LITERAL, line no: 68, 0.043478260869565216, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,TopNQueryConfig,SIMPLE_NAME, line no: 75, 0.043478260869565216, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,mergeResults,SIMPLE_NAME, line no: 86, 0.043478260869565216, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,makeMetricBuilder,SIMPLE_NAME, line no: 126, 0.043478260869565216, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,makePreComputeManipulatorFn,SIMPLE_NAME, line no: 143, 0.043478260869565216, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,makePostComputeManipulatorFn,SIMPLE_NAME, line no: 191, 0.043478260869565216, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,getResultTypeReference,SIMPLE_NAME, line no: 245, 0.043478260869565216, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,getCacheStrategy,SIMPLE_NAME, line no: 251, 0.043478260869565216, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,preMergeQueryDecoration,SIMPLE_NAME, line no: 371, 0.043478260869565216, 0.043478260869565216, 0.0
agg.getName(),METHOD_INVOCATION, line no: 213,postMergeQueryDecoration,SIMPLE_NAME, line no: 377, 0.043478260869565216, 0.043478260869565216, 0.0
agg,SIMPLE_NAME, line no: 213,io,SIMPLE_NAME, line no: 20, 0.041666666666666664, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,druid,SIMPLE_NAME, line no: 20, 0.041666666666666664, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,topn,SIMPLE_NAME, line no: 20, 0.041666666666666664, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,com,SIMPLE_NAME, line no: 22, 0.041666666666666664, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,fasterxml,SIMPLE_NAME, line no: 22, 0.041666666666666664, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,jackson,SIMPLE_NAME, line no: 22, 0.041666666666666664, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,core,SIMPLE_NAME, line no: 22, 0.041666666666666664, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,type,SIMPLE_NAME, line no: 22, 0.041666666666666664, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,google,SIMPLE_NAME, line no: 23, 0.041666666666666664, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,common,SIMPLE_NAME, line no: 23, 0.041666666666666664, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,base,SIMPLE_NAME, line no: 23, 0.041666666666666664, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,collect,SIMPLE_NAME, line no: 25, 0.041666666666666664, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,primitives,SIMPLE_NAME, line no: 29, 0.041666666666666664, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,inject,SIMPLE_NAME, line no: 30, 0.041666666666666664, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,Inject,SIMPLE_NAME, line no: 30, 0.041666666666666664, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,metamx,SIMPLE_NAME, line no: 31, 0.041666666666666664, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,guava,SIMPLE_NAME, line no: 32, 0.041666666666666664, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,nary,SIMPLE_NAME, line no: 35, 0.041666666666666664, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,emitter,SIMPLE_NAME, line no: 36, 0.041666666666666664, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,service,SIMPLE_NAME, line no: 36, 0.041666666666666664, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,collections,SIMPLE_NAME, line no: 37, 0.041666666666666664, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,QueryRunner,SIMPLE_NAME, line no: 43, 0.041666666666666664, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,QueryToolChest,SIMPLE_NAME, line no: 44, 0.041666666666666664, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,aggregation,SIMPLE_NAME, line no: 48, 0.041666666666666664, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,MetricManipulationFn,SIMPLE_NAME, line no: 50, 0.041666666666666664, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,filter,SIMPLE_NAME, line no: 52, 0.041666666666666664, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,org,SIMPLE_NAME, line no: 53, 0.041666666666666664, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,joda,SIMPLE_NAME, line no: 53, 0.041666666666666664, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,time,SIMPLE_NAME, line no: 53, 0.041666666666666664, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,javax,SIMPLE_NAME, line no: 57, 0.041666666666666664, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,annotation,SIMPLE_NAME, line no: 57, 0.041666666666666664, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,Nullable,SIMPLE_NAME, line no: 57, 0.041666666666666664, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,java,SIMPLE_NAME, line no: 58, 0.041666666666666664, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,nio,SIMPLE_NAME, line no: 58, 0.041666666666666664, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,util,SIMPLE_NAME, line no: 59, 0.041666666666666664, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,TopNQueryQueryToolChest,SIMPLE_NAME, line no: 65, 0.041666666666666664, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,Joiner.on(" "),METHOD_INVOCATION, line no: 68, 0.041666666666666664, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213," ",STRING_LITERAL, line no: 68, 0.041666666666666664, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,TopNQueryConfig,SIMPLE_NAME, line no: 75, 0.041666666666666664, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,mergeResults,SIMPLE_NAME, line no: 86, 0.041666666666666664, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,makeMetricBuilder,SIMPLE_NAME, line no: 126, 0.041666666666666664, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,makePreComputeManipulatorFn,SIMPLE_NAME, line no: 143, 0.041666666666666664, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,makePostComputeManipulatorFn,SIMPLE_NAME, line no: 191, 0.041666666666666664, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,getResultTypeReference,SIMPLE_NAME, line no: 245, 0.041666666666666664, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,getCacheStrategy,SIMPLE_NAME, line no: 251, 0.041666666666666664, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,preMergeQueryDecoration,SIMPLE_NAME, line no: 371, 0.041666666666666664, 0.041666666666666664, 0.0
agg,SIMPLE_NAME, line no: 213,postMergeQueryDecoration,SIMPLE_NAME, line no: 377, 0.041666666666666664, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,io,SIMPLE_NAME, line no: 20, 0.041666666666666664, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,druid,SIMPLE_NAME, line no: 20, 0.041666666666666664, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,topn,SIMPLE_NAME, line no: 20, 0.041666666666666664, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,com,SIMPLE_NAME, line no: 22, 0.041666666666666664, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,fasterxml,SIMPLE_NAME, line no: 22, 0.041666666666666664, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,jackson,SIMPLE_NAME, line no: 22, 0.041666666666666664, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,core,SIMPLE_NAME, line no: 22, 0.041666666666666664, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,type,SIMPLE_NAME, line no: 22, 0.041666666666666664, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,google,SIMPLE_NAME, line no: 23, 0.041666666666666664, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,common,SIMPLE_NAME, line no: 23, 0.041666666666666664, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,base,SIMPLE_NAME, line no: 23, 0.041666666666666664, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,collect,SIMPLE_NAME, line no: 25, 0.041666666666666664, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,primitives,SIMPLE_NAME, line no: 29, 0.041666666666666664, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,inject,SIMPLE_NAME, line no: 30, 0.041666666666666664, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,Inject,SIMPLE_NAME, line no: 30, 0.041666666666666664, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,metamx,SIMPLE_NAME, line no: 31, 0.041666666666666664, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,guava,SIMPLE_NAME, line no: 32, 0.041666666666666664, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,nary,SIMPLE_NAME, line no: 35, 0.041666666666666664, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,emitter,SIMPLE_NAME, line no: 36, 0.041666666666666664, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,service,SIMPLE_NAME, line no: 36, 0.041666666666666664, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,collections,SIMPLE_NAME, line no: 37, 0.041666666666666664, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,QueryRunner,SIMPLE_NAME, line no: 43, 0.041666666666666664, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,QueryToolChest,SIMPLE_NAME, line no: 44, 0.041666666666666664, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,aggregation,SIMPLE_NAME, line no: 48, 0.041666666666666664, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,MetricManipulationFn,SIMPLE_NAME, line no: 50, 0.041666666666666664, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,filter,SIMPLE_NAME, line no: 52, 0.041666666666666664, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,org,SIMPLE_NAME, line no: 53, 0.041666666666666664, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,joda,SIMPLE_NAME, line no: 53, 0.041666666666666664, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,time,SIMPLE_NAME, line no: 53, 0.041666666666666664, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,javax,SIMPLE_NAME, line no: 57, 0.041666666666666664, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,annotation,SIMPLE_NAME, line no: 57, 0.041666666666666664, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,Nullable,SIMPLE_NAME, line no: 57, 0.041666666666666664, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,java,SIMPLE_NAME, line no: 58, 0.041666666666666664, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,nio,SIMPLE_NAME, line no: 58, 0.041666666666666664, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,util,SIMPLE_NAME, line no: 59, 0.041666666666666664, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,TopNQueryQueryToolChest,SIMPLE_NAME, line no: 65, 0.041666666666666664, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,Joiner.on(" "),METHOD_INVOCATION, line no: 68, 0.041666666666666664, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,TopNQueryConfig,SIMPLE_NAME, line no: 75, 0.041666666666666664, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,mergeResults,SIMPLE_NAME, line no: 86, 0.041666666666666664, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,makeMetricBuilder,SIMPLE_NAME, line no: 126, 0.041666666666666664, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,makePreComputeManipulatorFn,SIMPLE_NAME, line no: 143, 0.041666666666666664, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,makePostComputeManipulatorFn,SIMPLE_NAME, line no: 191, 0.041666666666666664, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,getResultTypeReference,SIMPLE_NAME, line no: 245, 0.041666666666666664, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,getCacheStrategy,SIMPLE_NAME, line no: 251, 0.041666666666666664, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,preMergeQueryDecoration,SIMPLE_NAME, line no: 371, 0.041666666666666664, 0.041666666666666664, 0.0
getName,SIMPLE_NAME, line no: 213,postMergeQueryDecoration,SIMPLE_NAME, line no: 377, 0.041666666666666664, 0.041666666666666664, 0.0
