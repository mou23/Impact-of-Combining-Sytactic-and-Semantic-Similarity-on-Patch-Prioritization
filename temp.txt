AICP_frameworks_base\modifiedFiles\18\FragmentManager.java,Tokenizing android.app
{app=1, android=1, .=1}
Tokenizing android
{android=1}
Tokenizing app
{app=1}
Tokenizing android.animation.Animator
{android=1, animator=1, .=2, animation=1}
Tokenizing android.animation
{android=1, .=1, animation=1}
Tokenizing android
EXISTS
Tokenizing animation
{animation=1}
Tokenizing Animator
{animator=1}
Tokenizing android.animation.AnimatorInflater
{android=1, animator=1, inflater=1, .=2, animation=1}
Tokenizing android.animation
EXISTS
Tokenizing android
EXISTS
Tokenizing animation
EXISTS
Tokenizing AnimatorInflater
{animator=1, inflater=1}
Tokenizing android.animation.AnimatorListenerAdapter
{adapter=1, android=1, listener=1, animator=1, .=2, animation=1}
Tokenizing android.animation
EXISTS
Tokenizing android
EXISTS
Tokenizing animation
EXISTS
Tokenizing AnimatorListenerAdapter
{adapter=1, listener=1, animator=1}
Tokenizing android.content.res.Configuration
{res=1, configuration=1, android=1, .=3, content=1}
Tokenizing android.content.res
{res=1, android=1, .=2, content=1}
Tokenizing android.content
{android=1, .=1, content=1}
Tokenizing android
EXISTS
Tokenizing content
{content=1}
Tokenizing res
{res=1}
Tokenizing Configuration
{configuration=1}
Tokenizing android.content.res.TypedArray
{res=1, typed=1, array=1, android=1, .=3, content=1}
Tokenizing android.content.res
EXISTS
Tokenizing android.content
EXISTS
Tokenizing android
EXISTS
Tokenizing content
EXISTS
Tokenizing res
EXISTS
Tokenizing TypedArray
{typed=1, array=1}
Tokenizing android.os.Bundle
{os=1, android=1, bundle=1, .=2}
Tokenizing android.os
{os=1, android=1, .=1}
Tokenizing android
EXISTS
Tokenizing os
{os=1}
Tokenizing Bundle
{bundle=1}
Tokenizing android.os.Handler
{handler=1, os=1, android=1, .=2}
Tokenizing android.os
EXISTS
Tokenizing android
EXISTS
Tokenizing os
EXISTS
Tokenizing Handler
{handler=1}
Tokenizing android.os.Looper
{os=1, android=1, looper=1, .=2}
Tokenizing android.os
EXISTS
Tokenizing android
EXISTS
Tokenizing os
EXISTS
Tokenizing Looper
{looper=1}
Tokenizing android.os.Parcel
{parcel=1, os=1, android=1, .=2}
Tokenizing android.os
EXISTS
Tokenizing android
EXISTS
Tokenizing os
EXISTS
Tokenizing Parcel
{parcel=1}
Tokenizing android.os.Parcelable
{os=1, parcelable=1, android=1, .=2}
Tokenizing android.os
EXISTS
Tokenizing android
EXISTS
Tokenizing os
EXISTS
Tokenizing Parcelable
{parcelable=1}
Tokenizing android.util.DebugUtils
{debug=1, util=1, utils=1, android=1, .=2}
Tokenizing android.util
{util=1, android=1, .=1}
Tokenizing android
EXISTS
Tokenizing util
{util=1}
Tokenizing DebugUtils
{debug=1, utils=1}
Tokenizing android.util.Log
{util=1, log=1, android=1, .=2}
Tokenizing android.util
EXISTS
Tokenizing android
EXISTS
Tokenizing util
EXISTS
Tokenizing Log
{log=1}
Tokenizing android.util.LogWriter
{util=1, log=1, android=1, writer=1, .=2}
Tokenizing android.util
EXISTS
Tokenizing android
EXISTS
Tokenizing util
EXISTS
Tokenizing LogWriter
{log=1, writer=1}
Tokenizing android.util.Slog
{util=1, slog=1, android=1, .=2}
Tokenizing android.util
EXISTS
Tokenizing android
EXISTS
Tokenizing util
EXISTS
Tokenizing Slog
{slog=1}
Tokenizing android.util.SparseArray
{util=1, sparse=1, array=1, android=1, .=2}
Tokenizing android.util
EXISTS
Tokenizing android
EXISTS
Tokenizing util
EXISTS
Tokenizing SparseArray
{sparse=1, array=1}
Tokenizing android.view.Menu
{view=1, android=1, menu=1, .=2}
Tokenizing android.view
{view=1, android=1, .=1}
Tokenizing android
EXISTS
Tokenizing view
{view=1}
Tokenizing Menu
{menu=1}
Tokenizing android.view.MenuInflater
{view=1, android=1, menu=1, inflater=1, .=2}
Tokenizing android.view
EXISTS
Tokenizing android
EXISTS
Tokenizing view
EXISTS
Tokenizing MenuInflater
{menu=1, inflater=1}
Tokenizing android.view.MenuItem
{view=1, item=1, android=1, menu=1, .=2}
Tokenizing android.view
EXISTS
Tokenizing android
EXISTS
Tokenizing view
EXISTS
Tokenizing MenuItem
{item=1, menu=1}
Tokenizing android.view.View
{view=2, android=1, .=2}
Tokenizing android.view
EXISTS
Tokenizing android
EXISTS
Tokenizing view
EXISTS
Tokenizing View
{view=1}
Tokenizing android.view.ViewGroup
{view=2, android=1, .=2, group=1}
Tokenizing android.view
EXISTS
Tokenizing android
EXISTS
Tokenizing view
EXISTS
Tokenizing ViewGroup
{view=1, group=1}
Tokenizing java.io.FileDescriptor
{java=1, file=1, io=1, descriptor=1, .=2}
Tokenizing java.io
{java=1, io=1, .=1}
Tokenizing java
{java=1}
Tokenizing io
{io=1}
Tokenizing FileDescriptor
{file=1, descriptor=1}
Tokenizing java.io.PrintWriter
{print=1, java=1, io=1, writer=1, .=2}
Tokenizing java.io
EXISTS
Tokenizing java
EXISTS
Tokenizing io
EXISTS
Tokenizing PrintWriter
{print=1, writer=1}
Tokenizing java.util.ArrayList
{java=1, util=1, array=1, list=1, .=2}
Tokenizing java.util
{java=1, util=1, .=1}
Tokenizing java
EXISTS
Tokenizing util
EXISTS
Tokenizing ArrayList
{array=1, list=1}
Tokenizing java.util.Arrays
{java=1, util=1, arrays=1, .=2}
Tokenizing java.util
EXISTS
Tokenizing java
EXISTS
Tokenizing util
EXISTS
Tokenizing Arrays
{arrays=1}
Tokenizing FragmentManager
{fragment=1, manager=1}
Tokenizing BackStackEntry
{entry=1, stack=1, back=1}
Tokenizing getId
{get=1, id=1}
Tokenizing String
{string=1}
Tokenizing getName
{get=1, name=1}
Tokenizing getBreadCrumbTitleRes
{res=1, bread=1, crumb=1, get=1, title=1}
Tokenizing getBreadCrumbShortTitleRes
{res=1, bread=1, crumb=1, get=1, short=1, title=1}
Tokenizing CharSequence
{sequence=1, char=1}
Tokenizing getBreadCrumbTitle
{bread=1, crumb=1, get=1, title=1}
Tokenizing CharSequence
EXISTS
Tokenizing getBreadCrumbShortTitle
{bread=1, crumb=1, get=1, short=1, title=1}
Tokenizing OnBackStackChangedListener
{stack=1, listener=1, back=1, on=1, changed=1}
Tokenizing onBackStackChanged
{stack=1, back=1, on=1, changed=1}
Tokenizing FragmentTransaction
{fragment=1, transaction=1}
Tokenizing beginTransaction
{begin=1, transaction=1}
Tokenizing @Deprecated
{@=1, deprecated=1}
Tokenizing Deprecated
{deprecated=1}
Tokenizing FragmentTransaction
EXISTS
Tokenizing openTransaction
{open=1, transaction=1}
Tokenizing beginTransaction()
{(=1, )=1, begin=1, transaction=1}
Tokenizing beginTransaction
EXISTS
Tokenizing executePendingTransactions
{pending=1, transactions=1, execute=1}
Tokenizing Fragment
{fragment=1}
Tokenizing findFragmentById
{fragment=1, find=1, by=1, id=1}
Tokenizing id
{id=1}
Tokenizing Fragment
EXISTS
Tokenizing findFragmentByTag
{fragment=1, find=1, by=1, tag=1}
Tokenizing String
EXISTS
Tokenizing tag
{tag=1}
Tokenizing POP_BACK_STACK_INCLUSIVE
{pop_back_stack_inclusive=1}
Tokenizing 1 << 0
{<<=1, 0=1, 1=1}
Tokenizing 1
{1=1}
Tokenizing 0
{0=1}
Tokenizing popBackStack
{pop=1, stack=1, back=1}
Tokenizing popBackStackImmediate
{pop=1, stack=1, immediate=1, back=1}
Tokenizing popBackStack
EXISTS
Tokenizing String
EXISTS
Tokenizing name
{name=1}
Tokenizing flags
{flags=1}
Tokenizing popBackStackImmediate
EXISTS
Tokenizing String
EXISTS
Tokenizing name
EXISTS
Tokenizing flags
EXISTS
Tokenizing popBackStack
EXISTS
Tokenizing id
EXISTS
Tokenizing flags
EXISTS
Tokenizing popBackStackImmediate
EXISTS
Tokenizing id
EXISTS
Tokenizing flags
EXISTS
Tokenizing getBackStackEntryCount
{entry=1, stack=1, get=1, count=1, back=1}
Tokenizing BackStackEntry
EXISTS
Tokenizing getBackStackEntryAt
{entry=1, stack=1, at=1, get=1, back=1}
Tokenizing index
{index=1}
Tokenizing addOnBackStackChangedListener
{add=1, stack=1, listener=1, back=1, on=1, changed=1}
Tokenizing OnBackStackChangedListener
EXISTS
Tokenizing listener
{listener=1}
Tokenizing removeOnBackStackChangedListener
{stack=1, listener=1, back=1, remove=1, on=1, changed=1}
Tokenizing OnBackStackChangedListener
EXISTS
Tokenizing listener
EXISTS
Tokenizing putFragment
{fragment=1, put=1}
Tokenizing Bundle
EXISTS
Tokenizing bundle
{bundle=1}
Tokenizing String
EXISTS
Tokenizing key
{key=1}
Tokenizing Fragment
EXISTS
Tokenizing fragment
{fragment=1}
Tokenizing Fragment
EXISTS
Tokenizing getFragment
{fragment=1, get=1}
Tokenizing Bundle
EXISTS
Tokenizing bundle
EXISTS
Tokenizing String
EXISTS
Tokenizing key
EXISTS
Tokenizing Fragment.SavedState
{fragment=1, saved=1, state=1, .=1}
Tokenizing Fragment
EXISTS
Tokenizing SavedState
{saved=1, state=1}
Tokenizing saveFragmentInstanceState
{fragment=1, instance=1, save=1, state=1}
Tokenizing Fragment
EXISTS
Tokenizing f
{f=1}
Tokenizing dump
{dump=1}
Tokenizing String
EXISTS
Tokenizing prefix
{prefix=1}
Tokenizing FileDescriptor
EXISTS
Tokenizing fd
{fd=1}
Tokenizing PrintWriter
EXISTS
Tokenizing writer
{writer=1}
Tokenizing String
EXISTS
Tokenizing args
{args=1}
Tokenizing enableDebugLogging
{debug=1, enable=1, logging=1}
Tokenizing enabled
{enabled=1}
Tokenizing FragmentManagerImpl.DEBUG=enabled
{impl=1, fragment=1, debug=1, manager=1, ==1, .=1, enabled=1}
Tokenizing FragmentManagerImpl.DEBUG
{impl=1, fragment=1, debug=1, manager=1, .=1}
Tokenizing FragmentManagerImpl
{impl=1, fragment=1, manager=1}
Tokenizing DEBUG
{debug=1}
Tokenizing enabled
EXISTS
Tokenizing invalidateOptionsMenu
{options=1, invalidate=1, menu=1}
Tokenizing FragmentManagerState
{fragment=1, manager=1, state=1}
Tokenizing Parcelable
EXISTS
Tokenizing FragmentState
{fragment=1, state=1}
Tokenizing mActive
{active=1, m=1}
Tokenizing mAdded
{added=1, m=1}
Tokenizing BackStackState
{stack=1, back=1, state=1}
Tokenizing mBackStack
{stack=1, back=1, m=1}
Tokenizing FragmentManagerState
EXISTS
Tokenizing FragmentManagerState
EXISTS
Tokenizing Parcel
EXISTS
Tokenizing in
{in=1}
Tokenizing mActive=in.createTypedArray(FragmentState.CREATOR)
{creator=1, in=1, (=1, active=1, )=1, m=1, .=2, typed=1, fragment=1, array=1, create=1, state=1, ==1}
Tokenizing mActive
EXISTS
Tokenizing in.createTypedArray(FragmentState.CREATOR)
{typed=1, fragment=1, creator=1, in=1, array=1, (=1, create=1, )=1, state=1, .=2}
Tokenizing in
EXISTS
Tokenizing createTypedArray
{typed=1, array=1, create=1}
Tokenizing FragmentState.CREATOR
{fragment=1, creator=1, state=1, .=1}
Tokenizing FragmentState
EXISTS
Tokenizing CREATOR
{creator=1}
Tokenizing mAdded=in.createIntArray()
{added=1, in=1, array=1, (=1, create=1, )=1, m=1, ==1, .=1, int=1}
Tokenizing mAdded
EXISTS
Tokenizing in.createIntArray()
{in=1, array=1, (=1, create=1, )=1, .=1, int=1}
Tokenizing in
EXISTS
Tokenizing createIntArray
{array=1, create=1, int=1}
Tokenizing mBackStack=in.createTypedArray(BackStackState.CREATOR)
{stack=2, creator=1, in=1, (=1, back=2, )=1, m=1, .=2, typed=1, array=1, create=1, state=1, ==1}
Tokenizing mBackStack
EXISTS
Tokenizing in.createTypedArray(BackStackState.CREATOR)
{typed=1, stack=1, creator=1, in=1, array=1, (=1, create=1, back=1, )=1, state=1, .=2}
Tokenizing in
EXISTS
Tokenizing createTypedArray
EXISTS
Tokenizing BackStackState.CREATOR
{stack=1, creator=1, back=1, state=1, .=1}
Tokenizing BackStackState
EXISTS
Tokenizing CREATOR
EXISTS
Tokenizing describeContents
{contents=1, describe=1}
Tokenizing 0
EXISTS
Tokenizing writeToParcel
{parcel=1, to=1, write=1}
Tokenizing Parcel
EXISTS
Tokenizing dest
{dest=1}
Tokenizing flags
EXISTS
Tokenizing dest.writeTypedArray(mActive,flags)
{typed=1, array=1, (=1, flags=1, active=1, )=1, dest=1, ,=1, write=1, m=1, .=1}
Tokenizing dest
EXISTS
Tokenizing writeTypedArray
{typed=1, array=1, write=1}
Tokenizing mActive
EXISTS
Tokenizing flags
EXISTS
Tokenizing dest.writeIntArray(mAdded)
{array=1, added=1, (=1, )=1, dest=1, write=1, m=1, .=1, int=1}
Tokenizing dest
EXISTS
Tokenizing writeIntArray
{array=1, write=1, int=1}
Tokenizing mAdded
EXISTS
Tokenizing dest.writeTypedArray(mBackStack,flags)
{typed=1, stack=1, array=1, (=1, flags=1, back=1, )=1, dest=1, ,=1, write=1, m=1, .=1}
Tokenizing dest
EXISTS
Tokenizing writeTypedArray
EXISTS
Tokenizing mBackStack
EXISTS
Tokenizing flags
EXISTS
Tokenizing Parcelable.Creator
{creator=1, parcelable=1, .=1}
Tokenizing Parcelable
EXISTS
Tokenizing Creator
{creator=1}
Tokenizing FragmentManagerState
EXISTS
Tokenizing CREATOR
EXISTS
Tokenizing new Parcelable.Creator<FragmentManagerState>(){
  public FragmentManagerState createFromParcel(  Parcel in){
    return new FragmentManagerState(in);
  }
  public FragmentManagerState[] newArray(  int size){
    return new FragmentManagerState[size];
  }
}

{public=2, array=1, create=1, from=1, state=5, [=2, ]=2, new=4, creator=1, parcel=2, manager=5, in=2, (=4, )=4, .=1, int=1, fragment=5, parcelable=1, size=2, {=3, ;=2, <=1, }=3, >=1, return=2}
Tokenizing Parcelable.Creator
EXISTS
Tokenizing Parcelable
EXISTS
Tokenizing Creator
EXISTS
Tokenizing FragmentManagerState
EXISTS
Tokenizing FragmentManagerState
EXISTS
Tokenizing createFromParcel
{parcel=1, create=1, from=1}
Tokenizing Parcel
EXISTS
Tokenizing in
EXISTS
Tokenizing new FragmentManagerState(in)
{new=1, fragment=1, manager=1, in=1, (=1, )=1, state=1}
Tokenizing FragmentManagerState
EXISTS
Tokenizing in
EXISTS
Tokenizing FragmentManagerState
EXISTS
Tokenizing newArray
{new=1, array=1}
Tokenizing size
{size=1}
Tokenizing new FragmentManagerState[size]
{new=1, fragment=1, manager=1, size=1, state=1, [=1, ]=1}
Tokenizing FragmentManagerState
EXISTS
Tokenizing size
EXISTS
Tokenizing FragmentManagerImpl
EXISTS
Tokenizing FragmentManager
EXISTS
Tokenizing DEBUG
EXISTS
Tokenizing false
{false=1}
Tokenizing String
EXISTS
Tokenizing TAG
{tag=1}
Tokenizing "FragmentManager"
{fragment=1, manager=1}
Tokenizing String
EXISTS
Tokenizing TARGET_REQUEST_CODE_STATE_TAG
{target_request_code_state_tag=1}
Tokenizing "android:target_req_state"
{target_req_state=1, android=1, :=1}
Tokenizing String
EXISTS
Tokenizing TARGET_STATE_TAG
{target_state_tag=1}
Tokenizing "android:target_state"
{android=1, target_state=1, :=1}
Tokenizing String
EXISTS
Tokenizing VIEW_STATE_TAG
{view_state_tag=1}
Tokenizing "android:view_state"
{android=1, view_state=1, :=1}
Tokenizing String
EXISTS
Tokenizing USER_VISIBLE_HINT_TAG
{user_visible_hint_tag=1}
Tokenizing "android:user_visible_hint"
{android=1, :=1, user_visible_hint=1}
Tokenizing ArrayList
EXISTS
Tokenizing Runnable
{runnable=1}
Tokenizing mPendingActions
{pending=1, m=1, actions=1}
Tokenizing Runnable
EXISTS
Tokenizing mTmpActions
{tmp=1, m=1, actions=1}
Tokenizing mExecutingActions
{executing=1, m=1, actions=1}
Tokenizing ArrayList
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing mActive
EXISTS
Tokenizing ArrayList
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing mAdded
EXISTS
Tokenizing ArrayList
EXISTS
Tokenizing Integer
{integer=1}
Tokenizing mAvailIndices
{avail=1, indices=1, m=1}
Tokenizing ArrayList
EXISTS
Tokenizing BackStackRecord
{stack=1, record=1, back=1}
Tokenizing mBackStack
EXISTS
Tokenizing ArrayList
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing mCreatedMenus
{created=1, menus=1, m=1}
Tokenizing ArrayList
EXISTS
Tokenizing BackStackRecord
EXISTS
Tokenizing mBackStackIndices
{stack=1, indices=1, back=1, m=1}
Tokenizing ArrayList
EXISTS
Tokenizing Integer
EXISTS
Tokenizing mAvailBackStackIndices
{avail=1, stack=1, indices=1, back=1, m=1}
Tokenizing ArrayList
EXISTS
Tokenizing OnBackStackChangedListener
EXISTS
Tokenizing mBackStackChangeListeners
{stack=1, listeners=1, change=1, back=1, m=1}
Tokenizing mCurState
{cur=1, state=1, m=1}
Tokenizing Fragment.INITIALIZING
{fragment=1, initializing=1, .=1}
Tokenizing Fragment
EXISTS
Tokenizing INITIALIZING
{initializing=1}
Tokenizing Activity
{activity=1}
Tokenizing mActivity
{activity=1, m=1}
Tokenizing mNeedMenuInvalidate
{need=1, invalidate=1, menu=1, m=1}
Tokenizing mStateSaved
{saved=1, state=1, m=1}
Tokenizing mDestroyed
{destroyed=1, m=1}
Tokenizing String
EXISTS
Tokenizing mNoTransactionsBecause
{no=1, because=1, transactions=1, m=1}
Tokenizing mHavePendingDeferredStart
{deferred=1, pending=1, have=1, start=1, m=1}
Tokenizing Bundle
EXISTS
Tokenizing mStateBundle
{state=1, m=1, bundle=1}
Tokenizing null
{null=1}
Tokenizing SparseArray
EXISTS
Tokenizing Parcelable
EXISTS
Tokenizing mStateArray
{array=1, state=1, m=1}
Tokenizing null
EXISTS
Tokenizing Runnable
EXISTS
Tokenizing mExecCommit
{commit=1, m=1, exec=1}
Tokenizing new Runnable(){
  @Override public void run(){
    execPendingActions();
  }
}

{@=1, new=1, void=1, pending=1, (=3, )=3, run=1, runnable=1, public=1, {=2, override=1, ;=1, actions=1, }=2, exec=1}
Tokenizing Runnable
EXISTS
Tokenizing @Override
{@=1, override=1}
Tokenizing Override
{override=1}
Tokenizing run
{run=1}
Tokenizing execPendingActions()
{pending=1, (=1, )=1, actions=1, exec=1}
Tokenizing execPendingActions
{pending=1, actions=1, exec=1}
Tokenizing @Override
EXISTS
Tokenizing Override
EXISTS
Tokenizing FragmentTransaction
EXISTS
Tokenizing beginTransaction
EXISTS
Tokenizing new BackStackRecord(this)
{new=1, stack=1, record=1, (=1, this=1, back=1, )=1}
Tokenizing BackStackRecord
EXISTS
Tokenizing this
{this=1}
Tokenizing @Override
EXISTS
Tokenizing Override
EXISTS
Tokenizing executePendingTransactions
EXISTS
Tokenizing execPendingActions()
EXISTS
Tokenizing execPendingActions
EXISTS
Tokenizing @Override
EXISTS
Tokenizing Override
EXISTS
Tokenizing popBackStack
EXISTS
Tokenizing enqueueAction(new Runnable(){
  @Override public void run(){
    popBackStackState(mActivity.mHandler,null,-1,0);
  }
}
,false)
{@=1, handler=1, stack=1, activity=1, back=1, run=1, pop=1, public=1, action=1, override=1, state=1, new=1, void=1, (=4, false=1, )=4, ,=4, m=2, -=1, .=1, 0=1, enqueue=1, 1=1, runnable=1, null=1, {=2, ;=1, }=2}
Tokenizing enqueueAction
{enqueue=1, action=1}
Tokenizing new Runnable(){
  @Override public void run(){
    popBackStackState(mActivity.mHandler,null,-1,0);
  }
}

{@=1, handler=1, stack=1, activity=1, back=1, run=1, pop=1, public=1, override=1, state=1, new=1, void=1, (=3, )=3, ,=3, m=2, -=1, .=1, 0=1, 1=1, runnable=1, null=1, {=2, ;=1, }=2}
Tokenizing Runnable
EXISTS
Tokenizing @Override
EXISTS
Tokenizing Override
EXISTS
Tokenizing run
EXISTS
Tokenizing popBackStackState(mActivity.mHandler,null,-1,0)
{handler=1, stack=1, activity=1, (=1, back=1, )=1, ,=3, m=2, -=1, .=1, pop=1, 0=1, 1=1, null=1, state=1}
Tokenizing popBackStackState
{pop=1, stack=1, back=1, state=1}
Tokenizing mActivity.mHandler
{handler=1, activity=1, m=2, .=1}
Tokenizing mActivity
EXISTS
Tokenizing mHandler
{handler=1, m=1}
Tokenizing null
EXISTS
Tokenizing -1
{1=1, -=1}
Tokenizing 1
EXISTS
Tokenizing 0
EXISTS
Tokenizing false
EXISTS
Tokenizing @Override
EXISTS
Tokenizing Override
EXISTS
Tokenizing popBackStackImmediate
EXISTS
Tokenizing checkStateLoss()
{loss=1, (=1, )=1, check=1, state=1}
Tokenizing checkStateLoss
{loss=1, check=1, state=1}
Tokenizing executePendingTransactions()
{pending=1, (=1, )=1, transactions=1, execute=1}
Tokenizing executePendingTransactions
EXISTS
Tokenizing popBackStackState(mActivity.mHandler,null,-1,0)
EXISTS
Tokenizing popBackStackState
EXISTS
Tokenizing mActivity.mHandler
EXISTS
Tokenizing mActivity
EXISTS
Tokenizing mHandler
EXISTS
Tokenizing null
EXISTS
Tokenizing -1
EXISTS
Tokenizing 1
EXISTS
Tokenizing 0
EXISTS
Tokenizing @Override
EXISTS
Tokenizing Override
EXISTS
Tokenizing popBackStack
EXISTS
Tokenizing String
EXISTS
Tokenizing name
EXISTS
Tokenizing flags
EXISTS
Tokenizing enqueueAction(new Runnable(){
  @Override public void run(){
    popBackStackState(mActivity.mHandler,name,-1,flags);
  }
}
,false)
{@=1, handler=1, stack=1, activity=1, flags=1, back=1, run=1, pop=1, public=1, action=1, override=1, state=1, new=1, void=1, (=4, false=1, )=4, ,=4, m=2, -=1, .=1, enqueue=1, 1=1, runnable=1, name=1, {=2, ;=1, }=2}
Tokenizing enqueueAction
EXISTS
Tokenizing new Runnable(){
  @Override public void run(){
    popBackStackState(mActivity.mHandler,name,-1,flags);
  }
}

{@=1, handler=1, stack=1, activity=1, flags=1, back=1, run=1, pop=1, public=1, override=1, state=1, new=1, void=1, (=3, )=3, ,=3, m=2, -=1, .=1, 1=1, runnable=1, name=1, {=2, ;=1, }=2}
Tokenizing Runnable
EXISTS
Tokenizing @Override
EXISTS
Tokenizing Override
EXISTS
Tokenizing run
EXISTS
Tokenizing popBackStackState(mActivity.mHandler,name,-1,flags)
{handler=1, stack=1, activity=1, (=1, flags=1, back=1, )=1, ,=3, m=2, -=1, .=1, pop=1, 1=1, name=1, state=1}
Tokenizing popBackStackState
EXISTS
Tokenizing mActivity.mHandler
EXISTS
Tokenizing mActivity
EXISTS
Tokenizing mHandler
EXISTS
Tokenizing name
EXISTS
Tokenizing -1
EXISTS
Tokenizing 1
EXISTS
Tokenizing flags
EXISTS
Tokenizing false
EXISTS
Tokenizing @Override
EXISTS
Tokenizing Override
EXISTS
Tokenizing popBackStackImmediate
EXISTS
Tokenizing String
EXISTS
Tokenizing name
EXISTS
Tokenizing flags
EXISTS
Tokenizing checkStateLoss()
EXISTS
Tokenizing checkStateLoss
EXISTS
Tokenizing executePendingTransactions()
EXISTS
Tokenizing executePendingTransactions
EXISTS
Tokenizing popBackStackState(mActivity.mHandler,name,-1,flags)
EXISTS
Tokenizing popBackStackState
EXISTS
Tokenizing mActivity.mHandler
EXISTS
Tokenizing mActivity
EXISTS
Tokenizing mHandler
EXISTS
Tokenizing name
EXISTS
Tokenizing -1
EXISTS
Tokenizing 1
EXISTS
Tokenizing flags
EXISTS
Tokenizing @Override
EXISTS
Tokenizing Override
EXISTS
Tokenizing popBackStack
EXISTS
Tokenizing id
EXISTS
Tokenizing flags
EXISTS
Tokenizing id < 0
{0=1, id=1, <=1}
Tokenizing id
EXISTS
Tokenizing 0
EXISTS
Tokenizing new IllegalArgumentException("Bad id: " + id)
{exception=1, new=1, argument=1, bad=1, (=1, )=1, :=1, id=2, +=1, illegal=1}
Tokenizing IllegalArgumentException
{exception=1, argument=1, illegal=1}
Tokenizing "Bad id: " + id
{bad=1, :=1, id=2, +=1}
Tokenizing "Bad id: "
{bad=1, :=1, id=1}
Tokenizing id
EXISTS
Tokenizing enqueueAction(new Runnable(){
  @Override public void run(){
    popBackStackState(mActivity.mHandler,null,id,flags);
  }
}
,false)
{@=1, handler=1, stack=1, activity=1, flags=1, back=1, run=1, pop=1, public=1, action=1, override=1, state=1, id=1, new=1, void=1, (=4, false=1, )=4, ,=4, m=2, .=1, enqueue=1, runnable=1, null=1, {=2, ;=1, }=2}
Tokenizing enqueueAction
EXISTS
Tokenizing new Runnable(){
  @Override public void run(){
    popBackStackState(mActivity.mHandler,null,id,flags);
  }
}

{@=1, new=1, handler=1, stack=1, void=1, activity=1, (=3, flags=1, )=3, back=1, run=1, ,=3, m=2, .=1, pop=1, runnable=1, public=1, null=1, {=2, override=1, state=1, id=1, ;=1, }=2}
Tokenizing Runnable
EXISTS
Tokenizing @Override
EXISTS
Tokenizing Override
EXISTS
Tokenizing run
EXISTS
Tokenizing popBackStackState(mActivity.mHandler,null,id,flags)
{handler=1, stack=1, activity=1, (=1, flags=1, back=1, )=1, ,=3, m=2, .=1, pop=1, null=1, state=1, id=1}
Tokenizing popBackStackState
EXISTS
Tokenizing mActivity.mHandler
EXISTS
Tokenizing mActivity
EXISTS
Tokenizing mHandler
EXISTS
Tokenizing null
EXISTS
Tokenizing id
EXISTS
Tokenizing flags
EXISTS
Tokenizing false
EXISTS
Tokenizing @Override
EXISTS
Tokenizing Override
EXISTS
Tokenizing popBackStackImmediate
EXISTS
Tokenizing id
EXISTS
Tokenizing flags
EXISTS
Tokenizing checkStateLoss()
EXISTS
Tokenizing checkStateLoss
EXISTS
Tokenizing executePendingTransactions()
EXISTS
Tokenizing executePendingTransactions
EXISTS
Tokenizing id < 0
EXISTS
Tokenizing id
EXISTS
Tokenizing 0
EXISTS
Tokenizing new IllegalArgumentException("Bad id: " + id)
EXISTS
Tokenizing IllegalArgumentException
EXISTS
Tokenizing "Bad id: " + id
EXISTS
Tokenizing "Bad id: "
EXISTS
Tokenizing id
EXISTS
Tokenizing popBackStackState(mActivity.mHandler,null,id,flags)
EXISTS
Tokenizing popBackStackState
EXISTS
Tokenizing mActivity.mHandler
EXISTS
Tokenizing mActivity
EXISTS
Tokenizing mHandler
EXISTS
Tokenizing null
EXISTS
Tokenizing id
EXISTS
Tokenizing flags
EXISTS
Tokenizing @Override
EXISTS
Tokenizing Override
EXISTS
Tokenizing getBackStackEntryCount
EXISTS
Tokenizing mBackStack != null ? mBackStack.size() : 0
{0=1, stack=2, null=1, size=1, (=1, back=2, )=1, :=1, !==1, m=2, .=1, ?=1}
Tokenizing mBackStack != null
{stack=1, null=1, back=1, !==1, m=1}
Tokenizing mBackStack
EXISTS
Tokenizing null
EXISTS
Tokenizing mBackStack.size()
{stack=1, size=1, (=1, back=1, )=1, m=1, .=1}
Tokenizing mBackStack
EXISTS
Tokenizing size
EXISTS
Tokenizing 0
EXISTS
Tokenizing @Override
EXISTS
Tokenizing Override
EXISTS
Tokenizing BackStackEntry
EXISTS
Tokenizing getBackStackEntryAt
EXISTS
Tokenizing index
EXISTS
Tokenizing mBackStack.get(index)
{stack=1, get=1, (=1, back=1, index=1, )=1, m=1, .=1}
Tokenizing mBackStack
EXISTS
Tokenizing get
{get=1}
Tokenizing index
EXISTS
Tokenizing @Override
EXISTS
Tokenizing Override
EXISTS
Tokenizing addOnBackStackChangedListener
EXISTS
Tokenizing OnBackStackChangedListener
EXISTS
Tokenizing listener
EXISTS
Tokenizing mBackStackChangeListeners == null
{===1, stack=1, listeners=1, null=1, change=1, back=1, m=1}
Tokenizing mBackStackChangeListeners
EXISTS
Tokenizing null
EXISTS
Tokenizing mBackStackChangeListeners=new ArrayList<OnBackStackChangedListener>()
{new=1, stack=2, listeners=1, change=1, listener=1, (=1, back=2, )=1, list=1, m=1, array=1, <=1, ==1, >=1, on=1, changed=1}
Tokenizing mBackStackChangeListeners
EXISTS
Tokenizing new ArrayList<OnBackStackChangedListener>()
{new=1, stack=1, array=1, listener=1, (=1, back=1, )=1, list=1, <=1, >=1, on=1, changed=1}
Tokenizing ArrayList
EXISTS
Tokenizing OnBackStackChangedListener
EXISTS
Tokenizing mBackStackChangeListeners.add(listener)
{add=1, stack=1, listeners=1, change=1, (=1, listener=1, back=1, )=1, m=1, .=1}
Tokenizing mBackStackChangeListeners
EXISTS
Tokenizing add
{add=1}
Tokenizing listener
EXISTS
Tokenizing @Override
EXISTS
Tokenizing Override
EXISTS
Tokenizing removeOnBackStackChangedListener
EXISTS
Tokenizing OnBackStackChangedListener
EXISTS
Tokenizing listener
EXISTS
Tokenizing mBackStackChangeListeners != null
{stack=1, listeners=1, null=1, change=1, back=1, !==1, m=1}
Tokenizing mBackStackChangeListeners
EXISTS
Tokenizing null
EXISTS
Tokenizing mBackStackChangeListeners.remove(listener)
{stack=1, listeners=1, change=1, (=1, listener=1, back=1, )=1, m=1, .=1, remove=1}
Tokenizing mBackStackChangeListeners
EXISTS
Tokenizing remove
{remove=1}
Tokenizing listener
EXISTS
Tokenizing @Override
EXISTS
Tokenizing Override
EXISTS
Tokenizing putFragment
EXISTS
Tokenizing Bundle
EXISTS
Tokenizing bundle
EXISTS
Tokenizing String
EXISTS
Tokenizing key
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing fragment
EXISTS
Tokenizing fragment.mIndex < 0
{0=1, fragment=1, index=1, <=1, m=1, .=1}
Tokenizing fragment.mIndex
{fragment=1, index=1, m=1, .=1}
Tokenizing fragment
EXISTS
Tokenizing mIndex
{index=1, m=1}
Tokenizing 0
EXISTS
Tokenizing new IllegalStateException("Fragment " + fragment + " is not currently in the FragmentManager")
{exception=1, new=1, manager=1, in=1, (=1, )=1, is=1, +=2, illegal=1, the=1, fragment=3, not=1, currently=1, state=1}
Tokenizing IllegalStateException
{exception=1, state=1, illegal=1}
Tokenizing "Fragment " + fragment + " is not currently in the FragmentManager"
{the=1, fragment=3, not=1, currently=1, manager=1, in=1, is=1, +=2}
Tokenizing "Fragment "
{fragment=1}
Tokenizing fragment
EXISTS
Tokenizing " is not currently in the FragmentManager"
{the=1, not=1, fragment=1, currently=1, manager=1, in=1, is=1}
Tokenizing bundle.putInt(key,fragment.mIndex)
{fragment=1, (=1, index=1, )=1, ,=1, bundle=1, m=1, .=2, put=1, int=1, key=1}
Tokenizing bundle
EXISTS
Tokenizing putInt
{put=1, int=1}
Tokenizing key
EXISTS
Tokenizing fragment.mIndex
EXISTS
Tokenizing fragment
EXISTS
Tokenizing mIndex
EXISTS
Tokenizing @Override
EXISTS
Tokenizing Override
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing getFragment
EXISTS
Tokenizing Bundle
EXISTS
Tokenizing bundle
EXISTS
Tokenizing String
EXISTS
Tokenizing key
EXISTS
Tokenizing index
EXISTS
Tokenizing bundle.getInt(key,-1)
{1=1, get=1, (=1, )=1, ,=1, bundle=1, -=1, .=1, int=1, key=1}
Tokenizing bundle
EXISTS
Tokenizing getInt
{get=1, int=1}
Tokenizing key
EXISTS
Tokenizing -1
EXISTS
Tokenizing 1
EXISTS
Tokenizing index == -1
{===1, 1=1, index=1, -=1}
Tokenizing index
EXISTS
Tokenizing -1
EXISTS
Tokenizing 1
EXISTS
Tokenizing null
EXISTS
Tokenizing index >= mActive.size()
{size=1, (=1, index=1, active=1, )=1, m=1, .=1, >==1}
Tokenizing index
EXISTS
Tokenizing mActive.size()
{size=1, (=1, active=1, )=1, m=1, .=1}
Tokenizing mActive
EXISTS
Tokenizing size
EXISTS
Tokenizing new IllegalStateException("Fragement no longer exists for key " + key + ": index "+ index)
{exception=1, new=1, no=1, (=1, for=1, index=2, )=1, +=3, illegal=1, longer=1, exists=1, :=1, state=1, fragement=1, key=2}
Tokenizing IllegalStateException
EXISTS
Tokenizing "Fragement no longer exists for key " + key + ": index "+ index
{no=1, longer=1, for=1, exists=1, index=2, :=1, +=3, fragement=1, key=2}
Tokenizing "Fragement no longer exists for key "
{no=1, longer=1, for=1, exists=1, fragement=1, key=1}
Tokenizing key
EXISTS
Tokenizing ": index "
{index=1, :=1}
Tokenizing index
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing f
EXISTS
Tokenizing mActive.get(index)
{get=1, (=1, active=1, index=1, )=1, m=1, .=1}
Tokenizing mActive
EXISTS
Tokenizing get
EXISTS
Tokenizing index
EXISTS
Tokenizing f == null
{===1, null=1, f=1}
Tokenizing f
EXISTS
Tokenizing null
EXISTS
Tokenizing new IllegalStateException("Fragement no longer exists for key " + key + ": index "+ index)
EXISTS
Tokenizing IllegalStateException
EXISTS
Tokenizing "Fragement no longer exists for key " + key + ": index "+ index
EXISTS
Tokenizing "Fragement no longer exists for key "
EXISTS
Tokenizing key
EXISTS
Tokenizing ": index "
EXISTS
Tokenizing index
EXISTS
Tokenizing f
EXISTS
Tokenizing @Override
EXISTS
Tokenizing Override
EXISTS
Tokenizing Fragment.SavedState
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing SavedState
EXISTS
Tokenizing saveFragmentInstanceState
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing fragment
EXISTS
Tokenizing fragment.mIndex < 0
EXISTS
Tokenizing fragment.mIndex
EXISTS
Tokenizing fragment
EXISTS
Tokenizing mIndex
EXISTS
Tokenizing 0
EXISTS
Tokenizing new IllegalStateException("Fragment " + fragment + " is not currently in the FragmentManager")
EXISTS
Tokenizing IllegalStateException
EXISTS
Tokenizing "Fragment " + fragment + " is not currently in the FragmentManager"
EXISTS
Tokenizing "Fragment "
EXISTS
Tokenizing fragment
EXISTS
Tokenizing " is not currently in the FragmentManager"
EXISTS
Tokenizing fragment.mState > Fragment.INITIALIZING
{fragment=2, initializing=1, state=1, m=1, .=2, >=1}
Tokenizing fragment.mState
{fragment=1, state=1, m=1, .=1}
Tokenizing fragment
EXISTS
Tokenizing mState
{state=1, m=1}
Tokenizing Fragment.INITIALIZING
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing INITIALIZING
EXISTS
Tokenizing Bundle
EXISTS
Tokenizing result
{result=1}
Tokenizing saveFragmentBasicState(fragment)
{fragment=2, save=1, (=1, )=1, state=1, basic=1}
Tokenizing saveFragmentBasicState
{fragment=1, save=1, state=1, basic=1}
Tokenizing fragment
EXISTS
Tokenizing result != null ? new Fragment.SavedState(result) : null
{result=2, new=1, fragment=1, null=2, saved=1, (=1, )=1, :=1, state=1, !==1, .=1, ?=1}
Tokenizing result != null
{result=1, null=1, !==1}
Tokenizing result
EXISTS
Tokenizing null
EXISTS
Tokenizing new Fragment.SavedState(result)
{result=1, new=1, fragment=1, saved=1, (=1, )=1, state=1, .=1}
Tokenizing Fragment.SavedState
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing SavedState
EXISTS
Tokenizing result
EXISTS
Tokenizing null
EXISTS
Tokenizing null
EXISTS
Tokenizing @Override
EXISTS
Tokenizing Override
EXISTS
Tokenizing String
EXISTS
Tokenizing toString
{string=1, to=1}
Tokenizing StringBuilder
{string=1, builder=1}
Tokenizing sb
{sb=1}
Tokenizing new StringBuilder(128)
{new=1, string=1, 128=1, builder=1, (=1, )=1}
Tokenizing StringBuilder
EXISTS
Tokenizing 128
{128=1}
Tokenizing sb.append("FragmentManager{")
{fragment=1, manager=1, (=1, )=1, {=1, .=1, append=1, sb=1}
Tokenizing sb
EXISTS
Tokenizing append
{append=1}
Tokenizing "FragmentManager{"
{fragment=1, manager=1, {=1}
Tokenizing sb.append(Integer.toHexString(System.identityHashCode(this)))
{code=1, string=1, (=3, this=1, )=3, integer=1, .=3, sb=1, system=1, identity=1, hex=1, to=1, append=1, hash=1}
Tokenizing sb
EXISTS
Tokenizing append
EXISTS
Tokenizing Integer.toHexString(System.identityHashCode(this))
{system=1, code=1, string=1, identity=1, (=2, this=1, )=2, hex=1, integer=1, to=1, .=2, hash=1}
Tokenizing Integer
EXISTS
Tokenizing toHexString
{string=1, hex=1, to=1}
Tokenizing System.identityHashCode(this)
{system=1, code=1, identity=1, (=1, this=1, )=1, .=1, hash=1}
Tokenizing System
{system=1}
Tokenizing identityHashCode
{code=1, identity=1, hash=1}
Tokenizing this
EXISTS
Tokenizing sb.append(" in ")
{in=1, (=1, )=1, .=1, append=1, sb=1}
Tokenizing sb
EXISTS
Tokenizing append
EXISTS
Tokenizing " in "
{in=1}
Tokenizing DebugUtils.buildShortClassTag(mActivity,sb)
{debug=1, activity=1, (=1, )=1, ,=1, m=1, .=1, sb=1, build=1, utils=1, short=1, tag=1, class=1}
Tokenizing DebugUtils
EXISTS
Tokenizing buildShortClassTag
{build=1, short=1, tag=1, class=1}
Tokenizing mActivity
EXISTS
Tokenizing sb
EXISTS
Tokenizing sb.append("}}")
{(=1, )=1, }=2, .=1, append=1, sb=1}
Tokenizing sb
EXISTS
Tokenizing append
EXISTS
Tokenizing "}}"
{}=2}
Tokenizing sb.toString()
{string=1, (=1, )=1, to=1, .=1, sb=1}
Tokenizing sb
EXISTS
Tokenizing toString
EXISTS
Tokenizing @Override
EXISTS
Tokenizing Override
EXISTS
Tokenizing dump
EXISTS
Tokenizing String
EXISTS
Tokenizing prefix
EXISTS
Tokenizing FileDescriptor
EXISTS
Tokenizing fd
EXISTS
Tokenizing PrintWriter
EXISTS
Tokenizing writer
EXISTS
Tokenizing String
EXISTS
Tokenizing args
EXISTS
Tokenizing String
EXISTS
Tokenizing innerPrefix
{prefix=1, inner=1}
Tokenizing prefix + "    "
{prefix=1, +=1}
Tokenizing prefix
EXISTS
Tokenizing "    "
{}
Tokenizing N
{n=1}
Tokenizing mActive != null
{null=1, active=1, !==1, m=1}
Tokenizing mActive
EXISTS
Tokenizing null
EXISTS
Tokenizing N=mActive.size()
{size=1, (=1, active=1, )=1, ==1, m=1, n=1, .=1}
Tokenizing N
EXISTS
Tokenizing mActive.size()
EXISTS
Tokenizing mActive
EXISTS
Tokenizing size
EXISTS
Tokenizing N > 0
{0=1, n=1, >=1}
Tokenizing N
EXISTS
Tokenizing 0
EXISTS
Tokenizing writer.print(prefix)
{print=1, prefix=1, (=1, )=1, writer=1, .=1}
Tokenizing writer
EXISTS
Tokenizing print
{print=1}
Tokenizing prefix
EXISTS
Tokenizing writer.print("Active Fragments in ")
{print=1, in=1, (=1, active=1, )=1, fragments=1, writer=1, .=1}
Tokenizing writer
EXISTS
Tokenizing print
EXISTS
Tokenizing "Active Fragments in "
{in=1, active=1, fragments=1}
Tokenizing writer.print(Integer.toHexString(System.identityHashCode(this)))
{code=1, string=1, (=3, this=1, )=3, integer=1, .=3, print=1, system=1, identity=1, hex=1, writer=1, to=1, hash=1}
Tokenizing writer
EXISTS
Tokenizing print
EXISTS
Tokenizing Integer.toHexString(System.identityHashCode(this))
EXISTS
Tokenizing Integer
EXISTS
Tokenizing toHexString
EXISTS
Tokenizing System.identityHashCode(this)
EXISTS
Tokenizing System
EXISTS
Tokenizing identityHashCode
EXISTS
Tokenizing this
EXISTS
Tokenizing writer.println(":")
{println=1, (=1, )=1, :=1, writer=1, .=1}
Tokenizing writer
EXISTS
Tokenizing println
{println=1}
Tokenizing ":"
{:=1}
Tokenizing int i=0
{0=1, i=1, ==1, int=1}
Tokenizing i
{i=1}
Tokenizing 0
EXISTS
Tokenizing i < N
{i=1, <=1, n=1}
Tokenizing i
EXISTS
Tokenizing N
EXISTS
Tokenizing i++
{++=1, i=1}
Tokenizing i
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing f
EXISTS
Tokenizing mActive.get(i)
{get=1, (=1, active=1, i=1, )=1, m=1, .=1}
Tokenizing mActive
EXISTS
Tokenizing get
EXISTS
Tokenizing i
EXISTS
Tokenizing writer.print(prefix)
EXISTS
Tokenizing writer
EXISTS
Tokenizing print
EXISTS
Tokenizing prefix
EXISTS
Tokenizing writer.print("  #")
{}
Tokenizing writer
EXISTS
Tokenizing print
EXISTS
Tokenizing "  #"
{}
Tokenizing writer.print(i)
{print=1, (=1, i=1, )=1, writer=1, .=1}
Tokenizing writer
EXISTS
Tokenizing print
EXISTS
Tokenizing i
EXISTS
Tokenizing writer.print(": ")
{print=1, (=1, )=1, :=1, writer=1, .=1}
Tokenizing writer
EXISTS
Tokenizing print
EXISTS
Tokenizing ": "
{:=1}
Tokenizing writer.println(f)
{println=1, f=1, (=1, )=1, writer=1, .=1}
Tokenizing writer
EXISTS
Tokenizing println
EXISTS
Tokenizing f
EXISTS
Tokenizing f != null
{null=1, f=1, !==1}
Tokenizing f
EXISTS
Tokenizing null
EXISTS
Tokenizing f.dump(innerPrefix,fd,writer,args)
{args=1, f=1, prefix=1, (=1, )=1, dump=1, writer=1, ,=3, inner=1, .=1, fd=1}
Tokenizing f
EXISTS
Tokenizing dump
EXISTS
Tokenizing innerPrefix
EXISTS
Tokenizing fd
EXISTS
Tokenizing writer
EXISTS
Tokenizing args
EXISTS
Tokenizing mAdded != null
{null=1, added=1, !==1, m=1}
Tokenizing mAdded
EXISTS
Tokenizing null
EXISTS
Tokenizing N=mAdded.size()
{size=1, added=1, (=1, )=1, ==1, m=1, n=1, .=1}
Tokenizing N
EXISTS
Tokenizing mAdded.size()
{size=1, added=1, (=1, )=1, m=1, .=1}
Tokenizing mAdded
EXISTS
Tokenizing size
EXISTS
Tokenizing N > 0
EXISTS
Tokenizing N
EXISTS
Tokenizing 0
EXISTS
Tokenizing writer.print(prefix)
EXISTS
Tokenizing writer
EXISTS
Tokenizing print
EXISTS
Tokenizing prefix
EXISTS
Tokenizing writer.println("Added Fragments:")
{println=1, added=1, (=1, )=1, fragments=1, :=1, writer=1, .=1}
Tokenizing writer
EXISTS
Tokenizing println
EXISTS
Tokenizing "Added Fragments:"
{added=1, fragments=1, :=1}
Tokenizing int i=0
EXISTS
Tokenizing i
EXISTS
Tokenizing 0
EXISTS
Tokenizing i < N
EXISTS
Tokenizing i
EXISTS
Tokenizing N
EXISTS
Tokenizing i++
EXISTS
Tokenizing i
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing f
EXISTS
Tokenizing mAdded.get(i)
{added=1, get=1, (=1, i=1, )=1, m=1, .=1}
Tokenizing mAdded
EXISTS
Tokenizing get
EXISTS
Tokenizing i
EXISTS
Tokenizing writer.print(prefix)
EXISTS
Tokenizing writer
EXISTS
Tokenizing print
EXISTS
Tokenizing prefix
EXISTS
Tokenizing writer.print("  #")
EXISTS
Tokenizing writer
EXISTS
Tokenizing print
EXISTS
Tokenizing "  #"
EXISTS
Tokenizing writer.print(i)
EXISTS
Tokenizing writer
EXISTS
Tokenizing print
EXISTS
Tokenizing i
EXISTS
Tokenizing writer.print(": ")
EXISTS
Tokenizing writer
EXISTS
Tokenizing print
EXISTS
Tokenizing ": "
EXISTS
Tokenizing writer.println(f.toString())
{println=1, string=1, f=1, (=2, )=2, writer=1, to=1, .=2}
Tokenizing writer
EXISTS
Tokenizing println
EXISTS
Tokenizing f.toString()
{string=1, f=1, (=1, )=1, to=1, .=1}
Tokenizing f
EXISTS
Tokenizing toString
EXISTS
Tokenizing mCreatedMenus != null
{null=1, created=1, menus=1, !==1, m=1}
Tokenizing mCreatedMenus
EXISTS
Tokenizing null
EXISTS
Tokenizing N=mCreatedMenus.size()
{size=1, created=1, (=1, )=1, menus=1, ==1, m=1, n=1, .=1}
Tokenizing N
EXISTS
Tokenizing mCreatedMenus.size()
{size=1, created=1, (=1, )=1, menus=1, m=1, .=1}
Tokenizing mCreatedMenus
EXISTS
Tokenizing size
EXISTS
Tokenizing N > 0
EXISTS
Tokenizing N
EXISTS
Tokenizing 0
EXISTS
Tokenizing writer.print(prefix)
EXISTS
Tokenizing writer
EXISTS
Tokenizing print
EXISTS
Tokenizing prefix
EXISTS
Tokenizing writer.println("Fragments Created Menus:")
{println=1, created=1, (=1, )=1, fragments=1, :=1, writer=1, menus=1, .=1}
Tokenizing writer
EXISTS
Tokenizing println
EXISTS
Tokenizing "Fragments Created Menus:"
{created=1, fragments=1, :=1, menus=1}
Tokenizing int i=0
EXISTS
Tokenizing i
EXISTS
Tokenizing 0
EXISTS
Tokenizing i < N
EXISTS
Tokenizing i
EXISTS
Tokenizing N
EXISTS
Tokenizing i++
EXISTS
Tokenizing i
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing f
EXISTS
Tokenizing mCreatedMenus.get(i)
{created=1, get=1, (=1, i=1, )=1, menus=1, m=1, .=1}
Tokenizing mCreatedMenus
EXISTS
Tokenizing get
EXISTS
Tokenizing i
EXISTS
Tokenizing writer.print(prefix)
EXISTS
Tokenizing writer
EXISTS
Tokenizing print
EXISTS
Tokenizing prefix
EXISTS
Tokenizing writer.print("  #")
EXISTS
Tokenizing writer
EXISTS
Tokenizing print
EXISTS
Tokenizing "  #"
EXISTS
Tokenizing writer.print(i)
EXISTS
Tokenizing writer
EXISTS
Tokenizing print
EXISTS
Tokenizing i
EXISTS
Tokenizing writer.print(": ")
EXISTS
Tokenizing writer
EXISTS
Tokenizing print
EXISTS
Tokenizing ": "
EXISTS
Tokenizing writer.println(f.toString())
EXISTS
Tokenizing writer
EXISTS
Tokenizing println
EXISTS
Tokenizing f.toString()
EXISTS
Tokenizing f
EXISTS
Tokenizing toString
EXISTS
Tokenizing mBackStack != null
EXISTS
Tokenizing mBackStack
EXISTS
Tokenizing null
EXISTS
Tokenizing N=mBackStack.size()
{stack=1, size=1, (=1, back=1, )=1, ==1, m=1, n=1, .=1}
Tokenizing N
EXISTS
Tokenizing mBackStack.size()
EXISTS
Tokenizing mBackStack
EXISTS
Tokenizing size
EXISTS
Tokenizing N > 0
EXISTS
Tokenizing N
EXISTS
Tokenizing 0
EXISTS
Tokenizing writer.print(prefix)
EXISTS
Tokenizing writer
EXISTS
Tokenizing print
EXISTS
Tokenizing prefix
EXISTS
Tokenizing writer.println("Back Stack:")
{println=1, stack=1, (=1, back=1, )=1, :=1, writer=1, .=1}
Tokenizing writer
EXISTS
Tokenizing println
EXISTS
Tokenizing "Back Stack:"
{stack=1, back=1, :=1}
Tokenizing int i=0
EXISTS
Tokenizing i
EXISTS
Tokenizing 0
EXISTS
Tokenizing i < N
EXISTS
Tokenizing i
EXISTS
Tokenizing N
EXISTS
Tokenizing i++
EXISTS
Tokenizing i
EXISTS
Tokenizing BackStackRecord
EXISTS
Tokenizing bs
{bs=1}
Tokenizing mBackStack.get(i)
{stack=1, get=1, (=1, back=1, i=1, )=1, m=1, .=1}
Tokenizing mBackStack
EXISTS
Tokenizing get
EXISTS
Tokenizing i
EXISTS
Tokenizing writer.print(prefix)
EXISTS
Tokenizing writer
EXISTS
Tokenizing print
EXISTS
Tokenizing prefix
EXISTS
Tokenizing writer.print("  #")
EXISTS
Tokenizing writer
EXISTS
Tokenizing print
EXISTS
Tokenizing "  #"
EXISTS
Tokenizing writer.print(i)
EXISTS
Tokenizing writer
EXISTS
Tokenizing print
EXISTS
Tokenizing i
EXISTS
Tokenizing writer.print(": ")
EXISTS
Tokenizing writer
EXISTS
Tokenizing print
EXISTS
Tokenizing ": "
EXISTS
Tokenizing writer.println(bs.toString())
{bs=1, println=1, string=1, (=2, )=2, writer=1, to=1, .=2}
Tokenizing writer
EXISTS
Tokenizing println
EXISTS
Tokenizing bs.toString()
{bs=1, string=1, (=1, )=1, to=1, .=1}
Tokenizing bs
EXISTS
Tokenizing toString
EXISTS
Tokenizing bs.dump(innerPrefix,fd,writer,args)
{args=1, bs=1, prefix=1, (=1, )=1, dump=1, writer=1, ,=3, inner=1, .=1, fd=1}
Tokenizing bs
EXISTS
Tokenizing dump
EXISTS
Tokenizing innerPrefix
EXISTS
Tokenizing fd
EXISTS
Tokenizing writer
EXISTS
Tokenizing args
EXISTS
Tokenizing this
EXISTS
Tokenizing mBackStackIndices != null
{stack=1, indices=1, null=1, back=1, !==1, m=1}
Tokenizing mBackStackIndices
EXISTS
Tokenizing null
EXISTS
Tokenizing N=mBackStackIndices.size()
{stack=1, indices=1, size=1, (=1, back=1, )=1, ==1, m=1, n=1, .=1}
Tokenizing N
EXISTS
Tokenizing mBackStackIndices.size()
{stack=1, indices=1, size=1, (=1, back=1, )=1, m=1, .=1}
Tokenizing mBackStackIndices
EXISTS
Tokenizing size
EXISTS
Tokenizing N > 0
EXISTS
Tokenizing N
EXISTS
Tokenizing 0
EXISTS
Tokenizing writer.print(prefix)
EXISTS
Tokenizing writer
EXISTS
Tokenizing print
EXISTS
Tokenizing prefix
EXISTS
Tokenizing writer.println("Back Stack Indices:")
{println=1, stack=1, indices=1, (=1, back=1, )=1, :=1, writer=1, .=1}
Tokenizing writer
EXISTS
Tokenizing println
EXISTS
Tokenizing "Back Stack Indices:"
{stack=1, indices=1, back=1, :=1}
Tokenizing int i=0
EXISTS
Tokenizing i
EXISTS
Tokenizing 0
EXISTS
Tokenizing i < N
EXISTS
Tokenizing i
EXISTS
Tokenizing N
EXISTS
Tokenizing i++
EXISTS
Tokenizing i
EXISTS
Tokenizing BackStackRecord
EXISTS
Tokenizing bs
EXISTS
Tokenizing mBackStackIndices.get(i)
{stack=1, indices=1, get=1, (=1, back=1, i=1, )=1, m=1, .=1}
Tokenizing mBackStackIndices
EXISTS
Tokenizing get
EXISTS
Tokenizing i
EXISTS
Tokenizing writer.print(prefix)
EXISTS
Tokenizing writer
EXISTS
Tokenizing print
EXISTS
Tokenizing prefix
EXISTS
Tokenizing writer.print("  #")
EXISTS
Tokenizing writer
EXISTS
Tokenizing print
EXISTS
Tokenizing "  #"
EXISTS
Tokenizing writer.print(i)
EXISTS
Tokenizing writer
EXISTS
Tokenizing print
EXISTS
Tokenizing i
EXISTS
Tokenizing writer.print(": ")
EXISTS
Tokenizing writer
EXISTS
Tokenizing print
EXISTS
Tokenizing ": "
EXISTS
Tokenizing writer.println(bs)
{bs=1, println=1, (=1, )=1, writer=1, .=1}
Tokenizing writer
EXISTS
Tokenizing println
EXISTS
Tokenizing bs
EXISTS
Tokenizing mAvailBackStackIndices != null && mAvailBackStackIndices.size() > 0
{&&=1, avail=2, stack=2, (=1, back=2, )=1, m=2, .=1, 0=1, indices=2, null=1, size=1, !==1, >=1}
Tokenizing mAvailBackStackIndices != null
{avail=1, stack=1, indices=1, null=1, back=1, !==1, m=1}
Tokenizing mAvailBackStackIndices
EXISTS
Tokenizing null
EXISTS
Tokenizing mAvailBackStackIndices.size() > 0
{0=1, avail=1, stack=1, indices=1, size=1, (=1, back=1, )=1, m=1, .=1, >=1}
Tokenizing mAvailBackStackIndices.size()
{avail=1, stack=1, indices=1, size=1, (=1, back=1, )=1, m=1, .=1}
Tokenizing mAvailBackStackIndices
EXISTS
Tokenizing size
EXISTS
Tokenizing 0
EXISTS
Tokenizing writer.print(prefix)
EXISTS
Tokenizing writer
EXISTS
Tokenizing print
EXISTS
Tokenizing prefix
EXISTS
Tokenizing writer.print("mAvailBackStackIndices: ")
{avail=1, print=1, stack=1, indices=1, (=1, back=1, )=1, :=1, writer=1, m=1, .=1}
Tokenizing writer
EXISTS
Tokenizing print
EXISTS
Tokenizing "mAvailBackStackIndices: "
{avail=1, stack=1, indices=1, back=1, :=1, m=1}
Tokenizing writer.println(Arrays.toString(mAvailBackStackIndices.toArray()))
{avail=1, stack=1, string=1, (=3, back=1, )=3, m=1, .=3, println=1, indices=1, array=1, writer=1, arrays=1, to=2}
Tokenizing writer
EXISTS
Tokenizing println
EXISTS
Tokenizing Arrays.toString(mAvailBackStackIndices.toArray())
{avail=1, stack=1, indices=1, string=1, array=1, (=2, back=1, )=2, arrays=1, to=2, m=1, .=2}
Tokenizing Arrays
EXISTS
Tokenizing toString
EXISTS
Tokenizing mAvailBackStackIndices.toArray()
{avail=1, stack=1, indices=1, array=1, (=1, back=1, )=1, to=1, m=1, .=1}
Tokenizing mAvailBackStackIndices
EXISTS
Tokenizing toArray
{array=1, to=1}
Tokenizing mPendingActions != null
{null=1, pending=1, !==1, m=1, actions=1}
Tokenizing mPendingActions
EXISTS
Tokenizing null
EXISTS
Tokenizing N=mPendingActions.size()
{size=1, pending=1, (=1, )=1, ==1, m=1, actions=1, n=1, .=1}
Tokenizing N
EXISTS
Tokenizing mPendingActions.size()
{size=1, pending=1, (=1, )=1, m=1, actions=1, .=1}
Tokenizing mPendingActions
EXISTS
Tokenizing size
EXISTS
Tokenizing N > 0
EXISTS
Tokenizing N
EXISTS
Tokenizing 0
EXISTS
Tokenizing writer.print(prefix)
EXISTS
Tokenizing writer
EXISTS
Tokenizing print
EXISTS
Tokenizing prefix
EXISTS
Tokenizing writer.println("Pending Actions:")
{println=1, pending=1, (=1, )=1, :=1, writer=1, actions=1, .=1}
Tokenizing writer
EXISTS
Tokenizing println
EXISTS
Tokenizing "Pending Actions:"
{pending=1, :=1, actions=1}
Tokenizing int i=0
EXISTS
Tokenizing i
EXISTS
Tokenizing 0
EXISTS
Tokenizing i < N
EXISTS
Tokenizing i
EXISTS
Tokenizing N
EXISTS
Tokenizing i++
EXISTS
Tokenizing i
EXISTS
Tokenizing Runnable
EXISTS
Tokenizing r
{r=1}
Tokenizing mPendingActions.get(i)
{pending=1, get=1, (=1, i=1, )=1, m=1, actions=1, .=1}
Tokenizing mPendingActions
EXISTS
Tokenizing get
EXISTS
Tokenizing i
EXISTS
Tokenizing writer.print(prefix)
EXISTS
Tokenizing writer
EXISTS
Tokenizing print
EXISTS
Tokenizing prefix
EXISTS
Tokenizing writer.print("  #")
EXISTS
Tokenizing writer
EXISTS
Tokenizing print
EXISTS
Tokenizing "  #"
EXISTS
Tokenizing writer.print(i)
EXISTS
Tokenizing writer
EXISTS
Tokenizing print
EXISTS
Tokenizing i
EXISTS
Tokenizing writer.print(": ")
EXISTS
Tokenizing writer
EXISTS
Tokenizing print
EXISTS
Tokenizing ": "
EXISTS
Tokenizing writer.println(r)
{println=1, r=1, (=1, )=1, writer=1, .=1}
Tokenizing writer
EXISTS
Tokenizing println
EXISTS
Tokenizing r
EXISTS
Tokenizing writer.print(prefix)
EXISTS
Tokenizing writer
EXISTS
Tokenizing print
EXISTS
Tokenizing prefix
EXISTS
Tokenizing writer.println("FragmentManager misc state:")
{println=1, fragment=1, manager=1, (=1, )=1, :=1, writer=1, state=1, .=1, misc=1}
Tokenizing writer
EXISTS
Tokenizing println
EXISTS
Tokenizing "FragmentManager misc state:"
{fragment=1, manager=1, :=1, state=1, misc=1}
Tokenizing writer.print(prefix)
EXISTS
Tokenizing writer
EXISTS
Tokenizing print
EXISTS
Tokenizing prefix
EXISTS
Tokenizing writer.print("  mCurState=")
{cur=1, print=1, (=1, )=1, writer=1, state=1, m=1, ==1, .=1}
Tokenizing writer
EXISTS
Tokenizing print
EXISTS
Tokenizing "  mCurState="
{cur=1, state=1, m=1, ==1}
Tokenizing writer.print(mCurState)
{cur=1, print=1, (=1, )=1, writer=1, state=1, m=1, .=1}
Tokenizing writer
EXISTS
Tokenizing print
EXISTS
Tokenizing mCurState
EXISTS
Tokenizing writer.print(" mStateSaved=")
{print=1, saved=1, (=1, )=1, writer=1, state=1, m=1, ==1, .=1}
Tokenizing writer
EXISTS
Tokenizing print
EXISTS
Tokenizing " mStateSaved="
{saved=1, state=1, m=1, ==1}
Tokenizing writer.print(mStateSaved)
{print=1, saved=1, (=1, )=1, writer=1, state=1, m=1, .=1}
Tokenizing writer
EXISTS
Tokenizing print
EXISTS
Tokenizing mStateSaved
EXISTS
Tokenizing writer.print(" mDestroyed=")
{print=1, destroyed=1, (=1, )=1, writer=1, m=1, ==1, .=1}
Tokenizing writer
EXISTS
Tokenizing print
EXISTS
Tokenizing " mDestroyed="
{destroyed=1, m=1, ==1}
Tokenizing writer.println(mDestroyed)
{println=1, destroyed=1, (=1, )=1, writer=1, m=1, .=1}
Tokenizing writer
EXISTS
Tokenizing println
EXISTS
Tokenizing mDestroyed
EXISTS
Tokenizing mNeedMenuInvalidate
EXISTS
Tokenizing writer.print(prefix)
EXISTS
Tokenizing writer
EXISTS
Tokenizing print
EXISTS
Tokenizing prefix
EXISTS
Tokenizing writer.print("  mNeedMenuInvalidate=")
{print=1, need=1, (=1, )=1, writer=1, invalidate=1, menu=1, m=1, ==1, .=1}
Tokenizing writer
EXISTS
Tokenizing print
EXISTS
Tokenizing "  mNeedMenuInvalidate="
{need=1, invalidate=1, menu=1, m=1, ==1}
Tokenizing writer.println(mNeedMenuInvalidate)
{println=1, need=1, (=1, )=1, writer=1, invalidate=1, menu=1, m=1, .=1}
Tokenizing writer
EXISTS
Tokenizing println
EXISTS
Tokenizing mNeedMenuInvalidate
EXISTS
Tokenizing mNoTransactionsBecause != null
{no=1, null=1, because=1, transactions=1, !==1, m=1}
Tokenizing mNoTransactionsBecause
EXISTS
Tokenizing null
EXISTS
Tokenizing writer.print(prefix)
EXISTS
Tokenizing writer
EXISTS
Tokenizing print
EXISTS
Tokenizing prefix
EXISTS
Tokenizing writer.print("  mNoTransactionsBecause=")
{no=1, print=1, (=1, )=1, writer=1, because=1, transactions=1, m=1, ==1, .=1}
Tokenizing writer
EXISTS
Tokenizing print
EXISTS
Tokenizing "  mNoTransactionsBecause="
{no=1, because=1, transactions=1, m=1, ==1}
Tokenizing writer.println(mNoTransactionsBecause)
{no=1, println=1, (=1, )=1, writer=1, because=1, transactions=1, m=1, .=1}
Tokenizing writer
EXISTS
Tokenizing println
EXISTS
Tokenizing mNoTransactionsBecause
EXISTS
Tokenizing mAvailIndices != null && mAvailIndices.size() > 0
{&&=1, 0=1, avail=2, indices=2, null=1, size=1, (=1, )=1, !==1, m=2, .=1, >=1}
Tokenizing mAvailIndices != null
{avail=1, indices=1, null=1, !==1, m=1}
Tokenizing mAvailIndices
EXISTS
Tokenizing null
EXISTS
Tokenizing mAvailIndices.size() > 0
{0=1, avail=1, indices=1, size=1, (=1, )=1, m=1, .=1, >=1}
Tokenizing mAvailIndices.size()
{avail=1, indices=1, size=1, (=1, )=1, m=1, .=1}
Tokenizing mAvailIndices
EXISTS
Tokenizing size
EXISTS
Tokenizing 0
EXISTS
Tokenizing writer.print(prefix)
EXISTS
Tokenizing writer
EXISTS
Tokenizing print
EXISTS
Tokenizing prefix
EXISTS
Tokenizing writer.print("  mAvailIndices: ")
{avail=1, print=1, indices=1, (=1, )=1, :=1, writer=1, m=1, .=1}
Tokenizing writer
EXISTS
Tokenizing print
EXISTS
Tokenizing "  mAvailIndices: "
{avail=1, indices=1, :=1, m=1}
Tokenizing writer.println(Arrays.toString(mAvailIndices.toArray()))
{avail=1, println=1, indices=1, string=1, array=1, (=3, )=3, writer=1, arrays=1, to=2, m=1, .=3}
Tokenizing writer
EXISTS
Tokenizing println
EXISTS
Tokenizing Arrays.toString(mAvailIndices.toArray())
{avail=1, indices=1, string=1, array=1, (=2, )=2, arrays=1, to=2, m=1, .=2}
Tokenizing Arrays
EXISTS
Tokenizing toString
EXISTS
Tokenizing mAvailIndices.toArray()
{avail=1, indices=1, array=1, (=1, )=1, to=1, m=1, .=1}
Tokenizing mAvailIndices
EXISTS
Tokenizing toArray
EXISTS
Tokenizing Animator
EXISTS
Tokenizing loadAnimator
{load=1, animator=1}
Tokenizing Fragment
EXISTS
Tokenizing fragment
EXISTS
Tokenizing transit
{transit=1}
Tokenizing enter
{enter=1}
Tokenizing transitionStyle
{style=1, transition=1}
Tokenizing Animator
EXISTS
Tokenizing animObj
{obj=1, anim=1}
Tokenizing fragment.onCreateAnimator(transit,enter,fragment.mNextAnim)
{next=1, (=1, )=1, ,=2, m=1, .=2, fragment=2, transit=1, create=1, enter=1, anim=1, animator=1, on=1}
Tokenizing fragment
EXISTS
Tokenizing onCreateAnimator
{create=1, animator=1, on=1}
Tokenizing transit
EXISTS
Tokenizing enter
EXISTS
Tokenizing fragment.mNextAnim
{next=1, fragment=1, anim=1, m=1, .=1}
Tokenizing fragment
EXISTS
Tokenizing mNextAnim
{next=1, anim=1, m=1}
Tokenizing animObj != null
{null=1, obj=1, anim=1, !==1}
Tokenizing animObj
EXISTS
Tokenizing null
EXISTS
Tokenizing animObj
EXISTS
Tokenizing fragment.mNextAnim != 0
{next=1, 0=1, fragment=1, anim=1, !==1, m=1, .=1}
Tokenizing fragment.mNextAnim
EXISTS
Tokenizing fragment
EXISTS
Tokenizing mNextAnim
EXISTS
Tokenizing 0
EXISTS
Tokenizing Animator
EXISTS
Tokenizing anim
{anim=1}
Tokenizing AnimatorInflater.loadAnimator(mActivity,fragment.mNextAnim)
{next=1, fragment=1, load=1, activity=1, (=1, )=1, ,=1, anim=1, animator=2, inflater=1, m=2, .=2}
Tokenizing AnimatorInflater
EXISTS
Tokenizing loadAnimator
EXISTS
Tokenizing mActivity
EXISTS
Tokenizing fragment.mNextAnim
EXISTS
Tokenizing fragment
EXISTS
Tokenizing mNextAnim
EXISTS
Tokenizing anim != null
{null=1, anim=1, !==1}
Tokenizing anim
EXISTS
Tokenizing null
EXISTS
Tokenizing anim
EXISTS
Tokenizing transit == 0
{===1, 0=1, transit=1}
Tokenizing transit
EXISTS
Tokenizing 0
EXISTS
Tokenizing null
EXISTS
Tokenizing styleIndex
{index=1, style=1}
Tokenizing transitToStyleIndex(transit,enter)
{transit=2, (=1, index=1, )=1, style=1, to=1, enter=1, ,=1}
Tokenizing transitToStyleIndex
{transit=1, index=1, style=1, to=1}
Tokenizing transit
EXISTS
Tokenizing enter
EXISTS
Tokenizing styleIndex < 0
{0=1, index=1, style=1, <=1}
Tokenizing styleIndex
EXISTS
Tokenizing 0
EXISTS
Tokenizing null
EXISTS
Tokenizing transitionStyle == 0 && mActivity.getWindow() != null
{===1, &&=1, activity=1, (=1, )=1, m=1, transition=1, .=1, 0=1, null=1, get=1, style=1, window=1, !==1}
Tokenizing transitionStyle == 0
{===1, 0=1, style=1, transition=1}
Tokenizing transitionStyle
EXISTS
Tokenizing 0
EXISTS
Tokenizing mActivity.getWindow() != null
{activity=1, null=1, get=1, (=1, )=1, window=1, !==1, m=1, .=1}
Tokenizing mActivity.getWindow()
{activity=1, get=1, (=1, )=1, window=1, m=1, .=1}
Tokenizing mActivity
EXISTS
Tokenizing getWindow
{get=1, window=1}
Tokenizing null
EXISTS
Tokenizing transitionStyle=mActivity.getWindow().getAttributes().windowAnimations
{activity=1, get=2, animations=1, (=2, )=2, style=1, attributes=1, window=2, ==1, m=1, transition=1, .=3}
Tokenizing transitionStyle
EXISTS
Tokenizing mActivity.getWindow().getAttributes().windowAnimations
{activity=1, get=2, animations=1, (=2, )=2, attributes=1, window=2, m=1, .=3}
Tokenizing mActivity.getWindow().getAttributes()
{activity=1, get=2, (=2, )=2, attributes=1, window=1, m=1, .=2}
Tokenizing mActivity.getWindow()
EXISTS
Tokenizing mActivity
EXISTS
Tokenizing getWindow
EXISTS
Tokenizing getAttributes
{get=1, attributes=1}
Tokenizing windowAnimations
{animations=1, window=1}
Tokenizing transitionStyle == 0
EXISTS
Tokenizing transitionStyle
EXISTS
Tokenizing 0
EXISTS
Tokenizing null
EXISTS
Tokenizing TypedArray
EXISTS
Tokenizing attrs
{attrs=1}
Tokenizing mActivity.obtainStyledAttributes(transitionStyle,com.android.internal.R.styleable.FragmentAnimation)
{obtain=1, com=1, internal=1, activity=1, android=1, (=1, )=1, styled=1, styleable=1, ,=1, m=1, .=6, transition=1, animation=1, r=1, fragment=1, attributes=1, style=1}
Tokenizing mActivity
EXISTS
Tokenizing obtainStyledAttributes
{obtain=1, attributes=1, styled=1}
Tokenizing transitionStyle
EXISTS
Tokenizing com.android.internal.R.styleable.FragmentAnimation
{com=1, internal=1, r=1, fragment=1, android=1, styleable=1, .=5, animation=1}
Tokenizing com.android.internal.R.styleable
{com=1, internal=1, r=1, android=1, styleable=1, .=4}
Tokenizing com.android.internal.R
{com=1, internal=1, r=1, android=1, .=3}
Tokenizing com.android.internal
{com=1, internal=1, android=1, .=2}
Tokenizing com.android
{com=1, android=1, .=1}
Tokenizing com
{com=1}
Tokenizing android
EXISTS
Tokenizing internal
{internal=1}
Tokenizing R
{r=1}
Tokenizing styleable
{styleable=1}
Tokenizing FragmentAnimation
{fragment=1, animation=1}
Tokenizing anim
EXISTS
Tokenizing attrs.getResourceId(styleIndex,0)
{0=1, resource=1, get=1, (=1, index=1, )=1, style=1, id=1, ,=1, .=1, attrs=1}
Tokenizing attrs
EXISTS
Tokenizing getResourceId
{resource=1, get=1, id=1}
Tokenizing styleIndex
EXISTS
Tokenizing 0
EXISTS
Tokenizing attrs.recycle()
{recycle=1, (=1, )=1, .=1, attrs=1}
Tokenizing attrs
EXISTS
Tokenizing recycle
{recycle=1}
Tokenizing anim == 0
{===1, 0=1, anim=1}
Tokenizing anim
EXISTS
Tokenizing 0
EXISTS
Tokenizing null
EXISTS
Tokenizing AnimatorInflater.loadAnimator(mActivity,anim)
{load=1, activity=1, (=1, )=1, ,=1, anim=1, animator=2, inflater=1, m=1, .=1}
Tokenizing AnimatorInflater
EXISTS
Tokenizing loadAnimator
EXISTS
Tokenizing mActivity
EXISTS
Tokenizing anim
EXISTS
Tokenizing performPendingDeferredStart
{deferred=1, pending=1, perform=1, start=1}
Tokenizing Fragment
EXISTS
Tokenizing f
EXISTS
Tokenizing f.mDeferStart
{defer=1, f=1, start=1, m=1, .=1}
Tokenizing f
EXISTS
Tokenizing mDeferStart
{defer=1, start=1, m=1}
Tokenizing mExecutingActions
EXISTS
Tokenizing mHavePendingDeferredStart=true
{deferred=1, pending=1, have=1, start=1, true=1, m=1, ==1}
Tokenizing mHavePendingDeferredStart
EXISTS
Tokenizing true
{true=1}
Tokenizing f.mDeferStart=false
{defer=1, f=1, start=1, false=1, m=1, ==1, .=1}
Tokenizing f.mDeferStart
EXISTS
Tokenizing f
EXISTS
Tokenizing mDeferStart
EXISTS
Tokenizing false
EXISTS
Tokenizing moveToState(f,mCurState,0,0)
{0=2, cur=1, move=1, f=1, (=1, )=1, to=1, state=2, ,=3, m=1}
Tokenizing moveToState
{move=1, to=1, state=1}
Tokenizing f
EXISTS
Tokenizing mCurState
EXISTS
Tokenizing 0
EXISTS
Tokenizing 0
EXISTS
Tokenizing moveToState
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing f
EXISTS
Tokenizing newState
{new=1, state=1}
Tokenizing transit
EXISTS
Tokenizing transitionStyle
EXISTS
Tokenizing !f.mAdded && newState > Fragment.CREATED
{&&=1, !=1, new=1, fragment=1, added=1, f=1, created=1, state=1, m=1, .=2, >=1}
Tokenizing !f.mAdded
{!=1, added=1, f=1, m=1, .=1}
Tokenizing f.mAdded
{added=1, f=1, m=1, .=1}
Tokenizing f
EXISTS
Tokenizing mAdded
EXISTS
Tokenizing newState > Fragment.CREATED
{new=1, fragment=1, created=1, state=1, >=1, .=1}
Tokenizing newState
EXISTS
Tokenizing Fragment.CREATED
{fragment=1, created=1, .=1}
Tokenizing Fragment
EXISTS
Tokenizing CREATED
{created=1}
Tokenizing newState=Fragment.CREATED
{new=1, fragment=1, created=1, state=1, ==1, .=1}
Tokenizing newState
EXISTS
Tokenizing Fragment.CREATED
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing CREATED
EXISTS
Tokenizing f.mRemoving && newState > f.mState
{&&=1, new=1, f=2, state=2, m=2, .=2, removing=1, >=1}
Tokenizing f.mRemoving
{f=1, m=1, .=1, removing=1}
Tokenizing f
EXISTS
Tokenizing mRemoving
{m=1, removing=1}
Tokenizing newState > f.mState
{new=1, f=1, state=2, m=1, >=1, .=1}
Tokenizing newState
EXISTS
Tokenizing f.mState
{f=1, state=1, m=1, .=1}
Tokenizing f
EXISTS
Tokenizing mState
EXISTS
Tokenizing newState=f.mState
{new=1, f=1, state=2, ==1, m=1, .=1}
Tokenizing newState
EXISTS
Tokenizing f.mState
EXISTS
Tokenizing f
EXISTS
Tokenizing mState
EXISTS
Tokenizing f.mDeferStart && f.mState < Fragment.STARTED && newState > Fragment.STOPPED
{&&=2, new=1, defer=1, stopped=1, f=2, start=1, started=1, m=2, .=4, fragment=2, state=2, <=1, >=1}
Tokenizing f.mDeferStart && f.mState < Fragment.STARTED
{&&=1, defer=1, fragment=1, f=2, start=1, started=1, state=1, <=1, m=2, .=3}
Tokenizing f.mDeferStart
EXISTS
Tokenizing f
EXISTS
Tokenizing mDeferStart
EXISTS
Tokenizing f.mState < Fragment.STARTED
{fragment=1, f=1, started=1, state=1, <=1, m=1, .=2}
Tokenizing f.mState
EXISTS
Tokenizing f
EXISTS
Tokenizing mState
EXISTS
Tokenizing Fragment.STARTED
{fragment=1, started=1, .=1}
Tokenizing Fragment
EXISTS
Tokenizing STARTED
{started=1}
Tokenizing newState > Fragment.STOPPED
{new=1, fragment=1, stopped=1, state=1, >=1, .=1}
Tokenizing newState
EXISTS
Tokenizing Fragment.STOPPED
{fragment=1, stopped=1, .=1}
Tokenizing Fragment
EXISTS
Tokenizing STOPPED
{stopped=1}
Tokenizing newState=Fragment.STOPPED
{new=1, fragment=1, stopped=1, state=1, ==1, .=1}
Tokenizing newState
EXISTS
Tokenizing Fragment.STOPPED
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing STOPPED
EXISTS
Tokenizing f.mState < newState
{new=1, f=1, state=2, <=1, m=1, .=1}
Tokenizing f.mState
EXISTS
Tokenizing f
EXISTS
Tokenizing mState
EXISTS
Tokenizing newState
EXISTS
Tokenizing f.mFromLayout && !f.mInLayout
{layout=2, &&=1, !=1, in=1, f=2, from=1, m=2, .=2}
Tokenizing f.mFromLayout
{layout=1, f=1, from=1, m=1, .=1}
Tokenizing f
EXISTS
Tokenizing mFromLayout
{layout=1, from=1, m=1}
Tokenizing !f.mInLayout
{layout=1, !=1, in=1, f=1, m=1, .=1}
Tokenizing f.mInLayout
{layout=1, in=1, f=1, m=1, .=1}
Tokenizing f
EXISTS
Tokenizing mInLayout
{layout=1, in=1, m=1}
Tokenizing f.mAnimatingAway != null
{away=1, null=1, animating=1, f=1, !==1, m=1, .=1}
Tokenizing f.mAnimatingAway
{away=1, animating=1, f=1, m=1, .=1}
Tokenizing f
EXISTS
Tokenizing mAnimatingAway
{away=1, animating=1, m=1}
Tokenizing null
EXISTS
Tokenizing f.mAnimatingAway=null
{away=1, null=1, animating=1, f=1, m=1, ==1, .=1}
Tokenizing f.mAnimatingAway
EXISTS
Tokenizing f
EXISTS
Tokenizing mAnimatingAway
EXISTS
Tokenizing null
EXISTS
Tokenizing moveToState(f,f.mStateAfterAnimating,0,0)
{0=2, move=1, animating=1, f=2, (=1, )=1, to=1, state=2, after=1, ,=3, m=1, .=1}
Tokenizing moveToState
EXISTS
Tokenizing f
EXISTS
Tokenizing f.mStateAfterAnimating
{animating=1, f=1, state=1, after=1, m=1, .=1}
Tokenizing f
EXISTS
Tokenizing mStateAfterAnimating
{animating=1, state=1, after=1, m=1}
Tokenizing 0
EXISTS
Tokenizing 0
EXISTS
Tokenizing f.mState
EXISTS
Tokenizing f
EXISTS
Tokenizing mState
EXISTS
Tokenizing Fragment.INITIALIZING
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing INITIALIZING
EXISTS
Tokenizing DEBUG
EXISTS
Tokenizing Log.v(TAG,"moveto CREATED: " + f)
{log=1, v=1, created=1, f=1, (=1, )=1, :=1, tag=1, +=1, ,=1, .=1, moveto=1}
Tokenizing Log
EXISTS
Tokenizing v
{v=1}
Tokenizing TAG
EXISTS
Tokenizing "moveto CREATED: " + f
{created=1, f=1, :=1, +=1, moveto=1}
Tokenizing "moveto CREATED: "
{created=1, :=1, moveto=1}
Tokenizing f
EXISTS
Tokenizing f.mSavedFragmentState != null
{fragment=1, null=1, saved=1, f=1, state=1, !==1, m=1, .=1}
Tokenizing f.mSavedFragmentState
{fragment=1, saved=1, f=1, state=1, m=1, .=1}
Tokenizing f
EXISTS
Tokenizing mSavedFragmentState
{fragment=1, saved=1, state=1, m=1}
Tokenizing null
EXISTS
Tokenizing f.mSavedViewState=f.mSavedFragmentState.getSparseParcelableArray(FragmentManagerImpl.VIEW_STATE_TAG)
{manager=1, saved=2, f=2, (=1, )=1, m=2, .=4, impl=1, view=1, fragment=2, parcelable=1, sparse=1, array=1, get=1, state=2, ==1, view_state_tag=1}
Tokenizing f.mSavedViewState
{view=1, saved=1, f=1, state=1, m=1, .=1}
Tokenizing f
EXISTS
Tokenizing mSavedViewState
{view=1, saved=1, state=1, m=1}
Tokenizing f.mSavedFragmentState.getSparseParcelableArray(FragmentManagerImpl.VIEW_STATE_TAG)
{manager=1, saved=1, f=1, (=1, )=1, m=1, .=3, impl=1, fragment=2, parcelable=1, sparse=1, array=1, get=1, state=1, view_state_tag=1}
Tokenizing f.mSavedFragmentState
EXISTS
Tokenizing f
EXISTS
Tokenizing mSavedFragmentState
EXISTS
Tokenizing getSparseParcelableArray
{parcelable=1, sparse=1, array=1, get=1}
Tokenizing FragmentManagerImpl.VIEW_STATE_TAG
{impl=1, fragment=1, manager=1, view_state_tag=1, .=1}
Tokenizing FragmentManagerImpl
EXISTS
Tokenizing VIEW_STATE_TAG
EXISTS
Tokenizing f.mTarget=getFragment(f.mSavedFragmentState,FragmentManagerImpl.TARGET_STATE_TAG)
{manager=1, saved=1, f=2, (=1, )=1, ,=1, m=2, .=3, target=1, impl=1, fragment=3, get=1, state=1, ==1, target_state_tag=1}
Tokenizing f.mTarget
{f=1, m=1, .=1, target=1}
Tokenizing f
EXISTS
Tokenizing mTarget
{m=1, target=1}
Tokenizing getFragment(f.mSavedFragmentState,FragmentManagerImpl.TARGET_STATE_TAG)
{manager=1, saved=1, f=1, (=1, )=1, ,=1, m=1, .=2, impl=1, fragment=3, get=1, state=1, target_state_tag=1}
Tokenizing getFragment
EXISTS
Tokenizing f.mSavedFragmentState
EXISTS
Tokenizing f
EXISTS
Tokenizing mSavedFragmentState
EXISTS
Tokenizing FragmentManagerImpl.TARGET_STATE_TAG
{impl=1, fragment=1, manager=1, .=1, target_state_tag=1}
Tokenizing FragmentManagerImpl
EXISTS
Tokenizing TARGET_STATE_TAG
EXISTS
Tokenizing f.mTarget != null
{null=1, f=1, !==1, m=1, .=1, target=1}
Tokenizing f.mTarget
EXISTS
Tokenizing f
EXISTS
Tokenizing mTarget
EXISTS
Tokenizing null
EXISTS
Tokenizing f.mTargetRequestCode=f.mSavedFragmentState.getInt(FragmentManagerImpl.TARGET_REQUEST_CODE_STATE_TAG,0)
{target_request_code_state_tag=1, request=1, code=1, manager=1, saved=1, f=2, (=1, )=1, ,=1, m=2, .=4, int=1, target=1, 0=1, impl=1, fragment=2, get=1, state=1, ==1}
Tokenizing f.mTargetRequestCode
{request=1, code=1, f=1, m=1, .=1, target=1}
Tokenizing f
EXISTS
Tokenizing mTargetRequestCode
{request=1, code=1, m=1, target=1}
Tokenizing f.mSavedFragmentState.getInt(FragmentManagerImpl.TARGET_REQUEST_CODE_STATE_TAG,0)
{target_request_code_state_tag=1, manager=1, saved=1, f=1, (=1, )=1, ,=1, m=1, .=3, int=1, 0=1, impl=1, fragment=2, get=1, state=1}
Tokenizing f.mSavedFragmentState
EXISTS
Tokenizing f
EXISTS
Tokenizing mSavedFragmentState
EXISTS
Tokenizing getInt
EXISTS
Tokenizing FragmentManagerImpl.TARGET_REQUEST_CODE_STATE_TAG
{target_request_code_state_tag=1, impl=1, fragment=1, manager=1, .=1}
Tokenizing FragmentManagerImpl
EXISTS
Tokenizing TARGET_REQUEST_CODE_STATE_TAG
EXISTS
Tokenizing 0
EXISTS
Tokenizing f.mUserVisibleHint=f.mSavedFragmentState.getBoolean(FragmentManagerImpl.USER_VISIBLE_HINT_TAG,true)
{visible=1, manager=1, saved=1, f=2, (=1, )=1, ,=1, m=2, .=4, impl=1, fragment=2, boolean=1, user_visible_hint_tag=1, hint=1, get=1, true=1, state=1, user=1, ==1}
Tokenizing f.mUserVisibleHint
{visible=1, f=1, hint=1, m=1, user=1, .=1}
Tokenizing f
EXISTS
Tokenizing mUserVisibleHint
{visible=1, hint=1, m=1, user=1}
Tokenizing f.mSavedFragmentState.getBoolean(FragmentManagerImpl.USER_VISIBLE_HINT_TAG,true)
{manager=1, saved=1, f=1, (=1, )=1, ,=1, m=1, .=3, impl=1, fragment=2, boolean=1, user_visible_hint_tag=1, get=1, true=1, state=1}
Tokenizing f.mSavedFragmentState
EXISTS
Tokenizing f
EXISTS
Tokenizing mSavedFragmentState
EXISTS
Tokenizing getBoolean
{boolean=1, get=1}
Tokenizing FragmentManagerImpl.USER_VISIBLE_HINT_TAG
{impl=1, fragment=1, manager=1, user_visible_hint_tag=1, .=1}
Tokenizing FragmentManagerImpl
EXISTS
Tokenizing USER_VISIBLE_HINT_TAG
EXISTS
Tokenizing true
EXISTS
Tokenizing !f.mUserVisibleHint
{!=1, visible=1, f=1, hint=1, m=1, user=1, .=1}
Tokenizing f.mUserVisibleHint
EXISTS
Tokenizing f
EXISTS
Tokenizing mUserVisibleHint
EXISTS
Tokenizing f.mDeferStart=true
{defer=1, f=1, start=1, true=1, m=1, ==1, .=1}
Tokenizing f.mDeferStart
EXISTS
Tokenizing f
EXISTS
Tokenizing mDeferStart
EXISTS
Tokenizing true
EXISTS
Tokenizing newState > Fragment.STOPPED
EXISTS
Tokenizing newState
EXISTS
Tokenizing Fragment.STOPPED
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing STOPPED
EXISTS
Tokenizing newState=Fragment.STOPPED
EXISTS
Tokenizing newState
EXISTS
Tokenizing Fragment.STOPPED
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing STOPPED
EXISTS
Tokenizing f.mActivity=mActivity
{activity=2, f=1, m=2, ==1, .=1}
Tokenizing f.mActivity
{activity=1, f=1, m=1, .=1}
Tokenizing f
EXISTS
Tokenizing mActivity
EXISTS
Tokenizing mActivity
EXISTS
Tokenizing f.mFragmentManager=mActivity.mFragments
{fragment=1, manager=1, activity=1, f=1, fragments=1, m=3, ==1, .=2}
Tokenizing f.mFragmentManager
{fragment=1, manager=1, f=1, m=1, .=1}
Tokenizing f
EXISTS
Tokenizing mFragmentManager
{fragment=1, manager=1, m=1}
Tokenizing mActivity.mFragments
{activity=1, fragments=1, m=2, .=1}
Tokenizing mActivity
EXISTS
Tokenizing mFragments
{fragments=1, m=1}
Tokenizing f.mCalled=false
{called=1, f=1, false=1, m=1, ==1, .=1}
Tokenizing f.mCalled
{called=1, f=1, m=1, .=1}
Tokenizing f
EXISTS
Tokenizing mCalled
{called=1, m=1}
Tokenizing false
EXISTS
Tokenizing f.onAttach(mActivity)
{activity=1, f=1, (=1, )=1, attach=1, m=1, .=1, on=1}
Tokenizing f
EXISTS
Tokenizing onAttach
{attach=1, on=1}
Tokenizing mActivity
EXISTS
Tokenizing !f.mCalled
{!=1, called=1, f=1, m=1, .=1}
Tokenizing f.mCalled
EXISTS
Tokenizing f
EXISTS
Tokenizing mCalled
EXISTS
Tokenizing new SuperNotCalledException("Fragment " + f + " did not call through to super.onAttach()")
{exception=1, through=1, new=1, called=1, f=1, (=2, )=2, +=2, .=1, super=2, call=1, not=2, fragment=1, to=1, attach=1, did=1, on=1}
Tokenizing SuperNotCalledException
{super=1, exception=1, not=1, called=1}
Tokenizing "Fragment " + f + " did not call through to super.onAttach()"
{through=1, f=1, (=1, )=1, +=2, .=1, call=1, super=1, fragment=1, not=1, to=1, attach=1, did=1, on=1}
Tokenizing "Fragment "
EXISTS
Tokenizing f
EXISTS
Tokenizing " did not call through to super.onAttach()"
{call=1, through=1, super=1, not=1, (=1, )=1, to=1, attach=1, did=1, .=1, on=1}
Tokenizing mActivity.onAttachFragment(f)
{fragment=1, activity=1, f=1, (=1, )=1, attach=1, m=1, .=1, on=1}
Tokenizing mActivity
EXISTS
Tokenizing onAttachFragment
{fragment=1, attach=1, on=1}
Tokenizing f
EXISTS
Tokenizing !f.mRetaining
{!=1, f=1, retaining=1, m=1, .=1}
Tokenizing f.mRetaining
{f=1, retaining=1, m=1, .=1}
Tokenizing f
EXISTS
Tokenizing mRetaining
{retaining=1, m=1}
Tokenizing f.mCalled=false
EXISTS
Tokenizing f.mCalled
EXISTS
Tokenizing f
EXISTS
Tokenizing mCalled
EXISTS
Tokenizing false
EXISTS
Tokenizing f.onCreate(f.mSavedFragmentState)
{fragment=1, saved=1, f=2, (=1, create=1, )=1, state=1, m=1, .=2, on=1}
Tokenizing f
EXISTS
Tokenizing onCreate
{create=1, on=1}
Tokenizing f.mSavedFragmentState
EXISTS
Tokenizing f
EXISTS
Tokenizing mSavedFragmentState
EXISTS
Tokenizing !f.mCalled
EXISTS
Tokenizing f.mCalled
EXISTS
Tokenizing f
EXISTS
Tokenizing mCalled
EXISTS
Tokenizing new SuperNotCalledException("Fragment " + f + " did not call through to super.onCreate()")
{exception=1, through=1, new=1, called=1, f=1, (=2, )=2, +=2, .=1, super=2, call=1, not=2, fragment=1, create=1, to=1, did=1, on=1}
Tokenizing SuperNotCalledException
EXISTS
Tokenizing "Fragment " + f + " did not call through to super.onCreate()"
{through=1, f=1, (=1, )=1, +=2, .=1, call=1, super=1, fragment=1, not=1, create=1, to=1, did=1, on=1}
Tokenizing "Fragment "
EXISTS
Tokenizing f
EXISTS
Tokenizing " did not call through to super.onCreate()"
{call=1, through=1, super=1, not=1, (=1, create=1, )=1, to=1, did=1, .=1, on=1}
Tokenizing f.mRetaining=false
{f=1, false=1, retaining=1, m=1, ==1, .=1}
Tokenizing f.mRetaining
EXISTS
Tokenizing f
EXISTS
Tokenizing mRetaining
EXISTS
Tokenizing false
EXISTS
Tokenizing f.mFromLayout
EXISTS
Tokenizing f
EXISTS
Tokenizing mFromLayout
EXISTS
Tokenizing f.mView=f.onCreateView(f.getLayoutInflater(f.mSavedFragmentState),null,f.mSavedFragmentState)
{saved=2, f=5, (=2, )=2, ,=2, m=3, .=5, layout=1, view=2, fragment=2, null=1, get=1, create=1, state=2, ==1, inflater=1, on=1}
Tokenizing f.mView
{view=1, f=1, m=1, .=1}
Tokenizing f
EXISTS
Tokenizing mView
{view=1, m=1}
Tokenizing f.onCreateView(f.getLayoutInflater(f.mSavedFragmentState),null,f.mSavedFragmentState)
{saved=2, f=4, (=2, )=2, ,=2, m=2, .=4, layout=1, view=1, fragment=2, null=1, get=1, create=1, state=2, inflater=1, on=1}
Tokenizing f
EXISTS
Tokenizing onCreateView
{view=1, create=1, on=1}
Tokenizing f.getLayoutInflater(f.mSavedFragmentState)
{layout=1, fragment=1, saved=1, f=2, get=1, (=1, )=1, state=1, inflater=1, m=1, .=2}
Tokenizing f
EXISTS
Tokenizing getLayoutInflater
{layout=1, get=1, inflater=1}
Tokenizing f.mSavedFragmentState
EXISTS
Tokenizing f
EXISTS
Tokenizing mSavedFragmentState
EXISTS
Tokenizing null
EXISTS
Tokenizing f.mSavedFragmentState
EXISTS
Tokenizing f
EXISTS
Tokenizing mSavedFragmentState
EXISTS
Tokenizing f.mView != null
{view=1, null=1, f=1, !==1, m=1, .=1}
Tokenizing f.mView
EXISTS
Tokenizing f
EXISTS
Tokenizing mView
EXISTS
Tokenizing null
EXISTS
Tokenizing f.mView.setSaveFromParentEnabled(false)
{parent=1, view=1, set=1, f=1, save=1, (=1, false=1, )=1, from=1, m=1, .=2, enabled=1}
Tokenizing f.mView
EXISTS
Tokenizing f
EXISTS
Tokenizing mView
EXISTS
Tokenizing setSaveFromParentEnabled
{parent=1, set=1, save=1, from=1, enabled=1}
Tokenizing false
EXISTS
Tokenizing f.mHidden
{hidden=1, f=1, m=1, .=1}
Tokenizing f
EXISTS
Tokenizing mHidden
{hidden=1, m=1}
Tokenizing f.mView.setVisibility(View.GONE)
{view=2, set=1, visibility=1, f=1, (=1, )=1, m=1, .=3, gone=1}
Tokenizing f.mView
EXISTS
Tokenizing f
EXISTS
Tokenizing mView
EXISTS
Tokenizing setVisibility
{set=1, visibility=1}
Tokenizing View.GONE
{view=1, .=1, gone=1}
Tokenizing View
EXISTS
Tokenizing GONE
{gone=1}
Tokenizing f.onViewCreated(f.mView,f.mSavedFragmentState)
{view=2, fragment=1, saved=1, f=3, created=1, (=1, )=1, state=1, ,=1, m=2, .=3, on=1}
Tokenizing f
EXISTS
Tokenizing onViewCreated
{view=1, created=1, on=1}
Tokenizing f.mView
EXISTS
Tokenizing f
EXISTS
Tokenizing mView
EXISTS
Tokenizing f.mSavedFragmentState
EXISTS
Tokenizing f
EXISTS
Tokenizing mSavedFragmentState
EXISTS
Tokenizing Fragment.CREATED
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing CREATED
EXISTS
Tokenizing newState > Fragment.CREATED
EXISTS
Tokenizing newState
EXISTS
Tokenizing Fragment.CREATED
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing CREATED
EXISTS
Tokenizing DEBUG
EXISTS
Tokenizing Log.v(TAG,"moveto ACTIVITY_CREATED: " + f)
{activity_created=1, log=1, v=1, f=1, (=1, )=1, :=1, tag=1, +=1, ,=1, .=1, moveto=1}
Tokenizing Log
EXISTS
Tokenizing v
EXISTS
Tokenizing TAG
EXISTS
Tokenizing "moveto ACTIVITY_CREATED: " + f
{activity_created=1, f=1, :=1, +=1, moveto=1}
Tokenizing "moveto ACTIVITY_CREATED: "
{activity_created=1, :=1, moveto=1}
Tokenizing f
EXISTS
Tokenizing !f.mFromLayout
{layout=1, !=1, f=1, from=1, m=1, .=1}
Tokenizing f.mFromLayout
EXISTS
Tokenizing f
EXISTS
Tokenizing mFromLayout
EXISTS
Tokenizing ViewGroup
EXISTS
Tokenizing container
{container=1}
Tokenizing null
EXISTS
Tokenizing f.mContainerId != 0
{container=1, 0=1, f=1, id=1, !==1, m=1, .=1}
Tokenizing f.mContainerId
{container=1, f=1, id=1, m=1, .=1}
Tokenizing f
EXISTS
Tokenizing mContainerId
{container=1, id=1, m=1}
Tokenizing 0
EXISTS
Tokenizing container=(ViewGroup)mActivity.findViewById(f.mContainerId)
{container=2, activity=1, f=1, (=2, )=2, m=2, .=2, view=2, find=1, by=1, id=2, ==1, group=1}
Tokenizing container
EXISTS
Tokenizing (ViewGroup)mActivity.findViewById(f.mContainerId)
{container=1, view=2, activity=1, find=1, f=1, by=1, (=2, )=2, id=2, m=2, .=2, group=1}
Tokenizing ViewGroup
EXISTS
Tokenizing mActivity.findViewById(f.mContainerId)
{container=1, view=1, activity=1, find=1, f=1, by=1, (=1, )=1, id=2, m=2, .=2}
Tokenizing mActivity
EXISTS
Tokenizing findViewById
{view=1, find=1, by=1, id=1}
Tokenizing f.mContainerId
EXISTS
Tokenizing f
EXISTS
Tokenizing mContainerId
EXISTS
Tokenizing container == null && !f.mRestored
{container=1, ===1, &&=1, !=1, null=1, f=1, restored=1, m=1, .=1}
Tokenizing container == null
{container=1, ===1, null=1}
Tokenizing container
EXISTS
Tokenizing null
EXISTS
Tokenizing !f.mRestored
{!=1, f=1, restored=1, m=1, .=1}
Tokenizing f.mRestored
{f=1, restored=1, m=1, .=1}
Tokenizing f
EXISTS
Tokenizing mRestored
{restored=1, m=1}
Tokenizing new IllegalArgumentException("No view found for id 0x" + Integer.toHexString(f.mContainerId) + " for fragment "+ f)
{exception=1, container=1, new=1, no=1, argument=1, string=1, f=2, (=2, for=2, 0x=1, )=2, +=3, integer=1, illegal=1, m=1, .=2, view=1, fragment=1, found=1, hex=1, id=2, to=1}
Tokenizing IllegalArgumentException
EXISTS
Tokenizing "No view found for id 0x" + Integer.toHexString(f.mContainerId) + " for fragment "+ f
{container=1, no=1, string=1, f=2, for=2, 0x=1, (=1, )=1, +=3, integer=1, m=1, .=2, view=1, fragment=1, found=1, hex=1, id=2, to=1}
Tokenizing "No view found for id 0x"
{no=1, view=1, found=1, for=1, 0x=1, id=1}
Tokenizing Integer.toHexString(f.mContainerId)
{container=1, string=1, f=1, (=1, )=1, hex=1, integer=1, to=1, id=1, m=1, .=2}
Tokenizing Integer
EXISTS
Tokenizing toHexString
EXISTS
Tokenizing f.mContainerId
EXISTS
Tokenizing f
EXISTS
Tokenizing mContainerId
EXISTS
Tokenizing " for fragment "
{fragment=1, for=1}
Tokenizing f
EXISTS
Tokenizing f.mContainer=container
{container=2, f=1, m=1, ==1, .=1}
Tokenizing f.mContainer
{container=1, f=1, m=1, .=1}
Tokenizing f
EXISTS
Tokenizing mContainer
{container=1, m=1}
Tokenizing container
EXISTS
Tokenizing f.mView=f.onCreateView(f.getLayoutInflater(f.mSavedFragmentState),container,f.mSavedFragmentState)
{container=1, saved=2, f=5, (=2, )=2, ,=2, m=3, .=5, layout=1, view=2, fragment=2, get=1, create=1, state=2, ==1, inflater=1, on=1}
Tokenizing f.mView
EXISTS
Tokenizing f
EXISTS
Tokenizing mView
EXISTS
Tokenizing f.onCreateView(f.getLayoutInflater(f.mSavedFragmentState),container,f.mSavedFragmentState)
{container=1, saved=2, f=4, (=2, )=2, ,=2, m=2, .=4, layout=1, view=1, fragment=2, get=1, create=1, state=2, inflater=1, on=1}
Tokenizing f
EXISTS
Tokenizing onCreateView
EXISTS
Tokenizing f.getLayoutInflater(f.mSavedFragmentState)
EXISTS
Tokenizing f
EXISTS
Tokenizing getLayoutInflater
EXISTS
Tokenizing f.mSavedFragmentState
EXISTS
Tokenizing f
EXISTS
Tokenizing mSavedFragmentState
EXISTS
Tokenizing container
EXISTS
Tokenizing f.mSavedFragmentState
EXISTS
Tokenizing f
EXISTS
Tokenizing mSavedFragmentState
EXISTS
Tokenizing f.mView != null
EXISTS
Tokenizing f.mView
EXISTS
Tokenizing f
EXISTS
Tokenizing mView
EXISTS
Tokenizing null
EXISTS
Tokenizing f.mView.setSaveFromParentEnabled(false)
EXISTS
Tokenizing f.mView
EXISTS
Tokenizing f
EXISTS
Tokenizing mView
EXISTS
Tokenizing setSaveFromParentEnabled
EXISTS
Tokenizing false
EXISTS
Tokenizing container != null
{container=1, null=1, !==1}
Tokenizing container
EXISTS
Tokenizing null
EXISTS
Tokenizing Animator
EXISTS
Tokenizing anim
EXISTS
Tokenizing loadAnimator(f,transit,true,transitionStyle)
{load=1, f=1, transit=1, (=1, true=1, )=1, style=1, ,=3, animator=1, transition=1}
Tokenizing loadAnimator
EXISTS
Tokenizing f
EXISTS
Tokenizing transit
EXISTS
Tokenizing true
EXISTS
Tokenizing transitionStyle
EXISTS
Tokenizing anim != null
EXISTS
Tokenizing anim
EXISTS
Tokenizing null
EXISTS
Tokenizing anim.setTarget(f.mView)
{view=1, set=1, f=1, (=1, )=1, anim=1, m=1, .=2, target=1}
Tokenizing anim
EXISTS
Tokenizing setTarget
{set=1, target=1}
Tokenizing f.mView
EXISTS
Tokenizing f
EXISTS
Tokenizing mView
EXISTS
Tokenizing anim.start()
{start=1, (=1, )=1, anim=1, .=1}
Tokenizing anim
EXISTS
Tokenizing start
{start=1}
Tokenizing container.addView(f.mView)
{container=1, add=1, view=2, f=1, (=1, )=1, m=1, .=2}
Tokenizing container
EXISTS
Tokenizing addView
{add=1, view=1}
Tokenizing f.mView
EXISTS
Tokenizing f
EXISTS
Tokenizing mView
EXISTS
Tokenizing f.mHidden
EXISTS
Tokenizing f
EXISTS
Tokenizing mHidden
EXISTS
Tokenizing f.mView.setVisibility(View.GONE)
EXISTS
Tokenizing f.mView
EXISTS
Tokenizing f
EXISTS
Tokenizing mView
EXISTS
Tokenizing setVisibility
EXISTS
Tokenizing View.GONE
EXISTS
Tokenizing View
EXISTS
Tokenizing GONE
EXISTS
Tokenizing f.onViewCreated(f.mView,f.mSavedFragmentState)
EXISTS
Tokenizing f
EXISTS
Tokenizing onViewCreated
EXISTS
Tokenizing f.mView
EXISTS
Tokenizing f
EXISTS
Tokenizing mView
EXISTS
Tokenizing f.mSavedFragmentState
EXISTS
Tokenizing f
EXISTS
Tokenizing mSavedFragmentState
EXISTS
Tokenizing f.mCalled=false
EXISTS
Tokenizing f.mCalled
EXISTS
Tokenizing f
EXISTS
Tokenizing mCalled
EXISTS
Tokenizing false
EXISTS
Tokenizing f.onActivityCreated(f.mSavedFragmentState)
{fragment=1, activity=1, saved=1, f=2, created=1, (=1, )=1, state=1, m=1, .=2, on=1}
Tokenizing f
EXISTS
Tokenizing onActivityCreated
{activity=1, created=1, on=1}
Tokenizing f.mSavedFragmentState
EXISTS
Tokenizing f
EXISTS
Tokenizing mSavedFragmentState
EXISTS
Tokenizing !f.mCalled
EXISTS
Tokenizing f.mCalled
EXISTS
Tokenizing f
EXISTS
Tokenizing mCalled
EXISTS
Tokenizing new SuperNotCalledException("Fragment " + f + " did not call through to super.onActivityCreated()")
{exception=1, through=1, new=1, called=1, activity=1, f=1, created=1, (=2, )=2, +=2, .=1, super=2, call=1, not=2, fragment=1, to=1, did=1, on=1}
Tokenizing SuperNotCalledException
EXISTS
Tokenizing "Fragment " + f + " did not call through to super.onActivityCreated()"
{through=1, activity=1, f=1, created=1, (=1, )=1, +=2, .=1, call=1, super=1, fragment=1, not=1, to=1, did=1, on=1}
Tokenizing "Fragment "
EXISTS
Tokenizing f
EXISTS
Tokenizing " did not call through to super.onActivityCreated()"
{call=1, through=1, super=1, not=1, activity=1, created=1, (=1, )=1, to=1, did=1, .=1, on=1}
Tokenizing f.mView != null
EXISTS
Tokenizing f.mView
EXISTS
Tokenizing f
EXISTS
Tokenizing mView
EXISTS
Tokenizing null
EXISTS
Tokenizing f.restoreViewState()
{view=1, restore=1, f=1, (=1, )=1, state=1, .=1}
Tokenizing f
EXISTS
Tokenizing restoreViewState
{view=1, restore=1, state=1}
Tokenizing f.mSavedFragmentState=null
{fragment=1, null=1, saved=1, f=1, state=1, m=1, ==1, .=1}
Tokenizing f.mSavedFragmentState
EXISTS
Tokenizing f
EXISTS
Tokenizing mSavedFragmentState
EXISTS
Tokenizing null
EXISTS
Tokenizing Fragment.ACTIVITY_CREATED
{activity_created=1, fragment=1, .=1}
Tokenizing Fragment
EXISTS
Tokenizing ACTIVITY_CREATED
{activity_created=1}
Tokenizing Fragment.STOPPED
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing STOPPED
EXISTS
Tokenizing newState > Fragment.STOPPED
EXISTS
Tokenizing newState
EXISTS
Tokenizing Fragment.STOPPED
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing STOPPED
EXISTS
Tokenizing DEBUG
EXISTS
Tokenizing Log.v(TAG,"moveto STARTED: " + f)
{log=1, v=1, f=1, (=1, )=1, started=1, :=1, tag=1, +=1, ,=1, .=1, moveto=1}
Tokenizing Log
EXISTS
Tokenizing v
EXISTS
Tokenizing TAG
EXISTS
Tokenizing "moveto STARTED: " + f
{f=1, started=1, :=1, +=1, moveto=1}
Tokenizing "moveto STARTED: "
{started=1, :=1, moveto=1}
Tokenizing f
EXISTS
Tokenizing f.mCalled=false
EXISTS
Tokenizing f.mCalled
EXISTS
Tokenizing f
EXISTS
Tokenizing mCalled
EXISTS
Tokenizing false
EXISTS
Tokenizing f.performStart()
{f=1, perform=1, start=1, (=1, )=1, .=1}
Tokenizing f
EXISTS
Tokenizing performStart
{perform=1, start=1}
Tokenizing !f.mCalled
EXISTS
Tokenizing f.mCalled
EXISTS
Tokenizing f
EXISTS
Tokenizing mCalled
EXISTS
Tokenizing new SuperNotCalledException("Fragment " + f + " did not call through to super.onStart()")
{exception=1, through=1, new=1, called=1, f=1, (=2, start=1, )=2, +=2, .=1, super=2, call=1, not=2, fragment=1, to=1, did=1, on=1}
Tokenizing SuperNotCalledException
EXISTS
Tokenizing "Fragment " + f + " did not call through to super.onStart()"
{through=1, f=1, start=1, (=1, )=1, +=2, .=1, call=1, super=1, fragment=1, not=1, to=1, did=1, on=1}
Tokenizing "Fragment "
EXISTS
Tokenizing f
EXISTS
Tokenizing " did not call through to super.onStart()"
{call=1, through=1, super=1, not=1, start=1, (=1, )=1, to=1, did=1, .=1, on=1}
Tokenizing Fragment.STARTED
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing STARTED
EXISTS
Tokenizing newState > Fragment.STARTED
{new=1, fragment=1, started=1, state=1, >=1, .=1}
Tokenizing newState
EXISTS
Tokenizing Fragment.STARTED
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing STARTED
EXISTS
Tokenizing DEBUG
EXISTS
Tokenizing Log.v(TAG,"moveto RESUMED: " + f)
{log=1, v=1, f=1, (=1, )=1, :=1, tag=1, +=1, ,=1, resumed=1, .=1, moveto=1}
Tokenizing Log
EXISTS
Tokenizing v
EXISTS
Tokenizing TAG
EXISTS
Tokenizing "moveto RESUMED: " + f
{f=1, :=1, +=1, resumed=1, moveto=1}
Tokenizing "moveto RESUMED: "
{:=1, resumed=1, moveto=1}
Tokenizing f
EXISTS
Tokenizing f.mCalled=false
EXISTS
Tokenizing f.mCalled
EXISTS
Tokenizing f
EXISTS
Tokenizing mCalled
EXISTS
Tokenizing false
EXISTS
Tokenizing f.mResumed=true
{f=1, true=1, resumed=1, m=1, ==1, .=1}
Tokenizing f.mResumed
{f=1, resumed=1, m=1, .=1}
Tokenizing f
EXISTS
Tokenizing mResumed
{resumed=1, m=1}
Tokenizing true
EXISTS
Tokenizing f.onResume()
{resume=1, f=1, (=1, )=1, .=1, on=1}
Tokenizing f
EXISTS
Tokenizing onResume
{resume=1, on=1}
Tokenizing !f.mCalled
EXISTS
Tokenizing f.mCalled
EXISTS
Tokenizing f
EXISTS
Tokenizing mCalled
EXISTS
Tokenizing new SuperNotCalledException("Fragment " + f + " did not call through to super.onResume()")
{exception=1, through=1, resume=1, new=1, called=1, f=1, (=2, )=2, +=2, .=1, super=2, call=1, not=2, fragment=1, to=1, did=1, on=1}
Tokenizing SuperNotCalledException
EXISTS
Tokenizing "Fragment " + f + " did not call through to super.onResume()"
{through=1, resume=1, f=1, (=1, )=1, +=2, .=1, call=1, super=1, fragment=1, not=1, to=1, did=1, on=1}
Tokenizing "Fragment "
EXISTS
Tokenizing f
EXISTS
Tokenizing " did not call through to super.onResume()"
{call=1, through=1, super=1, resume=1, not=1, (=1, )=1, to=1, did=1, .=1, on=1}
Tokenizing f.mSavedFragmentState=null
EXISTS
Tokenizing f.mSavedFragmentState
EXISTS
Tokenizing f
EXISTS
Tokenizing mSavedFragmentState
EXISTS
Tokenizing null
EXISTS
Tokenizing f.mSavedViewState=null
{view=1, null=1, saved=1, f=1, state=1, m=1, ==1, .=1}
Tokenizing f.mSavedViewState
EXISTS
Tokenizing f
EXISTS
Tokenizing mSavedViewState
EXISTS
Tokenizing null
EXISTS
Tokenizing f.mState > newState
{new=1, f=1, state=2, m=1, .=1, >=1}
Tokenizing f.mState
EXISTS
Tokenizing f
EXISTS
Tokenizing mState
EXISTS
Tokenizing newState
EXISTS
Tokenizing f.mState
EXISTS
Tokenizing f
EXISTS
Tokenizing mState
EXISTS
Tokenizing Fragment.RESUMED
{fragment=1, resumed=1, .=1}
Tokenizing Fragment
EXISTS
Tokenizing RESUMED
{resumed=1}
Tokenizing newState < Fragment.RESUMED
{new=1, fragment=1, state=1, <=1, resumed=1, .=1}
Tokenizing newState
EXISTS
Tokenizing Fragment.RESUMED
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing RESUMED
EXISTS
Tokenizing DEBUG
EXISTS
Tokenizing Log.v(TAG,"movefrom RESUMED: " + f)
{movefrom=1, log=1, v=1, f=1, (=1, )=1, :=1, tag=1, +=1, ,=1, resumed=1, .=1}
Tokenizing Log
EXISTS
Tokenizing v
EXISTS
Tokenizing TAG
EXISTS
Tokenizing "movefrom RESUMED: " + f
{movefrom=1, f=1, :=1, +=1, resumed=1}
Tokenizing "movefrom RESUMED: "
{movefrom=1, :=1, resumed=1}
Tokenizing f
EXISTS
Tokenizing f.mCalled=false
EXISTS
Tokenizing f.mCalled
EXISTS
Tokenizing f
EXISTS
Tokenizing mCalled
EXISTS
Tokenizing false
EXISTS
Tokenizing f.onPause()
{f=1, (=1, )=1, .=1, pause=1, on=1}
Tokenizing f
EXISTS
Tokenizing onPause
{pause=1, on=1}
Tokenizing !f.mCalled
EXISTS
Tokenizing f.mCalled
EXISTS
Tokenizing f
EXISTS
Tokenizing mCalled
EXISTS
Tokenizing new SuperNotCalledException("Fragment " + f + " did not call through to super.onPause()")
{exception=1, through=1, new=1, called=1, f=1, (=2, )=2, +=2, .=1, pause=1, super=2, call=1, not=2, fragment=1, to=1, did=1, on=1}
Tokenizing SuperNotCalledException
EXISTS
Tokenizing "Fragment " + f + " did not call through to super.onPause()"
{through=1, f=1, (=1, )=1, +=2, .=1, pause=1, call=1, super=1, fragment=1, not=1, to=1, did=1, on=1}
Tokenizing "Fragment "
EXISTS
Tokenizing f
EXISTS
Tokenizing " did not call through to super.onPause()"
{call=1, through=1, super=1, not=1, (=1, )=1, to=1, did=1, .=1, pause=1, on=1}
Tokenizing f.mResumed=false
{f=1, false=1, resumed=1, m=1, ==1, .=1}
Tokenizing f.mResumed
EXISTS
Tokenizing f
EXISTS
Tokenizing mResumed
EXISTS
Tokenizing false
EXISTS
Tokenizing Fragment.STARTED
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing STARTED
EXISTS
Tokenizing newState < Fragment.STARTED
{new=1, fragment=1, started=1, state=1, <=1, .=1}
Tokenizing newState
EXISTS
Tokenizing Fragment.STARTED
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing STARTED
EXISTS
Tokenizing DEBUG
EXISTS
Tokenizing Log.v(TAG,"movefrom STARTED: " + f)
{movefrom=1, log=1, v=1, f=1, (=1, )=1, started=1, :=1, tag=1, +=1, ,=1, .=1}
Tokenizing Log
EXISTS
Tokenizing v
EXISTS
Tokenizing TAG
EXISTS
Tokenizing "movefrom STARTED: " + f
{movefrom=1, f=1, started=1, :=1, +=1}
Tokenizing "movefrom STARTED: "
{movefrom=1, started=1, :=1}
Tokenizing f
EXISTS
Tokenizing f.mCalled=false
EXISTS
Tokenizing f.mCalled
EXISTS
Tokenizing f
EXISTS
Tokenizing mCalled
EXISTS
Tokenizing false
EXISTS
Tokenizing f.performStop()
{stop=1, f=1, perform=1, (=1, )=1, .=1}
Tokenizing f
EXISTS
Tokenizing performStop
{stop=1, perform=1}
Tokenizing !f.mCalled
EXISTS
Tokenizing f.mCalled
EXISTS
Tokenizing f
EXISTS
Tokenizing mCalled
EXISTS
Tokenizing new SuperNotCalledException("Fragment " + f + " did not call through to super.onStop()")
{exception=1, through=1, new=1, called=1, f=1, (=2, )=2, +=2, .=1, super=2, call=1, not=2, fragment=1, stop=1, to=1, did=1, on=1}
Tokenizing SuperNotCalledException
EXISTS
Tokenizing "Fragment " + f + " did not call through to super.onStop()"
{through=1, f=1, (=1, )=1, +=2, .=1, call=1, super=1, fragment=1, not=1, stop=1, to=1, did=1, on=1}
Tokenizing "Fragment "
EXISTS
Tokenizing f
EXISTS
Tokenizing " did not call through to super.onStop()"
{call=1, through=1, super=1, not=1, stop=1, (=1, )=1, to=1, did=1, .=1, on=1}
Tokenizing Fragment.STOPPED
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing STOPPED
EXISTS
Tokenizing Fragment.ACTIVITY_CREATED
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing ACTIVITY_CREATED
EXISTS
Tokenizing newState < Fragment.ACTIVITY_CREATED
{new=1, activity_created=1, fragment=1, state=1, <=1, .=1}
Tokenizing newState
EXISTS
Tokenizing Fragment.ACTIVITY_CREATED
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing ACTIVITY_CREATED
EXISTS
Tokenizing DEBUG
EXISTS
Tokenizing Log.v(TAG,"movefrom ACTIVITY_CREATED: " + f)
{activity_created=1, movefrom=1, log=1, v=1, f=1, (=1, )=1, :=1, tag=1, +=1, ,=1, .=1}
Tokenizing Log
EXISTS
Tokenizing v
EXISTS
Tokenizing TAG
EXISTS
Tokenizing "movefrom ACTIVITY_CREATED: " + f
{activity_created=1, movefrom=1, f=1, :=1, +=1}
Tokenizing "movefrom ACTIVITY_CREATED: "
{activity_created=1, movefrom=1, :=1}
Tokenizing f
EXISTS
Tokenizing f.mView != null
EXISTS
Tokenizing f.mView
EXISTS
Tokenizing f
EXISTS
Tokenizing mView
EXISTS
Tokenizing null
EXISTS
Tokenizing !mActivity.isFinishing() && f.mSavedViewState == null
{&&=1, ===1, !=1, activity=1, saved=1, f=1, (=1, )=1, is=1, m=2, .=2, finishing=1, view=1, null=1, state=1}
Tokenizing !mActivity.isFinishing()
{finishing=1, !=1, activity=1, (=1, )=1, is=1, m=1, .=1}
Tokenizing mActivity.isFinishing()
{finishing=1, activity=1, (=1, )=1, is=1, m=1, .=1}
Tokenizing mActivity
EXISTS
Tokenizing isFinishing
{finishing=1, is=1}
Tokenizing f.mSavedViewState == null
{===1, view=1, null=1, saved=1, f=1, state=1, m=1, .=1}
Tokenizing f.mSavedViewState
EXISTS
Tokenizing f
EXISTS
Tokenizing mSavedViewState
EXISTS
Tokenizing null
EXISTS
Tokenizing saveFragmentViewState(f)
{fragment=1, view=1, f=1, save=1, (=1, )=1, state=1}
Tokenizing saveFragmentViewState
{fragment=1, view=1, save=1, state=1}
Tokenizing f
EXISTS
Tokenizing f.mCalled=false
EXISTS
Tokenizing f.mCalled
EXISTS
Tokenizing f
EXISTS
Tokenizing mCalled
EXISTS
Tokenizing false
EXISTS
Tokenizing f.performDestroyView()
{view=1, f=1, perform=1, (=1, destroy=1, )=1, .=1}
Tokenizing f
EXISTS
Tokenizing performDestroyView
{view=1, perform=1, destroy=1}
Tokenizing !f.mCalled
EXISTS
Tokenizing f.mCalled
EXISTS
Tokenizing f
EXISTS
Tokenizing mCalled
EXISTS
Tokenizing new SuperNotCalledException("Fragment " + f + " did not call through to super.onDestroyView()")
{exception=1, through=1, new=1, called=1, f=1, (=2, destroy=1, )=2, +=2, .=1, super=2, call=1, not=2, fragment=1, view=1, to=1, did=1, on=1}
Tokenizing SuperNotCalledException
EXISTS
Tokenizing "Fragment " + f + " did not call through to super.onDestroyView()"
{through=1, f=1, (=1, destroy=1, )=1, +=2, .=1, call=1, super=1, fragment=1, not=1, view=1, to=1, did=1, on=1}
Tokenizing "Fragment "
EXISTS
Tokenizing f
EXISTS
Tokenizing " did not call through to super.onDestroyView()"
{call=1, through=1, super=1, not=1, view=1, (=1, destroy=1, )=1, to=1, did=1, .=1, on=1}
Tokenizing f.mView != null && f.mContainer != null
{&&=1, container=1, view=1, null=2, f=2, !==2, m=2, .=2}
Tokenizing f.mView != null
EXISTS
Tokenizing f.mView
EXISTS
Tokenizing f
EXISTS
Tokenizing mView
EXISTS
Tokenizing null
EXISTS
Tokenizing f.mContainer != null
{container=1, null=1, f=1, !==1, m=1, .=1}
Tokenizing f.mContainer
EXISTS
Tokenizing f
EXISTS
Tokenizing mContainer
EXISTS
Tokenizing null
EXISTS
Tokenizing Animator
EXISTS
Tokenizing anim
EXISTS
Tokenizing null
EXISTS
Tokenizing mCurState > Fragment.INITIALIZING && !mDestroyed
{&&=1, cur=1, !=1, fragment=1, destroyed=1, initializing=1, state=1, m=2, >=1, .=1}
Tokenizing mCurState > Fragment.INITIALIZING
{cur=1, fragment=1, initializing=1, state=1, m=1, >=1, .=1}
Tokenizing mCurState
EXISTS
Tokenizing Fragment.INITIALIZING
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing INITIALIZING
EXISTS
Tokenizing !mDestroyed
{!=1, destroyed=1, m=1}
Tokenizing mDestroyed
EXISTS
Tokenizing anim=loadAnimator(f,transit,false,transitionStyle)
{load=1, f=1, transit=1, (=1, false=1, )=1, style=1, anim=1, ,=3, ==1, animator=1, transition=1}
Tokenizing anim
EXISTS
Tokenizing loadAnimator(f,transit,false,transitionStyle)
{load=1, f=1, transit=1, (=1, false=1, )=1, style=1, ,=3, animator=1, transition=1}
Tokenizing loadAnimator
EXISTS
Tokenizing f
EXISTS
Tokenizing transit
EXISTS
Tokenizing false
EXISTS
Tokenizing transitionStyle
EXISTS
Tokenizing anim != null
EXISTS
Tokenizing anim
EXISTS
Tokenizing null
EXISTS
Tokenizing ViewGroup
EXISTS
Tokenizing container
EXISTS
Tokenizing f.mContainer
EXISTS
Tokenizing f
EXISTS
Tokenizing mContainer
EXISTS
Tokenizing View
EXISTS
Tokenizing view
EXISTS
Tokenizing f.mView
EXISTS
Tokenizing f
EXISTS
Tokenizing mView
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing fragment
EXISTS
Tokenizing f
EXISTS
Tokenizing container.startViewTransition(view)
{container=1, view=2, start=1, (=1, )=1, .=1, transition=1}
Tokenizing container
EXISTS
Tokenizing startViewTransition
{view=1, start=1, transition=1}
Tokenizing view
EXISTS
Tokenizing f.mAnimatingAway=anim
{away=1, animating=1, f=1, anim=1, m=1, ==1, .=1}
Tokenizing f.mAnimatingAway
EXISTS
Tokenizing f
EXISTS
Tokenizing mAnimatingAway
EXISTS
Tokenizing anim
EXISTS
Tokenizing f.mStateAfterAnimating=newState
{new=1, animating=1, f=1, state=2, after=1, m=1, ==1, .=1}
Tokenizing f.mStateAfterAnimating
EXISTS
Tokenizing f
EXISTS
Tokenizing mStateAfterAnimating
EXISTS
Tokenizing newState
EXISTS
Tokenizing anim.addListener(new AnimatorListenerAdapter(){
  @Override public void onAnimationEnd(  Animator anim){
    container.endViewTransition(view);
    if (fragment.mAnimatingAway != null) {
      fragment.mAnimatingAway=null;
      moveToState(fragment,fragment.mStateAfterAnimating,0,0);
    }
  }
}
)
{@=1, container=1, away=2, listener=2, view=2, public=1, end=2, override=1, state=2, after=1, if=1, on=1, add=1, new=1, move=1, adapter=1, void=1, (=6, )=6, ,=3, m=3, .=5, transition=1, animation=1, 0=2, fragment=4, null=2, animating=3, {=3, ;=3, to=1, anim=2, !==1, animator=2, ==1, }=3}
Tokenizing anim
EXISTS
Tokenizing addListener
{add=1, listener=1}
Tokenizing new AnimatorListenerAdapter(){
  @Override public void onAnimationEnd(  Animator anim){
    container.endViewTransition(view);
    if (fragment.mAnimatingAway != null) {
      fragment.mAnimatingAway=null;
      moveToState(fragment,fragment.mStateAfterAnimating,0,0);
    }
  }
}

{@=1, container=1, away=2, listener=1, view=2, public=1, end=2, override=1, state=2, after=1, if=1, on=1, new=1, move=1, adapter=1, void=1, (=5, )=5, ,=3, m=3, .=4, transition=1, animation=1, 0=2, fragment=4, null=2, animating=3, {=3, ;=3, to=1, anim=1, !==1, animator=2, ==1, }=3}
Tokenizing AnimatorListenerAdapter
EXISTS
Tokenizing @Override
EXISTS
Tokenizing Override
EXISTS
Tokenizing onAnimationEnd
{end=1, on=1, animation=1}
Tokenizing Animator
EXISTS
Tokenizing anim
EXISTS
Tokenizing container.endViewTransition(view)
{container=1, view=2, (=1, )=1, end=1, .=1, transition=1}
Tokenizing container
EXISTS
Tokenizing endViewTransition
{view=1, end=1, transition=1}
Tokenizing view
EXISTS
Tokenizing fragment.mAnimatingAway != null
{fragment=1, away=1, null=1, animating=1, !==1, m=1, .=1}
Tokenizing fragment.mAnimatingAway
{fragment=1, away=1, animating=1, m=1, .=1}
Tokenizing fragment
EXISTS
Tokenizing mAnimatingAway
EXISTS
Tokenizing null
EXISTS
Tokenizing fragment.mAnimatingAway=null
{fragment=1, away=1, null=1, animating=1, m=1, ==1, .=1}
Tokenizing fragment.mAnimatingAway
EXISTS
Tokenizing fragment
EXISTS
Tokenizing mAnimatingAway
EXISTS
Tokenizing null
EXISTS
Tokenizing moveToState(fragment,fragment.mStateAfterAnimating,0,0)
{0=2, move=1, fragment=2, animating=1, (=1, )=1, to=1, state=2, after=1, ,=3, m=1, .=1}
Tokenizing moveToState
EXISTS
Tokenizing fragment
EXISTS
Tokenizing fragment.mStateAfterAnimating
{fragment=1, animating=1, state=1, after=1, m=1, .=1}
Tokenizing fragment
EXISTS
Tokenizing mStateAfterAnimating
EXISTS
Tokenizing 0
EXISTS
Tokenizing 0
EXISTS
Tokenizing anim.setTarget(f.mView)
EXISTS
Tokenizing anim
EXISTS
Tokenizing setTarget
EXISTS
Tokenizing f.mView
EXISTS
Tokenizing f
EXISTS
Tokenizing mView
EXISTS
Tokenizing anim.start()
EXISTS
Tokenizing anim
EXISTS
Tokenizing start
EXISTS
Tokenizing f.mContainer.removeView(f.mView)
{container=1, view=2, f=2, (=1, )=1, m=2, .=3, remove=1}
Tokenizing f.mContainer
EXISTS
Tokenizing f
EXISTS
Tokenizing mContainer
EXISTS
Tokenizing removeView
{view=1, remove=1}
Tokenizing f.mView
EXISTS
Tokenizing f
EXISTS
Tokenizing mView
EXISTS
Tokenizing f.mContainer=null
{container=1, null=1, f=1, m=1, ==1, .=1}
Tokenizing f.mContainer
EXISTS
Tokenizing f
EXISTS
Tokenizing mContainer
EXISTS
Tokenizing null
EXISTS
Tokenizing f.mView=null
{view=1, null=1, f=1, m=1, ==1, .=1}
Tokenizing f.mView
EXISTS
Tokenizing f
EXISTS
Tokenizing mView
EXISTS
Tokenizing null
EXISTS
Tokenizing Fragment.CREATED
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing CREATED
EXISTS
Tokenizing newState < Fragment.CREATED
{new=1, fragment=1, created=1, state=1, <=1, .=1}
Tokenizing newState
EXISTS
Tokenizing Fragment.CREATED
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing CREATED
EXISTS
Tokenizing mDestroyed
EXISTS
Tokenizing f.mAnimatingAway != null
EXISTS
Tokenizing f.mAnimatingAway
EXISTS
Tokenizing f
EXISTS
Tokenizing mAnimatingAway
EXISTS
Tokenizing null
EXISTS
Tokenizing Animator
EXISTS
Tokenizing anim
EXISTS
Tokenizing f.mAnimatingAway
EXISTS
Tokenizing f
EXISTS
Tokenizing mAnimatingAway
EXISTS
Tokenizing f.mAnimatingAway=null
EXISTS
Tokenizing f.mAnimatingAway
EXISTS
Tokenizing f
EXISTS
Tokenizing mAnimatingAway
EXISTS
Tokenizing null
EXISTS
Tokenizing anim.cancel()
{cancel=1, (=1, )=1, anim=1, .=1}
Tokenizing anim
EXISTS
Tokenizing cancel
{cancel=1}
Tokenizing f.mAnimatingAway != null
EXISTS
Tokenizing f.mAnimatingAway
EXISTS
Tokenizing f
EXISTS
Tokenizing mAnimatingAway
EXISTS
Tokenizing null
EXISTS
Tokenizing f.mStateAfterAnimating=newState
EXISTS
Tokenizing f.mStateAfterAnimating
EXISTS
Tokenizing f
EXISTS
Tokenizing mStateAfterAnimating
EXISTS
Tokenizing newState
EXISTS
Tokenizing newState=Fragment.CREATED
EXISTS
Tokenizing newState
EXISTS
Tokenizing Fragment.CREATED
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing CREATED
EXISTS
Tokenizing DEBUG
EXISTS
Tokenizing Log.v(TAG,"movefrom CREATED: " + f)
{movefrom=1, log=1, v=1, created=1, f=1, (=1, )=1, :=1, tag=1, +=1, ,=1, .=1}
Tokenizing Log
EXISTS
Tokenizing v
EXISTS
Tokenizing TAG
EXISTS
Tokenizing "movefrom CREATED: " + f
{movefrom=1, created=1, f=1, :=1, +=1}
Tokenizing "movefrom CREATED: "
{movefrom=1, created=1, :=1}
Tokenizing f
EXISTS
Tokenizing !f.mRetaining
EXISTS
Tokenizing f.mRetaining
EXISTS
Tokenizing f
EXISTS
Tokenizing mRetaining
EXISTS
Tokenizing f.mCalled=false
EXISTS
Tokenizing f.mCalled
EXISTS
Tokenizing f
EXISTS
Tokenizing mCalled
EXISTS
Tokenizing false
EXISTS
Tokenizing f.onDestroy()
{f=1, (=1, destroy=1, )=1, .=1, on=1}
Tokenizing f
EXISTS
Tokenizing onDestroy
{destroy=1, on=1}
Tokenizing !f.mCalled
EXISTS
Tokenizing f.mCalled
EXISTS
Tokenizing f
EXISTS
Tokenizing mCalled
EXISTS
Tokenizing new SuperNotCalledException("Fragment " + f + " did not call through to super.onDestroy()")
{exception=1, through=1, new=1, called=1, f=1, (=2, destroy=1, )=2, +=2, .=1, super=2, call=1, not=2, fragment=1, to=1, did=1, on=1}
Tokenizing SuperNotCalledException
EXISTS
Tokenizing "Fragment " + f + " did not call through to super.onDestroy()"
{through=1, f=1, (=1, destroy=1, )=1, +=2, .=1, call=1, super=1, fragment=1, not=1, to=1, did=1, on=1}
Tokenizing "Fragment "
EXISTS
Tokenizing f
EXISTS
Tokenizing " did not call through to super.onDestroy()"
{call=1, through=1, super=1, not=1, (=1, destroy=1, )=1, to=1, did=1, .=1, on=1}
Tokenizing f.mCalled=false
EXISTS
Tokenizing f.mCalled
EXISTS
Tokenizing f
EXISTS
Tokenizing mCalled
EXISTS
Tokenizing false
EXISTS
Tokenizing f.onDetach()
{f=1, (=1, detach=1, )=1, .=1, on=1}
Tokenizing f
EXISTS
Tokenizing onDetach
{detach=1, on=1}
Tokenizing !f.mCalled
EXISTS
Tokenizing f.mCalled
EXISTS
Tokenizing f
EXISTS
Tokenizing mCalled
EXISTS
Tokenizing new SuperNotCalledException("Fragment " + f + " did not call through to super.onDetach()")
{exception=1, through=1, new=1, called=1, f=1, (=2, )=2, +=2, .=1, super=2, call=1, not=2, fragment=1, detach=1, to=1, did=1, on=1}
Tokenizing SuperNotCalledException
EXISTS
Tokenizing "Fragment " + f + " did not call through to super.onDetach()"
{through=1, f=1, (=1, )=1, +=2, .=1, call=1, super=1, fragment=1, not=1, detach=1, to=1, did=1, on=1}
Tokenizing "Fragment "
EXISTS
Tokenizing f
EXISTS
Tokenizing " did not call through to super.onDetach()"
{call=1, through=1, super=1, not=1, (=1, detach=1, )=1, to=1, did=1, .=1, on=1}
Tokenizing !f.mRetaining
EXISTS
Tokenizing f.mRetaining
EXISTS
Tokenizing f
EXISTS
Tokenizing mRetaining
EXISTS
Tokenizing makeInactive(f)
{inactive=1, f=1, (=1, )=1, make=1}
Tokenizing makeInactive
{inactive=1, make=1}
Tokenizing f
EXISTS
Tokenizing f.mActivity=null
{activity=1, null=1, f=1, m=1, ==1, .=1}
Tokenizing f.mActivity
EXISTS
Tokenizing f
EXISTS
Tokenizing mActivity
EXISTS
Tokenizing null
EXISTS
Tokenizing f.mFragmentManager=null
{fragment=1, manager=1, null=1, f=1, m=1, ==1, .=1}
Tokenizing f.mFragmentManager
EXISTS
Tokenizing f
EXISTS
Tokenizing mFragmentManager
EXISTS
Tokenizing null
EXISTS
Tokenizing f.mState=newState
{new=1, f=1, state=2, m=1, ==1, .=1}
Tokenizing f.mState
EXISTS
Tokenizing f
EXISTS
Tokenizing mState
EXISTS
Tokenizing newState
EXISTS
Tokenizing moveToState
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing f
EXISTS
Tokenizing moveToState(f,mCurState,0,0)
EXISTS
Tokenizing moveToState
EXISTS
Tokenizing f
EXISTS
Tokenizing mCurState
EXISTS
Tokenizing 0
EXISTS
Tokenizing 0
EXISTS
Tokenizing moveToState
EXISTS
Tokenizing newState
EXISTS
Tokenizing always
{always=1}
Tokenizing moveToState(newState,0,0,always)
{0=2, always=1, new=1, move=1, (=1, )=1, to=1, state=2, ,=3}
Tokenizing moveToState
EXISTS
Tokenizing newState
EXISTS
Tokenizing 0
EXISTS
Tokenizing 0
EXISTS
Tokenizing always
EXISTS
Tokenizing moveToState
EXISTS
Tokenizing newState
EXISTS
Tokenizing transit
EXISTS
Tokenizing transitStyle
{transit=1, style=1}
Tokenizing always
EXISTS
Tokenizing mActivity == null && newState != Fragment.INITIALIZING
{===1, &&=1, new=1, fragment=1, activity=1, null=1, initializing=1, state=1, !==1, m=1, .=1}
Tokenizing mActivity == null
{===1, activity=1, null=1, m=1}
Tokenizing mActivity
EXISTS
Tokenizing null
EXISTS
Tokenizing newState != Fragment.INITIALIZING
{new=1, fragment=1, initializing=1, state=1, !==1, .=1}
Tokenizing newState
EXISTS
Tokenizing Fragment.INITIALIZING
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing INITIALIZING
EXISTS
Tokenizing new IllegalStateException("No activity")
{exception=1, new=1, no=1, activity=1, (=1, )=1, state=1, illegal=1}
Tokenizing IllegalStateException
EXISTS
Tokenizing "No activity"
{no=1, activity=1}
Tokenizing !always && mCurState == newState
{always=1, &&=1, ===1, !=1, cur=1, new=1, state=2, m=1}
Tokenizing !always
{always=1, !=1}
Tokenizing always
EXISTS
Tokenizing mCurState == newState
{===1, cur=1, new=1, state=2, m=1}
Tokenizing mCurState
EXISTS
Tokenizing newState
EXISTS
Tokenizing mCurState=newState
{cur=1, new=1, state=2, m=1, ==1}
Tokenizing mCurState
EXISTS
Tokenizing newState
EXISTS
Tokenizing mActive != null
EXISTS
Tokenizing mActive
EXISTS
Tokenizing null
EXISTS
Tokenizing loadersRunning
{loaders=1, running=1}
Tokenizing false
EXISTS
Tokenizing int i=0
EXISTS
Tokenizing i
EXISTS
Tokenizing 0
EXISTS
Tokenizing i < mActive.size()
{size=1, (=1, i=1, active=1, )=1, <=1, m=1, .=1}
Tokenizing i
EXISTS
Tokenizing mActive.size()
EXISTS
Tokenizing mActive
EXISTS
Tokenizing size
EXISTS
Tokenizing i++
EXISTS
Tokenizing i
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing f
EXISTS
Tokenizing mActive.get(i)
EXISTS
Tokenizing mActive
EXISTS
Tokenizing get
EXISTS
Tokenizing i
EXISTS
Tokenizing f != null
EXISTS
Tokenizing f
EXISTS
Tokenizing null
EXISTS
Tokenizing moveToState(f,newState,transit,transitStyle)
{new=1, move=1, f=1, transit=2, (=1, )=1, style=1, to=1, state=2, ,=3}
Tokenizing moveToState
EXISTS
Tokenizing f
EXISTS
Tokenizing newState
EXISTS
Tokenizing transit
EXISTS
Tokenizing transitStyle
EXISTS
Tokenizing f.mLoaderManager != null
{manager=1, null=1, f=1, loader=1, !==1, m=1, .=1}
Tokenizing f.mLoaderManager
{manager=1, f=1, loader=1, m=1, .=1}
Tokenizing f
EXISTS
Tokenizing mLoaderManager
{manager=1, loader=1, m=1}
Tokenizing null
EXISTS
Tokenizing loadersRunning|=f.mLoaderManager.hasRunningLoaders()
{loaders=2, running=2, |==1, manager=1, f=1, loader=1, (=1, )=1, has=1, m=1, .=2}
Tokenizing loadersRunning
EXISTS
Tokenizing f.mLoaderManager.hasRunningLoaders()
{running=1, loaders=1, manager=1, f=1, loader=1, (=1, )=1, has=1, m=1, .=2}
Tokenizing f.mLoaderManager
EXISTS
Tokenizing f
EXISTS
Tokenizing mLoaderManager
EXISTS
Tokenizing hasRunningLoaders
{running=1, loaders=1, has=1}
Tokenizing !loadersRunning
{loaders=1, running=1, !=1}
Tokenizing loadersRunning
EXISTS
Tokenizing startPendingDeferredFragments()
{deferred=1, pending=1, start=1, (=1, )=1, fragments=1}
Tokenizing startPendingDeferredFragments
{deferred=1, pending=1, start=1, fragments=1}
Tokenizing mNeedMenuInvalidate && mActivity != null && mCurState == Fragment.RESUMED
{&&=2, ===1, cur=1, activity=1, need=1, invalidate=1, menu=1, m=3, .=1, fragment=1, null=1, state=1, !==1, resumed=1}
Tokenizing mNeedMenuInvalidate && mActivity != null
{&&=1, activity=1, null=1, need=1, invalidate=1, menu=1, !==1, m=2}
Tokenizing mNeedMenuInvalidate
EXISTS
Tokenizing mActivity != null
{activity=1, null=1, !==1, m=1}
Tokenizing mActivity
EXISTS
Tokenizing null
EXISTS
Tokenizing mCurState == Fragment.RESUMED
{===1, cur=1, fragment=1, state=1, resumed=1, m=1, .=1}
Tokenizing mCurState
EXISTS
Tokenizing Fragment.RESUMED
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing RESUMED
EXISTS
Tokenizing mActivity.invalidateOptionsMenu()
{activity=1, options=1, (=1, )=1, invalidate=1, menu=1, m=1, .=1}
Tokenizing mActivity
EXISTS
Tokenizing invalidateOptionsMenu
EXISTS
Tokenizing mNeedMenuInvalidate=false
{need=1, false=1, invalidate=1, menu=1, m=1, ==1}
Tokenizing mNeedMenuInvalidate
EXISTS
Tokenizing false
EXISTS
Tokenizing startPendingDeferredFragments
EXISTS
Tokenizing mActive == null
{===1, null=1, active=1, m=1}
Tokenizing mActive
EXISTS
Tokenizing null
EXISTS
Tokenizing int i=0
EXISTS
Tokenizing i
EXISTS
Tokenizing 0
EXISTS
Tokenizing i < mActive.size()
EXISTS
Tokenizing i
EXISTS
Tokenizing mActive.size()
EXISTS
Tokenizing mActive
EXISTS
Tokenizing size
EXISTS
Tokenizing i++
EXISTS
Tokenizing i
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing f
EXISTS
Tokenizing mActive.get(i)
EXISTS
Tokenizing mActive
EXISTS
Tokenizing get
EXISTS
Tokenizing i
EXISTS
Tokenizing f != null
EXISTS
Tokenizing f
EXISTS
Tokenizing null
EXISTS
Tokenizing performPendingDeferredStart(f)
{deferred=1, f=1, pending=1, perform=1, start=1, (=1, )=1}
Tokenizing performPendingDeferredStart
EXISTS
Tokenizing f
EXISTS
Tokenizing makeActive
{active=1, make=1}
Tokenizing Fragment
EXISTS
Tokenizing f
EXISTS
Tokenizing f.mIndex >= 0
{0=1, f=1, index=1, m=1, .=1, >==1}
Tokenizing f.mIndex
{f=1, index=1, m=1, .=1}
Tokenizing f
EXISTS
Tokenizing mIndex
EXISTS
Tokenizing 0
EXISTS
Tokenizing mAvailIndices == null || mAvailIndices.size() <= 0
{===1, ||=1, 0=1, avail=2, <==1, indices=2, null=1, size=1, (=1, )=1, m=2, .=1}
Tokenizing mAvailIndices == null
{===1, avail=1, indices=1, null=1, m=1}
Tokenizing mAvailIndices
EXISTS
Tokenizing null
EXISTS
Tokenizing mAvailIndices.size() <= 0
{0=1, avail=1, <==1, indices=1, size=1, (=1, )=1, m=1, .=1}
Tokenizing mAvailIndices.size()
EXISTS
Tokenizing mAvailIndices
EXISTS
Tokenizing size
EXISTS
Tokenizing 0
EXISTS
Tokenizing mActive == null
EXISTS
Tokenizing mActive
EXISTS
Tokenizing null
EXISTS
Tokenizing mActive=new ArrayList<Fragment>()
{new=1, fragment=1, array=1, (=1, active=1, )=1, list=1, <=1, m=1, ==1, >=1}
Tokenizing mActive
EXISTS
Tokenizing new ArrayList<Fragment>()
{new=1, fragment=1, array=1, (=1, )=1, list=1, <=1, >=1}
Tokenizing ArrayList
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing f.setIndex(mActive.size())
{set=1, size=1, f=1, (=2, index=1, active=1, )=2, m=1, .=2}
Tokenizing f
EXISTS
Tokenizing setIndex
{set=1, index=1}
Tokenizing mActive.size()
EXISTS
Tokenizing mActive
EXISTS
Tokenizing size
EXISTS
Tokenizing mActive.add(f)
{add=1, f=1, (=1, active=1, )=1, m=1, .=1}
Tokenizing mActive
EXISTS
Tokenizing add
EXISTS
Tokenizing f
EXISTS
Tokenizing f.setIndex(mAvailIndices.remove(mAvailIndices.size() - 1))
{avail=2, set=1, f=1, (=3, index=1, )=3, m=2, -=1, .=3, remove=1, 1=1, indices=2, size=1}
Tokenizing f
EXISTS
Tokenizing setIndex
EXISTS
Tokenizing mAvailIndices.remove(mAvailIndices.size() - 1)
{avail=2, 1=1, indices=2, size=1, (=2, )=2, m=2, -=1, .=2, remove=1}
Tokenizing mAvailIndices
EXISTS
Tokenizing remove
EXISTS
Tokenizing mAvailIndices.size() - 1
{avail=1, 1=1, indices=1, size=1, (=1, )=1, m=1, -=1, .=1}
Tokenizing mAvailIndices.size()
EXISTS
Tokenizing mAvailIndices
EXISTS
Tokenizing size
EXISTS
Tokenizing 1
EXISTS
Tokenizing mActive.set(f.mIndex,f)
{set=1, f=2, (=1, active=1, index=1, )=1, ,=1, m=2, .=2}
Tokenizing mActive
EXISTS
Tokenizing set
{set=1}
Tokenizing f.mIndex
EXISTS
Tokenizing f
EXISTS
Tokenizing mIndex
EXISTS
Tokenizing f
EXISTS
Tokenizing makeInactive
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing f
EXISTS
Tokenizing f.mIndex < 0
{0=1, f=1, index=1, <=1, m=1, .=1}
Tokenizing f.mIndex
EXISTS
Tokenizing f
EXISTS
Tokenizing mIndex
EXISTS
Tokenizing 0
EXISTS
Tokenizing DEBUG
EXISTS
Tokenizing Log.v(TAG,"Freeing fragment index " + f.mIndex)
{log=1, f=1, (=1, index=2, )=1, +=1, ,=1, m=1, .=2, fragment=1, freeing=1, v=1, tag=1}
Tokenizing Log
EXISTS
Tokenizing v
EXISTS
Tokenizing TAG
EXISTS
Tokenizing "Freeing fragment index " + f.mIndex
{fragment=1, freeing=1, f=1, index=2, +=1, m=1, .=1}
Tokenizing "Freeing fragment index "
{fragment=1, freeing=1, index=1}
Tokenizing f.mIndex
EXISTS
Tokenizing f
EXISTS
Tokenizing mIndex
EXISTS
Tokenizing mActive.set(f.mIndex,null)
{set=1, null=1, f=1, (=1, active=1, index=1, )=1, ,=1, m=2, .=2}
Tokenizing mActive
EXISTS
Tokenizing set
EXISTS
Tokenizing f.mIndex
EXISTS
Tokenizing f
EXISTS
Tokenizing mIndex
EXISTS
Tokenizing null
EXISTS
Tokenizing mAvailIndices == null
EXISTS
Tokenizing mAvailIndices
EXISTS
Tokenizing null
EXISTS
Tokenizing mAvailIndices=new ArrayList<Integer>()
{avail=1, new=1, indices=1, array=1, (=1, )=1, integer=1, list=1, <=1, m=1, ==1, >=1}
Tokenizing mAvailIndices
EXISTS
Tokenizing new ArrayList<Integer>()
{new=1, array=1, (=1, )=1, integer=1, list=1, <=1, >=1}
Tokenizing ArrayList
EXISTS
Tokenizing Integer
EXISTS
Tokenizing mAvailIndices.add(f.mIndex)
{add=1, avail=1, indices=1, f=1, (=1, index=1, )=1, m=2, .=2}
Tokenizing mAvailIndices
EXISTS
Tokenizing add
EXISTS
Tokenizing f.mIndex
EXISTS
Tokenizing f
EXISTS
Tokenizing mIndex
EXISTS
Tokenizing mActivity.invalidateFragmentIndex(f.mIndex)
{fragment=1, activity=1, f=1, (=1, index=2, )=1, invalidate=1, m=2, .=2}
Tokenizing mActivity
EXISTS
Tokenizing invalidateFragmentIndex
{fragment=1, index=1, invalidate=1}
Tokenizing f.mIndex
EXISTS
Tokenizing f
EXISTS
Tokenizing mIndex
EXISTS
Tokenizing f.initState()
{init=1, f=1, (=1, )=1, state=1, .=1}
Tokenizing f
EXISTS
Tokenizing initState
{init=1, state=1}
Tokenizing addFragment
{add=1, fragment=1}
Tokenizing Fragment
EXISTS
Tokenizing fragment
EXISTS
Tokenizing moveToStateNow
{move=1, now=1, to=1, state=1}
Tokenizing mAdded == null
{===1, null=1, added=1, m=1}
Tokenizing mAdded
EXISTS
Tokenizing null
EXISTS
Tokenizing mAdded=new ArrayList<Fragment>()
{new=1, fragment=1, added=1, array=1, (=1, )=1, list=1, <=1, m=1, ==1, >=1}
Tokenizing mAdded
EXISTS
Tokenizing new ArrayList<Fragment>()
EXISTS
Tokenizing ArrayList
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing DEBUG
EXISTS
Tokenizing Log.v(TAG,"add: " + fragment)
{add=1, fragment=1, log=1, v=1, (=1, )=1, :=1, tag=1, +=1, ,=1, .=1}
Tokenizing Log
EXISTS
Tokenizing v
EXISTS
Tokenizing TAG
EXISTS
Tokenizing "add: " + fragment
{add=1, fragment=1, :=1, +=1}
Tokenizing "add: "
{add=1, :=1}
Tokenizing fragment
EXISTS
Tokenizing makeActive(fragment)
{fragment=1, (=1, active=1, )=1, make=1}
Tokenizing makeActive
EXISTS
Tokenizing fragment
EXISTS
Tokenizing !fragment.mDetached
{detached=1, !=1, fragment=1, m=1, .=1}
Tokenizing fragment.mDetached
{detached=1, fragment=1, m=1, .=1}
Tokenizing fragment
EXISTS
Tokenizing mDetached
{detached=1, m=1}
Tokenizing mAdded.add(fragment)
{add=1, fragment=1, added=1, (=1, )=1, m=1, .=1}
Tokenizing mAdded
EXISTS
Tokenizing add
EXISTS
Tokenizing fragment
EXISTS
Tokenizing fragment.mAdded=true
{fragment=1, added=1, true=1, m=1, ==1, .=1}
Tokenizing fragment.mAdded
{fragment=1, added=1, m=1, .=1}
Tokenizing fragment
EXISTS
Tokenizing mAdded
EXISTS
Tokenizing true
EXISTS
Tokenizing fragment.mRemoving=false
{fragment=1, false=1, m=1, ==1, .=1, removing=1}
Tokenizing fragment.mRemoving
{fragment=1, m=1, .=1, removing=1}
Tokenizing fragment
EXISTS
Tokenizing mRemoving
EXISTS
Tokenizing false
EXISTS
Tokenizing fragment.mHasMenu && fragment.mMenuVisible
{&&=1, fragment=2, visible=1, has=1, menu=2, m=2, .=2}
Tokenizing fragment.mHasMenu
{fragment=1, has=1, menu=1, m=1, .=1}
Tokenizing fragment
EXISTS
Tokenizing mHasMenu
{has=1, menu=1, m=1}
Tokenizing fragment.mMenuVisible
{fragment=1, visible=1, menu=1, m=1, .=1}
Tokenizing fragment
EXISTS
Tokenizing mMenuVisible
{visible=1, menu=1, m=1}
Tokenizing mNeedMenuInvalidate=true
{need=1, true=1, invalidate=1, menu=1, m=1, ==1}
Tokenizing mNeedMenuInvalidate
EXISTS
Tokenizing true
EXISTS
Tokenizing moveToStateNow
EXISTS
Tokenizing moveToState(fragment)
{move=1, fragment=1, (=1, )=1, to=1, state=1}
Tokenizing moveToState
EXISTS
Tokenizing fragment
EXISTS
Tokenizing removeFragment
{fragment=1, remove=1}
Tokenizing Fragment
EXISTS
Tokenizing fragment
EXISTS
Tokenizing transition
{transition=1}
Tokenizing transitionStyle
EXISTS
Tokenizing DEBUG
EXISTS
Tokenizing Log.v(TAG,"remove: " + fragment + " nesting="+ fragment.mBackStackNesting)
{stack=1, log=1, (=1, back=1, )=1, +=3, ,=1, m=1, .=2, remove=1, fragment=2, v=1, :=1, tag=1, nesting=2, ==1}
Tokenizing Log
EXISTS
Tokenizing v
EXISTS
Tokenizing TAG
EXISTS
Tokenizing "remove: " + fragment + " nesting="+ fragment.mBackStackNesting
{fragment=2, stack=1, back=1, :=1, +=3, nesting=2, ==1, m=1, remove=1, .=1}
Tokenizing "remove: "
{:=1, remove=1}
Tokenizing fragment
EXISTS
Tokenizing " nesting="
{nesting=1, ==1}
Tokenizing fragment.mBackStackNesting
{fragment=1, stack=1, back=1, nesting=1, m=1, .=1}
Tokenizing fragment
EXISTS
Tokenizing mBackStackNesting
{stack=1, back=1, nesting=1, m=1}
Tokenizing inactive
{inactive=1}
Tokenizing !fragment.isInBackStack()
{!=1, fragment=1, stack=1, in=1, (=1, back=1, )=1, is=1, .=1}
Tokenizing fragment.isInBackStack()
{fragment=1, stack=1, in=1, (=1, back=1, )=1, is=1, .=1}
Tokenizing fragment
EXISTS
Tokenizing isInBackStack
{stack=1, in=1, back=1, is=1}
Tokenizing !fragment.mDetached || inactive
{detached=1, ||=1, !=1, fragment=1, inactive=1, m=1, .=1}
Tokenizing !fragment.mDetached
EXISTS
Tokenizing fragment.mDetached
EXISTS
Tokenizing fragment
EXISTS
Tokenizing mDetached
EXISTS
Tokenizing inactive
EXISTS
Tokenizing mAdded.remove(fragment)
{fragment=1, added=1, (=1, )=1, m=1, .=1, remove=1}
Tokenizing mAdded
EXISTS
Tokenizing remove
EXISTS
Tokenizing fragment
EXISTS
Tokenizing fragment.mHasMenu && fragment.mMenuVisible
EXISTS
Tokenizing fragment.mHasMenu
EXISTS
Tokenizing fragment
EXISTS
Tokenizing mHasMenu
EXISTS
Tokenizing fragment.mMenuVisible
EXISTS
Tokenizing fragment
EXISTS
Tokenizing mMenuVisible
EXISTS
Tokenizing mNeedMenuInvalidate=true
EXISTS
Tokenizing mNeedMenuInvalidate
EXISTS
Tokenizing true
EXISTS
Tokenizing fragment.mAdded=false
{fragment=1, added=1, false=1, m=1, ==1, .=1}
Tokenizing fragment.mAdded
EXISTS
Tokenizing fragment
EXISTS
Tokenizing mAdded
EXISTS
Tokenizing false
EXISTS
Tokenizing fragment.mRemoving=true
{fragment=1, true=1, m=1, ==1, .=1, removing=1}
Tokenizing fragment.mRemoving
EXISTS
Tokenizing fragment
EXISTS
Tokenizing mRemoving
EXISTS
Tokenizing true
EXISTS
Tokenizing moveToState(fragment,inactive ? Fragment.INITIALIZING : Fragment.CREATED,transition,transitionStyle)
{move=1, created=1, (=1, )=1, initializing=1, ,=3, .=2, transition=2, fragment=3, inactive=1, :=1, style=1, to=1, state=1, ?=1}
Tokenizing moveToState
EXISTS
Tokenizing fragment
EXISTS
Tokenizing inactive ? Fragment.INITIALIZING : Fragment.CREATED
{fragment=2, inactive=1, created=1, initializing=1, :=1, .=2, ?=1}
Tokenizing inactive
EXISTS
Tokenizing Fragment.INITIALIZING
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing INITIALIZING
EXISTS
Tokenizing Fragment.CREATED
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing CREATED
EXISTS
Tokenizing transition
EXISTS
Tokenizing transitionStyle
EXISTS
Tokenizing hideFragment
{hide=1, fragment=1}
Tokenizing Fragment
EXISTS
Tokenizing fragment
EXISTS
Tokenizing transition
EXISTS
Tokenizing transitionStyle
EXISTS
Tokenizing DEBUG
EXISTS
Tokenizing Log.v(TAG,"hide: " + fragment)
{hide=1, fragment=1, log=1, v=1, (=1, )=1, :=1, tag=1, +=1, ,=1, .=1}
Tokenizing Log
EXISTS
Tokenizing v
EXISTS
Tokenizing TAG
EXISTS
Tokenizing "hide: " + fragment
{hide=1, fragment=1, :=1, +=1}
Tokenizing "hide: "
{hide=1, :=1}
Tokenizing fragment
EXISTS
Tokenizing !fragment.mHidden
{!=1, fragment=1, hidden=1, m=1, .=1}
Tokenizing fragment.mHidden
{fragment=1, hidden=1, m=1, .=1}
Tokenizing fragment
EXISTS
Tokenizing mHidden
EXISTS
Tokenizing fragment.mHidden=true
{fragment=1, hidden=1, true=1, m=1, ==1, .=1}
Tokenizing fragment.mHidden
EXISTS
Tokenizing fragment
EXISTS
Tokenizing mHidden
EXISTS
Tokenizing true
EXISTS
Tokenizing fragment.mView != null
{fragment=1, view=1, null=1, !==1, m=1, .=1}
Tokenizing fragment.mView
{fragment=1, view=1, m=1, .=1}
Tokenizing fragment
EXISTS
Tokenizing mView
EXISTS
Tokenizing null
EXISTS
Tokenizing Animator
EXISTS
Tokenizing anim
EXISTS
Tokenizing loadAnimator(fragment,transition,true,transitionStyle)
{fragment=1, load=1, (=1, true=1, )=1, style=1, ,=3, animator=1, transition=2}
Tokenizing loadAnimator
EXISTS
Tokenizing fragment
EXISTS
Tokenizing transition
EXISTS
Tokenizing true
EXISTS
Tokenizing transitionStyle
EXISTS
Tokenizing anim != null
EXISTS
Tokenizing anim
EXISTS
Tokenizing null
EXISTS
Tokenizing anim.setTarget(fragment.mView)
{fragment=1, view=1, set=1, (=1, )=1, anim=1, m=1, .=2, target=1}
Tokenizing anim
EXISTS
Tokenizing setTarget
EXISTS
Tokenizing fragment.mView
EXISTS
Tokenizing fragment
EXISTS
Tokenizing mView
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing finalFragment
{fragment=1, final=1}
Tokenizing fragment
EXISTS
Tokenizing anim.addListener(new AnimatorListenerAdapter(){
  @Override public void onAnimationEnd(  Animator animation){
    if (finalFragment.mView != null) {
      finalFragment.mView.setVisibility(View.GONE);
    }
  }
}
)
{@=1, listener=2, view=3, public=1, end=1, override=1, if=1, on=1, add=1, new=1, adapter=1, void=1, set=1, visibility=1, (=5, )=5, m=2, .=5, animation=2, gone=1, fragment=2, null=1, final=2, {=3, ;=1, anim=1, !==1, animator=2, }=3}
Tokenizing anim
EXISTS
Tokenizing addListener
EXISTS
Tokenizing new AnimatorListenerAdapter(){
  @Override public void onAnimationEnd(  Animator animation){
    if (finalFragment.mView != null) {
      finalFragment.mView.setVisibility(View.GONE);
    }
  }
}

{@=1, listener=1, view=3, public=1, end=1, override=1, if=1, on=1, new=1, adapter=1, void=1, set=1, visibility=1, (=4, )=4, m=2, .=4, animation=2, gone=1, fragment=2, null=1, final=2, {=3, ;=1, !==1, animator=2, }=3}
Tokenizing AnimatorListenerAdapter
EXISTS
Tokenizing @Override
EXISTS
Tokenizing Override
EXISTS
Tokenizing onAnimationEnd
EXISTS
Tokenizing Animator
EXISTS
Tokenizing animation
EXISTS
Tokenizing finalFragment.mView != null
{fragment=1, view=1, null=1, final=1, !==1, m=1, .=1}
Tokenizing finalFragment.mView
{fragment=1, view=1, final=1, m=1, .=1}
Tokenizing finalFragment
EXISTS
Tokenizing mView
EXISTS
Tokenizing null
EXISTS
Tokenizing finalFragment.mView.setVisibility(View.GONE)
{fragment=1, view=2, set=1, visibility=1, final=1, (=1, )=1, m=1, .=3, gone=1}
Tokenizing finalFragment.mView
EXISTS
Tokenizing finalFragment
EXISTS
Tokenizing mView
EXISTS
Tokenizing setVisibility
EXISTS
Tokenizing View.GONE
EXISTS
Tokenizing View
EXISTS
Tokenizing GONE
EXISTS
Tokenizing anim.start()
EXISTS
Tokenizing anim
EXISTS
Tokenizing start
EXISTS
Tokenizing fragment.mView.setVisibility(View.GONE)
{fragment=1, view=2, set=1, visibility=1, (=1, )=1, m=1, .=3, gone=1}
Tokenizing fragment.mView
EXISTS
Tokenizing fragment
EXISTS
Tokenizing mView
EXISTS
Tokenizing setVisibility
EXISTS
Tokenizing View.GONE
EXISTS
Tokenizing View
EXISTS
Tokenizing GONE
EXISTS
Tokenizing fragment.mAdded && fragment.mHasMenu && fragment.mMenuVisible
{&&=2, fragment=3, visible=1, added=1, has=1, menu=2, m=3, .=3}
Tokenizing fragment.mAdded
EXISTS
Tokenizing fragment
EXISTS
Tokenizing mAdded
EXISTS
Tokenizing fragment.mHasMenu
EXISTS
Tokenizing fragment
EXISTS
Tokenizing mHasMenu
EXISTS
Tokenizing fragment.mMenuVisible
EXISTS
Tokenizing fragment
EXISTS
Tokenizing mMenuVisible
EXISTS
Tokenizing mNeedMenuInvalidate=true
EXISTS
Tokenizing mNeedMenuInvalidate
EXISTS
Tokenizing true
EXISTS
Tokenizing fragment.onHiddenChanged(true)
{fragment=1, hidden=1, (=1, true=1, )=1, .=1, on=1, changed=1}
Tokenizing fragment
EXISTS
Tokenizing onHiddenChanged
{hidden=1, on=1, changed=1}
Tokenizing true
EXISTS
Tokenizing showFragment
{fragment=1, show=1}
Tokenizing Fragment
EXISTS
Tokenizing fragment
EXISTS
Tokenizing transition
EXISTS
Tokenizing transitionStyle
EXISTS
Tokenizing DEBUG
EXISTS
Tokenizing Log.v(TAG,"show: " + fragment)
{fragment=1, log=1, v=1, (=1, show=1, )=1, :=1, tag=1, +=1, ,=1, .=1}
Tokenizing Log
EXISTS
Tokenizing v
EXISTS
Tokenizing TAG
EXISTS
Tokenizing "show: " + fragment
{fragment=1, show=1, :=1, +=1}
Tokenizing "show: "
{show=1, :=1}
Tokenizing fragment
EXISTS
Tokenizing fragment.mHidden
EXISTS
Tokenizing fragment
EXISTS
Tokenizing mHidden
EXISTS
Tokenizing fragment.mHidden=false
{fragment=1, hidden=1, false=1, m=1, ==1, .=1}
Tokenizing fragment.mHidden
EXISTS
Tokenizing fragment
EXISTS
Tokenizing mHidden
EXISTS
Tokenizing false
EXISTS
Tokenizing fragment.mView != null
EXISTS
Tokenizing fragment.mView
EXISTS
Tokenizing fragment
EXISTS
Tokenizing mView
EXISTS
Tokenizing null
EXISTS
Tokenizing Animator
EXISTS
Tokenizing anim
EXISTS
Tokenizing loadAnimator(fragment,transition,true,transitionStyle)
EXISTS
Tokenizing loadAnimator
EXISTS
Tokenizing fragment
EXISTS
Tokenizing transition
EXISTS
Tokenizing true
EXISTS
Tokenizing transitionStyle
EXISTS
Tokenizing anim != null
EXISTS
Tokenizing anim
EXISTS
Tokenizing null
EXISTS
Tokenizing anim.setTarget(fragment.mView)
EXISTS
Tokenizing anim
EXISTS
Tokenizing setTarget
EXISTS
Tokenizing fragment.mView
EXISTS
Tokenizing fragment
EXISTS
Tokenizing mView
EXISTS
Tokenizing anim.start()
EXISTS
Tokenizing anim
EXISTS
Tokenizing start
EXISTS
Tokenizing fragment.mView.setVisibility(View.VISIBLE)
{fragment=1, view=2, set=1, visible=1, visibility=1, (=1, )=1, m=1, .=3}
Tokenizing fragment.mView
EXISTS
Tokenizing fragment
EXISTS
Tokenizing mView
EXISTS
Tokenizing setVisibility
EXISTS
Tokenizing View.VISIBLE
{view=1, visible=1, .=1}
Tokenizing View
EXISTS
Tokenizing VISIBLE
{visible=1}
Tokenizing fragment.mAdded && fragment.mHasMenu && fragment.mMenuVisible
EXISTS
Tokenizing fragment.mAdded
EXISTS
Tokenizing fragment
EXISTS
Tokenizing mAdded
EXISTS
Tokenizing fragment.mHasMenu
EXISTS
Tokenizing fragment
EXISTS
Tokenizing mHasMenu
EXISTS
Tokenizing fragment.mMenuVisible
EXISTS
Tokenizing fragment
EXISTS
Tokenizing mMenuVisible
EXISTS
Tokenizing mNeedMenuInvalidate=true
EXISTS
Tokenizing mNeedMenuInvalidate
EXISTS
Tokenizing true
EXISTS
Tokenizing fragment.onHiddenChanged(false)
{fragment=1, hidden=1, (=1, false=1, )=1, .=1, on=1, changed=1}
Tokenizing fragment
EXISTS
Tokenizing onHiddenChanged
EXISTS
Tokenizing false
EXISTS
Tokenizing detachFragment
{fragment=1, detach=1}
Tokenizing Fragment
EXISTS
Tokenizing fragment
EXISTS
Tokenizing transition
EXISTS
Tokenizing transitionStyle
EXISTS
Tokenizing DEBUG
EXISTS
Tokenizing Log.v(TAG,"detach: " + fragment)
{fragment=1, log=1, v=1, (=1, detach=1, )=1, :=1, tag=1, +=1, ,=1, .=1}
Tokenizing Log
EXISTS
Tokenizing v
EXISTS
Tokenizing TAG
EXISTS
Tokenizing "detach: " + fragment
{fragment=1, detach=1, :=1, +=1}
Tokenizing "detach: "
{detach=1, :=1}
Tokenizing fragment
EXISTS
Tokenizing !fragment.mDetached
EXISTS
Tokenizing fragment.mDetached
EXISTS
Tokenizing fragment
EXISTS
Tokenizing mDetached
EXISTS
Tokenizing fragment.mDetached=true
{detached=1, fragment=1, true=1, m=1, ==1, .=1}
Tokenizing fragment.mDetached
EXISTS
Tokenizing fragment
EXISTS
Tokenizing mDetached
EXISTS
Tokenizing true
EXISTS
Tokenizing fragment.mAdded
EXISTS
Tokenizing fragment
EXISTS
Tokenizing mAdded
EXISTS
Tokenizing mAdded.remove(fragment)
EXISTS
Tokenizing mAdded
EXISTS
Tokenizing remove
EXISTS
Tokenizing fragment
EXISTS
Tokenizing fragment.mHasMenu && fragment.mMenuVisible
EXISTS
Tokenizing fragment.mHasMenu
EXISTS
Tokenizing fragment
EXISTS
Tokenizing mHasMenu
EXISTS
Tokenizing fragment.mMenuVisible
EXISTS
Tokenizing fragment
EXISTS
Tokenizing mMenuVisible
EXISTS
Tokenizing mNeedMenuInvalidate=true
EXISTS
Tokenizing mNeedMenuInvalidate
EXISTS
Tokenizing true
EXISTS
Tokenizing fragment.mAdded=false
EXISTS
Tokenizing fragment.mAdded
EXISTS
Tokenizing fragment
EXISTS
Tokenizing mAdded
EXISTS
Tokenizing false
EXISTS
Tokenizing moveToState(fragment,Fragment.CREATED,transition,transitionStyle)
{move=1, fragment=2, created=1, (=1, )=1, style=1, to=1, state=1, ,=3, .=1, transition=2}
Tokenizing moveToState
EXISTS
Tokenizing fragment
EXISTS
Tokenizing Fragment.CREATED
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing CREATED
EXISTS
Tokenizing transition
EXISTS
Tokenizing transitionStyle
EXISTS
Tokenizing attachFragment
{fragment=1, attach=1}
Tokenizing Fragment
EXISTS
Tokenizing fragment
EXISTS
Tokenizing transition
EXISTS
Tokenizing transitionStyle
EXISTS
Tokenizing DEBUG
EXISTS
Tokenizing Log.v(TAG,"attach: " + fragment)
{fragment=1, log=1, v=1, (=1, )=1, :=1, tag=1, attach=1, +=1, ,=1, .=1}
Tokenizing Log
EXISTS
Tokenizing v
EXISTS
Tokenizing TAG
EXISTS
Tokenizing "attach: " + fragment
{fragment=1, :=1, attach=1, +=1}
Tokenizing "attach: "
{:=1, attach=1}
Tokenizing fragment
EXISTS
Tokenizing fragment.mDetached
EXISTS
Tokenizing fragment
EXISTS
Tokenizing mDetached
EXISTS
Tokenizing fragment.mDetached=false
{detached=1, fragment=1, false=1, m=1, ==1, .=1}
Tokenizing fragment.mDetached
EXISTS
Tokenizing fragment
EXISTS
Tokenizing mDetached
EXISTS
Tokenizing false
EXISTS
Tokenizing !fragment.mAdded
{!=1, fragment=1, added=1, m=1, .=1}
Tokenizing fragment.mAdded
EXISTS
Tokenizing fragment
EXISTS
Tokenizing mAdded
EXISTS
Tokenizing mAdded.add(fragment)
EXISTS
Tokenizing mAdded
EXISTS
Tokenizing add
EXISTS
Tokenizing fragment
EXISTS
Tokenizing fragment.mAdded=true
EXISTS
Tokenizing fragment.mAdded
EXISTS
Tokenizing fragment
EXISTS
Tokenizing mAdded
EXISTS
Tokenizing true
EXISTS
Tokenizing fragment.mHasMenu && fragment.mMenuVisible
EXISTS
Tokenizing fragment.mHasMenu
EXISTS
Tokenizing fragment
EXISTS
Tokenizing mHasMenu
EXISTS
Tokenizing fragment.mMenuVisible
EXISTS
Tokenizing fragment
EXISTS
Tokenizing mMenuVisible
EXISTS
Tokenizing mNeedMenuInvalidate=true
EXISTS
Tokenizing mNeedMenuInvalidate
EXISTS
Tokenizing true
EXISTS
Tokenizing moveToState(fragment,mCurState,transition,transitionStyle)
{cur=1, move=1, fragment=1, (=1, )=1, style=1, to=1, state=2, ,=3, m=1, transition=2}
Tokenizing moveToState
EXISTS
Tokenizing fragment
EXISTS
Tokenizing mCurState
EXISTS
Tokenizing transition
EXISTS
Tokenizing transitionStyle
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing findFragmentById
EXISTS
Tokenizing id
EXISTS
Tokenizing mActive != null
EXISTS
Tokenizing mActive
EXISTS
Tokenizing null
EXISTS
Tokenizing int i=mAdded.size() - 1
{1=1, size=1, added=1, (=1, i=1, )=1, ==1, m=1, -=1, int=1, .=1}
Tokenizing i
EXISTS
Tokenizing mAdded.size() - 1
{1=1, size=1, added=1, (=1, )=1, m=1, -=1, .=1}
Tokenizing mAdded.size()
EXISTS
Tokenizing mAdded
EXISTS
Tokenizing size
EXISTS
Tokenizing 1
EXISTS
Tokenizing i >= 0
{0=1, i=1, >==1}
Tokenizing i
EXISTS
Tokenizing 0
EXISTS
Tokenizing i--
{--=1, i=1}
Tokenizing i
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing f
EXISTS
Tokenizing mAdded.get(i)
EXISTS
Tokenizing mAdded
EXISTS
Tokenizing get
EXISTS
Tokenizing i
EXISTS
Tokenizing f != null && f.mFragmentId == id
{&&=1, ===1, fragment=1, null=1, f=2, id=2, !==1, m=1, .=1}
Tokenizing f != null
EXISTS
Tokenizing f
EXISTS
Tokenizing null
EXISTS
Tokenizing f.mFragmentId == id
{===1, fragment=1, f=1, id=2, m=1, .=1}
Tokenizing f.mFragmentId
{fragment=1, f=1, id=1, m=1, .=1}
Tokenizing f
EXISTS
Tokenizing mFragmentId
{fragment=1, id=1, m=1}
Tokenizing id
EXISTS
Tokenizing f
EXISTS
Tokenizing int i=mActive.size() - 1
{1=1, size=1, (=1, i=1, active=1, )=1, ==1, m=1, -=1, int=1, .=1}
Tokenizing i
EXISTS
Tokenizing mActive.size() - 1
{1=1, size=1, (=1, active=1, )=1, m=1, -=1, .=1}
Tokenizing mActive.size()
EXISTS
Tokenizing mActive
EXISTS
Tokenizing size
EXISTS
Tokenizing 1
EXISTS
Tokenizing i >= 0
EXISTS
Tokenizing i
EXISTS
Tokenizing 0
EXISTS
Tokenizing i--
EXISTS
Tokenizing i
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing f
EXISTS
Tokenizing mActive.get(i)
EXISTS
Tokenizing mActive
EXISTS
Tokenizing get
EXISTS
Tokenizing i
EXISTS
Tokenizing f != null && f.mFragmentId == id
EXISTS
Tokenizing f != null
EXISTS
Tokenizing f
EXISTS
Tokenizing null
EXISTS
Tokenizing f.mFragmentId == id
EXISTS
Tokenizing f.mFragmentId
EXISTS
Tokenizing f
EXISTS
Tokenizing mFragmentId
EXISTS
Tokenizing id
EXISTS
Tokenizing f
EXISTS
Tokenizing null
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing findFragmentByTag
EXISTS
Tokenizing String
EXISTS
Tokenizing tag
EXISTS
Tokenizing mActive != null && tag != null
{&&=1, null=2, active=1, tag=1, !==2, m=1}
Tokenizing mActive != null
EXISTS
Tokenizing mActive
EXISTS
Tokenizing null
EXISTS
Tokenizing tag != null
{null=1, tag=1, !==1}
Tokenizing tag
EXISTS
Tokenizing null
EXISTS
Tokenizing int i=mAdded.size() - 1
EXISTS
Tokenizing i
EXISTS
Tokenizing mAdded.size() - 1
EXISTS
Tokenizing mAdded.size()
EXISTS
Tokenizing mAdded
EXISTS
Tokenizing size
EXISTS
Tokenizing 1
EXISTS
Tokenizing i >= 0
EXISTS
Tokenizing i
EXISTS
Tokenizing 0
EXISTS
Tokenizing i--
EXISTS
Tokenizing i
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing f
EXISTS
Tokenizing mAdded.get(i)
EXISTS
Tokenizing mAdded
EXISTS
Tokenizing get
EXISTS
Tokenizing i
EXISTS
Tokenizing f != null && tag.equals(f.mTag)
{&&=1, null=1, f=2, equals=1, (=1, )=1, tag=2, !==1, m=1, .=2}
Tokenizing f != null
EXISTS
Tokenizing f
EXISTS
Tokenizing null
EXISTS
Tokenizing tag.equals(f.mTag)
{f=1, equals=1, (=1, )=1, tag=2, m=1, .=2}
Tokenizing tag
EXISTS
Tokenizing equals
{equals=1}
Tokenizing f.mTag
{f=1, tag=1, m=1, .=1}
Tokenizing f
EXISTS
Tokenizing mTag
{tag=1, m=1}
Tokenizing f
EXISTS
Tokenizing int i=mActive.size() - 1
EXISTS
Tokenizing i
EXISTS
Tokenizing mActive.size() - 1
EXISTS
Tokenizing mActive.size()
EXISTS
Tokenizing mActive
EXISTS
Tokenizing size
EXISTS
Tokenizing 1
EXISTS
Tokenizing i >= 0
EXISTS
Tokenizing i
EXISTS
Tokenizing 0
EXISTS
Tokenizing i--
EXISTS
Tokenizing i
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing f
EXISTS
Tokenizing mActive.get(i)
EXISTS
Tokenizing mActive
EXISTS
Tokenizing get
EXISTS
Tokenizing i
EXISTS
Tokenizing f != null && tag.equals(f.mTag)
EXISTS
Tokenizing f != null
EXISTS
Tokenizing f
EXISTS
Tokenizing null
EXISTS
Tokenizing tag.equals(f.mTag)
EXISTS
Tokenizing tag
EXISTS
Tokenizing equals
EXISTS
Tokenizing f.mTag
EXISTS
Tokenizing f
EXISTS
Tokenizing mTag
EXISTS
Tokenizing f
EXISTS
Tokenizing null
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing findFragmentByWho
{fragment=1, find=1, by=1, who=1}
Tokenizing String
EXISTS
Tokenizing who
{who=1}
Tokenizing mActive != null && who != null
{&&=1, null=2, active=1, !==2, m=1, who=1}
Tokenizing mActive != null
EXISTS
Tokenizing mActive
EXISTS
Tokenizing null
EXISTS
Tokenizing who != null
{null=1, !==1, who=1}
Tokenizing who
EXISTS
Tokenizing null
EXISTS
Tokenizing int i=mActive.size() - 1
EXISTS
Tokenizing i
EXISTS
Tokenizing mActive.size() - 1
EXISTS
Tokenizing mActive.size()
EXISTS
Tokenizing mActive
EXISTS
Tokenizing size
EXISTS
Tokenizing 1
EXISTS
Tokenizing i >= 0
EXISTS
Tokenizing i
EXISTS
Tokenizing 0
EXISTS
Tokenizing i--
EXISTS
Tokenizing i
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing f
EXISTS
Tokenizing mActive.get(i)
EXISTS
Tokenizing mActive
EXISTS
Tokenizing get
EXISTS
Tokenizing i
EXISTS
Tokenizing f != null && who.equals(f.mWho)
{&&=1, null=1, f=2, equals=1, (=1, )=1, !==1, m=1, .=2, who=2}
Tokenizing f != null
EXISTS
Tokenizing f
EXISTS
Tokenizing null
EXISTS
Tokenizing who.equals(f.mWho)
{f=1, equals=1, (=1, )=1, m=1, .=2, who=2}
Tokenizing who
EXISTS
Tokenizing equals
EXISTS
Tokenizing f.mWho
{f=1, m=1, .=1, who=1}
Tokenizing f
EXISTS
Tokenizing mWho
{m=1, who=1}
Tokenizing f
EXISTS
Tokenizing null
EXISTS
Tokenizing checkStateLoss
EXISTS
Tokenizing mStateSaved
EXISTS
Tokenizing new IllegalStateException("Can not perform this action after onSaveInstanceState")
{exception=1, new=1, instance=1, (=1, perform=1, this=1, save=1, )=1, illegal=1, can=1, not=1, action=1, state=2, after=1, on=1}
Tokenizing IllegalStateException
EXISTS
Tokenizing "Can not perform this action after onSaveInstanceState"
{can=1, not=1, instance=1, perform=1, this=1, save=1, action=1, after=1, state=1, on=1}
Tokenizing mNoTransactionsBecause != null
EXISTS
Tokenizing mNoTransactionsBecause
EXISTS
Tokenizing null
EXISTS
Tokenizing new IllegalStateException("Can not perform this action inside of " + mNoTransactionsBecause)
{exception=1, new=1, no=1, (=1, perform=1, this=1, )=1, +=1, inside=1, transactions=1, illegal=1, m=1, can=1, not=1, of=1, action=1, state=1, because=1}
Tokenizing IllegalStateException
EXISTS
Tokenizing "Can not perform this action inside of " + mNoTransactionsBecause
{can=1, no=1, not=1, of=1, perform=1, this=1, action=1, +=1, because=1, inside=1, transactions=1, m=1}
Tokenizing "Can not perform this action inside of "
{can=1, not=1, of=1, perform=1, this=1, action=1, inside=1}
Tokenizing mNoTransactionsBecause
EXISTS
Tokenizing enqueueAction
EXISTS
Tokenizing Runnable
EXISTS
Tokenizing action
{action=1}
Tokenizing allowStateLoss
{allow=1, loss=1, state=1}
Tokenizing !allowStateLoss
{allow=1, !=1, loss=1, state=1}
Tokenizing allowStateLoss
EXISTS
Tokenizing checkStateLoss()
EXISTS
Tokenizing checkStateLoss
EXISTS
Tokenizing this
EXISTS
Tokenizing mActivity == null
EXISTS
Tokenizing mActivity
EXISTS
Tokenizing null
EXISTS
Tokenizing new IllegalStateException("Activity has been destroyed")
{exception=1, new=1, been=1, destroyed=1, activity=1, (=1, )=1, state=1, has=1, illegal=1}
Tokenizing IllegalStateException
EXISTS
Tokenizing "Activity has been destroyed"
{been=1, destroyed=1, activity=1, has=1}
Tokenizing mPendingActions == null
{===1, null=1, pending=1, m=1, actions=1}
Tokenizing mPendingActions
EXISTS
Tokenizing null
EXISTS
Tokenizing mPendingActions=new ArrayList<Runnable>()
{new=1, runnable=1, array=1, pending=1, (=1, )=1, list=1, <=1, m=1, actions=1, ==1, >=1}
Tokenizing mPendingActions
EXISTS
Tokenizing new ArrayList<Runnable>()
{new=1, runnable=1, array=1, (=1, )=1, list=1, <=1, >=1}
Tokenizing ArrayList
EXISTS
Tokenizing Runnable
EXISTS
Tokenizing mPendingActions.add(action)
{add=1, pending=1, (=1, action=1, )=1, m=1, actions=1, .=1}
Tokenizing mPendingActions
EXISTS
Tokenizing add
EXISTS
Tokenizing action
EXISTS
Tokenizing mPendingActions.size() == 1
{===1, 1=1, size=1, pending=1, (=1, )=1, m=1, actions=1, .=1}
Tokenizing mPendingActions.size()
EXISTS
Tokenizing mPendingActions
EXISTS
Tokenizing size
EXISTS
Tokenizing 1
EXISTS
Tokenizing mActivity.mHandler.removeCallbacks(mExecCommit)
{handler=1, activity=1, (=1, commit=1, callbacks=1, )=1, m=3, .=2, remove=1, exec=1}
Tokenizing mActivity.mHandler
EXISTS
Tokenizing mActivity
EXISTS
Tokenizing mHandler
EXISTS
Tokenizing removeCallbacks
{callbacks=1, remove=1}
Tokenizing mExecCommit
EXISTS
Tokenizing mActivity.mHandler.post(mExecCommit)
{handler=1, activity=1, post=1, (=1, commit=1, )=1, m=3, .=2, exec=1}
Tokenizing mActivity.mHandler
EXISTS
Tokenizing mActivity
EXISTS
Tokenizing mHandler
EXISTS
Tokenizing post
{post=1}
Tokenizing mExecCommit
EXISTS
Tokenizing allocBackStackIndex
{stack=1, back=1, index=1, alloc=1}
Tokenizing BackStackRecord
EXISTS
Tokenizing bse
{bse=1}
Tokenizing this
EXISTS
Tokenizing mAvailBackStackIndices == null || mAvailBackStackIndices.size() <= 0
{===1, ||=1, avail=2, <==1, stack=2, (=1, back=2, )=1, m=2, .=1, 0=1, indices=2, null=1, size=1}
Tokenizing mAvailBackStackIndices == null
{===1, avail=1, stack=1, indices=1, null=1, back=1, m=1}
Tokenizing mAvailBackStackIndices
EXISTS
Tokenizing null
EXISTS
Tokenizing mAvailBackStackIndices.size() <= 0
{0=1, avail=1, <==1, stack=1, indices=1, size=1, (=1, back=1, )=1, m=1, .=1}
Tokenizing mAvailBackStackIndices.size()
EXISTS
Tokenizing mAvailBackStackIndices
EXISTS
Tokenizing size
EXISTS
Tokenizing 0
EXISTS
Tokenizing mBackStackIndices == null
{===1, stack=1, indices=1, null=1, back=1, m=1}
Tokenizing mBackStackIndices
EXISTS
Tokenizing null
EXISTS
Tokenizing mBackStackIndices=new ArrayList<BackStackRecord>()
{new=1, stack=2, (=1, back=2, )=1, list=1, m=1, indices=1, array=1, record=1, <=1, ==1, >=1}
Tokenizing mBackStackIndices
EXISTS
Tokenizing new ArrayList<BackStackRecord>()
{new=1, stack=1, array=1, record=1, (=1, back=1, )=1, list=1, <=1, >=1}
Tokenizing ArrayList
EXISTS
Tokenizing BackStackRecord
EXISTS
Tokenizing index
EXISTS
Tokenizing mBackStackIndices.size()
EXISTS
Tokenizing mBackStackIndices
EXISTS
Tokenizing size
EXISTS
Tokenizing DEBUG
EXISTS
Tokenizing Log.v(TAG,"Setting back stack index " + index + " to "+ bse)
{stack=1, log=1, (=1, back=1, index=2, )=1, +=3, ,=1, .=1, setting=1, bse=1, v=1, tag=1, to=1}
Tokenizing Log
EXISTS
Tokenizing v
EXISTS
Tokenizing TAG
EXISTS
Tokenizing "Setting back stack index " + index + " to "+ bse
{stack=1, bse=1, back=1, index=2, +=3, to=1, setting=1}
Tokenizing "Setting back stack index "
{stack=1, back=1, index=1, setting=1}
Tokenizing index
EXISTS
Tokenizing " to "
{to=1}
Tokenizing bse
EXISTS
Tokenizing mBackStackIndices.add(bse)
{add=1, stack=1, indices=1, bse=1, (=1, back=1, )=1, m=1, .=1}
Tokenizing mBackStackIndices
EXISTS
Tokenizing add
EXISTS
Tokenizing bse
EXISTS
Tokenizing index
EXISTS
Tokenizing index
EXISTS
Tokenizing mAvailBackStackIndices.remove(mAvailBackStackIndices.size() - 1)
{avail=2, 1=1, stack=2, indices=2, size=1, (=2, back=2, )=2, m=2, -=1, .=2, remove=1}
Tokenizing mAvailBackStackIndices
EXISTS
Tokenizing remove
EXISTS
Tokenizing mAvailBackStackIndices.size() - 1
{avail=1, 1=1, stack=1, indices=1, size=1, (=1, back=1, )=1, m=1, -=1, .=1}
Tokenizing mAvailBackStackIndices.size()
EXISTS
Tokenizing mAvailBackStackIndices
EXISTS
Tokenizing size
EXISTS
Tokenizing 1
EXISTS
Tokenizing DEBUG
EXISTS
Tokenizing Log.v(TAG,"Adding back stack index " + index + " with "+ bse)
{stack=1, log=1, (=1, back=1, index=2, )=1, +=3, ,=1, .=1, with=1, bse=1, v=1, adding=1, tag=1}
Tokenizing Log
EXISTS
Tokenizing v
EXISTS
Tokenizing TAG
EXISTS
Tokenizing "Adding back stack index " + index + " with "+ bse
{with=1, stack=1, bse=1, adding=1, back=1, index=2, +=3}
Tokenizing "Adding back stack index "
{stack=1, adding=1, back=1, index=1}
Tokenizing index
EXISTS
Tokenizing " with "
{with=1}
Tokenizing bse
EXISTS
Tokenizing mBackStackIndices.set(index,bse)
{stack=1, indices=1, set=1, bse=1, (=1, back=1, index=1, )=1, ,=1, m=1, .=1}
Tokenizing mBackStackIndices
EXISTS
Tokenizing set
EXISTS
Tokenizing index
EXISTS
Tokenizing bse
EXISTS
Tokenizing index
EXISTS
Tokenizing setBackStackIndex
{stack=1, set=1, back=1, index=1}
Tokenizing index
EXISTS
Tokenizing BackStackRecord
EXISTS
Tokenizing bse
EXISTS
Tokenizing this
EXISTS
Tokenizing mBackStackIndices == null
EXISTS
Tokenizing mBackStackIndices
EXISTS
Tokenizing null
EXISTS
Tokenizing mBackStackIndices=new ArrayList<BackStackRecord>()
EXISTS
Tokenizing mBackStackIndices
EXISTS
Tokenizing new ArrayList<BackStackRecord>()
EXISTS
Tokenizing ArrayList
EXISTS
Tokenizing BackStackRecord
EXISTS
Tokenizing N
EXISTS
Tokenizing mBackStackIndices.size()
EXISTS
Tokenizing mBackStackIndices
EXISTS
Tokenizing size
EXISTS
Tokenizing index < N
{index=1, <=1, n=1}
Tokenizing index
EXISTS
Tokenizing N
EXISTS
Tokenizing DEBUG
EXISTS
Tokenizing Log.v(TAG,"Setting back stack index " + index + " to "+ bse)
EXISTS
Tokenizing Log
EXISTS
Tokenizing v
EXISTS
Tokenizing TAG
EXISTS
Tokenizing "Setting back stack index " + index + " to "+ bse
EXISTS
Tokenizing "Setting back stack index "
EXISTS
Tokenizing index
EXISTS
Tokenizing " to "
EXISTS
Tokenizing bse
EXISTS
Tokenizing mBackStackIndices.set(index,bse)
EXISTS
Tokenizing mBackStackIndices
EXISTS
Tokenizing set
EXISTS
Tokenizing index
EXISTS
Tokenizing bse
EXISTS
Tokenizing N < index
{index=1, <=1, n=1}
Tokenizing N
EXISTS
Tokenizing index
EXISTS
Tokenizing mBackStackIndices.add(null)
{add=1, stack=1, indices=1, null=1, (=1, back=1, )=1, m=1, .=1}
Tokenizing mBackStackIndices
EXISTS
Tokenizing add
EXISTS
Tokenizing null
EXISTS
Tokenizing mAvailBackStackIndices == null
EXISTS
Tokenizing mAvailBackStackIndices
EXISTS
Tokenizing null
EXISTS
Tokenizing mAvailBackStackIndices=new ArrayList<Integer>()
{avail=1, new=1, stack=1, (=1, back=1, )=1, integer=1, list=1, m=1, indices=1, array=1, <=1, ==1, >=1}
Tokenizing mAvailBackStackIndices
EXISTS
Tokenizing new ArrayList<Integer>()
EXISTS
Tokenizing ArrayList
EXISTS
Tokenizing Integer
EXISTS
Tokenizing DEBUG
EXISTS
Tokenizing Log.v(TAG,"Adding available back stack index " + N)
{stack=1, log=1, (=1, available=1, back=1, index=1, )=1, +=1, ,=1, .=1, n=1, v=1, adding=1, tag=1}
Tokenizing Log
EXISTS
Tokenizing v
EXISTS
Tokenizing TAG
EXISTS
Tokenizing "Adding available back stack index " + N
{stack=1, adding=1, available=1, back=1, index=1, +=1, n=1}
Tokenizing "Adding available back stack index "
{stack=1, adding=1, available=1, back=1, index=1}
Tokenizing N
EXISTS
Tokenizing mAvailBackStackIndices.add(N)
{add=1, avail=1, stack=1, indices=1, (=1, back=1, )=1, m=1, .=1, n=1}
Tokenizing mAvailBackStackIndices
EXISTS
Tokenizing add
EXISTS
Tokenizing N
EXISTS
Tokenizing N++
{++=1, n=1}
Tokenizing N
EXISTS
Tokenizing DEBUG
EXISTS
Tokenizing Log.v(TAG,"Adding back stack index " + index + " with "+ bse)
EXISTS
Tokenizing Log
EXISTS
Tokenizing v
EXISTS
Tokenizing TAG
EXISTS
Tokenizing "Adding back stack index " + index + " with "+ bse
EXISTS
Tokenizing "Adding back stack index "
EXISTS
Tokenizing index
EXISTS
Tokenizing " with "
EXISTS
Tokenizing bse
EXISTS
Tokenizing mBackStackIndices.add(bse)
EXISTS
Tokenizing mBackStackIndices
EXISTS
Tokenizing add
EXISTS
Tokenizing bse
EXISTS
Tokenizing freeBackStackIndex
{stack=1, back=1, index=1, free=1}
Tokenizing index
EXISTS
Tokenizing this
EXISTS
Tokenizing mBackStackIndices.set(index,null)
{stack=1, indices=1, set=1, null=1, (=1, back=1, index=1, )=1, ,=1, m=1, .=1}
Tokenizing mBackStackIndices
EXISTS
Tokenizing set
EXISTS
Tokenizing index
EXISTS
Tokenizing null
EXISTS
Tokenizing mAvailBackStackIndices == null
EXISTS
Tokenizing mAvailBackStackIndices
EXISTS
Tokenizing null
EXISTS
Tokenizing mAvailBackStackIndices=new ArrayList<Integer>()
EXISTS
Tokenizing mAvailBackStackIndices
EXISTS
Tokenizing new ArrayList<Integer>()
EXISTS
Tokenizing ArrayList
EXISTS
Tokenizing Integer
EXISTS
Tokenizing DEBUG
EXISTS
Tokenizing Log.v(TAG,"Freeing back stack index " + index)
{stack=1, freeing=1, log=1, v=1, (=1, back=1, index=2, )=1, tag=1, +=1, ,=1, .=1}
Tokenizing Log
EXISTS
Tokenizing v
EXISTS
Tokenizing TAG
EXISTS
Tokenizing "Freeing back stack index " + index
{stack=1, freeing=1, back=1, index=2, +=1}
Tokenizing "Freeing back stack index "
{stack=1, freeing=1, back=1, index=1}
Tokenizing index
EXISTS
Tokenizing mAvailBackStackIndices.add(index)
{add=1, avail=1, stack=1, indices=1, (=1, back=1, index=1, )=1, m=1, .=1}
Tokenizing mAvailBackStackIndices
EXISTS
Tokenizing add
EXISTS
Tokenizing index
EXISTS
Tokenizing execPendingActions
EXISTS
Tokenizing mExecutingActions
EXISTS
Tokenizing new IllegalStateException("Recursive entry to executePendingTransactions")
{exception=1, new=1, entry=1, pending=1, (=1, )=1, state=1, to=1, transactions=1, illegal=1, execute=1, recursive=1}
Tokenizing IllegalStateException
EXISTS
Tokenizing "Recursive entry to executePendingTransactions"
{entry=1, pending=1, to=1, transactions=1, execute=1, recursive=1}
Tokenizing Looper.myLooper() != mActivity.mHandler.getLooper()
{handler=1, activity=1, get=1, (=2, )=2, looper=3, my=1, !==1, m=2, .=3}
Tokenizing Looper.myLooper()
{(=1, )=1, looper=2, my=1, .=1}
Tokenizing Looper
EXISTS
Tokenizing myLooper
{looper=1, my=1}
Tokenizing mActivity.mHandler.getLooper()
{handler=1, activity=1, get=1, (=1, )=1, looper=1, m=2, .=2}
Tokenizing mActivity.mHandler
EXISTS
Tokenizing mActivity
EXISTS
Tokenizing mHandler
EXISTS
Tokenizing getLooper
{get=1, looper=1}
Tokenizing new IllegalStateException("Must be called from main thread of process")
{exception=1, new=1, process=1, be=1, called=1, (=1, )=1, main=1, thread=1, illegal=1, of=1, must=1, from=1, state=1}
Tokenizing IllegalStateException
EXISTS
Tokenizing "Must be called from main thread of process"
{process=1, be=1, called=1, of=1, must=1, from=1, main=1, thread=1}
Tokenizing didSomething
{did=1, something=1}
Tokenizing false
EXISTS
Tokenizing true
EXISTS
Tokenizing numActions
{num=1, actions=1}
Tokenizing this
EXISTS
Tokenizing mPendingActions == null || mPendingActions.size() == 0
{===2, ||=1, 0=1, null=1, size=1, pending=2, (=1, )=1, m=2, actions=2, .=1}
Tokenizing mPendingActions == null
EXISTS
Tokenizing mPendingActions
EXISTS
Tokenizing null
EXISTS
Tokenizing mPendingActions.size() == 0
{===1, 0=1, size=1, pending=1, (=1, )=1, m=1, actions=1, .=1}
Tokenizing mPendingActions.size()
EXISTS
Tokenizing mPendingActions
EXISTS
Tokenizing size
EXISTS
Tokenizing 0
EXISTS
Tokenizing numActions=mPendingActions.size()
{size=1, num=1, pending=1, (=1, )=1, actions=2, ==1, m=1, .=1}
Tokenizing numActions
EXISTS
Tokenizing mPendingActions.size()
EXISTS
Tokenizing mPendingActions
EXISTS
Tokenizing size
EXISTS
Tokenizing mTmpActions == null || mTmpActions.length < numActions
{===1, ||=1, null=1, tmp=2, num=1, length=1, <=1, m=2, actions=3, .=1}
Tokenizing mTmpActions == null
{===1, null=1, tmp=1, m=1, actions=1}
Tokenizing mTmpActions
EXISTS
Tokenizing null
EXISTS
Tokenizing mTmpActions.length < numActions
{tmp=1, num=1, length=1, <=1, m=1, actions=2, .=1}
Tokenizing mTmpActions.length
{tmp=1, length=1, m=1, actions=1, .=1}
Tokenizing mTmpActions
EXISTS
Tokenizing length
{length=1}
Tokenizing numActions
EXISTS
Tokenizing mTmpActions=new Runnable[numActions]
{new=1, runnable=1, tmp=1, num=1, [=1, m=1, actions=2, ==1, ]=1}
Tokenizing mTmpActions
EXISTS
Tokenizing new Runnable[numActions]
{new=1, runnable=1, num=1, [=1, actions=1, ]=1}
Tokenizing Runnable
EXISTS
Tokenizing numActions
EXISTS
Tokenizing mPendingActions.toArray(mTmpActions)
{array=1, tmp=1, pending=1, (=1, )=1, to=1, m=2, actions=2, .=1}
Tokenizing mPendingActions
EXISTS
Tokenizing toArray
EXISTS
Tokenizing mTmpActions
EXISTS
Tokenizing mPendingActions.clear()
{pending=1, clear=1, (=1, )=1, m=1, actions=1, .=1}
Tokenizing mPendingActions
EXISTS
Tokenizing clear
{clear=1}
Tokenizing mActivity.mHandler.removeCallbacks(mExecCommit)
EXISTS
Tokenizing mActivity.mHandler
EXISTS
Tokenizing mActivity
EXISTS
Tokenizing mHandler
EXISTS
Tokenizing removeCallbacks
EXISTS
Tokenizing mExecCommit
EXISTS
Tokenizing mExecutingActions=true
{true=1, executing=1, m=1, actions=1, ==1}
Tokenizing mExecutingActions
EXISTS
Tokenizing true
EXISTS
Tokenizing int i=0
EXISTS
Tokenizing i
EXISTS
Tokenizing 0
EXISTS
Tokenizing i < numActions
{num=1, i=1, <=1, actions=1}
Tokenizing i
EXISTS
Tokenizing numActions
EXISTS
Tokenizing i++
EXISTS
Tokenizing i
EXISTS
Tokenizing mTmpActions[i].run()
{tmp=1, (=1, i=1, )=1, run=1, [=1, m=1, actions=1, ]=1, .=1}
Tokenizing mTmpActions[i]
{tmp=1, i=1, [=1, m=1, actions=1, ]=1}
Tokenizing mTmpActions
EXISTS
Tokenizing i
EXISTS
Tokenizing run
EXISTS
Tokenizing mTmpActions[i]=null
{null=1, tmp=1, i=1, [=1, m=1, actions=1, ]=1, ==1}
Tokenizing mTmpActions[i]
EXISTS
Tokenizing mTmpActions
EXISTS
Tokenizing i
EXISTS
Tokenizing null
EXISTS
Tokenizing mExecutingActions=false
{false=1, executing=1, m=1, actions=1, ==1}
Tokenizing mExecutingActions
EXISTS
Tokenizing false
EXISTS
Tokenizing didSomething=true
{true=1, ==1, did=1, something=1}
Tokenizing didSomething
EXISTS
Tokenizing true
EXISTS
Tokenizing mHavePendingDeferredStart
EXISTS
Tokenizing loadersRunning
EXISTS
Tokenizing false
EXISTS
Tokenizing int i=0
EXISTS
Tokenizing i
EXISTS
Tokenizing 0
EXISTS
Tokenizing i < mActive.size()
EXISTS
Tokenizing i
EXISTS
Tokenizing mActive.size()
EXISTS
Tokenizing mActive
EXISTS
Tokenizing size
EXISTS
Tokenizing i++
EXISTS
Tokenizing i
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing f
EXISTS
Tokenizing mActive.get(i)
EXISTS
Tokenizing mActive
EXISTS
Tokenizing get
EXISTS
Tokenizing i
EXISTS
Tokenizing f != null && f.mLoaderManager != null
{&&=1, null=2, manager=1, f=2, loader=1, !==2, m=1, .=1}
Tokenizing f != null
EXISTS
Tokenizing f
EXISTS
Tokenizing null
EXISTS
Tokenizing f.mLoaderManager != null
EXISTS
Tokenizing f.mLoaderManager
EXISTS
Tokenizing f
EXISTS
Tokenizing mLoaderManager
EXISTS
Tokenizing null
EXISTS
Tokenizing loadersRunning|=f.mLoaderManager.hasRunningLoaders()
EXISTS
Tokenizing loadersRunning
EXISTS
Tokenizing f.mLoaderManager.hasRunningLoaders()
EXISTS
Tokenizing f.mLoaderManager
EXISTS
Tokenizing f
EXISTS
Tokenizing mLoaderManager
EXISTS
Tokenizing hasRunningLoaders
EXISTS
Tokenizing !loadersRunning
EXISTS
Tokenizing loadersRunning
EXISTS
Tokenizing mHavePendingDeferredStart=false
{deferred=1, pending=1, have=1, start=1, false=1, m=1, ==1}
Tokenizing mHavePendingDeferredStart
EXISTS
Tokenizing false
EXISTS
Tokenizing startPendingDeferredFragments()
EXISTS
Tokenizing startPendingDeferredFragments
EXISTS
Tokenizing didSomething
EXISTS
Tokenizing reportBackStackChanged
{stack=1, report=1, back=1, changed=1}
Tokenizing mBackStackChangeListeners != null
EXISTS
Tokenizing mBackStackChangeListeners
EXISTS
Tokenizing null
EXISTS
Tokenizing int i=0
EXISTS
Tokenizing i
EXISTS
Tokenizing 0
EXISTS
Tokenizing i < mBackStackChangeListeners.size()
{stack=1, listeners=1, size=1, change=1, (=1, i=1, back=1, )=1, <=1, m=1, .=1}
Tokenizing i
EXISTS
Tokenizing mBackStackChangeListeners.size()
{stack=1, listeners=1, size=1, change=1, (=1, back=1, )=1, m=1, .=1}
Tokenizing mBackStackChangeListeners
EXISTS
Tokenizing size
EXISTS
Tokenizing i++
EXISTS
Tokenizing i
EXISTS
Tokenizing mBackStackChangeListeners.get(i).onBackStackChanged()
{stack=2, listeners=1, change=1, get=1, (=2, back=2, i=1, )=2, m=1, .=2, on=1, changed=1}
Tokenizing mBackStackChangeListeners.get(i)
{stack=1, listeners=1, change=1, get=1, (=1, back=1, i=1, )=1, m=1, .=1}
Tokenizing mBackStackChangeListeners
EXISTS
Tokenizing get
EXISTS
Tokenizing i
EXISTS
Tokenizing onBackStackChanged
EXISTS
Tokenizing addBackStackState
{add=1, stack=1, back=1, state=1}
Tokenizing BackStackRecord
EXISTS
Tokenizing state
{state=1}
Tokenizing mBackStack == null
{===1, stack=1, null=1, back=1, m=1}
Tokenizing mBackStack
EXISTS
Tokenizing null
EXISTS
Tokenizing mBackStack=new ArrayList<BackStackRecord>()
{new=1, stack=2, array=1, record=1, (=1, back=2, )=1, list=1, <=1, m=1, ==1, >=1}
Tokenizing mBackStack
EXISTS
Tokenizing new ArrayList<BackStackRecord>()
EXISTS
Tokenizing ArrayList
EXISTS
Tokenizing BackStackRecord
EXISTS
Tokenizing mBackStack.add(state)
{add=1, stack=1, (=1, back=1, )=1, state=1, m=1, .=1}
Tokenizing mBackStack
EXISTS
Tokenizing add
EXISTS
Tokenizing state
EXISTS
Tokenizing reportBackStackChanged()
{stack=1, report=1, (=1, back=1, )=1, changed=1}
Tokenizing reportBackStackChanged
EXISTS
Tokenizing popBackStackState
EXISTS
Tokenizing Handler
EXISTS
Tokenizing handler
{handler=1}
Tokenizing String
EXISTS
Tokenizing name
EXISTS
Tokenizing id
EXISTS
Tokenizing flags
EXISTS
Tokenizing mBackStack == null
EXISTS
Tokenizing mBackStack
EXISTS
Tokenizing null
EXISTS
Tokenizing false
EXISTS
Tokenizing name == null && id < 0 && (flags & POP_BACK_STACK_INCLUSIVE) == 0
{===2, &&=2, 0=2, null=1, &=1, name=1, (=1, flags=1, )=1, pop_back_stack_inclusive=1, id=1, <=1}
Tokenizing name == null && id < 0
{===1, &&=1, 0=1, null=1, name=1, id=1, <=1}
Tokenizing name == null
{===1, null=1, name=1}
Tokenizing name
EXISTS
Tokenizing null
EXISTS
Tokenizing id < 0
EXISTS
Tokenizing id
EXISTS
Tokenizing 0
EXISTS
Tokenizing (flags & POP_BACK_STACK_INCLUSIVE) == 0
{===1, 0=1, &=1, (=1, flags=1, )=1, pop_back_stack_inclusive=1}
Tokenizing (flags & POP_BACK_STACK_INCLUSIVE)
{&=1, (=1, flags=1, )=1, pop_back_stack_inclusive=1}
Tokenizing flags & POP_BACK_STACK_INCLUSIVE
{&=1, flags=1, pop_back_stack_inclusive=1}
Tokenizing flags
EXISTS
Tokenizing POP_BACK_STACK_INCLUSIVE
EXISTS
Tokenizing 0
EXISTS
Tokenizing last
{last=1}
Tokenizing mBackStack.size() - 1
{1=1, stack=1, size=1, (=1, back=1, )=1, m=1, -=1, .=1}
Tokenizing mBackStack.size()
EXISTS
Tokenizing mBackStack
EXISTS
Tokenizing size
EXISTS
Tokenizing 1
EXISTS
Tokenizing last < 0
{0=1, last=1, <=1}
Tokenizing last
EXISTS
Tokenizing 0
EXISTS
Tokenizing false
EXISTS
Tokenizing BackStackRecord
EXISTS
Tokenizing bss
{bss=1}
Tokenizing mBackStack.remove(last)
{stack=1, last=1, (=1, back=1, )=1, m=1, .=1, remove=1}
Tokenizing mBackStack
EXISTS
Tokenizing remove
EXISTS
Tokenizing last
EXISTS
Tokenizing bss.popFromBackStack(true)
{pop=1, stack=1, bss=1, (=1, true=1, back=1, )=1, from=1, .=1}
Tokenizing bss
EXISTS
Tokenizing popFromBackStack
{pop=1, stack=1, back=1, from=1}
Tokenizing true
EXISTS
Tokenizing reportBackStackChanged()
EXISTS
Tokenizing reportBackStackChanged
EXISTS
Tokenizing index
EXISTS
Tokenizing -1
EXISTS
Tokenizing 1
EXISTS
Tokenizing name != null || id >= 0
{||=1, 0=1, null=1, name=1, id=1, !==1, >==1}
Tokenizing name != null
{null=1, name=1, !==1}
Tokenizing name
EXISTS
Tokenizing null
EXISTS
Tokenizing id >= 0
{0=1, id=1, >==1}
Tokenizing id
EXISTS
Tokenizing 0
EXISTS
Tokenizing index=mBackStack.size() - 1
{1=1, stack=1, size=1, (=1, index=1, back=1, )=1, ==1, m=1, -=1, .=1}
Tokenizing index
EXISTS
Tokenizing mBackStack.size() - 1
EXISTS
Tokenizing mBackStack.size()
EXISTS
Tokenizing mBackStack
EXISTS
Tokenizing size
EXISTS
Tokenizing 1
EXISTS
Tokenizing index >= 0
{0=1, index=1, >==1}
Tokenizing index
EXISTS
Tokenizing 0
EXISTS
Tokenizing BackStackRecord
EXISTS
Tokenizing bss
EXISTS
Tokenizing mBackStack.get(index)
EXISTS
Tokenizing mBackStack
EXISTS
Tokenizing get
EXISTS
Tokenizing index
EXISTS
Tokenizing name != null && name.equals(bss.getName())
{&&=1, bss=1, null=1, equals=1, get=1, name=3, (=2, )=2, !==1, .=2}
Tokenizing name != null
EXISTS
Tokenizing name
EXISTS
Tokenizing null
EXISTS
Tokenizing name.equals(bss.getName())
{bss=1, equals=1, get=1, name=2, (=2, )=2, .=2}
Tokenizing name
EXISTS
Tokenizing equals
EXISTS
Tokenizing bss.getName()
{bss=1, get=1, name=1, (=1, )=1, .=1}
Tokenizing bss
EXISTS
Tokenizing getName
EXISTS
Tokenizing id >= 0 && id == bss.mIndex
{0=1, &&=1, ===1, bss=1, index=1, id=2, m=1, .=1, >==1}
Tokenizing id >= 0
EXISTS
Tokenizing id
EXISTS
Tokenizing 0
EXISTS
Tokenizing id == bss.mIndex
{===1, bss=1, index=1, id=1, m=1, .=1}
Tokenizing id
EXISTS
Tokenizing bss.mIndex
{bss=1, index=1, m=1, .=1}
Tokenizing bss
EXISTS
Tokenizing mIndex
EXISTS
Tokenizing index--
{--=1, index=1}
Tokenizing index
EXISTS
Tokenizing index < 0
{0=1, index=1, <=1}
Tokenizing index
EXISTS
Tokenizing 0
EXISTS
Tokenizing false
EXISTS
Tokenizing (flags & POP_BACK_STACK_INCLUSIVE) != 0
{0=1, &=1, (=1, flags=1, )=1, pop_back_stack_inclusive=1, !==1}
Tokenizing (flags & POP_BACK_STACK_INCLUSIVE)
EXISTS
Tokenizing flags & POP_BACK_STACK_INCLUSIVE
EXISTS
Tokenizing flags
EXISTS
Tokenizing POP_BACK_STACK_INCLUSIVE
EXISTS
Tokenizing 0
EXISTS
Tokenizing index--
EXISTS
Tokenizing index
EXISTS
Tokenizing index >= 0
EXISTS
Tokenizing index
EXISTS
Tokenizing 0
EXISTS
Tokenizing BackStackRecord
EXISTS
Tokenizing bss
EXISTS
Tokenizing mBackStack.get(index)
EXISTS
Tokenizing mBackStack
EXISTS
Tokenizing get
EXISTS
Tokenizing index
EXISTS
Tokenizing (name != null && name.equals(bss.getName())) || (id >= 0 && id == bss.mIndex)
{&&=2, ||=1, ===1, bss=2, (=4, )=4, index=1, m=1, .=3, 0=1, null=1, equals=1, get=1, name=3, id=2, !==1, >==1}
Tokenizing (name != null && name.equals(bss.getName()))
{&&=1, bss=1, null=1, equals=1, get=1, (=3, name=3, )=3, !==1, .=2}
Tokenizing name != null && name.equals(bss.getName())
EXISTS
Tokenizing name != null
EXISTS
Tokenizing name
EXISTS
Tokenizing null
EXISTS
Tokenizing name.equals(bss.getName())
EXISTS
Tokenizing name
EXISTS
Tokenizing equals
EXISTS
Tokenizing bss.getName()
EXISTS
Tokenizing bss
EXISTS
Tokenizing getName
EXISTS
Tokenizing (id >= 0 && id == bss.mIndex)
{0=1, &&=1, ===1, bss=1, (=1, index=1, )=1, id=2, m=1, .=1, >==1}
Tokenizing id >= 0 && id == bss.mIndex
EXISTS
Tokenizing id >= 0
EXISTS
Tokenizing id
EXISTS
Tokenizing 0
EXISTS
Tokenizing id == bss.mIndex
EXISTS
Tokenizing id
EXISTS
Tokenizing bss.mIndex
EXISTS
Tokenizing bss
EXISTS
Tokenizing mIndex
EXISTS
Tokenizing index--
EXISTS
Tokenizing index
EXISTS
Tokenizing index == mBackStack.size() - 1
{===1, 1=1, stack=1, size=1, (=1, index=1, back=1, )=1, m=1, -=1, .=1}
Tokenizing index
EXISTS
Tokenizing mBackStack.size() - 1
EXISTS
Tokenizing mBackStack.size()
EXISTS
Tokenizing mBackStack
EXISTS
Tokenizing size
EXISTS
Tokenizing 1
EXISTS
Tokenizing false
EXISTS
Tokenizing ArrayList
EXISTS
Tokenizing BackStackRecord
EXISTS
Tokenizing states
{states=1}
Tokenizing new ArrayList<BackStackRecord>()
EXISTS
Tokenizing ArrayList
EXISTS
Tokenizing BackStackRecord
EXISTS
Tokenizing int i=mBackStack.size() - 1
{1=1, stack=1, size=1, (=1, i=1, back=1, )=1, ==1, m=1, -=1, int=1, .=1}
Tokenizing i
EXISTS
Tokenizing mBackStack.size() - 1
EXISTS
Tokenizing mBackStack.size()
EXISTS
Tokenizing mBackStack
EXISTS
Tokenizing size
EXISTS
Tokenizing 1
EXISTS
Tokenizing i > index
{i=1, index=1, >=1}
Tokenizing i
EXISTS
Tokenizing index
EXISTS
Tokenizing i--
EXISTS
Tokenizing i
EXISTS
Tokenizing states.add(mBackStack.remove(i))
{add=1, stack=1, (=2, back=1, i=1, )=2, m=1, .=2, remove=1, states=1}
Tokenizing states
EXISTS
Tokenizing add
EXISTS
Tokenizing mBackStack.remove(i)
{stack=1, (=1, back=1, i=1, )=1, m=1, .=1, remove=1}
Tokenizing mBackStack
EXISTS
Tokenizing remove
EXISTS
Tokenizing i
EXISTS
Tokenizing LAST
{last=1}
Tokenizing states.size() - 1
{1=1, size=1, (=1, )=1, -=1, .=1, states=1}
Tokenizing states.size()
{size=1, (=1, )=1, .=1, states=1}
Tokenizing states
EXISTS
Tokenizing size
EXISTS
Tokenizing 1
EXISTS
Tokenizing int i=0
EXISTS
Tokenizing i
EXISTS
Tokenizing 0
EXISTS
Tokenizing i <= LAST
{<==1, last=1, i=1}
Tokenizing i
EXISTS
Tokenizing LAST
EXISTS
Tokenizing i++
EXISTS
Tokenizing i
EXISTS
Tokenizing DEBUG
EXISTS
Tokenizing Log.v(TAG,"Popping back stack state: " + states.get(i))
{popping=1, stack=1, log=1, (=2, back=1, i=1, )=2, +=1, ,=1, .=2, states=1, v=1, get=1, :=1, tag=1, state=1}
Tokenizing Log
EXISTS
Tokenizing v
EXISTS
Tokenizing TAG
EXISTS
Tokenizing "Popping back stack state: " + states.get(i)
{popping=1, stack=1, get=1, (=1, back=1, i=1, )=1, :=1, state=1, +=1, .=1, states=1}
Tokenizing "Popping back stack state: "
{popping=1, stack=1, back=1, :=1, state=1}
Tokenizing states.get(i)
{get=1, (=1, i=1, )=1, .=1, states=1}
Tokenizing states
EXISTS
Tokenizing get
EXISTS
Tokenizing i
EXISTS
Tokenizing states.get(i).popFromBackStack(i == LAST)
{pop=1, ===1, stack=1, last=1, get=1, (=2, i=2, )=2, back=1, from=1, .=2, states=1}
Tokenizing states.get(i)
EXISTS
Tokenizing states
EXISTS
Tokenizing get
EXISTS
Tokenizing i
EXISTS
Tokenizing popFromBackStack
EXISTS
Tokenizing i == LAST
{===1, last=1, i=1}
Tokenizing i
EXISTS
Tokenizing LAST
EXISTS
Tokenizing reportBackStackChanged()
EXISTS
Tokenizing reportBackStackChanged
EXISTS
Tokenizing true
EXISTS
Tokenizing ArrayList
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing retainNonConfig
{retain=1, non=1, config=1}
Tokenizing ArrayList
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing fragments
{fragments=1}
Tokenizing null
EXISTS
Tokenizing mActive != null
EXISTS
Tokenizing mActive
EXISTS
Tokenizing null
EXISTS
Tokenizing int i=0
EXISTS
Tokenizing i
EXISTS
Tokenizing 0
EXISTS
Tokenizing i < mActive.size()
EXISTS
Tokenizing i
EXISTS
Tokenizing mActive.size()
EXISTS
Tokenizing mActive
EXISTS
Tokenizing size
EXISTS
Tokenizing i++
EXISTS
Tokenizing i
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing f
EXISTS
Tokenizing mActive.get(i)
EXISTS
Tokenizing mActive
EXISTS
Tokenizing get
EXISTS
Tokenizing i
EXISTS
Tokenizing f != null && f.mRetainInstance
{&&=1, instance=1, null=1, f=2, retain=1, !==1, m=1, .=1}
Tokenizing f != null
EXISTS
Tokenizing f
EXISTS
Tokenizing null
EXISTS
Tokenizing f.mRetainInstance
{instance=1, f=1, retain=1, m=1, .=1}
Tokenizing f
EXISTS
Tokenizing mRetainInstance
{instance=1, retain=1, m=1}
Tokenizing fragments == null
{===1, null=1, fragments=1}
Tokenizing fragments
EXISTS
Tokenizing null
EXISTS
Tokenizing fragments=new ArrayList<Fragment>()
{new=1, fragment=1, array=1, (=1, )=1, fragments=1, list=1, <=1, ==1, >=1}
Tokenizing fragments
EXISTS
Tokenizing new ArrayList<Fragment>()
EXISTS
Tokenizing ArrayList
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing fragments.add(f)
{add=1, f=1, (=1, )=1, fragments=1, .=1}
Tokenizing fragments
EXISTS
Tokenizing add
EXISTS
Tokenizing f
EXISTS
Tokenizing f.mRetaining=true
{f=1, true=1, retaining=1, m=1, ==1, .=1}
Tokenizing f.mRetaining
EXISTS
Tokenizing f
EXISTS
Tokenizing mRetaining
EXISTS
Tokenizing true
EXISTS
Tokenizing f.mTargetIndex=f.mTarget != null ? f.mTarget.mIndex : -1
{1=1, null=1, f=3, index=2, :=1, !==1, m=4, ==1, -=1, .=4, target=3, ?=1}
Tokenizing f.mTargetIndex
{f=1, index=1, m=1, .=1, target=1}
Tokenizing f
EXISTS
Tokenizing mTargetIndex
{index=1, m=1, target=1}
Tokenizing f.mTarget != null ? f.mTarget.mIndex : -1
{1=1, null=1, f=2, index=1, :=1, !==1, m=3, -=1, .=3, target=2, ?=1}
Tokenizing f.mTarget != null
EXISTS
Tokenizing f.mTarget
EXISTS
Tokenizing f
EXISTS
Tokenizing mTarget
EXISTS
Tokenizing null
EXISTS
Tokenizing f.mTarget.mIndex
{f=1, index=1, m=2, .=2, target=1}
Tokenizing f.mTarget
EXISTS
Tokenizing f
EXISTS
Tokenizing mTarget
EXISTS
Tokenizing mIndex
EXISTS
Tokenizing -1
EXISTS
Tokenizing 1
EXISTS
Tokenizing fragments
EXISTS
Tokenizing saveFragmentViewState
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing f
EXISTS
Tokenizing f.mView == null
{===1, view=1, null=1, f=1, m=1, .=1}
Tokenizing f.mView
EXISTS
Tokenizing f
EXISTS
Tokenizing mView
EXISTS
Tokenizing null
EXISTS
Tokenizing mStateArray == null
{===1, null=1, array=1, state=1, m=1}
Tokenizing mStateArray
EXISTS
Tokenizing null
EXISTS
Tokenizing mStateArray=new SparseArray<Parcelable>()
{new=1, parcelable=1, array=2, sparse=1, (=1, )=1, state=1, <=1, m=1, ==1, >=1}
Tokenizing mStateArray
EXISTS
Tokenizing new SparseArray<Parcelable>()
{new=1, parcelable=1, sparse=1, array=1, (=1, )=1, <=1, >=1}
Tokenizing SparseArray
EXISTS
Tokenizing Parcelable
EXISTS
Tokenizing mStateArray.clear()
{array=1, clear=1, (=1, )=1, state=1, m=1, .=1}
Tokenizing mStateArray
EXISTS
Tokenizing clear
EXISTS
Tokenizing f.mView.saveHierarchyState(mStateArray)
{view=1, array=1, f=1, hierarchy=1, save=1, (=1, )=1, state=2, m=2, .=2}
Tokenizing f.mView
EXISTS
Tokenizing f
EXISTS
Tokenizing mView
EXISTS
Tokenizing saveHierarchyState
{hierarchy=1, save=1, state=1}
Tokenizing mStateArray
EXISTS
Tokenizing mStateArray.size() > 0
{0=1, size=1, array=1, (=1, )=1, state=1, m=1, .=1, >=1}
Tokenizing mStateArray.size()
{size=1, array=1, (=1, )=1, state=1, m=1, .=1}
Tokenizing mStateArray
EXISTS
Tokenizing size
EXISTS
Tokenizing 0
EXISTS
Tokenizing f.mSavedViewState=mStateArray
{view=1, saved=1, array=1, f=1, state=2, m=2, ==1, .=1}
Tokenizing f.mSavedViewState
EXISTS
Tokenizing f
EXISTS
Tokenizing mSavedViewState
EXISTS
Tokenizing mStateArray
EXISTS
Tokenizing mStateArray=null
{null=1, array=1, state=1, m=1, ==1}
Tokenizing mStateArray
EXISTS
Tokenizing null
EXISTS
Tokenizing Bundle
EXISTS
Tokenizing saveFragmentBasicState
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing f
EXISTS
Tokenizing Bundle
EXISTS
Tokenizing result
EXISTS
Tokenizing null
EXISTS
Tokenizing mStateBundle == null
{===1, null=1, state=1, m=1, bundle=1}
Tokenizing mStateBundle
EXISTS
Tokenizing null
EXISTS
Tokenizing mStateBundle=new Bundle()
{new=1, (=1, )=1, state=1, m=1, bundle=2, ==1}
Tokenizing mStateBundle
EXISTS
Tokenizing new Bundle()
{new=1, (=1, )=1, bundle=1}
Tokenizing Bundle
EXISTS
Tokenizing f.onSaveInstanceState(mStateBundle)
{instance=1, f=1, save=1, (=1, )=1, state=2, m=1, bundle=1, .=1, on=1}
Tokenizing f
EXISTS
Tokenizing onSaveInstanceState
{instance=1, save=1, state=1, on=1}
Tokenizing mStateBundle
EXISTS
Tokenizing !mStateBundle.isEmpty()
{!=1, (=1, )=1, is=1, state=1, m=1, bundle=1, .=1, empty=1}
Tokenizing mStateBundle.isEmpty()
{(=1, )=1, is=1, state=1, m=1, bundle=1, .=1, empty=1}
Tokenizing mStateBundle
EXISTS
Tokenizing isEmpty
{is=1, empty=1}
Tokenizing result=mStateBundle
{result=1, state=1, ==1, m=1, bundle=1}
Tokenizing result
EXISTS
Tokenizing mStateBundle
EXISTS
Tokenizing mStateBundle=null
{null=1, state=1, m=1, bundle=1, ==1}
Tokenizing mStateBundle
EXISTS
Tokenizing null
EXISTS
Tokenizing f.mView != null
EXISTS
Tokenizing f.mView
EXISTS
Tokenizing f
EXISTS
Tokenizing mView
EXISTS
Tokenizing null
EXISTS
Tokenizing saveFragmentViewState(f)
EXISTS
Tokenizing saveFragmentViewState
EXISTS
Tokenizing f
EXISTS
Tokenizing f.mSavedViewState != null
{view=1, null=1, saved=1, f=1, state=1, !==1, m=1, .=1}
Tokenizing f.mSavedViewState
EXISTS
Tokenizing f
EXISTS
Tokenizing mSavedViewState
EXISTS
Tokenizing null
EXISTS
Tokenizing result == null
{result=1, ===1, null=1}
Tokenizing result
EXISTS
Tokenizing null
EXISTS
Tokenizing result=new Bundle()
{result=1, new=1, (=1, )=1, ==1, bundle=1}
Tokenizing result
EXISTS
Tokenizing new Bundle()
EXISTS
Tokenizing Bundle
EXISTS
Tokenizing result.putSparseParcelableArray(FragmentManagerImpl.VIEW_STATE_TAG,f.mSavedViewState)
{manager=1, saved=1, f=1, (=1, )=1, ,=1, m=1, .=3, put=1, result=1, impl=1, fragment=1, view=1, parcelable=1, sparse=1, array=1, state=1, view_state_tag=1}
Tokenizing result
EXISTS
Tokenizing putSparseParcelableArray
{parcelable=1, sparse=1, array=1, put=1}
Tokenizing FragmentManagerImpl.VIEW_STATE_TAG
EXISTS
Tokenizing FragmentManagerImpl
EXISTS
Tokenizing VIEW_STATE_TAG
EXISTS
Tokenizing f.mSavedViewState
EXISTS
Tokenizing f
EXISTS
Tokenizing mSavedViewState
EXISTS
Tokenizing !f.mUserVisibleHint
EXISTS
Tokenizing f.mUserVisibleHint
EXISTS
Tokenizing f
EXISTS
Tokenizing mUserVisibleHint
EXISTS
Tokenizing result == null
EXISTS
Tokenizing result
EXISTS
Tokenizing null
EXISTS
Tokenizing result=new Bundle()
EXISTS
Tokenizing result
EXISTS
Tokenizing new Bundle()
EXISTS
Tokenizing Bundle
EXISTS
Tokenizing result.putBoolean(FragmentManagerImpl.USER_VISIBLE_HINT_TAG,f.mUserVisibleHint)
{visible=1, manager=1, f=1, (=1, )=1, ,=1, m=1, .=3, put=1, result=1, impl=1, fragment=1, boolean=1, user_visible_hint_tag=1, hint=1, user=1}
Tokenizing result
EXISTS
Tokenizing putBoolean
{boolean=1, put=1}
Tokenizing FragmentManagerImpl.USER_VISIBLE_HINT_TAG
EXISTS
Tokenizing FragmentManagerImpl
EXISTS
Tokenizing USER_VISIBLE_HINT_TAG
EXISTS
Tokenizing f.mUserVisibleHint
EXISTS
Tokenizing f
EXISTS
Tokenizing mUserVisibleHint
EXISTS
Tokenizing result
EXISTS
Tokenizing Parcelable
EXISTS
Tokenizing saveAllState
{all=1, save=1, state=1}
Tokenizing execPendingActions()
EXISTS
Tokenizing execPendingActions
EXISTS
Tokenizing mStateSaved=true
{saved=1, true=1, state=1, m=1, ==1}
Tokenizing mStateSaved
EXISTS
Tokenizing true
EXISTS
Tokenizing mActive == null || mActive.size() <= 0
{===1, ||=1, 0=1, <==1, null=1, size=1, (=1, active=2, )=1, m=2, .=1}
Tokenizing mActive == null
EXISTS
Tokenizing mActive
EXISTS
Tokenizing null
EXISTS
Tokenizing mActive.size() <= 0
{0=1, <==1, size=1, (=1, active=1, )=1, m=1, .=1}
Tokenizing mActive.size()
EXISTS
Tokenizing mActive
EXISTS
Tokenizing size
EXISTS
Tokenizing 0
EXISTS
Tokenizing null
EXISTS
Tokenizing N
EXISTS
Tokenizing mActive.size()
EXISTS
Tokenizing mActive
EXISTS
Tokenizing size
EXISTS
Tokenizing FragmentState
EXISTS
Tokenizing active
{active=1}
Tokenizing new FragmentState[N]
{new=1, fragment=1, state=1, [=1, ]=1, n=1}
Tokenizing FragmentState
EXISTS
Tokenizing N
EXISTS
Tokenizing haveFragments
{have=1, fragments=1}
Tokenizing false
EXISTS
Tokenizing int i=0
EXISTS
Tokenizing i
EXISTS
Tokenizing 0
EXISTS
Tokenizing i < N
EXISTS
Tokenizing i
EXISTS
Tokenizing N
EXISTS
Tokenizing i++
EXISTS
Tokenizing i
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing f
EXISTS
Tokenizing mActive.get(i)
EXISTS
Tokenizing mActive
EXISTS
Tokenizing get
EXISTS
Tokenizing i
EXISTS
Tokenizing f != null
EXISTS
Tokenizing f
EXISTS
Tokenizing null
EXISTS
Tokenizing haveFragments=true
{have=1, true=1, fragments=1, ==1}
Tokenizing haveFragments
EXISTS
Tokenizing true
EXISTS
Tokenizing FragmentState
EXISTS
Tokenizing fs
{fs=1}
Tokenizing new FragmentState(f)
{new=1, fragment=1, f=1, (=1, )=1, state=1}
Tokenizing FragmentState
EXISTS
Tokenizing f
EXISTS
Tokenizing active[i]=fs
{active=1, i=1, [=1, ]=1, ==1, fs=1}
Tokenizing active[i]
{active=1, i=1, [=1, ]=1}
Tokenizing active
EXISTS
Tokenizing i
EXISTS
Tokenizing fs
EXISTS
Tokenizing f.mState > Fragment.INITIALIZING && fs.mSavedFragmentState == null
{&&=1, ===1, fragment=2, null=1, saved=1, f=1, initializing=1, state=2, m=2, fs=1, .=3, >=1}
Tokenizing f.mState > Fragment.INITIALIZING
{fragment=1, f=1, initializing=1, state=1, m=1, .=2, >=1}
Tokenizing f.mState
EXISTS
Tokenizing f
EXISTS
Tokenizing mState
EXISTS
Tokenizing Fragment.INITIALIZING
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing INITIALIZING
EXISTS
Tokenizing fs.mSavedFragmentState == null
{===1, fragment=1, null=1, saved=1, state=1, fs=1, m=1, .=1}
Tokenizing fs.mSavedFragmentState
{fragment=1, saved=1, state=1, fs=1, m=1, .=1}
Tokenizing fs
EXISTS
Tokenizing mSavedFragmentState
EXISTS
Tokenizing null
EXISTS
Tokenizing fs.mSavedFragmentState=saveFragmentBasicState(f)
{fragment=2, saved=1, f=1, save=1, (=1, )=1, state=2, basic=1, fs=1, m=1, ==1, .=1}
Tokenizing fs.mSavedFragmentState
EXISTS
Tokenizing fs
EXISTS
Tokenizing mSavedFragmentState
EXISTS
Tokenizing saveFragmentBasicState(f)
{fragment=1, f=1, save=1, (=1, )=1, state=1, basic=1}
Tokenizing saveFragmentBasicState
EXISTS
Tokenizing f
EXISTS
Tokenizing f.mTarget != null
EXISTS
Tokenizing f.mTarget
EXISTS
Tokenizing f
EXISTS
Tokenizing mTarget
EXISTS
Tokenizing null
EXISTS
Tokenizing f.mTarget.mIndex < 0
{0=1, f=1, index=1, <=1, m=2, .=2, target=1}
Tokenizing f.mTarget.mIndex
EXISTS
Tokenizing f.mTarget
EXISTS
Tokenizing f
EXISTS
Tokenizing mTarget
EXISTS
Tokenizing mIndex
EXISTS
Tokenizing 0
EXISTS
Tokenizing String
EXISTS
Tokenizing msg
{msg=1}
Tokenizing "Failure saving state: " + f + " has target not in fragment manager: "+ f.mTarget
{manager=1, in=1, f=2, +=3, m=1, .=1, target=2, saving=1, not=1, fragment=1, failure=1, :=2, state=1, has=1}
Tokenizing "Failure saving state: "
{saving=1, failure=1, :=1, state=1}
Tokenizing f
EXISTS
Tokenizing " has target not in fragment manager: "
{not=1, fragment=1, manager=1, in=1, :=1, has=1, target=1}
Tokenizing f.mTarget
EXISTS
Tokenizing f
EXISTS
Tokenizing mTarget
EXISTS
Tokenizing Slog.e(TAG,msg)
{msg=1, slog=1, e=1, (=1, )=1, tag=1, ,=1, .=1}
Tokenizing Slog
EXISTS
Tokenizing e
{e=1}
Tokenizing TAG
EXISTS
Tokenizing msg
EXISTS
Tokenizing dump("  ",null,new PrintWriter(new LogWriter(Log.ERROR,TAG,Log.LOG_ID_SYSTEM)),new String[]{})
{new=3, string=1, log=3, (=3, )=3, ,=5, error=1, .=2, print=1, null=1, dump=1, writer=2, tag=1, [=1, {=1, log_id_system=1, ]=1, }=1}
Tokenizing dump
EXISTS
Tokenizing "  "
{}
Tokenizing null
EXISTS
Tokenizing new PrintWriter(new LogWriter(Log.ERROR,TAG,Log.LOG_ID_SYSTEM))
{new=2, print=1, log=3, (=2, )=2, writer=2, tag=1, error=1, ,=2, log_id_system=1, .=2}
Tokenizing PrintWriter
EXISTS
Tokenizing new LogWriter(Log.ERROR,TAG,Log.LOG_ID_SYSTEM)
{new=1, log=3, (=1, )=1, writer=1, tag=1, error=1, ,=2, log_id_system=1, .=2}
Tokenizing LogWriter
EXISTS
Tokenizing Log.ERROR
{log=1, error=1, .=1}
Tokenizing Log
EXISTS
Tokenizing ERROR
{error=1}
Tokenizing TAG
EXISTS
Tokenizing Log.LOG_ID_SYSTEM
{log=1, log_id_system=1, .=1}
Tokenizing Log
EXISTS
Tokenizing LOG_ID_SYSTEM
{log_id_system=1}
Tokenizing new String[]{}
{new=1, string=1, [=1, {=1, ]=1, }=1}
Tokenizing String
EXISTS
Tokenizing {}
{{=1, }=1}
Tokenizing new IllegalStateException(msg)
{exception=1, msg=1, new=1, (=1, )=1, state=1, illegal=1}
Tokenizing IllegalStateException
EXISTS
Tokenizing msg
EXISTS
Tokenizing fs.mSavedFragmentState == null
EXISTS
Tokenizing fs.mSavedFragmentState
EXISTS
Tokenizing fs
EXISTS
Tokenizing mSavedFragmentState
EXISTS
Tokenizing null
EXISTS
Tokenizing fs.mSavedFragmentState=new Bundle()
{new=1, fragment=1, saved=1, (=1, )=1, state=1, fs=1, m=1, ==1, bundle=1, .=1}
Tokenizing fs.mSavedFragmentState
EXISTS
Tokenizing fs
EXISTS
Tokenizing mSavedFragmentState
EXISTS
Tokenizing new Bundle()
EXISTS
Tokenizing Bundle
EXISTS
Tokenizing putFragment(fs.mSavedFragmentState,FragmentManagerImpl.TARGET_STATE_TAG,f.mTarget)
{manager=1, saved=1, f=1, (=1, )=1, ,=2, fs=1, m=2, put=1, .=3, target=1, impl=1, fragment=3, state=1, target_state_tag=1}
Tokenizing putFragment
EXISTS
Tokenizing fs.mSavedFragmentState
EXISTS
Tokenizing fs
EXISTS
Tokenizing mSavedFragmentState
EXISTS
Tokenizing FragmentManagerImpl.TARGET_STATE_TAG
EXISTS
Tokenizing FragmentManagerImpl
EXISTS
Tokenizing TARGET_STATE_TAG
EXISTS
Tokenizing f.mTarget
EXISTS
Tokenizing f
EXISTS
Tokenizing mTarget
EXISTS
Tokenizing f.mTargetRequestCode != 0
{0=1, request=1, code=1, f=1, !==1, m=1, .=1, target=1}
Tokenizing f.mTargetRequestCode
EXISTS
Tokenizing f
EXISTS
Tokenizing mTargetRequestCode
EXISTS
Tokenizing 0
EXISTS
Tokenizing fs.mSavedFragmentState.putInt(FragmentManagerImpl.TARGET_REQUEST_CODE_STATE_TAG,f.mTargetRequestCode)
{target_request_code_state_tag=1, request=1, code=1, manager=1, saved=1, f=1, (=1, )=1, ,=1, fs=1, m=2, .=4, put=1, int=1, target=1, impl=1, fragment=2, state=1}
Tokenizing fs.mSavedFragmentState
EXISTS
Tokenizing fs
EXISTS
Tokenizing mSavedFragmentState
EXISTS
Tokenizing putInt
EXISTS
Tokenizing FragmentManagerImpl.TARGET_REQUEST_CODE_STATE_TAG
EXISTS
Tokenizing FragmentManagerImpl
EXISTS
Tokenizing TARGET_REQUEST_CODE_STATE_TAG
EXISTS
Tokenizing f.mTargetRequestCode
EXISTS
Tokenizing f
EXISTS
Tokenizing mTargetRequestCode
EXISTS
Tokenizing fs.mSavedFragmentState=f.mSavedFragmentState
{fragment=2, saved=2, f=1, state=2, fs=1, m=2, ==1, .=2}
Tokenizing fs.mSavedFragmentState
EXISTS
Tokenizing fs
EXISTS
Tokenizing mSavedFragmentState
EXISTS
Tokenizing f.mSavedFragmentState
EXISTS
Tokenizing f
EXISTS
Tokenizing mSavedFragmentState
EXISTS
Tokenizing DEBUG
EXISTS
Tokenizing Log.v(TAG,"Saved state of " + f + ": "+ fs.mSavedFragmentState)
{log=1, saved=2, f=1, (=1, )=1, +=3, ,=1, fs=1, m=1, .=2, fragment=1, v=1, of=1, :=1, tag=1, state=2}
Tokenizing Log
EXISTS
Tokenizing v
EXISTS
Tokenizing TAG
EXISTS
Tokenizing "Saved state of " + f + ": "+ fs.mSavedFragmentState
{fragment=1, saved=2, f=1, of=1, :=1, state=2, +=3, fs=1, m=1, .=1}
Tokenizing "Saved state of "
{saved=1, of=1, state=1}
Tokenizing f
EXISTS
Tokenizing ": "
EXISTS
Tokenizing fs.mSavedFragmentState
EXISTS
Tokenizing fs
EXISTS
Tokenizing mSavedFragmentState
EXISTS
Tokenizing !haveFragments
{!=1, have=1, fragments=1}
Tokenizing haveFragments
EXISTS
Tokenizing DEBUG
EXISTS
Tokenizing Log.v(TAG,"saveAllState: no fragments!")
{all=1, no=1, !=1, log=1, (=1, save=1, )=1, ,=1, .=1, v=1, :=1, fragments=1, tag=1, state=1}
Tokenizing Log
EXISTS
Tokenizing v
EXISTS
Tokenizing TAG
EXISTS
Tokenizing "saveAllState: no fragments!"
{all=1, no=1, !=1, save=1, :=1, fragments=1, state=1}
Tokenizing null
EXISTS
Tokenizing added
{added=1}
Tokenizing null
EXISTS
Tokenizing BackStackState
EXISTS
Tokenizing backStack
{stack=1, back=1}
Tokenizing null
EXISTS
Tokenizing mAdded != null
EXISTS
Tokenizing mAdded
EXISTS
Tokenizing null
EXISTS
Tokenizing N=mAdded.size()
EXISTS
Tokenizing N
EXISTS
Tokenizing mAdded.size()
EXISTS
Tokenizing mAdded
EXISTS
Tokenizing size
EXISTS
Tokenizing N > 0
EXISTS
Tokenizing N
EXISTS
Tokenizing 0
EXISTS
Tokenizing added=new int[N]
{new=1, added=1, [=1, ==1, ]=1, int=1, n=1}
Tokenizing added
EXISTS
Tokenizing new int[N]
{new=1, [=1, ]=1, int=1, n=1}
Tokenizing N
EXISTS
Tokenizing int i=0
EXISTS
Tokenizing i
EXISTS
Tokenizing 0
EXISTS
Tokenizing i < N
EXISTS
Tokenizing i
EXISTS
Tokenizing N
EXISTS
Tokenizing i++
EXISTS
Tokenizing i
EXISTS
Tokenizing added[i]=mAdded.get(i).mIndex
{added=2, get=1, (=1, i=2, )=1, index=1, [=1, ]=1, ==1, m=2, .=2}
Tokenizing added[i]
{added=1, i=1, [=1, ]=1}
Tokenizing added
EXISTS
Tokenizing i
EXISTS
Tokenizing mAdded.get(i).mIndex
{added=1, get=1, (=1, i=1, )=1, index=1, m=2, .=2}
Tokenizing mAdded.get(i)
EXISTS
Tokenizing mAdded
EXISTS
Tokenizing get
EXISTS
Tokenizing i
EXISTS
Tokenizing mIndex
EXISTS
Tokenizing DEBUG
EXISTS
Tokenizing Log.v(TAG,"saveAllState: adding fragment #" + i + ": "+ mAdded.get(i))
{}
Tokenizing Log
EXISTS
Tokenizing v
EXISTS
Tokenizing TAG
EXISTS
Tokenizing "saveAllState: adding fragment #" + i + ": "+ mAdded.get(i)
{}
Tokenizing "saveAllState: adding fragment #"
{}
Tokenizing i
EXISTS
Tokenizing ": "
EXISTS
Tokenizing mAdded.get(i)
EXISTS
Tokenizing mAdded
EXISTS
Tokenizing get
EXISTS
Tokenizing i
EXISTS
Tokenizing mBackStack != null
EXISTS
Tokenizing mBackStack
EXISTS
Tokenizing null
EXISTS
Tokenizing N=mBackStack.size()
EXISTS
Tokenizing N
EXISTS
Tokenizing mBackStack.size()
EXISTS
Tokenizing mBackStack
EXISTS
Tokenizing size
EXISTS
Tokenizing N > 0
EXISTS
Tokenizing N
EXISTS
Tokenizing 0
EXISTS
Tokenizing backStack=new BackStackState[N]
{new=1, stack=2, back=2, state=1, [=1, ==1, ]=1, n=1}
Tokenizing backStack
EXISTS
Tokenizing new BackStackState[N]
{new=1, stack=1, back=1, state=1, [=1, ]=1, n=1}
Tokenizing BackStackState
EXISTS
Tokenizing N
EXISTS
Tokenizing int i=0
EXISTS
Tokenizing i
EXISTS
Tokenizing 0
EXISTS
Tokenizing i < N
EXISTS
Tokenizing i
EXISTS
Tokenizing N
EXISTS
Tokenizing i++
EXISTS
Tokenizing i
EXISTS
Tokenizing backStack[i]=new BackStackState(this,mBackStack.get(i))
{new=1, stack=3, (=2, this=1, back=3, i=2, )=2, ,=1, m=1, .=1, get=1, [=1, state=1, ]=1, ==1}
Tokenizing backStack[i]
{stack=1, back=1, i=1, [=1, ]=1}
Tokenizing backStack
EXISTS
Tokenizing i
EXISTS
Tokenizing new BackStackState(this,mBackStack.get(i))
{new=1, stack=2, get=1, (=2, this=1, back=2, i=1, )=2, state=1, ,=1, m=1, .=1}
Tokenizing BackStackState
EXISTS
Tokenizing this
EXISTS
Tokenizing mBackStack.get(i)
EXISTS
Tokenizing mBackStack
EXISTS
Tokenizing get
EXISTS
Tokenizing i
EXISTS
Tokenizing DEBUG
EXISTS
Tokenizing Log.v(TAG,"saveAllState: adding back stack #" + i + ": "+ mBackStack.get(i))
{}
Tokenizing Log
EXISTS
Tokenizing v
EXISTS
Tokenizing TAG
EXISTS
Tokenizing "saveAllState: adding back stack #" + i + ": "+ mBackStack.get(i)
{}
Tokenizing "saveAllState: adding back stack #"
{}
Tokenizing i
EXISTS
Tokenizing ": "
EXISTS
Tokenizing mBackStack.get(i)
EXISTS
Tokenizing mBackStack
EXISTS
Tokenizing get
EXISTS
Tokenizing i
EXISTS
Tokenizing FragmentManagerState
EXISTS
Tokenizing fms
{fms=1}
Tokenizing new FragmentManagerState()
{new=1, fragment=1, manager=1, (=1, )=1, state=1}
Tokenizing FragmentManagerState
EXISTS
Tokenizing fms.mActive=active
{active=2, fms=1, m=1, ==1, .=1}
Tokenizing fms.mActive
{active=1, fms=1, m=1, .=1}
Tokenizing fms
EXISTS
Tokenizing mActive
EXISTS
Tokenizing active
EXISTS
Tokenizing fms.mAdded=added
{added=2, fms=1, m=1, ==1, .=1}
Tokenizing fms.mAdded
{added=1, fms=1, m=1, .=1}
Tokenizing fms
EXISTS
Tokenizing mAdded
EXISTS
Tokenizing added
EXISTS
Tokenizing fms.mBackStack=backStack
{stack=2, back=2, fms=1, m=1, ==1, .=1}
Tokenizing fms.mBackStack
{stack=1, back=1, fms=1, m=1, .=1}
Tokenizing fms
EXISTS
Tokenizing mBackStack
EXISTS
Tokenizing backStack
EXISTS
Tokenizing fms
EXISTS
Tokenizing restoreAllState
{all=1, restore=1, state=1}
Tokenizing Parcelable
EXISTS
Tokenizing state
EXISTS
Tokenizing ArrayList
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing nonConfig
{non=1, config=1}
Tokenizing state == null
{===1, null=1, state=1}
Tokenizing state
EXISTS
Tokenizing null
EXISTS
Tokenizing FragmentManagerState
EXISTS
Tokenizing fms
EXISTS
Tokenizing (FragmentManagerState)state
{fragment=1, manager=1, (=1, )=1, state=2}
Tokenizing FragmentManagerState
EXISTS
Tokenizing state
EXISTS
Tokenizing fms.mActive == null
{===1, null=1, active=1, fms=1, m=1, .=1}
Tokenizing fms.mActive
EXISTS
Tokenizing fms
EXISTS
Tokenizing mActive
EXISTS
Tokenizing null
EXISTS
Tokenizing nonConfig != null
{null=1, non=1, !==1, config=1}
Tokenizing nonConfig
EXISTS
Tokenizing null
EXISTS
Tokenizing int i=0
EXISTS
Tokenizing i
EXISTS
Tokenizing 0
EXISTS
Tokenizing i < nonConfig.size()
{size=1, (=1, i=1, )=1, <=1, non=1, config=1, .=1}
Tokenizing i
EXISTS
Tokenizing nonConfig.size()
{size=1, (=1, )=1, non=1, config=1, .=1}
Tokenizing nonConfig
EXISTS
Tokenizing size
EXISTS
Tokenizing i++
EXISTS
Tokenizing i
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing f
EXISTS
Tokenizing nonConfig.get(i)
{get=1, (=1, i=1, )=1, non=1, config=1, .=1}
Tokenizing nonConfig
EXISTS
Tokenizing get
EXISTS
Tokenizing i
EXISTS
Tokenizing DEBUG
EXISTS
Tokenizing Log.v(TAG,"restoreAllState: re-attaching retained " + f)
{all=1, restore=1, log=1, f=1, (=1, )=1, +=1, ,=1, -=1, .=1, attaching=1, retained=1, re=1, v=1, :=1, tag=1, state=1}
Tokenizing Log
EXISTS
Tokenizing v
EXISTS
Tokenizing TAG
EXISTS
Tokenizing "restoreAllState: re-attaching retained " + f
{all=1, retained=1, re=1, restore=1, f=1, :=1, state=1, +=1, -=1, attaching=1}
Tokenizing "restoreAllState: re-attaching retained "
{all=1, retained=1, re=1, restore=1, :=1, state=1, -=1, attaching=1}
Tokenizing f
EXISTS
Tokenizing FragmentState
EXISTS
Tokenizing fs
EXISTS
Tokenizing fms.mActive[f.mIndex]
{f=1, active=1, index=1, [=1, fms=1, m=2, ]=1, .=2}
Tokenizing fms.mActive
EXISTS
Tokenizing fms
EXISTS
Tokenizing mActive
EXISTS
Tokenizing f.mIndex
EXISTS
Tokenizing f
EXISTS
Tokenizing mIndex
EXISTS
Tokenizing fs.mInstance=f
{instance=1, f=1, fs=1, m=1, ==1, .=1}
Tokenizing fs.mInstance
{instance=1, fs=1, m=1, .=1}
Tokenizing fs
EXISTS
Tokenizing mInstance
{instance=1, m=1}
Tokenizing f
EXISTS
Tokenizing f.mSavedViewState=null
EXISTS
Tokenizing f.mSavedViewState
EXISTS
Tokenizing f
EXISTS
Tokenizing mSavedViewState
EXISTS
Tokenizing null
EXISTS
Tokenizing f.mBackStackNesting=0
{0=1, stack=1, f=1, back=1, nesting=1, m=1, ==1, .=1}
Tokenizing f.mBackStackNesting
{stack=1, f=1, back=1, nesting=1, m=1, .=1}
Tokenizing f
EXISTS
Tokenizing mBackStackNesting
EXISTS
Tokenizing 0
EXISTS
Tokenizing f.mInLayout=false
{layout=1, in=1, f=1, false=1, m=1, ==1, .=1}
Tokenizing f.mInLayout
EXISTS
Tokenizing f
EXISTS
Tokenizing mInLayout
EXISTS
Tokenizing false
EXISTS
Tokenizing f.mAdded=false
{added=1, f=1, false=1, m=1, ==1, .=1}
Tokenizing f.mAdded
EXISTS
Tokenizing f
EXISTS
Tokenizing mAdded
EXISTS
Tokenizing false
EXISTS
Tokenizing f.mTarget=null
{null=1, f=1, m=1, ==1, .=1, target=1}
Tokenizing f.mTarget
EXISTS
Tokenizing f
EXISTS
Tokenizing mTarget
EXISTS
Tokenizing null
EXISTS
Tokenizing fs.mSavedFragmentState != null
{fragment=1, null=1, saved=1, state=1, !==1, fs=1, m=1, .=1}
Tokenizing fs.mSavedFragmentState
EXISTS
Tokenizing fs
EXISTS
Tokenizing mSavedFragmentState
EXISTS
Tokenizing null
EXISTS
Tokenizing fs.mSavedFragmentState.setClassLoader(mActivity.getClassLoader())
{set=1, activity=1, saved=1, loader=2, (=2, )=2, fs=1, m=2, .=3, fragment=1, get=1, state=1, class=2}
Tokenizing fs.mSavedFragmentState
EXISTS
Tokenizing fs
EXISTS
Tokenizing mSavedFragmentState
EXISTS
Tokenizing setClassLoader
{set=1, loader=1, class=1}
Tokenizing mActivity.getClassLoader()
{activity=1, loader=1, get=1, (=1, )=1, m=1, class=1, .=1}
Tokenizing mActivity
EXISTS
Tokenizing getClassLoader
{loader=1, get=1, class=1}
Tokenizing f.mSavedViewState=fs.mSavedFragmentState.getSparseParcelableArray(FragmentManagerImpl.VIEW_STATE_TAG)
{manager=1, saved=2, f=1, (=1, )=1, m=2, fs=1, .=4, impl=1, view=1, fragment=2, parcelable=1, sparse=1, array=1, get=1, state=2, ==1, view_state_tag=1}
Tokenizing f.mSavedViewState
EXISTS
Tokenizing f
EXISTS
Tokenizing mSavedViewState
EXISTS
Tokenizing fs.mSavedFragmentState.getSparseParcelableArray(FragmentManagerImpl.VIEW_STATE_TAG)
{manager=1, saved=1, (=1, )=1, fs=1, m=1, .=3, impl=1, fragment=2, parcelable=1, sparse=1, array=1, get=1, state=1, view_state_tag=1}
Tokenizing fs.mSavedFragmentState
EXISTS
Tokenizing fs
EXISTS
Tokenizing mSavedFragmentState
EXISTS
Tokenizing getSparseParcelableArray
EXISTS
Tokenizing FragmentManagerImpl.VIEW_STATE_TAG
EXISTS
Tokenizing FragmentManagerImpl
EXISTS
Tokenizing VIEW_STATE_TAG
EXISTS
Tokenizing mActive=new ArrayList<Fragment>(fms.mActive.length)
{new=1, (=1, length=1, active=2, )=1, list=1, m=2, fms=1, .=2, fragment=1, array=1, <=1, ==1, >=1}
Tokenizing mActive
EXISTS
Tokenizing new ArrayList<Fragment>(fms.mActive.length)
{new=1, (=1, length=1, active=1, )=1, list=1, fms=1, m=1, .=2, fragment=1, array=1, <=1, >=1}
Tokenizing ArrayList
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing fms.mActive.length
{length=1, active=1, fms=1, m=1, .=2}
Tokenizing fms.mActive
EXISTS
Tokenizing fms
EXISTS
Tokenizing mActive
EXISTS
Tokenizing length
EXISTS
Tokenizing mAvailIndices != null
EXISTS
Tokenizing mAvailIndices
EXISTS
Tokenizing null
EXISTS
Tokenizing mAvailIndices.clear()
{avail=1, indices=1, clear=1, (=1, )=1, m=1, .=1}
Tokenizing mAvailIndices
EXISTS
Tokenizing clear
EXISTS
Tokenizing int i=0
EXISTS
Tokenizing i
EXISTS
Tokenizing 0
EXISTS
Tokenizing i < fms.mActive.length
{length=1, i=1, active=1, <=1, fms=1, m=1, .=2}
Tokenizing i
EXISTS
Tokenizing fms.mActive.length
EXISTS
Tokenizing fms.mActive
EXISTS
Tokenizing fms
EXISTS
Tokenizing mActive
EXISTS
Tokenizing length
EXISTS
Tokenizing i++
EXISTS
Tokenizing i
EXISTS
Tokenizing FragmentState
EXISTS
Tokenizing fs
EXISTS
Tokenizing fms.mActive[i]
{active=1, i=1, [=1, fms=1, m=1, ]=1, .=1}
Tokenizing fms.mActive
EXISTS
Tokenizing fms
EXISTS
Tokenizing mActive
EXISTS
Tokenizing i
EXISTS
Tokenizing fs != null
{null=1, !==1, fs=1}
Tokenizing fs
EXISTS
Tokenizing null
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing f
EXISTS
Tokenizing fs.instantiate(mActivity)
{activity=1, (=1, )=1, fs=1, instantiate=1, m=1, .=1}
Tokenizing fs
EXISTS
Tokenizing instantiate
{instantiate=1}
Tokenizing mActivity
EXISTS
Tokenizing DEBUG
EXISTS
Tokenizing Log.v(TAG,"restoreAllState: adding #" + i + ": "+ f)
{}
Tokenizing Log
EXISTS
Tokenizing v
EXISTS
Tokenizing TAG
EXISTS
Tokenizing "restoreAllState: adding #" + i + ": "+ f
{}
Tokenizing "restoreAllState: adding #"
{}
Tokenizing i
EXISTS
Tokenizing ": "
EXISTS
Tokenizing f
EXISTS
Tokenizing mActive.add(f)
EXISTS
Tokenizing mActive
EXISTS
Tokenizing add
EXISTS
Tokenizing f
EXISTS
Tokenizing fs.mInstance=null
{instance=1, null=1, fs=1, m=1, ==1, .=1}
Tokenizing fs.mInstance
EXISTS
Tokenizing fs
EXISTS
Tokenizing mInstance
EXISTS
Tokenizing null
EXISTS
Tokenizing DEBUG
EXISTS
Tokenizing Log.v(TAG,"restoreAllState: adding #" + i + ": (null)")
{}
Tokenizing Log
EXISTS
Tokenizing v
EXISTS
Tokenizing TAG
EXISTS
Tokenizing "restoreAllState: adding #" + i + ": (null)"
{}
Tokenizing "restoreAllState: adding #"
EXISTS
Tokenizing i
EXISTS
Tokenizing ": (null)"
{null=1, (=1, )=1, :=1}
Tokenizing mActive.add(null)
{add=1, null=1, (=1, active=1, )=1, m=1, .=1}
Tokenizing mActive
EXISTS
Tokenizing add
EXISTS
Tokenizing null
EXISTS
Tokenizing mAvailIndices == null
EXISTS
Tokenizing mAvailIndices
EXISTS
Tokenizing null
EXISTS
Tokenizing mAvailIndices=new ArrayList<Integer>()
EXISTS
Tokenizing mAvailIndices
EXISTS
Tokenizing new ArrayList<Integer>()
EXISTS
Tokenizing ArrayList
EXISTS
Tokenizing Integer
EXISTS
Tokenizing DEBUG
EXISTS
Tokenizing Log.v(TAG,"restoreAllState: adding avail #" + i)
{}
Tokenizing Log
EXISTS
Tokenizing v
EXISTS
Tokenizing TAG
EXISTS
Tokenizing "restoreAllState: adding avail #" + i
{}
Tokenizing "restoreAllState: adding avail #"
{}
Tokenizing i
EXISTS
Tokenizing mAvailIndices.add(i)
{add=1, avail=1, indices=1, (=1, i=1, )=1, m=1, .=1}
Tokenizing mAvailIndices
EXISTS
Tokenizing add
EXISTS
Tokenizing i
EXISTS
Tokenizing nonConfig != null
EXISTS
Tokenizing nonConfig
EXISTS
Tokenizing null
EXISTS
Tokenizing int i=0
EXISTS
Tokenizing i
EXISTS
Tokenizing 0
EXISTS
Tokenizing i < nonConfig.size()
EXISTS
Tokenizing i
EXISTS
Tokenizing nonConfig.size()
EXISTS
Tokenizing nonConfig
EXISTS
Tokenizing size
EXISTS
Tokenizing i++
EXISTS
Tokenizing i
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing f
EXISTS
Tokenizing nonConfig.get(i)
EXISTS
Tokenizing nonConfig
EXISTS
Tokenizing get
EXISTS
Tokenizing i
EXISTS
Tokenizing f.mTargetIndex >= 0
{0=1, f=1, index=1, m=1, .=1, target=1, >==1}
Tokenizing f.mTargetIndex
EXISTS
Tokenizing f
EXISTS
Tokenizing mTargetIndex
EXISTS
Tokenizing 0
EXISTS
Tokenizing f.mTargetIndex < mActive.size()
{size=1, f=1, (=1, index=1, active=1, )=1, <=1, m=2, .=2, target=1}
Tokenizing f.mTargetIndex
EXISTS
Tokenizing f
EXISTS
Tokenizing mTargetIndex
EXISTS
Tokenizing mActive.size()
EXISTS
Tokenizing mActive
EXISTS
Tokenizing size
EXISTS
Tokenizing f.mTarget=mActive.get(f.mTargetIndex)
{f=2, get=1, (=1, active=1, index=1, )=1, m=3, ==1, .=3, target=2}
Tokenizing f.mTarget
EXISTS
Tokenizing f
EXISTS
Tokenizing mTarget
EXISTS
Tokenizing mActive.get(f.mTargetIndex)
{f=1, get=1, (=1, active=1, index=1, )=1, m=2, .=2, target=1}
Tokenizing mActive
EXISTS
Tokenizing get
EXISTS
Tokenizing f.mTargetIndex
EXISTS
Tokenizing f
EXISTS
Tokenizing mTargetIndex
EXISTS
Tokenizing Log.w(TAG,"Re-attaching retained fragment " + f + " target no longer exists: "+ f.mTargetIndex)
{no=1, log=1, f=2, (=1, index=1, )=1, +=3, ,=1, -=1, m=1, .=2, attaching=1, target=2, retained=1, fragment=1, longer=1, re=1, w=1, exists=1, :=1, tag=1}
Tokenizing Log
EXISTS
Tokenizing w
{w=1}
Tokenizing TAG
EXISTS
Tokenizing "Re-attaching retained fragment " + f + " target no longer exists: "+ f.mTargetIndex
{no=1, f=2, index=1, +=3, -=1, m=1, attaching=1, .=1, target=2, retained=1, fragment=1, longer=1, re=1, exists=1, :=1}
Tokenizing "Re-attaching retained fragment "
{retained=1, fragment=1, re=1, -=1, attaching=1}
Tokenizing f
EXISTS
Tokenizing " target no longer exists: "
{no=1, longer=1, exists=1, :=1, target=1}
Tokenizing f.mTargetIndex
EXISTS
Tokenizing f
EXISTS
Tokenizing mTargetIndex
EXISTS
Tokenizing f.mTarget=null
EXISTS
Tokenizing f.mTarget
EXISTS
Tokenizing f
EXISTS
Tokenizing mTarget
EXISTS
Tokenizing null
EXISTS
Tokenizing fms.mAdded != null
{null=1, added=1, !==1, fms=1, m=1, .=1}
Tokenizing fms.mAdded
EXISTS
Tokenizing fms
EXISTS
Tokenizing mAdded
EXISTS
Tokenizing null
EXISTS
Tokenizing mAdded=new ArrayList<Fragment>(fms.mAdded.length)
{new=1, added=2, (=1, length=1, )=1, list=1, m=2, fms=1, .=2, fragment=1, array=1, <=1, ==1, >=1}
Tokenizing mAdded
EXISTS
Tokenizing new ArrayList<Fragment>(fms.mAdded.length)
{new=1, added=1, (=1, length=1, )=1, list=1, fms=1, m=1, .=2, fragment=1, array=1, <=1, >=1}
Tokenizing ArrayList
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing fms.mAdded.length
{added=1, length=1, fms=1, m=1, .=2}
Tokenizing fms.mAdded
EXISTS
Tokenizing fms
EXISTS
Tokenizing mAdded
EXISTS
Tokenizing length
EXISTS
Tokenizing int i=0
EXISTS
Tokenizing i
EXISTS
Tokenizing 0
EXISTS
Tokenizing i < fms.mAdded.length
{added=1, length=1, i=1, <=1, fms=1, m=1, .=2}
Tokenizing i
EXISTS
Tokenizing fms.mAdded.length
EXISTS
Tokenizing fms.mAdded
EXISTS
Tokenizing fms
EXISTS
Tokenizing mAdded
EXISTS
Tokenizing length
EXISTS
Tokenizing i++
EXISTS
Tokenizing i
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing f
EXISTS
Tokenizing mActive.get(fms.mAdded[i])
{added=1, get=1, (=1, active=1, i=1, )=1, [=1, m=2, fms=1, ]=1, .=2}
Tokenizing mActive
EXISTS
Tokenizing get
EXISTS
Tokenizing fms.mAdded[i]
{added=1, i=1, [=1, fms=1, m=1, ]=1, .=1}
Tokenizing fms.mAdded
EXISTS
Tokenizing fms
EXISTS
Tokenizing mAdded
EXISTS
Tokenizing i
EXISTS
Tokenizing f == null
EXISTS
Tokenizing f
EXISTS
Tokenizing null
EXISTS
Tokenizing new IllegalStateException("No instantiated fragment for index #" + fms.mAdded[i])
{}
Tokenizing IllegalStateException
EXISTS
Tokenizing "No instantiated fragment for index #" + fms.mAdded[i]
{}
Tokenizing "No instantiated fragment for index #"
{}
Tokenizing fms.mAdded[i]
EXISTS
Tokenizing fms.mAdded
EXISTS
Tokenizing fms
EXISTS
Tokenizing mAdded
EXISTS
Tokenizing i
EXISTS
Tokenizing f.mAdded=true
{added=1, f=1, true=1, m=1, ==1, .=1}
Tokenizing f.mAdded
EXISTS
Tokenizing f
EXISTS
Tokenizing mAdded
EXISTS
Tokenizing true
EXISTS
Tokenizing DEBUG
EXISTS
Tokenizing Log.v(TAG,"restoreAllState: making added #" + i + ": "+ f)
{}
Tokenizing Log
EXISTS
Tokenizing v
EXISTS
Tokenizing TAG
EXISTS
Tokenizing "restoreAllState: making added #" + i + ": "+ f
{}
Tokenizing "restoreAllState: making added #"
{}
Tokenizing i
EXISTS
Tokenizing ": "
EXISTS
Tokenizing f
EXISTS
Tokenizing mAdded.add(f)
{add=1, added=1, f=1, (=1, )=1, m=1, .=1}
Tokenizing mAdded
EXISTS
Tokenizing add
EXISTS
Tokenizing f
EXISTS
Tokenizing mAdded=null
{null=1, added=1, m=1, ==1}
Tokenizing mAdded
EXISTS
Tokenizing null
EXISTS
Tokenizing fms.mBackStack != null
{stack=1, null=1, back=1, !==1, fms=1, m=1, .=1}
Tokenizing fms.mBackStack
EXISTS
Tokenizing fms
EXISTS
Tokenizing mBackStack
EXISTS
Tokenizing null
EXISTS
Tokenizing mBackStack=new ArrayList<BackStackRecord>(fms.mBackStack.length)
{new=1, stack=3, (=1, length=1, back=3, )=1, list=1, m=2, fms=1, .=2, array=1, record=1, <=1, ==1, >=1}
Tokenizing mBackStack
EXISTS
Tokenizing new ArrayList<BackStackRecord>(fms.mBackStack.length)
{new=1, stack=2, (=1, length=1, back=2, )=1, list=1, fms=1, m=1, .=2, array=1, record=1, <=1, >=1}
Tokenizing ArrayList
EXISTS
Tokenizing BackStackRecord
EXISTS
Tokenizing fms.mBackStack.length
{stack=1, length=1, back=1, fms=1, m=1, .=2}
Tokenizing fms.mBackStack
EXISTS
Tokenizing fms
EXISTS
Tokenizing mBackStack
EXISTS
Tokenizing length
EXISTS
Tokenizing int i=0
EXISTS
Tokenizing i
EXISTS
Tokenizing 0
EXISTS
Tokenizing i < fms.mBackStack.length
{stack=1, length=1, i=1, back=1, <=1, fms=1, m=1, .=2}
Tokenizing i
EXISTS
Tokenizing fms.mBackStack.length
EXISTS
Tokenizing fms.mBackStack
EXISTS
Tokenizing fms
EXISTS
Tokenizing mBackStack
EXISTS
Tokenizing length
EXISTS
Tokenizing i++
EXISTS
Tokenizing i
EXISTS
Tokenizing BackStackRecord
EXISTS
Tokenizing bse
EXISTS
Tokenizing fms.mBackStack[i].instantiate(this)
{stack=1, (=1, this=1, back=1, i=1, )=1, [=1, fms=1, m=1, ]=1, instantiate=1, .=2}
Tokenizing fms.mBackStack[i]
{stack=1, back=1, i=1, [=1, fms=1, m=1, ]=1, .=1}
Tokenizing fms.mBackStack
EXISTS
Tokenizing fms
EXISTS
Tokenizing mBackStack
EXISTS
Tokenizing i
EXISTS
Tokenizing instantiate
EXISTS
Tokenizing this
EXISTS
Tokenizing DEBUG
EXISTS
Tokenizing Log.v(TAG,"restoreAllState: adding bse #" + i + " (index "+ bse.mIndex+ "): "+ bse)
{}
Tokenizing Log
EXISTS
Tokenizing v
EXISTS
Tokenizing TAG
EXISTS
Tokenizing "restoreAllState: adding bse #" + i + " (index "+ bse.mIndex+ "): "+ bse
{}
Tokenizing "restoreAllState: adding bse #"
{}
Tokenizing i
EXISTS
Tokenizing " (index "
{(=1, index=1}
Tokenizing bse.mIndex
{bse=1, index=1, m=1, .=1}
Tokenizing bse
EXISTS
Tokenizing mIndex
EXISTS
Tokenizing "): "
{)=1, :=1}
Tokenizing bse
EXISTS
Tokenizing mBackStack.add(bse)
{add=1, stack=1, bse=1, (=1, back=1, )=1, m=1, .=1}
Tokenizing mBackStack
EXISTS
Tokenizing add
EXISTS
Tokenizing bse
EXISTS
Tokenizing bse.mIndex >= 0
{0=1, bse=1, index=1, m=1, .=1, >==1}
Tokenizing bse.mIndex
EXISTS
Tokenizing bse
EXISTS
Tokenizing mIndex
EXISTS
Tokenizing 0
EXISTS
Tokenizing setBackStackIndex(bse.mIndex,bse)
{stack=1, set=1, bse=2, (=1, back=1, index=2, )=1, ,=1, m=1, .=1}
Tokenizing setBackStackIndex
EXISTS
Tokenizing bse.mIndex
EXISTS
Tokenizing bse
EXISTS
Tokenizing mIndex
EXISTS
Tokenizing bse
EXISTS
Tokenizing mBackStack=null
{stack=1, null=1, back=1, m=1, ==1}
Tokenizing mBackStack
EXISTS
Tokenizing null
EXISTS
Tokenizing attachActivity
{activity=1, attach=1}
Tokenizing Activity
EXISTS
Tokenizing activity
{activity=1}
Tokenizing mActivity != null
EXISTS
Tokenizing mActivity
EXISTS
Tokenizing null
EXISTS
Tokenizing new IllegalStateException()
{exception=1, new=1, (=1, )=1, state=1, illegal=1}
Tokenizing IllegalStateException
EXISTS
Tokenizing mActivity=activity
{activity=2, m=1, ==1}
Tokenizing mActivity
EXISTS
Tokenizing activity
EXISTS
Tokenizing noteStateNotSaved
{note=1, not=1, saved=1, state=1}
Tokenizing mStateSaved=false
{saved=1, false=1, state=1, m=1, ==1}
Tokenizing mStateSaved
EXISTS
Tokenizing false
EXISTS
Tokenizing dispatchCreate
{dispatch=1, create=1}
Tokenizing mStateSaved=false
EXISTS
Tokenizing mStateSaved
EXISTS
Tokenizing false
EXISTS
Tokenizing moveToState(Fragment.CREATED,false)
{move=1, fragment=1, created=1, (=1, false=1, )=1, to=1, state=1, ,=1, .=1}
Tokenizing moveToState
EXISTS
Tokenizing Fragment.CREATED
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing CREATED
EXISTS
Tokenizing false
EXISTS
Tokenizing dispatchActivityCreated
{dispatch=1, activity=1, created=1}
Tokenizing mStateSaved=false
EXISTS
Tokenizing mStateSaved
EXISTS
Tokenizing false
EXISTS
Tokenizing moveToState(Fragment.ACTIVITY_CREATED,false)
{activity_created=1, move=1, fragment=1, (=1, false=1, )=1, to=1, state=1, ,=1, .=1}
Tokenizing moveToState
EXISTS
Tokenizing Fragment.ACTIVITY_CREATED
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing ACTIVITY_CREATED
EXISTS
Tokenizing false
EXISTS
Tokenizing dispatchStart
{dispatch=1, start=1}
Tokenizing mStateSaved=false
EXISTS
Tokenizing mStateSaved
EXISTS
Tokenizing false
EXISTS
Tokenizing moveToState(Fragment.STARTED,false)
{move=1, fragment=1, (=1, false=1, )=1, started=1, to=1, state=1, ,=1, .=1}
Tokenizing moveToState
EXISTS
Tokenizing Fragment.STARTED
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing STARTED
EXISTS
Tokenizing false
EXISTS
Tokenizing dispatchResume
{resume=1, dispatch=1}
Tokenizing mStateSaved=false
EXISTS
Tokenizing mStateSaved
EXISTS
Tokenizing false
EXISTS
Tokenizing moveToState(Fragment.RESUMED,false)
{move=1, fragment=1, (=1, false=1, )=1, to=1, state=1, resumed=1, ,=1, .=1}
Tokenizing moveToState
EXISTS
Tokenizing Fragment.RESUMED
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing RESUMED
EXISTS
Tokenizing false
EXISTS
Tokenizing dispatchPause
{dispatch=1, pause=1}
Tokenizing moveToState(Fragment.STARTED,false)
EXISTS
Tokenizing moveToState
EXISTS
Tokenizing Fragment.STARTED
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing STARTED
EXISTS
Tokenizing false
EXISTS
Tokenizing dispatchStop
{dispatch=1, stop=1}
Tokenizing moveToState(Fragment.STOPPED,false)
{move=1, fragment=1, stopped=1, (=1, false=1, )=1, to=1, state=1, ,=1, .=1}
Tokenizing moveToState
EXISTS
Tokenizing Fragment.STOPPED
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing STOPPED
EXISTS
Tokenizing false
EXISTS
Tokenizing dispatchDestroy
{dispatch=1, destroy=1}
Tokenizing mDestroyed=true
{destroyed=1, true=1, m=1, ==1}
Tokenizing mDestroyed
EXISTS
Tokenizing true
EXISTS
Tokenizing execPendingActions()
EXISTS
Tokenizing execPendingActions
EXISTS
Tokenizing moveToState(Fragment.INITIALIZING,false)
{move=1, fragment=1, (=1, false=1, )=1, initializing=1, to=1, state=1, ,=1, .=1}
Tokenizing moveToState
EXISTS
Tokenizing Fragment.INITIALIZING
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing INITIALIZING
EXISTS
Tokenizing false
EXISTS
Tokenizing mActivity=null
{activity=1, null=1, m=1, ==1}
Tokenizing mActivity
EXISTS
Tokenizing null
EXISTS
Tokenizing dispatchConfigurationChanged
{dispatch=1, configuration=1, changed=1}
Tokenizing Configuration
EXISTS
Tokenizing newConfig
{new=1, config=1}
Tokenizing mActive != null
EXISTS
Tokenizing mActive
EXISTS
Tokenizing null
EXISTS
Tokenizing int i=0
EXISTS
Tokenizing i
EXISTS
Tokenizing 0
EXISTS
Tokenizing i < mAdded.size()
{size=1, added=1, (=1, i=1, )=1, <=1, m=1, .=1}
Tokenizing i
EXISTS
Tokenizing mAdded.size()
EXISTS
Tokenizing mAdded
EXISTS
Tokenizing size
EXISTS
Tokenizing i++
EXISTS
Tokenizing i
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing f
EXISTS
Tokenizing mAdded.get(i)
EXISTS
Tokenizing mAdded
EXISTS
Tokenizing get
EXISTS
Tokenizing i
EXISTS
Tokenizing f != null
EXISTS
Tokenizing f
EXISTS
Tokenizing null
EXISTS
Tokenizing f.onConfigurationChanged(newConfig)
{new=1, configuration=1, f=1, (=1, )=1, config=1, .=1, on=1, changed=1}
Tokenizing f
EXISTS
Tokenizing onConfigurationChanged
{configuration=1, on=1, changed=1}
Tokenizing newConfig
EXISTS
Tokenizing dispatchLowMemory
{dispatch=1, memory=1, low=1}
Tokenizing mActive != null
EXISTS
Tokenizing mActive
EXISTS
Tokenizing null
EXISTS
Tokenizing int i=0
EXISTS
Tokenizing i
EXISTS
Tokenizing 0
EXISTS
Tokenizing i < mAdded.size()
EXISTS
Tokenizing i
EXISTS
Tokenizing mAdded.size()
EXISTS
Tokenizing mAdded
EXISTS
Tokenizing size
EXISTS
Tokenizing i++
EXISTS
Tokenizing i
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing f
EXISTS
Tokenizing mAdded.get(i)
EXISTS
Tokenizing mAdded
EXISTS
Tokenizing get
EXISTS
Tokenizing i
EXISTS
Tokenizing f != null
EXISTS
Tokenizing f
EXISTS
Tokenizing null
EXISTS
Tokenizing f.onLowMemory()
{memory=1, low=1, f=1, (=1, )=1, .=1, on=1}
Tokenizing f
EXISTS
Tokenizing onLowMemory
{memory=1, low=1, on=1}
Tokenizing dispatchTrimMemory
{dispatch=1, memory=1, trim=1}
Tokenizing level
{level=1}
Tokenizing mActive != null
EXISTS
Tokenizing mActive
EXISTS
Tokenizing null
EXISTS
Tokenizing int i=0
EXISTS
Tokenizing i
EXISTS
Tokenizing 0
EXISTS
Tokenizing i < mAdded.size()
EXISTS
Tokenizing i
EXISTS
Tokenizing mAdded.size()
EXISTS
Tokenizing mAdded
EXISTS
Tokenizing size
EXISTS
Tokenizing i++
EXISTS
Tokenizing i
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing f
EXISTS
Tokenizing mAdded.get(i)
EXISTS
Tokenizing mAdded
EXISTS
Tokenizing get
EXISTS
Tokenizing i
EXISTS
Tokenizing f != null
EXISTS
Tokenizing f
EXISTS
Tokenizing null
EXISTS
Tokenizing f.onTrimMemory(level)
{memory=1, trim=1, level=1, f=1, (=1, )=1, .=1, on=1}
Tokenizing f
EXISTS
Tokenizing onTrimMemory
{memory=1, trim=1, on=1}
Tokenizing level
EXISTS
Tokenizing dispatchCreateOptionsMenu
{dispatch=1, options=1, create=1, menu=1}
Tokenizing Menu
EXISTS
Tokenizing menu
{menu=1}
Tokenizing MenuInflater
EXISTS
Tokenizing inflater
{inflater=1}
Tokenizing show
{show=1}
Tokenizing false
EXISTS
Tokenizing ArrayList
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing newMenus
{new=1, menus=1}
Tokenizing null
EXISTS
Tokenizing mActive != null
EXISTS
Tokenizing mActive
EXISTS
Tokenizing null
EXISTS
Tokenizing int i=0
EXISTS
Tokenizing i
EXISTS
Tokenizing 0
EXISTS
Tokenizing i < mAdded.size()
EXISTS
Tokenizing i
EXISTS
Tokenizing mAdded.size()
EXISTS
Tokenizing mAdded
EXISTS
Tokenizing size
EXISTS
Tokenizing i++
EXISTS
Tokenizing i
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing f
EXISTS
Tokenizing mAdded.get(i)
EXISTS
Tokenizing mAdded
EXISTS
Tokenizing get
EXISTS
Tokenizing i
EXISTS
Tokenizing f != null && !f.mHidden && f.mHasMenu && f.mMenuVisible
{&&=3, !=1, visible=1, null=1, hidden=1, f=4, has=1, !==1, menu=2, m=3, .=3}
Tokenizing f != null && !f.mHidden && f.mHasMenu
{&&=2, !=1, null=1, hidden=1, f=3, has=1, !==1, menu=1, m=2, .=2}
Tokenizing f != null && !f.mHidden
{&&=1, !=1, null=1, hidden=1, f=2, !==1, m=1, .=1}
Tokenizing f != null
EXISTS
Tokenizing f
EXISTS
Tokenizing null
EXISTS
Tokenizing !f.mHidden
{!=1, hidden=1, f=1, m=1, .=1}
Tokenizing f.mHidden
EXISTS
Tokenizing f
EXISTS
Tokenizing mHidden
EXISTS
Tokenizing f.mHasMenu
{f=1, has=1, menu=1, m=1, .=1}
Tokenizing f
EXISTS
Tokenizing mHasMenu
EXISTS
Tokenizing f.mMenuVisible
{visible=1, f=1, menu=1, m=1, .=1}
Tokenizing f
EXISTS
Tokenizing mMenuVisible
EXISTS
Tokenizing show=true
{show=1, true=1, ==1}
Tokenizing show
EXISTS
Tokenizing true
EXISTS
Tokenizing f.onCreateOptionsMenu(menu,inflater)
{f=1, options=1, (=1, create=1, )=1, menu=2, ,=1, inflater=1, .=1, on=1}
Tokenizing f
EXISTS
Tokenizing onCreateOptionsMenu
{options=1, create=1, menu=1, on=1}
Tokenizing menu
EXISTS
Tokenizing inflater
EXISTS
Tokenizing newMenus == null
{===1, new=1, null=1, menus=1}
Tokenizing newMenus
EXISTS
Tokenizing null
EXISTS
Tokenizing newMenus=new ArrayList<Fragment>()
{new=2, fragment=1, array=1, (=1, )=1, menus=1, list=1, <=1, ==1, >=1}
Tokenizing newMenus
EXISTS
Tokenizing new ArrayList<Fragment>()
EXISTS
Tokenizing ArrayList
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing newMenus.add(f)
{add=1, new=1, f=1, (=1, )=1, menus=1, .=1}
Tokenizing newMenus
EXISTS
Tokenizing add
EXISTS
Tokenizing f
EXISTS
Tokenizing mCreatedMenus != null
EXISTS
Tokenizing mCreatedMenus
EXISTS
Tokenizing null
EXISTS
Tokenizing int i=0
EXISTS
Tokenizing i
EXISTS
Tokenizing 0
EXISTS
Tokenizing i < mCreatedMenus.size()
{size=1, created=1, (=1, i=1, )=1, menus=1, <=1, m=1, .=1}
Tokenizing i
EXISTS
Tokenizing mCreatedMenus.size()
EXISTS
Tokenizing mCreatedMenus
EXISTS
Tokenizing size
EXISTS
Tokenizing i++
EXISTS
Tokenizing i
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing f
EXISTS
Tokenizing mCreatedMenus.get(i)
EXISTS
Tokenizing mCreatedMenus
EXISTS
Tokenizing get
EXISTS
Tokenizing i
EXISTS
Tokenizing newMenus == null || !newMenus.contains(f)
{===1, ||=1, new=2, !=1, contains=1, null=1, f=1, (=1, )=1, menus=2, .=1}
Tokenizing newMenus == null
EXISTS
Tokenizing newMenus
EXISTS
Tokenizing null
EXISTS
Tokenizing !newMenus.contains(f)
{!=1, new=1, contains=1, f=1, (=1, )=1, menus=1, .=1}
Tokenizing newMenus.contains(f)
{new=1, contains=1, f=1, (=1, )=1, menus=1, .=1}
Tokenizing newMenus
EXISTS
Tokenizing contains
{contains=1}
Tokenizing f
EXISTS
Tokenizing f.onDestroyOptionsMenu()
{f=1, options=1, (=1, destroy=1, )=1, menu=1, .=1, on=1}
Tokenizing f
EXISTS
Tokenizing onDestroyOptionsMenu
{options=1, destroy=1, menu=1, on=1}
Tokenizing mCreatedMenus=newMenus
{new=1, created=1, menus=2, m=1, ==1}
Tokenizing mCreatedMenus
EXISTS
Tokenizing newMenus
EXISTS
Tokenizing show
EXISTS
Tokenizing dispatchPrepareOptionsMenu
{prepare=1, dispatch=1, options=1, menu=1}
Tokenizing Menu
EXISTS
Tokenizing menu
EXISTS
Tokenizing show
EXISTS
Tokenizing false
EXISTS
Tokenizing mActive != null
EXISTS
Tokenizing mActive
EXISTS
Tokenizing null
EXISTS
Tokenizing int i=0
EXISTS
Tokenizing i
EXISTS
Tokenizing 0
EXISTS
Tokenizing i < mAdded.size()
EXISTS
Tokenizing i
EXISTS
Tokenizing mAdded.size()
EXISTS
Tokenizing mAdded
EXISTS
Tokenizing size
EXISTS
Tokenizing i++
EXISTS
Tokenizing i
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing f
EXISTS
Tokenizing mAdded.get(i)
EXISTS
Tokenizing mAdded
EXISTS
Tokenizing get
EXISTS
Tokenizing i
EXISTS
Tokenizing f != null && !f.mHidden && f.mHasMenu && f.mMenuVisible
EXISTS
Tokenizing f != null && !f.mHidden && f.mHasMenu
EXISTS
Tokenizing f != null && !f.mHidden
EXISTS
Tokenizing f != null
EXISTS
Tokenizing f
EXISTS
Tokenizing null
EXISTS
Tokenizing !f.mHidden
EXISTS
Tokenizing f.mHidden
EXISTS
Tokenizing f
EXISTS
Tokenizing mHidden
EXISTS
Tokenizing f.mHasMenu
EXISTS
Tokenizing f
EXISTS
Tokenizing mHasMenu
EXISTS
Tokenizing f.mMenuVisible
EXISTS
Tokenizing f
EXISTS
Tokenizing mMenuVisible
EXISTS
Tokenizing show=true
EXISTS
Tokenizing show
EXISTS
Tokenizing true
EXISTS
Tokenizing f.onPrepareOptionsMenu(menu)
{prepare=1, f=1, options=1, (=1, )=1, menu=2, .=1, on=1}
Tokenizing f
EXISTS
Tokenizing onPrepareOptionsMenu
{prepare=1, options=1, menu=1, on=1}
Tokenizing menu
EXISTS
Tokenizing show
EXISTS
Tokenizing dispatchOptionsItemSelected
{item=1, dispatch=1, options=1, selected=1}
Tokenizing MenuItem
EXISTS
Tokenizing item
{item=1}
Tokenizing mActive != null
EXISTS
Tokenizing mActive
EXISTS
Tokenizing null
EXISTS
Tokenizing int i=0
EXISTS
Tokenizing i
EXISTS
Tokenizing 0
EXISTS
Tokenizing i < mAdded.size()
EXISTS
Tokenizing i
EXISTS
Tokenizing mAdded.size()
EXISTS
Tokenizing mAdded
EXISTS
Tokenizing size
EXISTS
Tokenizing i++
EXISTS
Tokenizing i
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing f
EXISTS
Tokenizing mAdded.get(i)
EXISTS
Tokenizing mAdded
EXISTS
Tokenizing get
EXISTS
Tokenizing i
EXISTS
Tokenizing f != null && !f.mHidden && f.mHasMenu && f.mMenuVisible
EXISTS
Tokenizing f != null && !f.mHidden && f.mHasMenu
EXISTS
Tokenizing f != null && !f.mHidden
EXISTS
Tokenizing f != null
EXISTS
Tokenizing f
EXISTS
Tokenizing null
EXISTS
Tokenizing !f.mHidden
EXISTS
Tokenizing f.mHidden
EXISTS
Tokenizing f
EXISTS
Tokenizing mHidden
EXISTS
Tokenizing f.mHasMenu
EXISTS
Tokenizing f
EXISTS
Tokenizing mHasMenu
EXISTS
Tokenizing f.mMenuVisible
EXISTS
Tokenizing f
EXISTS
Tokenizing mMenuVisible
EXISTS
Tokenizing f.onOptionsItemSelected(item)
{item=2, f=1, options=1, (=1, )=1, .=1, selected=1, on=1}
Tokenizing f
EXISTS
Tokenizing onOptionsItemSelected
{item=1, options=1, selected=1, on=1}
Tokenizing item
EXISTS
Tokenizing true
EXISTS
Tokenizing false
EXISTS
Tokenizing dispatchContextItemSelected
{item=1, dispatch=1, context=1, selected=1}
Tokenizing MenuItem
EXISTS
Tokenizing item
EXISTS
Tokenizing mActive != null
EXISTS
Tokenizing mActive
EXISTS
Tokenizing null
EXISTS
Tokenizing int i=0
EXISTS
Tokenizing i
EXISTS
Tokenizing 0
EXISTS
Tokenizing i < mAdded.size()
EXISTS
Tokenizing i
EXISTS
Tokenizing mAdded.size()
EXISTS
Tokenizing mAdded
EXISTS
Tokenizing size
EXISTS
Tokenizing i++
EXISTS
Tokenizing i
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing f
EXISTS
Tokenizing mAdded.get(i)
EXISTS
Tokenizing mAdded
EXISTS
Tokenizing get
EXISTS
Tokenizing i
EXISTS
Tokenizing f != null && !f.mHidden && f.mUserVisibleHint
{&&=2, !=1, visible=1, null=1, hidden=1, f=3, hint=1, !==1, m=2, user=1, .=2}
Tokenizing f != null && !f.mHidden && f.mUserVisibleHint
EXISTS
Tokenizing f != null && !f.mHidden
EXISTS
Tokenizing f != null && !f.mHidden
EXISTS
Tokenizing f != null
EXISTS
Tokenizing f != null
EXISTS
Tokenizing f
EXISTS
Tokenizing f
EXISTS
Tokenizing null
EXISTS
Tokenizing null
EXISTS
Tokenizing !f.mHidden
EXISTS
Tokenizing !f.mHidden
EXISTS
Tokenizing f.mHidden
EXISTS
Tokenizing f.mHidden
EXISTS
Tokenizing f
EXISTS
Tokenizing f
EXISTS
Tokenizing mHidden
EXISTS
Tokenizing mHidden
EXISTS
Tokenizing f.mUserVisibleHint
EXISTS
Tokenizing f.mUserVisibleHint
EXISTS
Tokenizing f
EXISTS
Tokenizing f
EXISTS
Tokenizing mUserVisibleHint
EXISTS
Tokenizing mUserVisibleHint
EXISTS
Tokenizing f.onContextItemSelected(item)
{item=2, f=1, context=1, (=1, )=1, .=1, selected=1, on=1}
Tokenizing f
EXISTS
Tokenizing onContextItemSelected
{item=1, context=1, selected=1, on=1}
Tokenizing item
EXISTS
Tokenizing true
EXISTS
Tokenizing false
EXISTS
Tokenizing dispatchOptionsMenuClosed
{dispatch=1, options=1, closed=1, menu=1}
Tokenizing Menu
EXISTS
Tokenizing menu
EXISTS
Tokenizing mActive != null
EXISTS
Tokenizing mActive
EXISTS
Tokenizing null
EXISTS
Tokenizing int i=0
EXISTS
Tokenizing i
EXISTS
Tokenizing 0
EXISTS
Tokenizing i < mAdded.size()
EXISTS
Tokenizing i
EXISTS
Tokenizing mAdded.size()
EXISTS
Tokenizing mAdded
EXISTS
Tokenizing size
EXISTS
Tokenizing i++
EXISTS
Tokenizing i
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing f
EXISTS
Tokenizing mAdded.get(i)
EXISTS
Tokenizing mAdded
EXISTS
Tokenizing get
EXISTS
Tokenizing i
EXISTS
Tokenizing f != null && !f.mHidden && f.mHasMenu && f.mMenuVisible
EXISTS
Tokenizing f != null && !f.mHidden && f.mHasMenu
EXISTS
Tokenizing f != null && !f.mHidden
EXISTS
Tokenizing f != null
EXISTS
Tokenizing f
EXISTS
Tokenizing null
EXISTS
Tokenizing !f.mHidden
EXISTS
Tokenizing f.mHidden
EXISTS
Tokenizing f
EXISTS
Tokenizing mHidden
EXISTS
Tokenizing f.mHasMenu
EXISTS
Tokenizing f
EXISTS
Tokenizing mHasMenu
EXISTS
Tokenizing f.mMenuVisible
EXISTS
Tokenizing f
EXISTS
Tokenizing mMenuVisible
EXISTS
Tokenizing f.onOptionsMenuClosed(menu)
{f=1, options=1, (=1, closed=1, )=1, menu=2, .=1, on=1}
Tokenizing f
EXISTS
Tokenizing onOptionsMenuClosed
{options=1, closed=1, menu=1, on=1}
Tokenizing menu
EXISTS
Tokenizing @Override
EXISTS
Tokenizing Override
EXISTS
Tokenizing invalidateOptionsMenu
EXISTS
Tokenizing mActivity != null && mCurState == Fragment.RESUMED
{&&=1, ===1, cur=1, fragment=1, activity=1, null=1, state=1, !==1, resumed=1, m=2, .=1}
Tokenizing mActivity != null
EXISTS
Tokenizing mActivity
EXISTS
Tokenizing null
EXISTS
Tokenizing mCurState == Fragment.RESUMED
EXISTS
Tokenizing mCurState
EXISTS
Tokenizing Fragment.RESUMED
EXISTS
Tokenizing Fragment
EXISTS
Tokenizing RESUMED
EXISTS
Tokenizing mActivity.invalidateOptionsMenu()
EXISTS
Tokenizing mActivity
EXISTS
Tokenizing invalidateOptionsMenu
EXISTS
Tokenizing mNeedMenuInvalidate=true
EXISTS
Tokenizing mNeedMenuInvalidate
EXISTS
Tokenizing true
EXISTS
Tokenizing reverseTransit
{transit=1, reverse=1}
Tokenizing transit
EXISTS
Tokenizing rev
{rev=1}
Tokenizing 0
EXISTS
Tokenizing transit
EXISTS
Tokenizing FragmentTransaction.TRANSIT_FRAGMENT_OPEN
{fragment=1, transit_fragment_open=1, transaction=1, .=1}
Tokenizing FragmentTransaction
EXISTS
Tokenizing TRANSIT_FRAGMENT_OPEN
{transit_fragment_open=1}
Tokenizing rev=FragmentTransaction.TRANSIT_FRAGMENT_CLOSE
{rev=1, fragment=1, transit_fragment_close=1, ==1, transaction=1, .=1}
Tokenizing rev
EXISTS
Tokenizing FragmentTransaction.TRANSIT_FRAGMENT_CLOSE
{fragment=1, transit_fragment_close=1, transaction=1, .=1}
Tokenizing FragmentTransaction
EXISTS
Tokenizing TRANSIT_FRAGMENT_CLOSE
{transit_fragment_close=1}
Tokenizing FragmentTransaction.TRANSIT_FRAGMENT_CLOSE
EXISTS
Tokenizing FragmentTransaction
EXISTS
Tokenizing TRANSIT_FRAGMENT_CLOSE
EXISTS
Tokenizing rev=FragmentTransaction.TRANSIT_FRAGMENT_OPEN
{rev=1, fragment=1, transit_fragment_open=1, ==1, transaction=1, .=1}
Tokenizing rev
EXISTS
Tokenizing FragmentTransaction.TRANSIT_FRAGMENT_OPEN
EXISTS
Tokenizing FragmentTransaction
EXISTS
Tokenizing TRANSIT_FRAGMENT_OPEN
EXISTS
Tokenizing FragmentTransaction.TRANSIT_FRAGMENT_FADE
{fragment=1, transit_fragment_fade=1, transaction=1, .=1}
Tokenizing FragmentTransaction
EXISTS
Tokenizing TRANSIT_FRAGMENT_FADE
{transit_fragment_fade=1}
Tokenizing rev=FragmentTransaction.TRANSIT_FRAGMENT_FADE
{rev=1, fragment=1, transit_fragment_fade=1, ==1, transaction=1, .=1}
Tokenizing rev
EXISTS
Tokenizing FragmentTransaction.TRANSIT_FRAGMENT_FADE
EXISTS
Tokenizing FragmentTransaction
EXISTS
Tokenizing TRANSIT_FRAGMENT_FADE
EXISTS
Tokenizing rev
EXISTS
Tokenizing transitToStyleIndex
EXISTS
Tokenizing transit
EXISTS
Tokenizing enter
EXISTS
Tokenizing animAttr
{anim=1, attr=1}
Tokenizing -1
EXISTS
Tokenizing 1
EXISTS
Tokenizing transit
EXISTS
Tokenizing FragmentTransaction.TRANSIT_FRAGMENT_OPEN
EXISTS
Tokenizing FragmentTransaction
EXISTS
Tokenizing TRANSIT_FRAGMENT_OPEN
EXISTS
Tokenizing animAttr=enter ? com.android.internal.R.styleable.FragmentAnimation_fragmentOpenEnterAnimation : com.android.internal.R.styleable.FragmentAnimation_fragmentOpenExitAnimation
{com=2, internal=2, animation_fragment=2, android=2, styleable=2, .=10, animation=2, exit=1, r=2, fragment=2, :=1, enter=2, anim=1, attr=1, ==1, open=2, ?=1}
Tokenizing animAttr
EXISTS
Tokenizing enter ? com.android.internal.R.styleable.FragmentAnimation_fragmentOpenEnterAnimation : com.android.internal.R.styleable.FragmentAnimation_fragmentOpenExitAnimation
{com=2, internal=2, animation_fragment=2, android=2, styleable=2, .=10, animation=2, exit=1, r=2, fragment=2, :=1, enter=2, open=2, ?=1}
Tokenizing enter
EXISTS
Tokenizing com.android.internal.R.styleable.FragmentAnimation_fragmentOpenEnterAnimation
{com=1, internal=1, r=1, fragment=1, animation_fragment=1, android=1, styleable=1, enter=1, .=5, open=1, animation=1}
Tokenizing com.android.internal.R.styleable
EXISTS
Tokenizing com.android.internal.R
EXISTS
Tokenizing com.android.internal
EXISTS
Tokenizing com.android
EXISTS
Tokenizing com
EXISTS
Tokenizing android
EXISTS
Tokenizing internal
EXISTS
Tokenizing R
EXISTS
Tokenizing styleable
EXISTS
Tokenizing FragmentAnimation_fragmentOpenEnterAnimation
{fragment=1, animation_fragment=1, enter=1, open=1, animation=1}
Tokenizing com.android.internal.R.styleable.FragmentAnimation_fragmentOpenExitAnimation
{com=1, exit=1, internal=1, r=1, fragment=1, animation_fragment=1, android=1, styleable=1, .=5, open=1, animation=1}
Tokenizing com.android.internal.R.styleable
EXISTS
Tokenizing com.android.internal.R
EXISTS
Tokenizing com.android.internal
EXISTS
Tokenizing com.android
EXISTS
Tokenizing com
EXISTS
Tokenizing android
EXISTS
Tokenizing internal
EXISTS
Tokenizing R
EXISTS
Tokenizing styleable
EXISTS
Tokenizing FragmentAnimation_fragmentOpenExitAnimation
{exit=1, fragment=1, animation_fragment=1, open=1, animation=1}
Tokenizing FragmentTransaction.TRANSIT_FRAGMENT_CLOSE
EXISTS
Tokenizing FragmentTransaction
EXISTS
Tokenizing TRANSIT_FRAGMENT_CLOSE
EXISTS
Tokenizing animAttr=enter ? com.android.internal.R.styleable.FragmentAnimation_fragmentCloseEnterAnimation : com.android.internal.R.styleable.FragmentAnimation_fragmentCloseExitAnimation
{com=2, internal=2, animation_fragment=2, android=2, styleable=2, .=10, animation=2, exit=1, r=2, fragment=2, :=1, enter=2, anim=1, attr=1, ==1, close=2, ?=1}
Tokenizing animAttr
EXISTS
Tokenizing enter ? com.android.internal.R.styleable.FragmentAnimation_fragmentCloseEnterAnimation : com.android.internal.R.styleable.FragmentAnimation_fragmentCloseExitAnimation
{com=2, internal=2, animation_fragment=2, android=2, styleable=2, .=10, animation=2, exit=1, r=2, fragment=2, :=1, enter=2, close=2, ?=1}
Tokenizing enter
EXISTS
Tokenizing com.android.internal.R.styleable.FragmentAnimation_fragmentCloseEnterAnimation
{com=1, internal=1, r=1, fragment=1, animation_fragment=1, android=1, styleable=1, enter=1, close=1, .=5, animation=1}
Tokenizing com.android.internal.R.styleable
EXISTS
Tokenizing com.android.internal.R
EXISTS
Tokenizing com.android.internal
EXISTS
Tokenizing com.android
EXISTS
Tokenizing com
EXISTS
Tokenizing android
EXISTS
Tokenizing internal
EXISTS
Tokenizing R
EXISTS
Tokenizing styleable
EXISTS
Tokenizing FragmentAnimation_fragmentCloseEnterAnimation
{fragment=1, animation_fragment=1, enter=1, close=1, animation=1}
Tokenizing com.android.internal.R.styleable.FragmentAnimation_fragmentCloseExitAnimation
{com=1, exit=1, internal=1, r=1, fragment=1, animation_fragment=1, android=1, styleable=1, close=1, .=5, animation=1}
Tokenizing com.android.internal.R.styleable
EXISTS
Tokenizing com.android.internal.R
EXISTS
Tokenizing com.android.internal
EXISTS
Tokenizing com.android
EXISTS
Tokenizing com
EXISTS
Tokenizing android
EXISTS
Tokenizing internal
EXISTS
Tokenizing R
EXISTS
Tokenizing styleable
EXISTS
Tokenizing FragmentAnimation_fragmentCloseExitAnimation
{exit=1, fragment=1, animation_fragment=1, close=1, animation=1}
Tokenizing FragmentTransaction.TRANSIT_FRAGMENT_FADE
EXISTS
Tokenizing FragmentTransaction
EXISTS
Tokenizing TRANSIT_FRAGMENT_FADE
EXISTS
Tokenizing animAttr=enter ? com.android.internal.R.styleable.FragmentAnimation_fragmentFadeEnterAnimation : com.android.internal.R.styleable.FragmentAnimation_fragmentFadeExitAnimation
{com=2, internal=2, animation_fragment=2, android=2, styleable=2, .=10, animation=2, exit=1, r=2, fragment=2, fade=2, :=1, enter=2, anim=1, attr=1, ==1, ?=1}
Tokenizing animAttr
EXISTS
Tokenizing enter ? com.android.internal.R.styleable.FragmentAnimation_fragmentFadeEnterAnimation : com.android.internal.R.styleable.FragmentAnimation_fragmentFadeExitAnimation
{com=2, internal=2, animation_fragment=2, android=2, styleable=2, .=10, animation=2, exit=1, r=2, fragment=2, fade=2, :=1, enter=2, ?=1}
Tokenizing enter
EXISTS
Tokenizing com.android.internal.R.styleable.FragmentAnimation_fragmentFadeEnterAnimation
{com=1, internal=1, r=1, fragment=1, animation_fragment=1, fade=1, android=1, styleable=1, enter=1, .=5, animation=1}
Tokenizing com.android.internal.R.styleable
EXISTS
Tokenizing com.android.internal.R
EXISTS
Tokenizing com.android.internal
EXISTS
Tokenizing com.android
EXISTS
Tokenizing com
EXISTS
Tokenizing android
EXISTS
Tokenizing internal
EXISTS
Tokenizing R
EXISTS
Tokenizing styleable
EXISTS
Tokenizing FragmentAnimation_fragmentFadeEnterAnimation
{fragment=1, animation_fragment=1, fade=1, enter=1, animation=1}
Tokenizing com.android.internal.R.styleable.FragmentAnimation_fragmentFadeExitAnimation
{com=1, exit=1, internal=1, r=1, fragment=1, animation_fragment=1, fade=1, android=1, styleable=1, .=5, animation=1}
Tokenizing com.android.internal.R.styleable
EXISTS
Tokenizing com.android.internal.R
EXISTS
Tokenizing com.android.internal
EXISTS
Tokenizing com.android
EXISTS
Tokenizing com
EXISTS
Tokenizing android
EXISTS
Tokenizing internal
EXISTS
Tokenizing R
EXISTS
Tokenizing styleable
EXISTS
Tokenizing FragmentAnimation_fragmentFadeExitAnimation
{exit=1, fragment=1, animation_fragment=1, fade=1, animation=1}
Tokenizing animAttr
EXISTS
Correct Patch Generated!
f != null && !f.mHidden && f.mUserVisibleHint
f != null && !f.mHidden
6342,5
